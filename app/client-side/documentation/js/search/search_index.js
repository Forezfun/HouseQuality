var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/injectables/AccountCookieService.html",[0,0.228,1,1.206]],["body/injectables/AccountCookieService.html",[0,0.322,1,1.7,2,1.702,3,0.124,4,0.124,5,0.109,6,6.871,7,3.64,8,0.094,9,1.528,10,6.834,11,6.834,12,6.834,13,6.834,14,6.834,15,6.834,16,6.834,17,5.641,18,5.641,19,0.692,20,4.182,21,5.301,22,1.906,23,4.182,24,1.669,25,0.014,26,0.391,27,0.12,28,1.398,29,4.182,30,0.389,31,2.063,32,4.182,33,4.182,34,1.477,35,4.182,36,6.834,37,4.182,38,0.28,39,4.182,40,3.021,41,3.155,42,4.182,43,5.641,44,7.135,45,7.351,46,7.135,47,4.182,48,0.299,49,5.641,50,3.322,51,4.182,52,0.19,53,0.109,54,3.283,55,3.283,56,3.64,57,3.016,58,0.559,59,0.536,60,0.124,61,0.124,62,0.222,63,0.621,64,0.684,65,7.351,66,0.684,67,6.834,68,6.384,69,4.579,70,4.182,71,3.336,72,4.182,73,6.384,74,6.384,75,6.384,76,6.384,77,4.182,78,4.182,79,1.26,80,0.391,81,4.182,82,4.182,83,4.182,84,4.182,85,4.182,86,4.182,87,0.009,88,0.009]],["title/injectables/AccountService.html",[0,0.228,89,1.931]],["body/injectables/AccountService.html",[0,0.28,1,2.141,2,1.391,3,0.101,4,0.101,5,0.089,8,0.077,9,1.327,19,0.601,22,1.771,24,1.803,25,0.014,26,0.435,27,0.139,28,1.511,30,0.379,34,1.495,38,0.302,40,3.513,41,1.577,48,0.351,50,2.93,52,0.205,53,0.089,58,0.456,59,0.438,60,0.22,61,0.101,62,0.351,63,0.671,64,0.671,66,0.71,79,1.727,80,0.445,87,0.008,88,0.008,89,2.366,90,1.815,91,0.22,92,0.935,93,3.929,94,4.901,95,4.901,96,0.935,97,4.901,98,4.901,99,4.901,100,1.815,101,1.144,102,4.901,103,0.895,104,3.416,105,1.112,106,1.371,107,3.076,108,3.416,109,1.353,110,3.076,111,3.416,112,3.076,113,3.416,114,2.973,115,3.076,116,3.86,117,3.416,118,3.076,119,3.503,120,3.416,121,2.604,122,1.067,123,0.832,124,0.945,125,1.927,126,0.702,127,2.262,128,2.166,129,2.144,130,2.006,131,0.601,132,1.148,133,0.624,134,0.456,135,0.286,136,2.533,137,2.899,138,2.479,139,2.02,140,3.702,141,2.742,142,1.815,143,2.742,144,1.728,145,2.078,146,1.649,147,2.604,148,1.912,149,2.02,150,2.144,151,2.233,152,1.815,153,2.144,154,2.144,155,2.144,156,2.144,157,1.815,158,2.144,159,1.815,160,2.144,161,1.448,162,1.856,163,2.366,164,2.144,165,1.472,166,1.815,167,2.144,168,1.815,169,1.51,170,0.696,171,0.803,172,3.503,173,0.557,174,1.107,175,2.144,176,2.144,177,1.067,178,1.728,179,0.803,180,1.009,181,2.144,182,1.391,183,1.03,184,1.391]],["title/components/AppComponent.html",[185,0.908,186,1.847]],["body/components/AppComponent.html",[1,1.937,3,0.152,4,0.152,5,0.133,8,0.114,22,1.245,25,0.014,26,0.431,27,0.096,38,0.19,52,0.247,53,0.133,59,0.823,60,0.152,61,0.152,87,0.011,88,0.011,89,3.103,91,0.289,106,1.408,122,1.596,123,1.245,125,1.485,132,1.717,185,1.596,186,3.407,187,3.103,188,2.584,189,2.466,190,2.584,191,4.446,192,2.358,193,4.446,194,3.109,195,3.407,196,3.801,197,2.967,198,2.967,199,2.751,200,2.751,201,2.008,202,3.252,203,3.415,204,4.034,205,3.021,206,2.707,207,2.803,208,2.082,209,2.16,210,6.428,211,2.862,212,2.16,213,6.428,214,5.52,215,5.594,216,5.109,217,2.079,218,2.259,219,5.109,220,2.714,221,3.021,222,5.109,223,4.01,224,4.446,225,2.466,226,3.207,227,2.082,228,2.751,229,3.021,230,3.597,231,1.539,232,2.714,233,5.109,234,4.01,235,5.109,236,5.109,237,3.684,238,3.207,239,3.684,240,5.109,241,5.109,242,2.584,243,2.616,244,3.252,245,2.166,246,3.734,247,2.584,248,2.358,249,3.928,250,2.584,251,2.358,252,2.616,253,2.584,254,2.259,255,1.937,256,2.259,257,2.584,258,2.166,259,2.584,260,2.466,261,2.584,262,2.358,263,2.584,264,2.166,265,2.358,266,2.584,267,2.584,268,2.616,269,2.584,270,2.358,271,2.358,272,2.584,273,2.466,274,1.922,275,2.079,276,2.584,277,2.358,278,2.584,279,2.466,280,2.466,281,2.584]],["title/injectables/AuthService.html",[0,0.228,196,2.366]],["body/injectables/AuthService.html",[0,0.329,2,1.759,3,0.128,4,0.128,5,0.112,8,0.097,9,1.562,19,0.707,22,1.808,24,1.886,25,0.014,26,0.442,27,0.14,28,1.58,30,0.377,34,1.424,38,0.287,40,3.638,41,3.331,48,0.367,50,3.062,52,0.22,53,0.112,57,4.158,58,0.577,59,0.553,60,0.206,61,0.128,62,0.367,63,0.673,64,0.618,66,0.742,80,0.424,87,0.01,88,0.01,91,0.259,92,1.059,100,2.296,101,1.265,103,1.054,109,1.382,121,3.449,122,1.35,123,1.053,124,0.979,125,1.257,126,0.647,130,2.098,131,0.761,133,0.79,134,0.577,135,0.249,136,1.911,137,2.187,146,3.343,151,2.266,152,2.296,157,3.449,159,2.296,161,2.445,165,1.356,166,2.296,168,2.296,169,1.911,174,1.4,196,3.41,282,2.896,283,5.767,284,5.767,285,5.767,286,5.767,287,5.767,288,4.526,289,4.322,290,4.526,291,4.973,292,4.322,293,4.526,294,4.322,295,4.526,296,4.322,297,5.435,298,2.896,299,3.62,300,3.62,301,3.392,302,3.392,303,3.392,304,3.392,305,3.392,306,3.392,307,4.526,308,3.392,309,3.392,310,3.392,311,3.392,312,3.392]],["title/directives/AutoHeightDirective.html",[194,1.769,245,1.696]],["body/directives/AutoHeightDirective.html",[3,0.152,4,0.152,5,0.134,8,0.115,9,1.746,19,0.864,22,1.855,24,1.341,25,0.014,26,0.314,27,0.121,28,1.124,30,0.315,31,1.977,48,0.272,52,0.191,53,0.134,60,0.152,61,0.152,62,0.373,63,0.499,64,0.55,79,1.942,80,0.314,87,0.011,88,0.011,91,0.29,105,1.463,106,1.619,122,2.013,123,1.57,192,2.368,194,2.849,206,2.088,208,2.088,245,2.732,279,2.477,280,3.112,313,6.764,314,4.465,315,2.013,316,3.253,317,7.047,318,3.569,319,6.445,320,5.058,321,7.047,322,6.445,323,5.131,324,3.853,325,6.445,326,3.853,327,5.131,328,7.392,329,6.433,330,6.133,331,6.445,332,5.131,333,2.268,334,2.477,335,5.131,336,4.027,337,5.131,338,5.131,339,5.131,340,3.034,341,5.131,342,6.445,343,4.027,344,5.131,345,4.465]],["title/injectables/CategoryService.html",[0,0.228,346,2.126]],["body/injectables/CategoryService.html",[0,0.363,2,2.049,3,0.15,4,0.15,5,0.131,8,0.113,9,1.725,19,0.781,22,1.702,24,1.316,25,0.014,26,0.45,27,0.138,28,1.103,30,0.312,38,0.292,52,0.218,53,0.131,58,0.673,59,0.645,60,0.218,61,0.15,62,0.389,80,0.308,87,0.011,88,0.011,91,0.286,92,1.14,100,2.675,101,1.341,103,1.164,109,1.244,122,1.573,123,1.227,124,1.054,126,0.715,131,0.886,133,0.92,134,0.673,135,0.327,174,1.631,346,3.384,347,2.817,348,4.608,349,6.369,350,5.035,351,2.221,352,2.675,353,3.16,354,3.16,355,3.16,356,3.564,357,3.909,358,3.16,359,3.246,360,3.564,361,3.16,362,3.384,363,1.919,364,3.16,365,3.088,366,3.384,367,3.16,368,0.887,369,3.16]],["title/injectables/ClientImageControlService.html",[0,0.228,370,2.885]],["body/injectables/ClientImageControlService.html",[0,0.419,2,2.292,3,0.167,4,0.167,5,0.207,8,0.126,9,1.849,22,1.372,24,1.472,25,0.014,26,0.345,27,0.106,28,1.233,30,0.334,48,0.362,52,0.203,53,0.147,58,0.752,59,0.721,60,0.167,61,0.203,63,0.548,66,0.731,80,0.345,87,0.011,88,0.011,109,1.294,180,1.201,227,2.473,370,5.296,371,5.94,372,2.489,373,6.826,374,6.826,375,5.631,376,6.826,377,2.728,378,5.631,379,4.9,380,5.631,381,5.631,382,5.631,383,5.631,384,5.631,385,3.534,386,5.631,387,5.631,388,3.33,389,5.631,390,5.631]],["title/pipes/CostFormatPipe.html",[391,2.885,392,2.511]],["body/pipes/CostFormatPipe.html",[3,0.176,4,0.176,5,0.154,9,1.601,22,1.44,24,1.545,25,0.014,26,0.459,27,0.111,28,1.294,30,0.344,38,0.262,48,0.313,52,0.176,53,0.154,60,0.176,61,0.176,63,0.575,80,0.362,87,0.012,88,0.012,123,1.712,192,2.728,315,1.846,368,1.044,391,5.067,392,4.411,393,5.91,394,6.116,395,5.144,396,5.515,397,4.639,398,7.027,399,5.91,400,7.027,401,7.027,402,5.91]],["title/components/CreateFurniturePageComponent.html",[185,0.908,254,1.769]],["body/components/CreateFurniturePageComponent.html",[1,1.548,3,0.069,4,0.069,5,0.06,8,0.052,9,0.989,19,0.448,21,3.262,22,1.831,24,1.343,25,0.014,26,0.425,27,0.121,28,1.125,30,0.358,31,1.569,34,1.407,38,0.253,48,0.33,52,0.209,53,0.06,60,0.069,61,0.069,62,0.408,63,0.5,64,0.833,66,0.691,79,2.001,80,0.457,87,0.006,88,0.006,91,0.164,96,1.195,105,0.829,106,1.302,109,0.948,122,1.141,123,0.889,125,0.673,126,0.576,132,0.777,134,0.309,135,0.1,170,1.437,171,1.208,173,1.131,177,1.413,179,1.208,180,0.904,185,1.027,186,1.068,187,1.763,188,1.17,189,1.117,190,1.17,192,1.068,194,1.023,195,1.068,197,2.372,199,0.905,200,0.905,201,1.605,202,2.599,206,2.452,207,2.526,208,1.183,209,1.227,211,0.941,212,1.227,217,0.941,225,1.117,226,1.452,227,1.465,228,1.769,230,2.043,231,0.697,232,1.229,242,1.17,243,1.841,244,1.847,245,0.981,246,2.599,247,1.17,248,1.068,249,3.007,250,1.17,251,3.065,252,3.036,253,1.17,254,2.271,255,2.464,256,1.023,257,1.17,258,0.981,259,1.17,260,1.117,261,1.17,262,1.068,263,1.17,264,2.178,265,1.686,266,1.17,267,1.17,268,1.486,269,1.17,270,1.068,271,1.068,272,1.17,273,1.117,274,0.87,275,0.941,276,1.17,277,1.068,278,1.17,279,1.117,280,1.117,281,1.17,315,1.141,316,2.088,318,2.48,333,2.473,368,0.715,377,2.17,403,5.942,404,5.942,405,1.452,406,2.839,407,2.447,408,1.638,409,2.447,410,1.614,411,2.447,412,3.937,413,2.76,414,4.867,415,3.937,416,3.651,417,4.471,418,4.471,419,4.471,420,4.471,421,4.032,422,4.524,423,4.471,424,3.178,425,3.651,426,4.471,427,2.313,428,2.73,429,2.289,430,3.031,431,3.148,432,2.839,433,1.841,434,1.86,435,2.313,436,1.94,437,3.178,438,3.731,439,2.313,440,4.471,441,2.313,442,2.313,443,4.487,444,2.313,445,2.313,446,1.93,447,2.313,448,2.313,449,1.223,450,2.313,451,2.313,452,2.866,453,2.313,454,3.178,455,2.313,456,3.178,457,2.313,458,2.447,459,4.471,460,2.313,461,3.178,462,2.013,463,2.104,464,2.271,465,2,466,1.626,467,1.86,468,1.86,469,2.009,470,2.313,471,2.313,472,4.867,473,2.313,474,1.815,475,2.013,476,1.668,477,1.368,478,1.55,479,1.668,480,1.815,481,1.548,482,0.777,483,1.068,484,1.702,485,0.87,486,1.023,487,2.633,488,4.471,489,1.668,490,2.013,491,1.815,492,5.614,493,2.013,494,2.013,495,1.815,496,2.013,497,1.025,498,2.013,499,1.117,500,3.178,501,3.55,502,1.068,503,3.937,504,1.875,505,3.55,506,4.471,507,2.013,508,2.013,509,2.013,510,2.013,511,2.013,512,3.178,513,2.013,514,1.55,515,1.55,516,3.178,517,3.178,518,2.013,519,3.178,520,3.178,521,2.839,522,2.013,523,2.013,524,3.178,525,3.937,526,3.178,527,3.178,528,1.614,529,1.548,530,1.548,531,1.763,532,3.178,533,4.471,534,3.178,535,2.013,536,2.159,537,3.007,538,2.013,539,2.013,540,2.447,541,3.178,542,3.178,543,3.178,544,2.013,545,2.013,546,2.013,547,2.013,548,2.013,549,2.013,550,2.013,551,2.013,552,2.013,553,3.178,554,3.937,555,1.668,556,3.031,557,2.013,558,3.13,559,1.815,560,1.815,561,1.815,562,2.013,563,4.471,564,2.013,565,3.178,566,2.013,567,2.013,568,2.013,569,3.178,570,2.013,571,2.013]],["title/components/FinderComponent.html",[185,0.908,256,1.769]],["body/components/FinderComponent.html",[3,0.09,4,0.09,5,0.079,8,0.068,9,1.213,19,0.55,22,1.877,24,1.649,25,0.014,26,0.454,27,0.135,28,1.498,30,0.367,31,1.854,38,0.301,48,0.334,52,0.203,53,0.079,60,0.09,61,0.09,62,0.428,63,0.643,64,0.572,79,1.609,80,0.43,87,0.007,88,0.007,91,0.202,96,0.871,105,1.017,106,1.382,122,1.399,123,1.301,125,0.878,126,0.788,135,0.13,170,0.913,173,0.493,185,1.212,186,1.395,187,2.163,188,1.528,189,2.578,190,1.528,192,1.395,194,1.336,195,1.395,197,2.726,199,1.182,200,1.182,204,4.147,206,2.555,207,2.638,208,1.451,209,1.505,211,1.23,212,1.505,217,1.23,226,1.896,227,1.451,228,1.182,234,2.371,242,1.528,243,2.689,244,2.266,245,1.281,246,2.988,247,1.528,248,1.395,249,3.343,250,1.528,251,1.395,252,1.823,253,1.528,254,1.336,255,1.35,256,2.611,257,1.528,258,1.281,259,1.528,260,1.459,261,1.528,262,1.395,263,1.528,264,1.281,265,1.395,266,1.528,267,1.528,268,1.823,269,1.528,270,1.395,271,1.395,272,1.528,273,1.459,274,1.685,275,1.23,276,1.528,277,1.395,278,1.528,279,1.459,280,1.459,281,1.528,315,1.399,333,3.024,351,2.2,368,0.421,392,3.351,396,3.516,408,1.933,410,1.981,413,2.737,428,3.138,436,2.837,446,0.878,449,1.012,482,1.015,504,1.609,556,3.578,572,2.371,573,2.837,574,3.899,575,3.578,576,2.701,577,4.227,578,3.899,579,3.899,580,4.147,581,4.647,582,5.065,583,4.647,584,4.647,585,4.48,586,5.14,587,5.14,588,4.48,589,4.48,590,4.48,591,5.14,592,3.138,593,5.14,594,3.021,595,2.988,596,3.305,597,4.647,598,4.48,599,3.899,600,3.021,601,3.021,602,3.021,603,5.14,604,3.899,605,3.021,606,3.899,607,3.899,608,2.567,609,3.021,610,5.14,611,3.899,612,3.021,613,3.021,614,3.899,615,3.021,616,3.021,617,3.021,618,3.021,619,3.021,620,3.578,621,3.021,622,2.178,623,2.178,624,2.371,625,2.371,626,1.053,627,2.629,628,4.647,629,2.629,630,2.629,631,2.629,632,3.899,633,2.629,634,3.899,635,2.629,636,4.647,637,2.812,638,4.647,639,2.178,640,2.629,641,2.629,642,3.899,643,2.629,644,3.899,645,2.629,646,3.899,647,2.629,648,3.899,649,3.899,650,2.629,651,2.629,652,2.629,653,2.629,654,2.629,655,3.899,656,2.629,657,2.629,658,2.629,659,2.629,660,2.629,661,4.48,662,4.48]],["title/injectables/FinderService.html",[0,0.228,204,2.511]],["body/injectables/FinderService.html",[0,0.393,2,1.99,3,0.145,4,0.145,5,0.127,8,0.11,9,1.693,19,0.6,22,1.87,24,1.802,25,0.014,26,0.46,27,0.13,28,1.509,30,0.337,31,1.754,38,0.286,48,0.385,52,0.216,53,0.127,58,0.653,59,0.626,60,0.145,61,0.186,62,0.407,63,0.67,66,0.67,71,3.697,80,0.299,87,0.01,88,0.01,91,0.281,92,1.124,100,2.598,101,1.327,103,1.259,109,1.231,122,2.153,123,1.679,124,1.04,126,0.701,131,0.861,133,0.893,134,0.653,174,1.584,204,4.326,663,4.256,664,6.892,665,6.892,666,6.252,667,6.252,668,6.252,669,3.018,670,6.252,671,4.89,672,6.892,673,6.252,674,4.89,675,6.252,676,4.89,677,6.252,678,4.907,679,5.03,680,4.89,681,1.84,682,4.89]],["title/injectables/FurnitureCardControlService.html",[0,0.228,201,1.25]],["body/injectables/FurnitureCardControlService.html",[0,0.317,2,1.314,3,0.096,4,0.096,5,0.084,8,0.072,9,1.274,19,0.396,22,1.648,24,1.695,25,0.014,26,0.414,27,0.122,28,1.42,30,0.35,34,1.501,38,0.305,48,0.37,52,0.193,53,0.084,58,0.431,59,0.414,60,0.213,61,0.14,62,0.294,63,0.721,64,0.594,66,0.694,80,0.373,87,0.008,88,0.008,91,0.212,92,0.905,96,0.905,100,1.716,101,1.114,103,1.014,105,0.733,109,1.349,122,1.009,123,0.787,124,0.92,126,0.784,130,1.614,131,0.568,133,1.184,134,0.431,135,0.338,151,2.122,162,1.524,165,1.434,170,1.379,171,0.759,173,0.527,177,1.905,179,0.759,180,0.828,182,2.259,183,1.418,201,1.734,231,2.105,351,1.126,363,1.838,368,0.849,372,1.428,421,3.693,446,1.368,449,1.44,463,2.088,464,1.428,465,2.696,466,0.939,467,1.169,468,1.169,469,1.263,481,3.095,484,1.77,485,1.215,486,1.428,497,1.32,499,1.559,502,1.491,528,2.454,529,1.369,530,1.369,531,1.559,608,2.259,626,1.126,669,2.272,681,1.215,683,3.372,684,2.949,685,2.949,686,4.705,687,2.5,688,2.022,689,3.229,690,3.229,691,3.229,692,2.534,693,3.229,694,3.229,695,3.229,696,3.229,697,3.24,698,2.5,699,1.915,700,1.995,701,1.634,702,2.454,703,2.562,704,2.68,705,2.68,706,1.314,707,3.267,708,2.272,709,1.314,710,1.716,711,1.716,712,1.716,713,2.949,714,2.5,715,1.716,716,1.716,717,1.716,718,1.716,719,2.5,720,1.716,721,1.716,722,1.716,723,1.634,724,1.716,725,2.272,726,1.716,727,1.634]],["title/injectables/FurnitureModelControlService.html",[0,0.228,202,2.024]],["body/injectables/FurnitureModelControlService.html",[0,0.338,2,1.828,3,0.133,4,0.133,5,0.183,8,0.101,9,1.602,19,0.726,22,1.78,24,1.838,25,0.014,26,0.431,27,0.132,28,1.54,30,0.358,31,1.26,34,1.501,38,0.311,48,0.35,52,0.217,53,0.117,58,0.6,59,0.575,60,0.133,61,0.133,62,0.387,63,0.744,64,0.634,66,0.709,80,0.405,87,0.01,88,0.01,91,0.266,92,1.079,100,2.387,101,1.285,103,1.081,109,1.296,122,1.403,123,1.094,124,0.998,126,0.742,130,1.72,131,0.791,133,1.081,134,0.6,151,1.72,162,1.455,165,1.056,180,0.791,183,1.354,202,2.993,232,3.986,372,1.986,377,2.307,443,5.41,449,1.503,683,3.622,688,2.133,699,2.408,725,2.169,727,2.272,728,5.916,729,5.916,730,5.916,731,4.523,732,5.916,733,5.916,734,4.492,735,5.916,736,4.433,737,3.194,738,4.492,739,5.916,740,4.873,741,4.492,742,5.916,743,4.266,744,4.492,745,4.492,746,4.492,747,4.492,748,4.492,749,4.492,750,2.656,751,4.492,752,4.492,753,4.492,754,4.492,755,4.492]],["title/interceptors/HttpErrorInterceptor.html",[756,3.482,757,2.885]],["body/interceptors/HttpErrorInterceptor.html",[0,0.384,3,0.164,4,0.164,5,0.143,8,0.123,9,1.824,19,0.826,22,1.64,24,1.76,25,0.014,26,0.412,27,0.127,28,1.475,30,0.33,48,0.357,52,0.231,53,0.143,60,0.164,61,0.164,62,0.292,63,0.707,80,0.412,87,0.011,88,0.011,131,0.969,134,0.735,180,0.969,315,1.72,433,2.96,434,2.744,483,2.542,537,2.785,669,3.956,678,6.1,757,4.855,758,5.506,759,6.33,760,4.792,761,6.733,762,5.506,763,5.506,764,6.733,765,7.578,766,7.578,767,7.578,768,5.506,769,6.733,770,5.506,771,6.733,772,6.733,773,6.733,774,5.506,775,5.506,776,5.506,777,5.506,778,5.506]],["title/components/ImageSliderComponent.html",[185,0.908,258,1.696]],["body/components/ImageSliderComponent.html",[3,0.122,4,0.122,5,0.107,8,0.159,9,1.509,22,1.879,24,1.073,25,0.014,26,0.415,27,0.133,28,0.899,30,0.332,31,1.774,38,0.153,48,0.295,52,0.188,53,0.107,60,0.188,61,0.122,62,0.295,79,1.679,87,0.009,88,0.009,91,0.251,105,1.264,106,1.22,122,1.975,123,1.54,125,1.193,126,0.709,135,0.24,185,1.435,186,1.895,187,2.689,188,2.076,189,1.982,190,2.076,192,1.895,194,1.815,195,1.895,199,1.605,200,1.605,206,2.652,207,2.742,208,1.804,209,1.872,211,1.671,212,1.872,227,2.422,242,2.076,243,2.267,244,2.818,245,1.74,246,3.431,247,2.076,248,1.895,249,3.699,250,2.076,251,1.895,252,2.267,253,2.076,254,1.815,255,1.679,256,1.815,257,2.076,258,2.875,259,2.076,260,1.982,261,2.076,262,1.895,263,2.076,264,1.74,265,1.895,266,2.076,267,2.076,268,2.267,269,2.076,270,1.895,271,1.895,272,2.076,273,1.982,274,1.544,275,1.671,276,2.076,277,1.895,278,2.076,279,1.982,280,1.982,281,2.076,315,1.74,316,2.919,318,3.053,320,4.372,324,2.076,326,2.818,334,1.982,368,1.041,377,2.205,408,2.289,410,2.463,413,2.689,458,2.75,482,1.379,484,1.544,485,2.934,504,1.679,528,2.463,529,2.361,530,2.681,576,3.199,700,2.361,779,5.623,780,2.96,781,4.372,782,4.963,783,4.372,784,4.372,785,5.322,786,5.57,787,4.963,788,6.323,789,5.57,790,4.372,791,4.963,792,4.104,793,4.104,794,3.221,795,5.57,796,4.104,797,4.104,798,2.427,799,4.104,800,3.733,801,1.544,802,4.104,803,4.104,804,4.104,805,2.96,806,2.96,807,5.57]],["title/components/MainPageComponent.html",[185,0.908,262,1.847]],["body/components/MainPageComponent.html",[3,0.102,4,0.102,5,0.089,8,0.077,9,1.328,19,0.601,22,1.888,24,1.499,25,0.014,26,0.422,27,0.118,28,1.255,30,0.348,31,2.04,38,0.182,48,0.304,52,0.216,53,0.089,60,0.102,61,0.102,62,0.351,63,0.332,79,1.477,87,0.008,88,0.008,91,0.221,105,1.113,106,1.074,122,1.956,123,1.525,125,0.994,185,1.301,186,1.578,187,2.367,188,1.729,189,1.65,190,1.729,192,1.578,194,1.511,195,1.578,199,2.449,200,1.337,206,2.597,207,2.683,208,1.588,209,1.647,211,1.391,212,1.647,215,6.005,217,1.391,220,1.816,221,2.021,227,1.107,242,1.729,243,1.995,244,2.48,245,1.449,246,3.168,247,1.729,248,1.578,249,3.491,250,1.729,251,2.891,252,3.057,253,1.729,254,1.511,255,1.477,256,1.511,257,1.729,258,1.449,259,1.729,260,1.65,261,1.729,262,2.891,263,3.595,264,2.655,265,2.263,266,1.729,267,1.729,268,2.549,269,1.729,270,1.578,271,2.263,272,1.729,273,1.65,274,1.286,275,1.391,276,1.729,277,2.891,278,3.491,279,1.65,280,1.65,281,1.729,315,1.531,318,3.023,326,3.354,333,3.05,334,1.65,405,2.146,407,3.285,408,2.076,409,3.285,410,2.167,411,3.285,413,2.806,431,3.595,458,2.291,462,2.975,477,2.021,478,2.291,479,2.465,480,3.848,482,1.149,573,3.046,575,3.841,577,3.841,592,3.327,785,5.706,787,4.915,790,3.848,791,4.499,794,2.683,798,2.899,801,1.286,808,6.796,809,6.796,810,6.9,811,5.732,812,6.9,813,5.732,814,4.903,815,5.732,816,5.732,817,2.975,818,3.418,819,4.903,820,4.903,821,3.418,822,3.418,823,3.418,824,3.418,825,3.418,826,4.903,827,3.848,828,3.418,829,3.418,830,3.418,831,3.418,832,3.418,833,3.418,834,3.418,835,2.683,836,3.418,837,3.418,838,3.418,839,3.418,840,3.418,841,3.418,842,3.418,843,3.418,844,2.683,845,2.975,846,2.975,847,2.146,848,4.903]],["title/interfaces/MyXhrUploadOptions.html",[135,0.173,849,2.681]],["body/interfaces/MyXhrUploadOptions.html",[0,0.335,1,1.984,3,0.132,4,0.132,5,0.214,8,0.1,19,0.546,25,0.014,26,0.485,27,0.144,28,1.639,34,1.331,38,0.307,52,0.235,53,0.116,58,0.594,59,0.57,60,0.196,61,0.132,62,0.41,64,0.86,66,0.705,80,0.446,87,0.01,88,0.01,91,0.264,92,0.726,96,0.726,105,1.494,106,1.287,124,0.887,125,1.293,132,1.495,134,0.594,135,0.254,148,3.289,170,1.198,173,0.726,180,1.317,184,1.81,197,2.714,201,1.836,211,1.81,227,1.441,228,2.299,231,1.34,237,3.207,238,2.792,239,3.207,252,2.393,255,1.34,275,1.81,368,0.818,385,4.133,429,2.25,430,2.981,433,1.81,434,2.128,438,2.792,446,2.176,449,1.248,497,1.848,514,2.981,515,2.981,536,2.63,540,2.981,679,3.939,688,1.721,731,2.63,740,4.572,743,3.207,801,1.673,849,4.412,850,0.671,851,2.981,852,5.717,853,5.717,854,5.252,855,5.717,856,5.498,857,3.491,858,3.491,859,3.207,860,3.491,861,3.491,862,4.412,863,4.239,864,2.792,865,5.717,866,5.168,867,4.614,868,2.363,869,3.491,870,3.491,871,3.491,872,3.491,873,3.491,874,3.491,875,5.168,876,5.168,877,5.168,878,3.684,879,5.168,880,5.168,881,3.491,882,3.207,883,3.289,884,3.491,885,3.491,886,4.614,887,3.491,888,3.491,889,3.491,890,3.491,891,3.491,892,3.491,893,3.491,894,3.491,895,3.491,896,5.498,897,3.491,898,4.614,899,3.491,900,3.491,901,3.491,902,3.491,903,4.614,904,3.491,905,3.491,906,3.207,907,3.491,908,3.491,909,4.614,910,4.239,911,3.491,912,3.491,913,3.491,914,3.491,915,3.491]],["title/components/NavigationPanelComponent.html",[185,0.908,264,1.696]],["body/components/NavigationPanelComponent.html",[3,0.13,4,0.13,5,0.114,8,0.098,9,1.573,22,1.813,24,1.142,25,0.014,26,0.426,28,0.956,30,0.319,31,1.831,48,0.308,52,0.207,53,0.114,60,0.13,61,0.13,62,0.346,63,0.425,79,2.095,87,0.01,88,0.01,91,0.261,106,1.272,122,1.814,123,1.415,125,1.27,185,1.481,186,2.016,187,2.803,188,2.209,189,2.108,190,2.209,192,2.016,194,1.93,195,2.016,199,1.708,200,1.708,206,2.668,207,2.76,208,1.881,209,1.951,211,1.777,212,1.951,217,1.777,227,1.414,242,2.209,243,2.363,244,2.938,245,1.851,246,3.518,247,2.209,248,2.016,249,3.766,250,2.209,251,2.016,252,2.363,253,2.209,254,1.93,255,1.75,256,3.074,257,2.209,258,1.851,259,2.209,260,2.108,261,2.209,262,2.016,263,2.209,264,2.948,265,3.507,266,2.209,267,2.209,268,2.363,269,2.209,270,2.016,271,2.016,272,2.209,273,2.108,274,1.643,275,1.777,276,2.209,277,2.016,278,2.209,279,2.108,280,2.108,281,2.209,315,1.814,316,3.342,318,3.357,326,3.662,334,2.108,408,2.362,410,2.567,413,2.69,458,2.926,477,4.492,482,1.467,577,4.372,785,5.842,787,5.457,790,4.557,791,5.12,794,3.427,798,3.434,845,3.8,846,3.8,847,2.741,916,6.611,917,3.8,918,5.807,919,5.807,920,5.807,921,6.524,922,6.524,923,5.807,924,4.366,925,4.366,926,4.366,927,4.366,928,4.366,929,5.807]],["title/components/NotificationComponent.html",[185,0.908,195,1.847]],["body/components/NotificationComponent.html",[1,2.117,3,0.133,4,0.133,5,0.117,8,0.1,9,1.6,19,0.725,21,4.765,22,1.827,24,1.172,25,0.014,26,0.43,27,0.124,28,0.982,30,0.323,31,2.104,34,1.079,38,0.262,48,0.237,52,0.209,53,0.117,55,4.637,60,0.133,61,0.133,62,0.313,87,0.01,88,0.01,91,0.266,106,1.294,125,1.303,132,1.506,185,1.5,186,2.069,187,2.852,188,2.267,189,2.164,190,2.267,192,2.069,194,1.981,195,3.243,199,1.753,200,1.753,206,2.675,207,2.768,208,1.914,209,1.985,211,1.824,212,1.985,225,2.164,227,1.452,242,2.267,243,2.404,244,2.989,245,1.9,246,3.554,247,2.267,248,2.069,249,3.793,250,2.267,251,2.069,252,2.404,253,2.267,254,1.981,255,1.78,256,1.981,257,2.267,258,1.9,259,2.267,260,2.164,261,2.267,262,2.069,263,2.267,264,1.9,265,2.069,266,2.267,267,2.267,268,2.404,269,2.267,270,2.069,271,2.069,272,2.267,273,2.164,274,1.686,275,1.824,276,2.267,277,2.069,278,2.267,279,2.164,280,2.164,281,2.267,315,1.845,316,3.051,318,3.392,408,2.393,410,2.612,413,2.803,433,2.404,434,2.869,482,1.506,483,2.069,575,4.428,930,3.9,931,5.908,932,5.908,933,7.301,934,6.608,935,6.114,936,7.025,937,4.482,938,4.482,939,4.482,940,4.482,941,4.482,942,4.482,943,4.482,944,4.482,945,4.482,946,5.141,947,4.482,948,4.482,949,4.482,950,4.482,951,4.482,952,4.482,953,5.908]],["title/injectables/NotificationService.html",[0,0.228,434,1.449]],["body/injectables/NotificationService.html",[0,0.339,2,1.837,3,0.134,4,0.134,5,0.117,8,0.101,9,1.607,22,1.865,24,1.551,25,0.014,26,0.363,27,0.112,28,1.3,30,0.325,31,2.108,38,0.28,48,0.351,52,0.176,53,0.117,58,0.603,59,0.578,60,0.134,61,0.134,62,0.416,63,0.685,66,0.754,87,0.01,88,0.01,91,0.267,122,2.2,123,1.716,134,0.603,180,1.167,368,1.046,385,4.162,434,2.149,637,3.725,678,5.528,679,5.267,946,6.13,954,3.927,955,6.63,956,6.63,957,7.044,958,5.934,959,5.934,960,4.512,961,5.934,962,7.934,963,4.512,964,5.934,965,4.512,966,5.934,967,4.512,968,4.512,969,5.934,970,4.512,971,4.512,972,4.512,973,5.934,974,4.512,975,4.512,976,4.512]],["title/components/PlanHousePageComponent.html",[185,0.908,270,1.847]],["body/components/PlanHousePageComponent.html",[1,1.947,3,0.076,4,0.076,5,0.067,8,0.057,9,1.07,19,0.485,22,1.904,24,1.533,25,0.014,26,0.436,27,0.129,28,1.285,30,0.358,31,1.998,34,1.352,38,0.18,48,0.287,52,0.211,53,0.067,60,0.076,61,0.076,62,0.417,63,0.528,64,0.784,66,0.581,79,1.19,80,0.443,87,0.007,88,0.007,89,2.993,91,0.178,96,1.179,106,1.189,122,1.695,123,1.322,125,0.744,126,0.695,128,1.747,132,0.86,138,1.999,141,1.432,170,0.522,171,1.135,172,2.7,173,0.885,179,1.135,180,0.849,184,2.209,185,1.095,186,1.181,187,1.907,188,1.294,189,2.832,190,1.294,192,1.181,194,1.131,195,1.181,198,2.983,199,2.425,200,1.001,205,3.821,206,2.493,207,2.571,208,1.28,209,1.327,211,1.041,212,1.327,217,1.041,220,1.359,221,1.513,223,2.008,225,1.235,227,0.829,229,1.513,242,1.294,243,1.608,244,1.999,245,1.085,246,2.745,247,1.294,248,1.181,249,3.136,250,1.294,251,1.181,252,1.608,253,1.294,254,1.131,255,1.19,256,1.131,257,1.294,258,1.085,259,1.294,260,1.235,261,1.294,262,1.181,263,1.294,264,2.301,265,1.824,266,1.294,267,1.294,268,2.787,269,1.294,270,2.505,271,3.827,272,1.294,273,1.235,274,0.963,275,1.041,276,1.294,277,1.181,278,2.441,279,1.235,280,1.235,281,1.294,315,1.234,316,2.228,318,2.62,333,2.399,368,0.953,405,1.606,407,2.647,408,2.124,409,2.647,410,1.747,411,2.647,413,2.847,424,3.438,428,2.883,431,3.269,433,1.964,434,1.965,436,2.564,446,2.101,452,3.101,458,1.715,476,1.845,477,1.513,478,1.715,482,0.86,483,1.181,489,1.845,491,2.008,495,2.008,504,1.19,536,2.854,537,2.441,573,2.564,575,3.234,576,2.441,580,3.891,592,2.883,595,2.7,596,3.037,620,2.647,622,1.845,623,1.845,637,1.606,801,0.963,827,5.071,977,6.161,978,6.832,979,4.2,980,3.48,981,4.826,982,4.826,983,4.826,984,4.826,985,4.826,986,5.427,987,5.427,988,5.427,989,3.438,990,5.427,991,5.427,992,5.427,993,3.951,994,5.427,995,3.951,996,2.559,997,4.826,998,2.559,999,2.559,1000,2.559,1001,3.951,1002,2.559,1003,3.951,1004,2.559,1005,6.199,1006,2.559,1007,2.559,1008,2.647,1009,2.559,1010,2.559,1011,2.559,1012,3.951,1013,2.559,1014,2.559,1015,3.951,1016,2.559,1017,3.951,1018,2.523,1019,2.559,1020,2.559,1021,2.559,1022,2.559,1023,2.559,1024,2.559,1025,2.559,1026,3.951,1027,2.559,1028,3.788,1029,3.788,1030,3.101,1031,2.559,1032,2.008,1033,1.715,1034,4.826,1035,2.559,1036,3.951,1037,3.438,1038,2.559,1039,5.427,1040,2.559,1041,2.227,1042,3.951,1043,2.559,1044,2.559,1045,2.559,1046,2.559,1047,2.559,1048,2.227,1049,2.227,1050,2.559,1051,3.636,1052,2.559,1053,2.559,1054,2.559,1055,5.427,1056,1.606,1057,3.029,1058,2.559,1059,2.559,1060,3.951,1061,2.559,1062,2.559,1063,3.951,1064,2.559,1065,5.865,1066,2.559,1067,4.826,1068,3.951,1069,3.951,1070,1.715,1071,2.559,1072,2.559,1073,2.559,1074,2.559,1075,2.559,1076,2.559,1077,2.559,1078,3.951,1079,2.559,1080,2.559,1081,2.48,1082,1.606,1083,1.606,1084,2.48,1085,2.227,1086,3.951]],["title/injectables/ProjectService.html",[0,0.228,198,1.847]],["body/injectables/ProjectService.html",[0,0.289,2,1.455,3,0.106,4,0.106,5,0.093,8,0.08,9,1.371,19,0.621,22,1.754,24,1.831,25,0.014,26,0.478,27,0.132,28,1.534,30,0.371,34,1.498,38,0.31,48,0.371,52,0.214,53,0.093,58,0.477,59,0.458,60,0.19,61,0.106,62,0.357,63,0.753,64,0.75,66,0.722,80,0.413,87,0.008,88,0.008,91,0.228,92,0.959,96,0.959,100,1.899,101,1.167,103,0.925,109,1.333,122,1.117,123,0.871,124,0.964,126,0.568,127,3.501,128,1.58,130,2.036,131,0.629,133,0.653,134,0.477,135,0.253,144,2.56,151,2.205,161,1.515,162,2.185,163,1.726,165,1.502,169,1.58,173,0.583,174,1.639,177,1.117,178,2.56,198,2.336,218,1.58,363,1.077,377,2.352,449,1.48,497,1.003,699,2.06,800,2.395,801,1.345,1008,4.519,1018,2.06,1070,2.395,1087,2.395,1088,5.061,1089,5.061,1090,5.061,1091,5.061,1092,5.061,1093,4.029,1094,5.061,1095,3.649,1096,5.303,1097,3.574,1098,3.649,1099,3.574,1100,3.649,1101,4.233,1102,3.574,1103,3.649,1104,3.649,1105,3.574,1106,3.649,1107,3.574,1108,3.649,1109,1.765,1110,2.443,1111,2.832,1112,3.649,1113,1.808,1114,2.395,1115,2.395,1116,1.899,1117,1.899,1118,2.577,1119,2.577,1120,4.236,1121,2.577,1122,2.577,1123,2.577,1124,2.577,1125,2.577]],["title/injectables/ReportService.html",[0,0.228,1093,2.239]],["body/injectables/ReportService.html",[0,0.257,2,1.24,3,0.09,4,0.09,5,0.079,8,0.068,9,1.221,19,0.658,22,1.67,24,1.732,25,0.014,26,0.431,27,0.132,28,1.451,30,0.345,31,1.976,38,0.305,48,0.363,52,0.176,53,0.079,58,0.407,59,0.39,60,0.159,61,0.134,62,0.42,63,0.722,64,0.71,66,0.795,80,0.276,87,0.007,88,0.007,126,0.743,135,0.131,142,1.618,145,1.291,214,3.537,218,1.346,228,1.191,231,0.918,243,3.199,255,1.358,343,4.211,351,1.062,368,0.826,377,2.507,397,3.537,464,1.346,466,1.311,467,2.604,468,1.632,504,2.307,555,2.196,608,3.116,626,1.572,639,3.869,688,0.796,702,1.993,844,3.537,883,3.318,1018,2.697,1093,4.024,1101,4.513,1109,1.871,1111,4.246,1126,2.39,1127,4.507,1128,4.507,1129,4.507,1130,4.507,1131,4.507,1132,4.507,1133,3.046,1134,3.923,1135,3.046,1136,3.923,1137,3.046,1138,3.923,1139,3.046,1140,3.923,1141,5.508,1142,3.046,1143,5.508,1144,3.923,1145,5.161,1146,3.046,1147,3.923,1148,5.767,1149,3.046,1150,2.196,1151,5.767,1152,2.651,1153,2.651,1154,2.651,1155,2.651,1156,3.923,1157,2.651,1158,2.651,1159,2.651,1160,2.651,1161,3.923,1162,6.932,1163,3.923,1164,6.258,1165,5.161,1166,3.923,1167,2.651,1168,3.923,1169,6.258,1170,2.651,1171,2.651,1172,3.923,1173,6.663,1174,5.968,1175,4.669,1176,4.968,1177,3.923,1178,3.923,1179,5.968,1180,2.651,1181,2.651,1182,4.968,1183,5.526,1184,5.161,1185,4.669,1186,5.508,1187,5.767,1188,5.767,1189,5.968,1190,2.651,1191,6.128,1192,5.201,1193,2.651,1194,2.651,1195,2.651,1196,5.161,1197,2.651,1198,4.669,1199,2.651,1200,5.161,1201,5.161,1202,5.526,1203,4.669,1204,5.161,1205,2.651,1206,4.669,1207,2.651,1208,2.651,1209,3.923,1210,5.767,1211,3.923,1212,3.722,1213,2.651,1214,5.161,1215,3.923,1216,3.923,1217,3.923,1218,2.651,1219,3.923,1220,3.923,1221,3.923,1222,2.651,1223,2.651,1224,3.542,1225,4.669,1226,3.923,1227,3.537,1228,2.39,1229,2.651,1230,3.923,1231,2.651,1232,2.651,1233,2.651,1234,3.923,1235,3.923,1236,2.651,1237,2.651,1238,2.651,1239,3.923,1240,2.651,1241,2.651,1242,2.651,1243,2.651,1244,4.211,1245,2.651,1246,3.923,1247,3.923,1248,3.923,1249,2.651,1250,2.651,1251,2.651,1252,2.651,1253,2.651,1254,2.651,1255,2.651,1256,1.912,1257,2.651,1258,2.651,1259,2.651,1260,2.651,1261,2.651,1262,2.651,1263,2.39,1264,3.923,1265,2.651,1266,2.651,1267,2.651,1268,2.651,1269,1.912,1270,2.651,1271,2.651,1272,2.651,1273,2.651,1274,2.651,1275,2.651,1276,2.651,1277,2.651,1278,2.651,1279,3.923,1280,2.651,1281,2.651,1282,2.651,1283,2.651,1284,2.651,1285,2.651,1286,2.651,1287,2.651,1288,2.651,1289,2.651,1290,2.651,1291,2.651,1292,2.651,1293,2.651]],["title/injectables/ServerImageControlService.html",[0,0.228,197,1.847]],["body/injectables/ServerImageControlService.html",[0,0.286,2,1.436,3,0.105,4,0.105,5,0.13,8,0.079,9,1.358,19,0.433,22,1.817,24,1.916,25,0.014,26,0.449,27,0.138,28,1.605,30,0.384,34,1.505,38,0.315,48,0.38,52,0.199,53,0.092,58,0.471,59,0.452,60,0.105,61,0.105,62,0.309,63,0.772,64,0.768,66,0.768,80,0.439,87,0.008,88,0.008,91,0.226,92,0.952,100,1.874,101,1.16,103,0.916,109,1.369,122,1.102,123,0.859,124,0.88,126,0.848,130,1.951,131,0.621,133,0.644,134,0.471,151,2.199,161,1.496,162,1.89,163,2.421,165,1.578,174,1.143,197,2.315,227,2.45,275,1.436,372,1.56,377,2.215,449,1.519,484,2.524,485,1.327,486,1.56,528,2.808,608,3.248,681,1.327,688,2.111,701,1.785,723,1.785,725,3.067,854,5.027,989,4.364,1294,6.582,1295,5.014,1296,5.014,1297,5.014,1298,5.014,1299,5.014,1300,5.014,1301,5.014,1302,5.014,1303,3.528,1304,5.014,1305,3.528,1306,5.014,1307,3.528,1308,5.014,1309,3.528,1310,5.014,1311,3.528,1312,5.014,1313,3.528,1314,5.014,1315,3.528,1316,5.833,1317,5.014,1318,3.528,1319,3.528,1320,3.528,1321,3.528,1322,3.528,1323,5.833,1324,3.528,1325,3.528,1326,3.528,1327,3.528,1328,3.528]],["title/injectables/ShopService.html",[0,0.228,203,2.126]],["body/injectables/ShopService.html",[0,0.294,2,1.49,3,0.109,4,0.109,5,0.095,8,0.082,9,1.394,19,0.449,22,1.657,24,1.556,25,0.014,26,0.395,27,0.133,28,1.304,30,0.316,38,0.284,48,0.315,52,0.202,53,0.095,58,0.489,59,0.469,60,0.192,61,0.109,62,0.398,63,0.628,64,0.756,66,0.729,80,0.315,87,0.009,88,0.009,91,0.231,92,0.971,96,0.971,100,1.945,101,1.18,103,0.94,114,3.185,122,1.608,123,1.45,124,1.027,126,0.792,131,0.644,133,0.669,134,0.489,135,0.294,145,2.182,165,0.861,170,1.316,171,0.861,173,0.971,179,0.861,180,1.197,183,1.551,203,2.734,218,1.618,255,1.103,274,1.936,359,1.618,365,1.618,368,1.03,388,2.164,449,0.694,463,2.239,466,1.064,497,1.444,504,1.794,626,1.276,681,1.377,688,0.957,692,2.873,706,1.49,709,1.49,737,3.573,750,2.164,1109,1.795,1224,2.048,1329,2.164,1330,5.146,1331,5.146,1332,5.146,1333,3.23,1334,3.807,1335,3.66,1336,4.55,1337,3.33,1338,3.23,1339,4.053,1340,4.209,1341,3.66,1342,4.053,1343,3.23,1344,3.23,1345,3.66,1346,2.88,1347,2.88,1348,2.297,1349,3.23,1350,3.23,1351,3.23,1352,2.297,1353,3.736,1354,2.297,1355,2.297,1356,2.297,1357,2.297,1358,2.297,1359,2.297,1360,2.297,1361,2.297,1362,2.297,1363,3.23,1364,2.297,1365,2.297,1366,2.297,1367,2.297,1368,2.297,1369,3.23,1370,2.297,1371,2.297,1372,2.297,1373,2.297,1374,2.297,1375,3.23,1376,4.053,1377,2.297,1378,3.23,1379,4.271,1380,2.297,1381,3.736,1382,2.297,1383,2.297]],["title/interfaces/UploadEntry.html",[135,0.173,864,2.511]],["body/interfaces/UploadEntry.html",[0,0.336,1,1.988,3,0.133,4,0.133,5,0.214,8,0.1,19,0.548,25,0.014,26,0.495,27,0.144,34,1.333,38,0.307,52,0.235,53,0.116,58,0.597,59,0.572,60,0.196,61,0.133,62,0.411,64,0.861,66,0.707,80,0.447,87,0.01,88,0.01,91,0.265,92,0.729,96,0.729,105,1.014,106,1.291,124,0.89,125,1.299,132,1.501,134,0.597,135,0.254,170,1.202,173,0.729,180,1.319,184,1.819,197,2.722,201,1.842,211,1.819,227,1.447,228,2.306,231,1.346,237,3.222,238,2.805,239,3.222,252,2.4,255,1.346,275,1.819,368,0.977,385,4.142,429,2.26,430,2.994,433,1.819,434,2.135,438,2.805,446,2.178,449,1.42,497,1.852,514,2.994,515,2.994,536,2.642,540,2.994,679,3.951,688,1.725,731,2.642,740,4.578,743,3.222,801,1.681,849,3.951,850,0.674,851,2.994,852,4.627,853,4.627,854,4.251,855,4.627,856,5.507,857,3.507,858,3.507,859,3.222,860,3.507,861,3.507,862,4.888,863,4.251,864,3.701,865,6.086,866,5.88,867,4.627,868,2.374,869,3.507,870,3.507,871,3.507,872,3.507,873,3.507,874,3.507,875,5.179,876,5.179,877,5.179,878,3.692,879,5.179,880,5.179,881,3.507,882,3.222,883,3.299,884,3.507,885,3.507,886,4.627,887,3.507,888,3.507,889,3.507,890,3.507,891,3.507,892,3.507,893,3.507,894,3.507,895,3.507,896,5.507,897,3.507,898,4.627,899,3.507,900,3.507,901,3.507,902,3.507,903,4.627,904,3.507,905,3.507,906,3.222,907,3.507,908,3.507,909,4.627,910,4.251,911,3.507,912,3.507,913,3.507,914,3.507,915,3.507]],["title/components/UploadOverlayComponent.html",[185,0.908,211,1.628]],["body/components/UploadOverlayComponent.html",[3,0.117,4,0.117,5,0.161,8,0.088,9,1.469,19,0.484,22,1.933,24,1.935,25,0.014,26,0.474,27,0.144,28,1.621,30,0.362,31,1.963,38,0.299,52,0.198,53,0.103,60,0.117,61,0.117,64,0.423,66,0.581,79,1.635,80,0.409,87,0.009,88,0.009,91,0.244,105,1.231,106,1.357,122,2.084,123,1.626,125,1.148,185,1.407,186,1.823,187,2.619,188,1.998,189,1.907,190,1.998,192,1.823,194,1.746,195,1.823,199,1.545,200,1.545,206,2.641,207,2.73,208,1.757,209,1.823,211,2.716,212,1.823,227,1.279,238,5.011,242,1.998,243,2.208,244,2.745,245,1.674,246,3.376,247,1.998,248,1.823,249,3.656,250,1.998,251,1.823,252,2.208,253,1.998,254,1.746,255,1.635,256,1.746,257,1.998,258,1.674,259,1.998,260,1.907,261,1.998,262,1.823,263,1.998,264,1.674,265,1.823,266,1.998,267,1.998,268,2.208,269,1.998,270,1.823,271,1.823,272,1.998,273,1.907,274,1.486,275,3.013,276,1.998,277,1.823,278,1.998,279,1.907,280,1.907,281,1.998,315,1.695,316,2.861,318,3.222,368,0.929,410,2.399,413,2.878,449,1.326,482,1.327,576,3.135,580,4.536,622,2.848,623,2.848,731,4.523,864,3.89,868,4.006,883,2.21,910,2.848,979,3.437,1113,2.745,1263,5.672,1384,6.948,1385,3.437,1386,5.425,1387,5.425,1388,5.425,1389,6.198,1390,6.198,1391,6.198,1392,5.425,1393,4.722,1394,5.425,1395,5.425,1396,5.425,1397,5.425,1398,3.949,1399,3.949,1400,5.425,1401,3.949,1402,5.425,1403,5.425,1404,3.949,1405,5.425,1406,3.949,1407,3.949,1408,5.425,1409,3.949,1410,5.425,1411,3.949,1412,5.425,1413,3.949,1414,3.949,1415,5.425,1416,5.425,1417,3.949,1418,3.949,1419,5.425,1420,3.949,1421,3.949,1422,3.949,1423,3.949,1424,3.949,1425,3.949,1426,3.949,1427,3.949,1428,3.949,1429,3.949,1430,5.425,1431,3.949,1432,3.949,1433,5.425,1434,3.949,1435,5.425,1436,5.425,1437,3.949,1438,5.425,1439,5.425]],["title/injectables/UploadService.html",[0,0.228,731,2.366]],["body/injectables/UploadService.html",[0,0.315,1,2.244,2,1.644,3,0.12,4,0.12,5,0.214,8,0.09,9,1.493,19,0.676,22,1.873,24,1.902,25,0.014,26,0.499,27,0.146,28,1.594,30,0.345,31,1.76,34,1.36,38,0.311,52,0.231,53,0.105,58,0.54,59,0.517,60,0.186,61,0.12,62,0.428,64,0.847,66,0.722,80,0.432,87,0.009,88,0.009,91,0.248,92,1.023,96,1.023,105,0.917,106,1.207,122,1.722,123,1.343,124,0.946,125,1.175,132,1.358,134,0.54,135,0.238,170,1.279,173,0.659,180,1.281,184,1.644,197,3.11,201,2.105,211,1.644,227,1.309,228,2.156,231,1.218,237,2.913,238,2.536,239,2.913,252,2.243,255,1.218,275,1.644,368,0.938,385,3.937,429,2.788,430,4.203,433,2.553,434,2.439,438,2.536,446,2.116,449,1.277,497,1.76,514,2.707,515,2.707,536,2.389,540,2.707,679,4.203,688,1.843,731,3.259,740,4.825,743,3.974,801,1.52,849,3.693,851,2.707,852,4.325,853,4.325,854,3.974,855,4.325,856,5.845,857,3.171,858,3.171,859,2.913,860,3.171,861,3.171,862,4.725,863,3.974,864,2.536,865,5.845,866,5.534,867,4.325,868,3.332,869,4.922,870,3.171,871,3.171,872,3.171,873,3.171,874,3.171,875,4.922,876,4.922,877,4.922,878,3.509,879,4.922,880,4.922,881,3.171,882,2.913,883,3.084,884,3.171,885,4.325,886,4.325,887,3.171,888,3.171,889,3.171,890,3.171,891,3.171,892,3.171,893,4.325,894,3.171,895,3.171,896,5.287,897,3.171,898,4.325,899,3.171,900,4.325,901,3.171,902,3.171,903,4.325,904,3.171,905,3.171,906,2.913,907,4.325,908,3.171,909,4.325,910,3.974,911,4.922,912,3.171,913,4.325,914,3.171,915,3.171,1393,4.796,1440,5.511,1441,5.511,1442,5.511,1443,5.511,1444,4.04,1445,5.511,1446,4.04,1447,4.04,1448,4.04,1449,4.04,1450,4.04,1451,4.04,1452,4.04,1453,4.04]],["title/components/ViewFurnitureComponent.html",[185,0.908,277,1.847]],["body/components/ViewFurnitureComponent.html",[3,0.118,4,0.118,5,0.103,8,0.122,9,1.474,19,0.668,22,1.839,24,1.748,25,0.014,26,0.454,27,0.139,28,1.464,30,0.327,31,1.527,38,0.285,48,0.21,52,0.227,53,0.103,54,3.114,60,0.118,61,0.118,62,0.371,64,0.75,80,0.38,87,0.009,88,0.009,91,0.245,96,1.014,106,1.192,122,1.239,123,0.967,125,1.154,171,0.933,173,0.647,177,1.941,179,0.933,180,0.698,185,1.41,186,1.832,187,2.628,188,2.007,189,1.916,190,2.007,192,1.832,194,1.754,195,1.832,199,1.552,200,1.552,201,2.089,206,2.642,207,2.732,208,1.763,209,1.829,211,1.615,212,1.829,217,1.615,227,1.763,228,1.552,230,2.22,231,1.196,242,2.007,243,2.215,244,2.754,245,1.682,246,3.382,247,2.007,248,1.832,249,3.661,250,2.007,251,1.832,252,2.215,253,2.007,254,1.754,255,2.015,256,1.754,257,2.007,258,2.834,259,2.007,260,1.916,261,2.007,262,1.832,263,2.007,264,1.682,265,1.832,266,2.007,267,2.007,268,2.215,269,2.007,270,1.832,271,1.832,272,2.007,273,1.916,274,1.493,275,1.615,276,2.007,277,3.086,278,3.749,279,1.916,280,1.916,281,2.007,315,1.7,320,4.272,324,3.143,333,3.199,368,0.758,392,3.9,396,4.272,408,2.25,410,2.406,413,2.75,429,3.143,431,3.749,433,2.529,434,2.421,446,1.154,449,0.752,466,1.806,481,2.634,482,1.333,483,1.832,485,1.493,486,1.754,497,1.113,501,3.114,502,1.832,504,1.872,537,2.007,558,2.22,559,3.114,560,3.114,561,3.114,576,3.143,620,2.659,624,3.114,625,3.114,637,3.416,688,1.624,703,3.086,817,3.453,835,6.01,980,4.48,1033,2.659,1057,2.49,1454,6.664,1455,3.453,1456,4.163,1457,5.443,1458,5.443,1459,6.213,1460,5.443,1461,6.686,1462,5.443,1463,5.443,1464,7.411,1465,3.968,1466,3.968,1467,3.968,1468,5.443,1469,3.968,1470,3.968,1471,3.968,1472,5.443,1473,6.213,1474,3.968,1475,5.443,1476,5.443,1477,3.968,1478,3.968,1479,2.659,1480,3.453,1481,3.968,1482,3.968,1483,3.968,1484,3.968,1485,5.819,1486,3.968,1487,3.968,1488,7.006,1489,3.968,1490,3.968,1491,3.968,1492,3.968,1493,6.213,1494,3.968,1495,6.213,1496,5.443,1497,3.968,1498,3.968,1499,3.968,1500,5.443,1501,5.443,1502,3.968,1503,3.968,1504,3.968,1505,3.968,1506,5.443,1507,3.968,1508,3.968,1509,5.443,1510,5.443,1511,5.443]],["title/interfaces/accountFullData.html",[135,0.173,138,2.024]],["body/interfaces/accountFullData.html",[0,0.298,1,1.814,3,0.111,4,0.111,5,0.097,8,0.084,19,0.459,25,0.014,26,0.229,27,0.142,28,1.144,30,0.357,34,1.469,38,0.306,40,3.594,41,1.726,48,0.198,50,3.032,52,0.211,53,0.097,58,0.499,59,0.479,60,0.224,61,0.111,62,0.319,63,0.691,64,0.698,66,0.734,79,1.574,80,0.456,87,0.009,88,0.009,89,1.805,90,1.986,91,0.235,92,0.61,93,2.346,96,0.61,101,0.954,103,0.683,105,0.848,106,1.319,107,2.346,109,1.281,110,2.346,112,2.346,115,2.346,116,3.369,118,2.346,119,2.923,121,1.986,124,0.908,125,1.895,126,0.731,127,3.009,128,2.309,129,2.346,130,2.066,131,0.658,132,1.256,133,0.683,134,0.499,135,0.296,136,2.661,137,3.594,138,3.046,139,3.854,140,4.312,141,3.837,142,3.463,143,3.647,144,1.891,145,2.214,146,1.805,147,2.775,148,2.092,149,2.211,150,2.346,151,2.27,152,1.986,153,2.346,154,2.346,155,2.346,156,2.346,157,1.986,158,2.346,159,1.986,160,2.346,161,1.585,162,1.95,163,2.522,164,2.346,165,1.533,166,1.986,167,2.346,168,1.986,169,1.653,170,0.762,171,0.879,172,3.647,173,0.61,174,1.211,175,2.346,176,2.346,177,1.168,178,1.891,179,0.879,180,1.06,181,2.346,182,1.522,183,1.127,184,1.522,850,0.564]],["title/interfaces/additionalData.html",[135,0.173,465,1.769]],["body/interfaces/additionalData.html",[0,0.338,3,0.108,4,0.108,5,0.094,8,0.081,22,0.885,25,0.014,26,0.222,27,0.068,28,1.121,30,0.315,34,1.47,38,0.301,48,0.271,52,0.201,53,0.094,58,0.485,59,0.465,60,0.219,61,0.152,62,0.192,63,0.74,64,0.635,66,0.727,80,0.394,87,0.008,88,0.008,91,0.23,92,0.592,96,0.592,101,0.935,103,0.935,105,0.824,109,1.304,124,0.894,126,0.79,130,1.723,131,0.639,133,1.239,134,0.485,135,0.344,151,2.183,162,1.658,165,1.513,170,1.435,171,0.854,173,0.592,177,1.851,179,0.854,180,0.901,182,1.478,183,1.542,201,1.599,231,1.542,351,2.244,363,1.939,368,0.896,372,1.605,446,1.723,449,1.334,463,2.229,464,1.605,465,2.999,466,1.056,467,1.315,468,1.315,469,1.42,481,2.876,484,1.925,485,1.366,486,1.605,497,1.436,499,1.753,502,1.676,528,2.62,529,1.539,530,1.539,531,1.753,608,2.412,626,1.266,669,1.753,681,1.366,683,2.471,684,1.929,685,1.929,687,1.929,688,1.963,697,3.149,698,1.929,699,1.478,700,2.17,701,1.837,702,2.62,703,2.736,704,2.861,705,2.861,706,2.083,707,3.398,708,2.471,709,1.478,710,1.929,711,1.929,712,1.929,713,3.149,714,2.719,715,1.929,716,1.929,717,1.929,718,1.929,719,2.719,720,1.929,721,1.929,722,1.929,723,1.837,724,1.929,725,2.471,726,1.929,727,1.837,850,0.548,1512,3.16,1513,3.631]],["title/interfaces/baseFilter.html",[135,0.173,357,2.239]],["body/interfaces/baseFilter.html",[0,0.368,3,0.153,4,0.153,5,0.134,8,0.115,19,0.63,25,0.014,26,0.476,27,0.143,30,0.252,38,0.304,48,0.272,52,0.22,53,0.134,58,0.687,59,0.658,60,0.22,61,0.153,62,0.342,80,0.315,87,0.011,88,0.011,91,0.29,92,0.838,101,1.179,103,0.939,109,1.094,124,0.974,126,0.577,131,0.905,133,0.939,134,0.687,135,0.329,174,1.665,346,2.731,347,2.876,348,3.226,351,1.792,352,2.731,353,3.226,354,3.226,355,3.226,356,3.61,357,4.139,358,4.642,359,3.27,360,3.61,361,3.226,362,3.428,363,1.944,364,3.226,365,3.118,366,3.428,367,3.226,368,0.898,369,3.226,850,0.776]],["title/interfaces/categoryData.html",[135,0.173,352,2.126]],["body/interfaces/categoryData.html",[0,0.364,3,0.15,4,0.15,5,0.131,8,0.113,19,0.618,25,0.014,26,0.474,27,0.148,30,0.247,38,0.306,48,0.267,52,0.218,53,0.131,58,0.673,59,0.645,60,0.218,61,0.15,62,0.338,80,0.309,87,0.011,88,0.011,91,0.287,92,0.822,101,1.164,103,0.921,109,1.08,124,0.962,126,0.565,131,0.887,133,0.921,134,0.673,135,0.327,174,1.632,346,2.678,347,2.82,348,3.163,351,1.757,352,3.386,353,4.609,354,4.609,355,4.609,356,4.109,357,3.911,358,3.163,359,3.247,360,3.566,361,3.163,362,3.386,363,1.92,364,3.163,365,3.09,366,3.386,367,3.163,368,0.887,369,3.163,850,0.76]],["title/interfaces/changeAccountDataEmail.html",[135,0.173,136,1.769]],["body/interfaces/changeAccountDataEmail.html",[0,0.303,1,1.836,3,0.114,4,0.114,5,0.099,8,0.086,19,0.469,25,0.014,26,0.234,27,0.13,30,0.359,34,1.493,38,0.304,40,3.579,41,1.765,48,0.202,50,3.307,52,0.212,53,0.099,58,0.511,59,0.49,60,0.226,61,0.114,62,0.323,63,0.696,64,0.705,66,0.74,79,1.599,80,0.458,87,0.009,88,0.009,89,1.845,90,2.031,91,0.239,92,0.624,93,2.399,96,0.624,101,0.969,103,0.698,105,0.867,106,1.334,107,2.399,109,1.287,110,2.399,112,2.399,115,2.399,116,3.409,118,2.399,119,2.968,121,2.031,124,0.919,125,1.913,126,0.683,127,2.449,128,2.345,129,2.399,130,2.08,131,0.673,132,1.284,133,0.698,134,0.511,135,0.298,136,2.909,137,3.619,138,2.684,139,2.26,140,3.891,141,2.968,142,2.031,143,2.968,144,1.934,145,2.249,146,1.845,147,2.818,148,2.139,149,2.26,150,2.399,151,2.279,152,2.031,153,2.399,154,2.399,155,2.399,156,2.399,157,2.031,158,2.399,159,2.031,160,2.399,161,1.62,162,1.973,163,2.561,164,2.399,165,1.547,166,2.031,167,2.399,168,2.031,169,1.69,170,0.779,171,0.899,172,3.682,173,0.624,174,1.238,175,2.399,176,2.399,177,1.194,178,1.934,179,0.899,180,1.072,181,2.399,182,1.556,183,1.152,184,1.556,850,0.577]],["title/interfaces/changeSecondaryData.html",[119,2.239,135,0.173]],["body/interfaces/changeSecondaryData.html",[0,0.304,1,1.84,3,0.114,4,0.114,5,0.1,8,0.086,19,0.471,25,0.014,26,0.235,27,0.13,30,0.359,34,1.493,38,0.304,40,3.551,41,1.771,48,0.203,50,3.06,52,0.213,53,0.1,58,0.513,59,0.491,60,0.226,61,0.114,62,0.323,63,0.697,64,0.706,66,0.741,79,1.603,80,0.458,87,0.009,88,0.009,89,1.853,90,2.039,91,0.239,92,0.626,93,2.408,96,0.626,101,0.972,103,0.701,105,0.871,106,1.337,107,2.408,109,1.288,110,2.408,112,2.408,115,2.408,116,3.416,118,2.408,119,3.416,121,2.039,124,0.921,125,1.917,126,0.685,127,2.455,128,2.351,129,2.408,130,2.083,131,0.675,132,1.289,133,0.701,134,0.513,135,0.299,136,2.699,137,3.088,138,2.691,139,2.269,140,4.343,141,2.976,142,2.039,143,2.976,144,1.941,145,2.255,146,1.853,147,2.826,148,2.147,149,2.269,150,2.408,151,2.28,152,2.039,153,2.408,154,2.408,155,2.408,156,2.408,157,2.039,158,2.408,159,2.039,160,2.408,161,1.627,162,1.977,163,2.568,164,2.408,165,1.55,166,2.039,167,2.408,168,2.039,169,1.696,170,0.782,171,0.902,172,3.688,173,0.626,174,1.243,175,2.408,176,2.408,177,1.199,178,1.941,179,0.902,180,1.074,181,2.408,182,1.562,183,1.156,184,1.562,850,0.579]],["title/interfaces/clientFilters.html",[135,0.173,1337,2.239]],["body/interfaces/clientFilters.html",[0,0.315,3,0.12,4,0.12,5,0.105,8,0.091,25,0.014,26,0.248,27,0.133,30,0.27,38,0.289,48,0.214,52,0.21,53,0.105,58,0.54,59,0.518,60,0.2,61,0.12,62,0.332,63,0.656,64,0.78,66,0.756,80,0.338,87,0.009,88,0.009,91,0.248,92,0.66,96,0.66,101,1.008,103,0.739,123,0.986,124,1.017,126,0.704,131,0.712,133,0.739,134,0.54,135,0.304,145,2.339,165,0.951,170,1.124,171,0.951,173,1.024,179,0.951,180,1.241,183,1.662,203,2.15,218,1.789,255,1.219,274,1.522,359,1.789,365,1.789,368,1.083,388,2.392,449,0.767,463,2.739,466,1.176,497,1.548,504,1.891,626,1.411,681,1.522,688,1.058,706,1.647,709,1.647,737,3.254,750,2.392,850,0.611,1109,1.924,1224,2.264,1329,2.392,1333,2.539,1334,3.512,1336,4.231,1337,3.512,1338,2.539,1339,3.462,1340,3.947,1342,3.462,1343,2.539,1344,2.539,1346,3.087,1347,3.087,1348,2.539,1349,4.428,1350,4.428,1351,3.462,1352,2.539,1353,3.939,1354,2.539,1355,2.539,1356,2.539,1357,2.539,1358,2.539,1359,2.539,1360,2.539,1361,2.539,1362,2.539,1363,3.462,1364,2.539,1365,2.539,1366,2.539,1367,2.539,1368,2.539,1369,3.462,1370,2.539,1371,2.539,1372,2.539,1373,2.539,1374,2.539,1375,3.462,1376,4.231,1377,2.539,1378,3.462,1379,4.428,1380,2.539,1381,3.939,1382,2.539,1383,2.539]],["title/interfaces/clientProportions.html",[135,0.173,487,2.885]],["body/interfaces/clientProportions.html",[1,1.373,3,0.092,4,0.092,5,0.08,8,0.069,19,0.379,21,2.229,25,0.014,26,0.331,27,0.102,30,0.265,31,0.868,34,1.439,38,0.222,48,0.287,52,0.224,53,0.08,60,0.092,61,0.092,62,0.399,63,0.581,64,0.863,66,0.64,79,2.131,80,0.48,87,0.008,88,0.008,91,0.205,96,1.039,105,0.702,106,1.308,109,0.917,126,0.511,132,1.039,134,0.413,135,0.133,170,1.577,171,1.404,173,1.214,177,0.966,179,1.404,180,1.051,185,1.034,197,2.104,201,1.424,202,2.305,206,1.001,207,1.039,208,1.001,209,1.039,212,1.039,217,1.258,225,1.493,226,1.941,227,1.476,228,2.117,230,2.55,231,0.932,232,1.643,243,1.258,251,2.757,252,2.938,254,1.367,255,1.919,264,1.932,265,1.427,315,0.966,316,2.104,318,1.493,333,2.393,368,1.005,377,2.221,403,2.426,404,2.426,405,1.941,406,2.86,407,2.072,408,1.65,409,2.072,410,1.367,411,2.072,412,2.691,413,2.517,414,2.691,415,2.691,417,2.691,418,2.691,419,2.691,420,2.691,421,2.426,423,2.691,426,2.691,428,2.421,429,1.564,430,2.072,431,2.738,432,1.941,433,1.258,434,1.65,436,1.643,437,2.691,438,3.397,440,4.71,443,4.307,446,1.852,449,1.026,452,2.426,454,2.691,456,2.691,459,3.966,461,2.691,463,2.247,464,2.393,465,2.015,466,1.737,467,2.413,468,2.413,469,2.606,472,4.71,474,2.426,475,2.691,476,2.229,477,1.828,478,2.072,479,2.229,480,2.426,481,1.932,482,1.039,483,1.427,484,2.036,485,1.163,486,1.367,487,3.903,488,5.198,489,2.229,490,2.691,491,2.426,492,6.154,493,2.691,494,2.691,495,2.426,496,2.691,497,1.279,498,2.691,499,1.493,500,3.966,501,4.248,502,1.427,503,4.71,504,2.076,505,4.248,506,5.198,507,2.691,508,2.691,509,2.691,510,2.691,511,2.691,512,3.966,513,2.691,514,2.072,515,2.072,516,3.966,517,3.966,518,2.691,519,3.966,520,3.966,521,3.397,522,2.691,523,2.691,524,3.966,525,4.71,526,3.966,527,3.966,528,2.015,529,1.932,530,1.932,531,2.2,532,3.966,533,5.198,534,3.966,535,2.691,536,2.695,537,3.371,538,2.691,539,2.691,540,3.054,541,3.966,542,3.966,543,3.966,544,2.691,545,2.691,546,2.691,547,2.691,548,2.691,549,2.691,550,2.691,551,2.691,552,2.691,553,3.966,554,4.71,555,2.229,556,3.627,557,2.691,558,3.564,559,2.426,560,2.426,561,2.426,562,2.691,563,5.198,564,2.691,565,3.966,566,2.691,567,2.691,568,2.691,569,3.966,570,2.691,571,2.691,850,0.467]],["title/interfaces/colorClientData.html",[135,0.173,704,1.931]],["body/interfaces/colorClientData.html",[0,0.339,3,0.108,4,0.108,5,0.095,8,0.082,25,0.014,26,0.223,27,0.096,30,0.315,34,1.47,38,0.298,48,0.272,52,0.202,53,0.095,58,0.486,59,0.466,60,0.219,61,0.152,62,0.193,63,0.74,64,0.636,66,0.727,80,0.394,87,0.008,88,0.008,91,0.231,92,0.594,96,0.594,101,0.936,103,0.936,105,0.826,109,1.305,124,0.895,126,0.79,130,1.725,131,0.641,133,1.24,134,0.486,135,0.344,151,2.184,162,1.661,165,1.515,170,1.436,171,0.856,173,0.594,177,1.854,179,0.856,180,0.902,182,1.482,183,1.545,201,1.601,231,1.097,351,1.269,363,1.941,368,0.897,372,1.609,446,1.491,449,1.335,463,2.232,464,1.609,465,2.848,466,1.058,467,1.318,468,1.318,469,1.424,481,2.879,484,2.423,485,1.369,486,1.609,497,1.438,499,1.757,502,1.68,528,3.114,529,1.543,530,1.543,531,1.757,608,2.867,626,1.269,669,1.757,681,1.369,683,1.757,684,1.934,685,1.934,687,1.934,688,1.964,697,3.153,698,1.934,699,1.482,700,2.173,701,1.842,702,2.623,703,2.739,704,3.11,705,2.865,706,1.482,707,3.401,708,2.475,709,1.482,710,1.934,711,1.934,712,1.934,713,3.153,714,2.724,715,1.934,716,1.934,717,1.934,718,1.934,719,2.724,720,1.934,721,1.934,722,1.934,723,1.842,724,1.934,725,2.475,726,1.934,727,1.842,850,0.549]],["title/interfaces/colorFromServerData.html",[135,0.173,705,1.931]],["body/interfaces/colorFromServerData.html",[0,0.339,3,0.108,4,0.108,5,0.095,8,0.082,25,0.014,26,0.223,27,0.096,30,0.315,34,1.47,38,0.298,48,0.272,52,0.202,53,0.095,58,0.486,59,0.466,60,0.219,61,0.152,62,0.193,63,0.74,64,0.636,66,0.727,80,0.394,87,0.008,88,0.008,91,0.231,92,0.594,96,0.594,101,0.936,103,0.936,105,0.826,109,1.305,124,0.895,126,0.79,130,1.725,131,0.641,133,1.24,134,0.486,135,0.344,151,2.184,162,1.661,165,1.515,170,1.436,171,0.856,173,0.594,177,1.854,179,0.856,180,0.902,182,1.482,183,1.545,201,1.601,231,1.097,351,1.269,363,1.941,368,0.897,372,1.609,446,1.491,449,1.335,463,2.232,464,1.609,465,2.848,466,1.058,467,1.318,468,1.318,469,1.424,481,2.879,484,1.929,485,1.369,486,1.609,497,1.438,499,1.757,502,1.68,528,3.114,529,1.543,530,1.543,531,1.757,608,2.867,626,1.269,669,1.757,681,1.369,683,1.757,684,1.934,685,1.934,687,1.934,688,1.964,697,3.153,698,1.934,699,1.482,700,2.731,701,1.842,702,2.623,703,2.739,704,2.865,705,3.11,706,1.482,707,3.401,708,2.475,709,1.482,710,1.934,711,1.934,712,1.934,713,3.153,714,2.724,715,1.934,716,1.934,717,1.934,718,1.934,719,2.724,720,1.934,721,1.934,722,1.934,723,1.842,724,1.934,725,2.475,726,1.934,727,1.842,850,0.549]],["title/coverage.html",[1514,4.764]],["body/coverage.html",[0,0.454,1,1.162,5,0.1,6,3.357,7,3.357,25,0.014,27,0.141,50,1.705,66,0.413,87,0.009,88,0.009,89,1.862,90,4.093,116,2.158,119,2.158,124,0.582,127,1.781,128,1.705,135,0.363,136,1.705,138,1.951,143,2.158,146,1.862,147,2.049,148,4.014,185,1.824,186,1.781,191,3.357,194,1.705,195,1.781,196,2.281,197,1.781,198,1.781,199,1.509,200,1.509,201,1.205,202,1.951,203,2.049,204,2.421,211,1.57,220,2.836,227,1.729,231,2.293,232,2.049,238,2.421,245,1.635,248,1.781,251,1.781,254,1.705,255,1.991,256,1.705,258,1.635,260,1.862,262,1.781,264,1.635,270,1.781,271,2.464,273,1.862,277,1.781,282,4.427,291,2.585,298,2.585,299,2.421,300,2.421,313,3.357,314,3.357,346,2.049,347,4.115,352,2.049,356,2.158,357,2.158,360,2.158,362,2.049,366,2.049,370,2.781,371,3.357,372,3.47,391,2.781,392,2.421,394,3.357,395,3.357,403,4.804,404,4.189,405,4.705,434,1.397,465,1.705,477,2.281,479,2.781,481,1.635,484,1.451,485,2.303,487,2.781,504,2.411,572,4.189,580,2.421,582,2.781,663,3.357,683,3.72,700,1.635,702,1.705,703,1.781,704,1.862,705,1.862,707,1.862,708,1.862,731,2.281,740,2.421,756,3.357,757,2.781,759,3.357,760,3.357,779,4.414,780,4.414,808,3.357,809,3.357,835,3.027,849,2.585,851,4.647,862,2.585,864,2.421,882,2.781,883,4.737,916,3.357,917,3.357,930,3.357,954,3.357,977,4.804,978,3.357,1018,2.173,1087,4.427,1093,2.158,1109,1.345,1110,1.862,1111,2.158,1126,4.189,1150,2.781,1294,3.357,1329,4.242,1334,2.158,1337,2.158,1340,2.158,1346,2.158,1347,2.158,1384,3.357,1385,3.357,1454,3.357,1455,4.646,1514,3.357,1515,3.857,1516,3.857,1517,3.857,1518,3.857,1519,4.646,1520,7.174,1521,3.357,1522,7.704,1523,3.357,1524,3.357,1525,3.357,1526,4.646,1527,4.646,1528,3.857,1529,3.857,1530,3.027,1531,7.906,1532,3.857,1533,3.857,1534,3.857,1535,3.857,1536,3.857,1537,3.857,1538,3.857,1539,3.857,1540,6.606,1541,3.857,1542,3.857,1543,3.857,1544,3.857,1545,3.857,1546,3.857,1547,3.857,1548,6.936,1549,3.857,1550,3.857,1551,3.857,1552,3.857,1553,4.646,1554,3.857,1555,3.857,1556,3.027,1557,3.357,1558,2.421,1559,7.783,1560,3.357,1561,3.357,1562,3.357,1563,3.357,1564,3.357,1565,3.357,1566,3.357,1567,4.647,1568,3.857,1569,3.857,1570,7.61,1571,2.421,1572,6.121,1573,7.174,1574,3.857,1575,3.857,1576,3.857,1577,3.857,1578,5.338,1579,3.857,1580,3.857,1581,3.857,1582,6.121,1583,5.338,1584,3.857,1585,3.357,1586,3.357,1587,3.857,1588,3.857,1589,3.857,1590,3.857,1591,7.355,1592,3.857,1593,3.857,1594,4.646,1595,3.857,1596,5.338,1597,5.338,1598,3.857,1599,3.857,1600,3.857,1601,3.857,1602,3.857,1603,3.857,1604,5.338,1605,3.357,1606,3.357,1607,3.857,1608,3.857]],["title/interfaces/createEmailAccountData.html",[135,0.173,147,2.126]],["body/interfaces/createEmailAccountData.html",[0,0.302,1,1.832,3,0.113,4,0.113,5,0.099,8,0.085,19,0.467,25,0.014,26,0.233,27,0.134,30,0.359,34,1.472,38,0.306,40,3.621,41,1.758,48,0.202,50,3.304,52,0.212,53,0.099,58,0.509,59,0.488,60,0.225,61,0.113,62,0.322,63,0.695,64,0.704,66,0.739,79,1.594,80,0.458,87,0.009,88,0.009,89,1.838,90,2.023,91,0.238,92,0.621,93,2.39,96,0.621,101,0.966,103,0.696,105,0.864,106,1.332,107,2.39,109,1.286,110,2.39,112,2.39,115,2.39,116,3.402,118,2.39,119,2.96,121,2.023,124,0.917,125,1.91,126,0.682,127,2.442,128,2.339,129,2.39,130,2.078,131,0.67,132,1.279,133,0.696,134,0.509,135,0.298,136,2.688,137,3.615,138,2.676,139,2.252,140,4.334,141,2.96,142,2.023,143,2.96,144,1.926,145,2.243,146,1.838,147,3.23,148,2.131,149,2.252,150,2.39,151,2.277,152,2.023,153,2.39,154,2.39,155,2.39,156,2.39,157,2.023,158,2.39,159,2.023,160,2.39,161,1.614,162,1.969,163,2.554,164,2.39,165,1.545,166,2.023,167,2.39,168,2.023,169,1.683,170,0.776,171,0.895,172,3.676,173,0.621,174,1.233,175,2.39,176,2.39,177,1.189,178,1.926,179,0.895,180,1.07,181,2.39,182,1.55,183,1.147,184,1.55,850,0.575]],["title/dependencies.html",[1609,2.902,1610,4.191]],["body/dependencies.html",[25,0.014,53,0.154,54,5.889,55,4.643,56,5.149,87,0.012,88,0.012,134,0.79,217,2.408,275,2.408,336,4.643,379,5.149,482,1.988,805,5.716,806,4.266,859,4.266,1033,3.964,1480,5.149,1610,5.149,1611,5.916,1612,8.125,1613,5.916,1614,5.916,1615,5.916,1616,5.916,1617,5.916,1618,7.031,1619,5.916,1620,5.916,1621,5.916,1622,5.916,1623,7.031,1624,5.916,1625,5.916,1626,5.916,1627,5.916,1628,5.916,1629,5.916,1630,5.916,1631,5.916,1632,5.916,1633,5.916,1634,5.916,1635,5.916,1636,5.916,1637,5.916,1638,5.916,1639,5.916,1640,5.916,1641,5.916,1642,5.916,1643,5.916,1644,5.916,1645,3.964,1646,5.916,1647,7.503,1648,5.916,1649,7.503,1650,5.916,1651,5.916,1652,5.916,1653,5.916]],["title/interfaces/editForm.html",[135,0.173,1530,3.14]],["body/interfaces/editForm.html",[1,1.772,3,0.106,4,0.106,5,0.153,8,0.08,19,0.439,25,0.014,27,0.095,28,1.11,31,1.005,34,1.487,38,0.219,40,2.6,41,2.339,48,0.19,50,3.253,52,0.228,53,0.093,60,0.106,61,0.106,62,0.41,63,0.681,64,0.822,66,0.63,79,1.527,80,0.458,87,0.008,88,0.008,89,2.84,91,0.228,96,1.101,106,1.11,125,1.71,132,1.203,135,0.154,137,3.414,138,2.564,139,2.118,140,4.26,141,2.004,142,1.903,171,1.587,172,2.004,173,1.175,179,1.587,180,1.268,183,1.527,184,2.603,185,1.15,196,3.478,197,2.339,206,1.16,207,1.203,208,1.16,209,1.203,212,1.203,217,1.457,223,2.81,224,3.116,225,1.729,226,2.248,227,1.642,228,1.982,248,1.653,264,2.148,265,1.653,315,1.119,316,2.339,318,1.729,326,2.564,340,2.118,368,0.499,370,3.654,405,2.248,407,2.4,408,1.835,409,2.4,411,2.4,413,2.61,431,2.975,433,1.457,434,1.835,446,1.473,449,0.961,477,2.118,478,2.4,482,1.203,483,1.653,489,2.582,505,5.296,536,3.478,537,3.92,556,2.4,558,4.188,576,2.564,577,3.396,850,0.54,935,3.116,980,3.654,1028,4.616,1029,5.654,1030,3.977,1032,2.81,1033,2.4,1048,6.098,1049,3.116,1056,2.248,1096,3.396,1526,3.116,1527,3.116,1530,4.616,1654,5.067,1655,3.116,1656,3.581,1657,2.248,1658,3.581,1659,3.581,1660,3.581,1661,3.581,1662,3.581,1663,3.581,1664,5.067,1665,5.881,1666,3.581,1667,5.067,1668,3.581,1669,3.581,1670,5.881,1671,5.067,1672,3.581,1673,3.581,1674,3.581,1675,3.581,1676,3.581,1677,6.395,1678,3.581,1679,6.395,1680,3.581,1681,3.581,1682,3.581,1683,3.581,1684,3.581,1685,3.581,1686,3.581,1687,5.067,1688,3.581,1689,3.581,1690,3.581,1691,5.067,1692,3.581,1693,3.581,1694,3.581,1695,3.581,1696,3.581,1697,3.581,1698,3.581,1699,3.581,1700,3.581,1701,3.581,1702,3.581,1703,3.581,1704,3.581,1705,3.581,1706,3.581,1707,5.067,1708,3.581,1709,3.581,1710,3.581,1711,3.581,1712,3.581,1713,3.581,1714,3.581]],["title/interfaces/emailAuthData.html",[135,0.173,299,2.511]],["body/interfaces/emailAuthData.html",[0,0.35,3,0.141,4,0.141,5,0.124,8,0.106,19,0.583,25,0.014,27,0.128,30,0.352,34,1.359,38,0.292,40,3.671,41,3.317,48,0.252,50,3.428,52,0.226,53,0.124,57,4.427,58,0.635,59,0.609,60,0.213,61,0.141,62,0.325,63,0.699,64,0.658,66,0.77,80,0.44,87,0.01,88,0.01,91,0.276,92,0.776,101,1.122,103,0.868,109,1.332,121,3.262,124,0.926,125,1.382,126,0.533,130,2.163,131,0.837,133,0.868,134,0.635,135,0.265,136,2.102,137,3.636,146,2.964,151,2.308,152,2.526,157,3.613,159,2.526,161,2.603,165,1.444,166,2.526,168,2.526,169,2.102,174,1.54,196,2.811,282,3.185,288,3.731,290,3.731,291,4.556,293,3.731,295,3.731,297,4.818,298,3.185,299,4.268,300,3.853,301,3.731,302,3.731,303,3.731,304,3.731,305,3.731,306,3.731,307,4.818,308,3.731,309,3.731,310,3.731,311,3.731,312,3.731,850,0.717]],["title/interfaces/foundFurniture.html",[135,0.173,582,2.885]],["body/interfaces/foundFurniture.html",[3,0.118,4,0.118,5,0.103,8,0.089,19,0.486,25,0.014,26,0.429,27,0.132,30,0.304,31,1.113,38,0.304,48,0.21,52,0.22,53,0.103,60,0.118,61,0.118,62,0.418,63,0.704,64,0.665,79,1.639,80,0.462,87,0.009,88,0.009,91,0.245,96,0.647,105,0.9,106,1.36,123,0.966,126,0.75,135,0.171,170,0.808,173,0.647,185,1.235,189,1.914,197,2.511,204,3.898,206,1.284,207,1.332,208,1.284,209,1.332,212,1.332,217,1.614,226,2.489,227,1.284,228,1.551,234,3.112,243,2.214,256,1.753,274,1.492,315,1.239,333,2.746,351,2.523,368,0.865,392,3.415,408,1.97,410,1.753,413,2.523,428,2.891,436,2.107,446,1.153,449,1.328,482,1.332,504,1.872,556,3.646,572,3.112,573,2.891,574,3.451,575,3.646,576,2.752,577,4.162,578,3.451,579,3.451,580,3.898,581,3.451,582,5.217,583,3.451,584,3.451,586,3.451,587,3.451,591,3.451,592,2.107,593,3.451,595,2.219,596,3.044,597,3.451,599,3.451,603,4.735,604,3.451,606,3.451,607,3.451,608,2.528,610,4.735,611,3.451,614,3.451,620,3.646,622,2.859,623,2.859,624,3.112,625,3.112,626,2.331,627,5.817,628,5.405,629,3.451,630,3.451,631,3.451,632,4.735,633,3.451,634,4.735,635,3.451,636,5.405,637,3.415,638,5.405,639,2.859,640,3.451,641,3.451,642,4.735,643,3.451,644,4.735,645,3.451,646,4.735,647,3.451,648,4.735,649,4.735,650,3.451,651,3.451,652,3.451,653,3.451,654,3.451,655,4.735,656,3.451,657,3.451,658,3.451,659,3.451,660,3.451,850,0.598]],["title/miscellaneous/functions.html",[1715,2.093,1716,4.191]],["body/miscellaneous/functions.html",[8,0.125,24,2.039,25,0.014,26,0.478,27,0.143,28,1.708,30,0.382,38,0.295,40,2.999,48,0.359,87,0.011,88,0.011,90,2.961,106,1.221,109,1.29,125,1.62,126,0.82,136,2.464,149,3.295,298,4.545,377,2.72,443,4.891,580,4.59,692,5.972,906,4.018,1557,4.85,1558,4.257,1560,4.85,1561,5.903,1562,4.85,1563,5.903,1564,5.903,1565,4.85,1566,5.903,1605,4.85,1606,5.903,1715,3.498,1716,4.85,1717,5.573,1718,4.85,1719,5.573,1720,5.573,1721,4.85,1722,5.573,1723,5.573,1724,8.102,1725,8.102,1726,5.573,1727,5.573,1728,5.573,1729,5.573,1730,5.573,1731,3.734,1732,5.573]],["title/interfaces/furnitureAccountData.html",[135,0.173,143,2.239]],["body/interfaces/furnitureAccountData.html",[0,0.302,1,1.833,3,0.113,4,0.113,5,0.099,8,0.085,19,0.467,25,0.014,26,0.402,27,0.134,30,0.359,34,1.472,38,0.306,40,3.548,41,1.759,48,0.202,50,3.053,52,0.212,53,0.099,58,0.509,59,0.488,60,0.225,61,0.113,62,0.322,63,0.695,64,0.704,66,0.74,79,1.595,80,0.458,87,0.009,88,0.009,89,1.84,90,2.024,91,0.238,92,0.622,93,2.392,96,0.622,101,0.967,103,0.696,105,0.865,106,1.332,107,2.392,109,1.286,110,2.392,112,2.392,115,2.392,116,3.403,118,2.392,119,2.962,121,2.024,124,0.918,125,1.911,126,0.737,127,2.443,128,2.34,129,2.392,130,2.078,131,0.671,132,1.28,133,0.696,134,0.509,135,0.298,136,2.689,137,3.077,138,2.678,139,2.253,140,3.886,141,2.962,142,2.024,143,3.403,144,3.324,145,2.927,146,1.84,147,2.812,148,2.132,149,2.253,150,2.392,151,2.277,152,2.024,153,2.392,154,2.392,155,2.392,156,2.392,157,2.024,158,2.392,159,2.024,160,2.392,161,1.615,162,1.97,163,2.555,164,2.392,165,1.545,166,2.024,167,2.392,168,2.024,169,1.684,170,0.777,171,0.896,172,3.677,173,0.622,174,1.234,175,2.392,176,2.392,177,1.19,178,1.928,179,0.896,180,1.07,181,2.392,182,1.551,183,1.148,184,1.551,850,0.575]],["title/interfaces/furnitureBaseData.html",[135,0.173,707,1.931]],["body/interfaces/furnitureBaseData.html",[0,0.335,3,0.106,4,0.106,5,0.093,8,0.08,25,0.014,26,0.391,27,0.127,30,0.313,34,1.467,38,0.3,48,0.357,52,0.2,53,0.093,58,0.477,59,0.458,60,0.218,61,0.15,62,0.189,63,0.738,64,0.629,66,0.722,80,0.391,87,0.008,88,0.008,91,0.228,92,0.583,96,0.583,101,0.925,103,0.925,105,0.811,109,1.3,124,0.887,126,0.808,130,1.708,131,0.629,133,1.232,134,0.477,135,0.343,151,2.175,162,1.639,165,1.502,170,1.427,171,0.841,173,0.583,177,1.835,179,0.841,180,0.891,182,1.455,183,1.525,201,1.581,231,1.077,351,1.246,363,1.926,368,0.89,372,1.58,446,1.472,449,1.327,463,2.21,464,2.825,465,3.307,466,1.858,467,1.294,468,1.294,469,1.398,481,2.859,484,1.904,485,1.345,486,1.58,497,1.42,499,1.726,502,1.65,528,2.598,529,1.515,530,1.515,531,1.726,608,2.391,626,1.246,669,1.726,681,1.345,683,1.726,684,1.899,685,1.899,687,1.899,688,1.956,697,3.122,698,1.899,699,1.455,700,2.146,701,1.808,702,2.981,703,3.113,704,2.837,705,2.837,706,1.455,707,3.476,708,2.443,709,1.455,710,1.899,711,1.899,712,1.899,713,3.122,714,2.689,715,1.899,716,1.899,717,1.899,718,1.899,719,2.689,720,1.899,721,1.899,722,1.899,723,1.808,724,1.899,725,2.443,726,1.899,727,1.808,850,0.539]],["title/interfaces/furnitureClientData.html",[135,0.173,708,1.931]],["body/interfaces/furnitureClientData.html",[0,0.339,3,0.109,4,0.109,5,0.095,8,0.082,25,0.014,26,0.224,27,0.069,30,0.316,34,1.471,38,0.296,48,0.272,52,0.202,53,0.095,58,0.488,59,0.468,60,0.22,61,0.153,62,0.194,63,0.741,64,0.637,66,0.728,80,0.395,87,0.009,88,0.009,91,0.231,92,0.596,96,0.596,101,0.939,103,0.939,105,0.829,109,1.306,124,0.897,126,0.791,130,1.729,131,0.643,133,1.242,134,0.488,135,0.344,151,2.186,162,1.665,165,1.517,170,1.438,171,0.859,173,0.596,177,1.857,179,0.859,180,0.905,182,1.487,183,1.549,201,1.606,231,1.101,351,1.274,363,2.049,368,0.898,372,1.615,446,1.494,449,1.337,463,2.653,464,1.615,465,2.852,466,1.062,467,1.323,468,1.323,469,1.429,481,2.883,484,1.934,485,1.374,486,1.615,497,1.442,499,1.764,502,1.687,528,2.629,529,1.549,530,1.549,531,1.764,608,2.42,626,1.274,669,1.764,681,1.374,683,1.764,684,1.941,685,1.941,687,1.941,688,1.966,697,3.159,698,1.941,699,1.487,700,2.179,701,1.848,702,2.629,703,2.745,704,3.283,705,2.871,706,1.487,707,3.498,708,2.871,709,1.487,710,1.941,711,1.941,712,1.941,713,3.159,714,2.731,715,1.941,716,1.941,717,1.941,718,1.941,719,2.731,720,1.941,721,1.941,722,1.941,723,1.848,724,1.941,725,2.481,726,1.941,727,1.848,850,0.551]],["title/interfaces/furnitureFromServerData.html",[135,0.173,481,1.696]],["body/interfaces/furnitureFromServerData.html",[0,0.339,3,0.109,4,0.109,5,0.095,8,0.082,25,0.014,26,0.224,27,0.069,30,0.316,34,1.471,38,0.296,48,0.272,52,0.202,53,0.095,58,0.488,59,0.468,60,0.22,61,0.153,62,0.194,63,0.741,64,0.637,66,0.728,80,0.395,87,0.009,88,0.009,91,0.231,92,0.596,96,0.596,101,0.939,103,0.939,105,0.829,109,1.306,124,0.897,126,0.791,130,1.729,131,0.643,133,1.242,134,0.488,135,0.344,151,2.186,162,1.665,165,1.517,170,1.438,171,0.859,173,0.596,177,1.857,179,0.859,180,0.905,182,1.487,183,1.549,201,1.606,231,1.101,351,1.274,363,2.049,368,0.898,372,1.615,446,1.494,449,1.337,463,2.653,464,1.615,465,2.852,466,1.062,467,1.323,468,1.323,469,1.429,481,2.99,484,1.934,485,1.374,486,1.615,497,1.442,499,1.764,502,1.687,528,2.629,529,1.549,530,1.549,531,1.764,608,2.42,626,1.274,669,1.764,681,1.374,683,1.764,684,1.941,685,1.941,687,1.941,688,1.966,697,3.159,698,1.941,699,1.487,700,2.179,701,1.848,702,2.629,703,2.745,704,2.871,705,3.283,706,1.487,707,3.498,708,2.481,709,1.487,710,1.941,711,1.941,712,1.941,713,3.159,714,2.731,715,1.941,716,1.941,717,1.941,718,1.941,719,2.731,720,1.941,721,1.941,722,1.941,723,1.848,724,1.941,725,2.481,726,1.941,727,1.848,850,0.551]],["title/interfaces/furnitureProportions.html",[135,0.173,703,1.847]],["body/interfaces/furnitureProportions.html",[0,0.335,3,0.106,4,0.106,5,0.093,8,0.08,25,0.014,26,0.219,27,0.11,30,0.313,34,1.467,38,0.295,48,0.268,52,0.2,53,0.093,58,0.477,59,0.457,60,0.218,61,0.15,62,0.189,63,0.737,64,0.629,66,0.722,80,0.391,87,0.008,88,0.008,91,0.227,92,0.582,96,0.582,101,0.924,103,0.924,105,0.81,109,1.3,124,0.886,126,0.785,130,1.707,131,0.628,133,1.231,134,0.477,135,0.343,151,2.175,162,1.638,165,1.502,170,1.613,171,0.839,173,0.582,177,1.834,179,0.839,180,0.89,182,1.453,183,1.524,201,1.58,231,1.076,351,1.245,363,1.924,368,1.056,372,1.578,446,1.47,449,1.327,463,2.209,464,1.578,465,2.823,466,1.038,467,2.312,468,2.312,469,2.498,481,2.858,484,1.902,485,1.343,486,1.578,497,1.419,499,1.724,502,1.648,528,2.596,529,1.514,530,1.514,531,1.724,608,2.39,626,1.245,669,1.724,681,1.343,683,1.724,684,1.897,685,1.897,687,1.897,688,1.955,697,3.12,698,1.897,699,1.453,700,2.144,701,1.806,702,2.596,703,2.948,704,2.835,705,2.835,706,1.453,707,3.38,708,2.441,709,1.453,710,1.897,711,1.897,712,1.897,713,3.12,714,2.687,715,1.897,716,1.897,717,1.897,718,1.897,719,2.687,720,1.897,721,1.897,722,1.897,723,1.806,724,1.897,725,2.441,726,1.897,727,1.806,850,0.539]],["title/interfaces/furnitureShopData.html",[135,0.173,1334,2.239]],["body/interfaces/furnitureShopData.html",[0,0.311,3,0.118,4,0.118,5,0.103,8,0.089,25,0.014,26,0.409,27,0.142,30,0.266,38,0.3,48,0.21,52,0.208,53,0.103,58,0.53,59,0.508,60,0.199,61,0.118,62,0.329,63,0.65,64,0.775,66,0.75,80,0.333,87,0.009,88,0.009,91,0.245,92,0.647,96,0.647,101,0.994,103,0.725,123,0.967,124,1.057,126,0.75,131,0.698,133,0.725,134,0.53,135,0.302,145,2.97,165,0.933,170,1.11,171,0.933,173,1.014,179,0.933,180,1.233,183,1.64,203,2.108,218,1.754,255,1.196,274,1.493,359,1.754,365,1.754,368,1.051,388,2.346,449,1.032,463,2.722,466,1.944,497,1.527,504,1.872,626,2.331,681,1.493,688,1.748,706,1.615,709,1.615,737,3.228,750,2.346,850,0.599,1109,2.331,1224,2.22,1329,2.346,1333,2.49,1334,3.741,1336,4.197,1337,3.046,1338,2.49,1339,3.416,1340,3.92,1342,3.416,1343,2.49,1344,2.49,1346,3.046,1347,3.046,1348,2.49,1349,3.416,1350,3.416,1351,3.416,1352,2.49,1353,3.9,1354,2.49,1355,2.49,1356,2.49,1357,2.49,1358,2.49,1359,2.49,1360,2.49,1361,2.49,1362,2.49,1363,3.416,1364,2.49,1365,2.49,1366,2.49,1367,2.49,1368,2.49,1369,3.416,1370,2.49,1371,2.49,1372,2.49,1373,2.49,1374,2.49,1375,3.416,1376,4.197,1377,2.49,1378,3.416,1379,4.397,1380,2.49,1381,3.9,1382,2.49,1383,2.49]],["title/interfaces/googleAuthData.html",[135,0.173,300,2.511]],["body/interfaces/googleAuthData.html",[0,0.354,3,0.143,4,0.143,5,0.125,8,0.108,19,0.592,25,0.014,27,0.091,30,0.354,34,1.365,38,0.269,40,3.609,41,3.531,48,0.256,50,3.439,52,0.227,53,0.125,57,4.468,58,0.644,59,0.618,60,0.215,61,0.143,62,0.328,63,0.703,64,0.664,66,0.774,80,0.442,87,0.01,88,0.01,91,0.279,92,0.787,101,1.132,103,0.881,109,1.336,121,3.292,124,0.935,125,1.402,126,0.541,130,2.173,131,0.849,133,0.881,134,0.644,135,0.267,136,2.132,137,2.44,146,2.992,151,2.314,152,2.563,157,3.638,159,2.563,161,2.627,165,1.457,166,2.563,168,2.563,169,2.132,174,1.562,196,2.852,282,3.232,288,3.785,290,3.785,291,4.588,293,3.785,295,3.785,297,4.863,298,3.232,299,3.889,300,4.297,301,3.785,302,3.785,303,3.785,304,3.785,305,3.785,306,3.785,307,4.863,308,3.785,309,3.785,310,3.785,311,3.785,312,3.785,850,0.728]],["title/interfaces/imageSliderClientData.html",[135,0.173,484,1.505]],["body/interfaces/imageSliderClientData.html",[3,0.161,4,0.161,5,0.141,8,0.149,25,0.014,27,0.125,38,0.201,48,0.286,52,0.214,53,0.141,60,0.214,61,0.161,87,0.011,88,0.011,91,0.299,106,1.184,126,0.747,135,0.287,185,1.511,206,1.751,207,1.816,208,1.751,209,1.816,212,1.816,227,2.337,258,2.292,315,1.689,316,3.073,324,2.735,334,2.61,368,1.077,377,2.782,408,2.411,410,2.39,413,1.885,482,1.816,484,2.505,485,2.034,504,1.629,529,3.278,530,3.278,576,3.368,700,2.292,779,3.898,780,3.898,781,4.243,782,5.225,783,4.243,784,4.243,805,3.898,806,3.898,850,0.816]],["title/interfaces/imageSliderFromServerData.html",[135,0.173,700,1.696]],["body/interfaces/imageSliderFromServerData.html",[3,0.16,4,0.16,5,0.141,8,0.149,25,0.014,27,0.125,38,0.268,48,0.286,52,0.214,53,0.141,60,0.214,61,0.16,87,0.011,88,0.011,91,0.299,106,1.183,126,0.844,135,0.287,185,1.51,206,1.749,207,1.815,208,1.749,209,1.815,212,1.815,227,2.336,258,2.29,315,1.687,316,3.072,324,2.732,334,2.608,368,1.076,377,2.515,408,2.409,410,2.388,413,1.883,482,1.815,484,2.032,485,2.032,504,1.627,529,3.277,530,3.277,576,3.366,700,2.821,779,3.894,780,3.894,781,4.239,782,5.222,783,4.239,784,4.239,805,3.894,806,3.894,850,0.815]],["title/index.html",[8,0.09,1733,3.482]],["body/index.html",[2,2.662,25,0.012,87,0.012,88,0.012,187,3.158,245,2.773,391,4.716,801,2.804,850,0.987,1733,5.692,1734,6.54,1735,6.54,1736,6.54]],["title/interfaces/modelInterface.html",[135,0.173,1109,1.395]],["body/interfaces/modelInterface.html",[1,1.375,3,0.07,4,0.07,5,0.061,8,0.052,19,0.288,25,0.014,27,0.086,30,0.223,31,2.014,34,1.092,38,0.17,48,0.124,52,0.21,53,0.061,60,0.136,61,0.07,62,0.429,63,0.698,64,0.88,66,0.758,69,1.571,71,1.386,79,1.953,80,0.475,87,0.006,88,0.006,91,0.166,96,0.744,105,1.175,106,1.419,109,0.397,132,0.788,135,0.223,170,0.752,171,0.868,173,1.02,179,0.868,180,0.803,184,1.857,185,0.837,198,2.106,199,1.785,200,0.917,201,1.153,202,1.867,205,2.698,206,0.759,207,0.788,208,0.759,209,0.788,212,0.788,217,0.954,220,1.245,221,1.386,225,1.132,228,1.443,229,1.386,230,2.065,231,0.706,232,1.96,268,0.954,315,0.732,324,1.867,326,3.373,333,2.017,334,1.132,340,2.182,363,0.706,368,1.089,377,0.817,406,1.471,408,1.336,413,1.963,428,1.96,429,1.186,431,2.308,432,1.471,433,0.954,434,1.336,436,1.245,446,1.738,449,0.699,466,1.073,467,2.659,468,2.765,469,2.024,482,0.788,483,1.082,504,2.056,521,2.316,537,2.308,558,2.553,573,1.96,592,1.245,595,1.312,596,1.312,688,1.472,736,2.472,737,2.499,798,1.386,801,2.249,847,2.316,850,0.354,868,1.96,878,1.312,1018,2.433,1051,2.472,1056,1.471,1057,1.471,1081,1.471,1082,1.471,1083,1.471,1084,1.471,1109,2.085,1110,2.718,1113,4.1,1116,1.245,1117,1.96,1212,4.61,1256,3.249,1269,2.864,1456,2.472,1479,2.472,1558,1.471,1567,1.571,1571,3.249,1645,2.472,1657,1.471,1731,3.468,1737,2.472,1738,2.472,1739,3.29,1740,1.69,1741,3.29,1742,1.69,1743,2.66,1744,4.006,1745,2.66,1746,2.472,1747,2.66,1748,4.006,1749,3.732,1750,2.66,1751,2.66,1752,4.059,1753,1.69,1754,1.69,1755,1.69,1756,2.66,1757,1.69,1758,1.69,1759,2.66,1760,1.69,1761,1.69,1762,1.69,1763,1.69,1764,1.69,1765,1.69,1766,1.69,1767,1.69,1768,1.69,1769,1.69,1770,1.69,1771,1.69,1772,2.66,1773,1.69,1774,1.69,1775,1.69,1776,1.69,1777,1.69,1778,4.059,1779,1.69,1780,2.66,1781,2.66,1782,1.69,1783,2.66,1784,3.29,1785,2.66,1786,1.69,1787,3.29,1788,1.69,1789,1.69,1790,1.69,1791,1.69,1792,2.66,1793,2.66,1794,1.69,1795,1.69,1796,1.69,1797,1.69,1798,3.29,1799,1.69,1800,3.29,1801,4.31,1802,4.059,1803,2.66,1804,1.69,1805,2.66,1806,2.66,1807,2.66,1808,1.69,1809,2.66,1810,1.69,1811,1.69,1812,1.69,1813,1.69,1814,1.69,1815,4.51,1816,1.69,1817,3.732,1818,2.66,1819,1.69,1820,1.69,1821,1.69,1822,1.69,1823,1.69,1824,1.69,1825,1.69,1826,1.69,1827,1.69,1828,1.69,1829,1.69,1830,2.66,1831,3.732,1832,1.69,1833,2.66,1834,2.66,1835,2.66,1836,3.732,1837,1.69,1838,3.29,1839,1.69,1840,1.69,1841,1.69,1842,1.69,1843,1.69,1844,2.66,1845,2.66,1846,2.66,1847,2.66,1848,2.66,1849,1.69,1850,1.69,1851,1.571,1852,1.69,1853,1.69,1854,1.69,1855,1.69,1856,1.69,1857,1.69,1858,1.69,1859,1.69,1860,1.69,1861,2.66,1862,1.69,1863,1.69,1864,1.69,1865,1.69,1866,1.69,1867,3.29,1868,1.69,1869,1.69,1870,2.66,1871,3.29,1872,1.69,1873,1.69,1874,3.29,1875,1.69,1876,1.69,1877,1.69,1878,2.66,1879,2.66,1880,1.69,1881,2.66,1882,2.66,1883,1.69,1884,1.69,1885,1.69,1886,1.69,1887,1.69,1888,2.66,1889,3.29,1890,1.69,1891,1.69,1892,1.69,1893,2.66,1894,2.66,1895,1.69,1896,1.69,1897,1.69,1898,1.69,1899,2.66,1900,1.69,1901,1.69,1902,1.69,1903,1.69,1904,3.732,1905,3.29,1906,1.69,1907,1.69,1908,1.69,1909,1.69,1910,1.69,1911,1.69,1912,2.472,1913,4.31,1914,2.66,1915,2.66,1916,2.66,1917,2.66,1918,2.66,1919,2.472,1920,2.66,1921,2.66,1922,2.66,1923,2.66,1924,2.66,1925,2.66,1926,1.69,1927,3.29,1928,1.69,1929,1.69,1930,2.66,1931,2.66,1932,1.69,1933,1.69,1934,1.571,1935,3.29,1936,1.69,1937,1.571,1938,1.571,1939,3.468,1940,1.69,1941,2.66,1942,1.571,1943,1.69,1944,1.69,1945,1.571,1946,1.69,1947,1.69,1948,2.66,1949,1.69,1950,2.66,1951,1.69,1952,1.69,1953,1.69,1954,1.69,1955,1.69,1956,2.66,1957,2.66,1958,3.29,1959,3.29,1960,1.69,1961,2.66,1962,2.66,1963,3.29,1964,3.732,1965,1.69,1966,1.69,1967,1.69,1968,1.69,1969,1.69,1970,1.69,1971,2.66,1972,1.69,1973,1.69,1974,1.69,1975,1.69,1976,1.69,1977,1.69,1978,1.69,1979,1.69,1980,1.69,1981,1.69,1982,1.69,1983,2.66,1984,1.69,1985,1.69,1986,1.69,1987,1.69,1988,3.29,1989,1.69,1990,1.69,1991,1.69,1992,1.69,1993,1.69,1994,1.69]],["title/modules.html",[1995,4.764]],["body/modules.html",[25,0.012,87,0.012,88,0.012,1995,5.755]],["title/interfaces/objectLoadInterface.html",[135,0.173,1571,2.511]],["body/interfaces/objectLoadInterface.html",[1,1.372,3,0.069,4,0.069,5,0.061,8,0.052,19,0.287,25,0.014,27,0.086,30,0.223,31,2.012,34,1.091,38,0.17,48,0.124,52,0.21,53,0.061,60,0.135,61,0.069,62,0.428,63,0.697,64,0.879,66,0.757,69,1.566,71,1.382,79,1.951,80,0.475,87,0.006,88,0.006,91,0.166,96,0.743,105,1.173,106,1.418,109,0.396,132,0.785,135,0.223,170,0.75,171,0.865,173,1.019,179,0.865,180,0.801,184,1.853,185,0.835,198,2.102,199,1.781,200,0.914,201,1.15,202,1.862,205,2.693,206,0.757,207,0.785,208,0.757,209,0.785,212,0.785,217,0.951,220,1.241,221,1.382,225,1.128,228,1.44,229,1.382,230,2.06,231,0.704,232,1.956,268,0.951,315,0.73,324,1.862,326,3.369,333,2.013,334,1.128,340,2.176,363,0.704,368,1.088,377,0.815,406,1.467,408,1.333,413,1.96,428,1.956,429,1.182,431,2.304,432,1.467,433,0.951,434,1.333,436,1.241,446,1.736,449,0.698,466,1.07,467,2.56,468,2.706,469,0.914,482,0.785,483,1.079,504,2.055,521,2.31,537,2.304,558,2.548,573,1.956,592,1.241,595,1.307,596,1.307,688,1.469,736,2.466,737,2.494,798,1.382,801,2.246,847,2.31,850,0.353,868,1.956,878,1.307,1018,2.43,1051,2.466,1056,1.467,1057,1.467,1081,1.467,1082,1.467,1083,1.467,1084,1.467,1109,1.96,1110,2.714,1113,4.099,1116,1.241,1117,1.956,1212,4.607,1256,3.243,1269,2.858,1456,2.466,1479,2.466,1558,1.467,1567,1.566,1571,3.528,1645,2.466,1657,1.467,1731,3.462,1737,2.466,1738,2.466,1739,3.283,1740,1.685,1741,3.283,1742,1.685,1743,2.654,1744,4.186,1745,2.654,1746,3.051,1747,2.654,1748,4.186,1749,4.505,1750,4.052,1751,4.052,1752,4.052,1753,1.685,1754,1.685,1755,1.685,1756,2.654,1757,1.685,1758,1.685,1759,2.654,1760,1.685,1761,1.685,1762,1.685,1763,1.685,1764,1.685,1765,1.685,1766,1.685,1767,1.685,1768,1.685,1769,1.685,1770,1.685,1771,1.685,1772,2.654,1773,1.685,1774,1.685,1775,1.685,1776,1.685,1777,1.685,1778,4.052,1779,1.685,1780,2.654,1781,2.654,1782,1.685,1783,2.654,1784,3.283,1785,2.654,1786,1.685,1787,3.283,1788,1.685,1789,1.685,1790,1.685,1791,1.685,1792,2.654,1793,2.654,1794,1.685,1795,1.685,1796,1.685,1797,1.685,1798,3.283,1799,1.685,1800,3.283,1801,4.305,1802,4.052,1803,2.654,1804,1.685,1805,2.654,1806,2.654,1807,2.654,1808,1.685,1809,2.654,1810,1.685,1811,1.685,1812,1.685,1813,1.685,1814,1.685,1815,4.505,1816,1.685,1817,3.725,1818,2.654,1819,1.685,1820,1.685,1821,1.685,1822,1.685,1823,1.685,1824,1.685,1825,1.685,1826,1.685,1827,1.685,1828,1.685,1829,1.685,1830,2.654,1831,3.725,1832,1.685,1833,2.654,1834,2.654,1835,2.654,1836,3.725,1837,1.685,1838,3.283,1839,1.685,1840,1.685,1841,1.685,1842,1.685,1843,1.685,1844,2.654,1845,2.654,1846,2.654,1847,2.654,1848,2.654,1849,1.685,1850,1.685,1851,1.566,1852,1.685,1853,1.685,1854,1.685,1855,1.685,1856,1.685,1857,1.685,1858,1.685,1859,1.685,1860,1.685,1861,2.654,1862,1.685,1863,1.685,1864,1.685,1865,1.685,1866,1.685,1867,3.283,1868,1.685,1869,1.685,1870,2.654,1871,3.283,1872,1.685,1873,1.685,1874,3.283,1875,1.685,1876,1.685,1877,1.685,1878,2.654,1879,2.654,1880,1.685,1881,2.654,1882,2.654,1883,1.685,1884,1.685,1885,1.685,1886,1.685,1887,1.685,1888,2.654,1889,3.283,1890,1.685,1891,1.685,1892,1.685,1893,2.654,1894,2.654,1895,1.685,1896,1.685,1897,1.685,1898,1.685,1899,2.654,1900,1.685,1901,1.685,1902,1.685,1903,1.685,1904,3.725,1905,3.283,1906,1.685,1907,1.685,1908,1.685,1909,1.685,1910,1.685,1911,1.685,1912,2.466,1913,4.305,1914,2.654,1915,2.654,1916,2.654,1917,2.654,1918,2.654,1919,2.466,1920,2.654,1921,2.654,1922,2.654,1923,2.654,1924,2.654,1925,2.654,1926,1.685,1927,3.283,1928,1.685,1929,1.685,1930,2.654,1931,2.654,1932,1.685,1933,1.685,1934,1.566,1935,3.283,1936,1.685,1937,1.566,1938,1.566,1939,3.462,1940,1.685,1941,2.654,1942,1.566,1943,1.685,1944,1.685,1945,1.566,1946,1.685,1947,1.685,1948,2.654,1949,1.685,1950,2.654,1951,1.685,1952,1.685,1953,1.685,1954,1.685,1955,1.685,1956,2.654,1957,2.654,1958,3.283,1959,3.283,1960,1.685,1961,2.654,1962,2.654,1963,3.283,1964,3.725,1965,1.685,1966,1.685,1967,1.685,1968,1.685,1969,1.685,1970,1.685,1971,2.654,1972,1.685,1973,1.685,1974,1.685,1975,1.685,1976,1.685,1977,1.685,1978,1.685,1979,1.685,1980,1.685,1981,1.685,1982,1.685,1983,2.654,1984,1.685,1985,1.685,1986,1.685,1987,1.685,1988,3.283,1989,1.685,1990,1.685,1991,1.685,1992,1.685,1993,1.685,1994,1.685]],["title/interfaces/objectSceneInterface.html",[135,0.173,1110,1.931]],["body/interfaces/objectSceneInterface.html",[1,1.368,3,0.069,4,0.069,5,0.061,8,0.052,19,0.285,25,0.014,27,0.097,30,0.222,31,2.01,34,1.088,38,0.209,48,0.123,52,0.21,53,0.061,60,0.135,61,0.069,62,0.428,63,0.697,64,0.879,66,0.756,69,1.558,71,1.375,79,1.947,80,0.474,87,0.006,88,0.006,91,0.165,96,0.741,105,1.17,106,1.415,109,0.394,132,0.781,135,0.222,170,0.748,171,0.862,173,1.017,179,0.862,180,0.799,184,1.848,185,0.832,198,2.096,199,1.776,200,0.91,201,1.146,202,1.855,205,2.685,206,0.753,207,0.781,208,0.753,209,0.781,212,0.781,217,0.947,220,1.236,221,1.375,225,1.123,228,1.434,229,1.375,230,2.052,231,0.701,232,1.948,268,0.947,315,0.726,324,1.855,326,3.364,333,2.007,334,1.123,340,2.168,363,0.701,368,1.088,377,0.811,406,1.46,408,1.328,413,1.955,428,1.948,429,1.177,431,2.297,432,1.46,433,0.947,434,1.328,436,1.236,446,1.732,449,0.86,466,1.066,467,2.557,468,2.704,469,0.91,482,0.781,483,1.074,504,2.052,521,2.302,537,2.297,558,2.54,573,1.948,592,1.236,595,1.301,596,1.301,688,1.466,736,2.457,737,2.488,798,1.375,801,2.241,847,2.302,850,0.351,868,1.948,878,1.301,1018,2.425,1051,2.457,1056,1.46,1057,1.46,1081,1.46,1082,1.46,1083,1.46,1084,1.46,1109,1.955,1110,2.877,1113,4.097,1116,1.236,1117,1.948,1212,4.602,1256,3.234,1269,2.85,1456,2.457,1479,2.457,1558,1.46,1567,1.558,1571,3.234,1645,2.457,1657,1.46,1731,3.453,1737,2.457,1738,2.457,1739,3.273,1740,1.677,1741,3.273,1742,1.677,1743,4.043,1744,4.179,1745,4.043,1746,3.042,1747,4.043,1748,4.179,1749,4.497,1750,2.644,1751,2.644,1752,4.043,1753,1.677,1754,1.677,1755,1.677,1756,2.644,1757,1.677,1758,1.677,1759,2.644,1760,1.677,1761,1.677,1762,1.677,1763,1.677,1764,1.677,1765,1.677,1766,1.677,1767,1.677,1768,1.677,1769,1.677,1770,1.677,1771,1.677,1772,2.644,1773,1.677,1774,1.677,1775,1.677,1776,1.677,1777,1.677,1778,4.043,1779,1.677,1780,2.644,1781,2.644,1782,1.677,1783,2.644,1784,3.273,1785,2.644,1786,1.677,1787,3.273,1788,1.677,1789,1.677,1790,1.677,1791,1.677,1792,2.644,1793,2.644,1794,1.677,1795,1.677,1796,1.677,1797,1.677,1798,3.273,1799,1.677,1800,3.273,1801,4.296,1802,4.043,1803,2.644,1804,1.677,1805,2.644,1806,2.644,1807,2.644,1808,1.677,1809,2.644,1810,1.677,1811,1.677,1812,1.677,1813,1.677,1814,1.677,1815,4.497,1816,1.677,1817,3.716,1818,2.644,1819,1.677,1820,1.677,1821,1.677,1822,1.677,1823,1.677,1824,1.677,1825,1.677,1826,1.677,1827,1.677,1828,1.677,1829,1.677,1830,2.644,1831,3.716,1832,1.677,1833,2.644,1834,2.644,1835,2.644,1836,3.716,1837,1.677,1838,3.273,1839,1.677,1840,1.677,1841,1.677,1842,1.677,1843,1.677,1844,2.644,1845,2.644,1846,2.644,1847,2.644,1848,2.644,1849,1.677,1850,1.677,1851,1.558,1852,1.677,1853,1.677,1854,1.677,1855,1.677,1856,1.677,1857,1.677,1858,1.677,1859,1.677,1860,1.677,1861,2.644,1862,1.677,1863,1.677,1864,1.677,1865,1.677,1866,1.677,1867,3.273,1868,1.677,1869,1.677,1870,2.644,1871,3.273,1872,1.677,1873,1.677,1874,3.273,1875,1.677,1876,1.677,1877,1.677,1878,2.644,1879,2.644,1880,1.677,1881,2.644,1882,2.644,1883,1.677,1884,1.677,1885,1.677,1886,1.677,1887,1.677,1888,2.644,1889,3.273,1890,1.677,1891,1.677,1892,1.677,1893,2.644,1894,2.644,1895,1.677,1896,1.677,1897,1.677,1898,1.677,1899,2.644,1900,1.677,1901,1.677,1902,1.677,1903,1.677,1904,3.716,1905,3.273,1906,1.677,1907,1.677,1908,1.677,1909,1.677,1910,1.677,1911,1.677,1912,2.457,1913,4.296,1914,2.644,1915,2.644,1916,2.644,1917,2.644,1918,2.644,1919,2.457,1920,2.644,1921,2.644,1922,2.644,1923,2.644,1924,2.644,1925,2.644,1926,1.677,1927,3.273,1928,1.677,1929,1.677,1930,2.644,1931,2.644,1932,1.677,1933,1.677,1934,1.558,1935,3.273,1936,1.677,1937,1.558,1938,1.558,1939,3.453,1940,1.677,1941,2.644,1942,1.558,1943,1.677,1944,1.677,1945,1.558,1946,1.677,1947,1.677,1948,2.644,1949,1.677,1950,2.644,1951,1.677,1952,1.677,1953,1.677,1954,1.677,1955,1.677,1956,2.644,1957,2.644,1958,3.273,1959,3.273,1960,1.677,1961,2.644,1962,2.644,1963,3.273,1964,3.716,1965,1.677,1966,1.677,1967,1.677,1968,1.677,1969,1.677,1970,1.677,1971,2.644,1972,1.677,1973,1.677,1974,1.677,1975,1.677,1976,1.677,1977,1.677,1978,1.677,1979,1.677,1980,1.677,1981,1.677,1982,1.677,1983,2.644,1984,1.677,1985,1.677,1986,1.677,1987,1.677,1988,3.273,1989,1.677,1990,1.677,1991,1.677,1992,1.677,1993,1.677,1994,1.677]],["title/interfaces/option.html",[135,0.173,360,2.239]],["body/interfaces/option.html",[0,0.368,3,0.152,4,0.152,5,0.134,8,0.115,19,0.629,25,0.014,26,0.476,27,0.143,30,0.251,38,0.304,48,0.272,52,0.22,53,0.134,58,0.685,59,0.657,60,0.22,61,0.152,62,0.341,80,0.314,87,0.011,88,0.011,91,0.29,92,0.837,101,1.177,103,0.937,109,1.092,124,0.973,126,0.576,131,0.903,133,0.937,134,0.685,135,0.329,174,1.662,346,2.726,347,2.871,348,3.22,351,1.789,352,2.726,353,3.22,354,3.22,355,3.22,356,3.606,357,3.943,358,3.22,359,3.367,360,3.943,361,4.64,362,3.424,363,1.942,364,3.22,365,3.115,366,3.424,367,3.22,368,0.897,369,3.22,850,0.774]],["title/interfaces/optionRangeQueryData.html",[135,0.173,1347,2.239]],["body/interfaces/optionRangeQueryData.html",[0,0.316,3,0.121,4,0.121,5,0.106,8,0.091,25,0.014,26,0.249,27,0.14,30,0.271,38,0.283,48,0.216,52,0.21,53,0.106,58,0.544,59,0.521,60,0.201,61,0.121,62,0.334,63,0.657,64,0.781,66,0.757,80,0.339,87,0.009,88,0.009,91,0.249,92,0.664,96,0.664,101,1.012,103,0.744,123,0.992,124,1.02,126,0.706,131,0.716,133,0.744,134,0.544,135,0.305,145,2.348,165,0.957,170,1.129,171,0.957,173,1.027,179,0.957,180,1.244,183,1.669,203,2.163,218,1.8,255,1.227,274,1.531,359,1.8,365,1.8,368,1.084,388,2.407,449,0.772,463,2.369,466,1.184,497,1.554,504,1.897,626,1.42,681,1.531,688,1.064,706,1.657,709,1.657,737,3.263,750,2.407,850,0.614,1109,1.932,1224,3.781,1329,2.407,1333,2.555,1334,3.523,1336,4.242,1337,3.099,1338,2.555,1339,3.477,1340,3.956,1342,3.477,1343,2.555,1344,2.555,1346,3.099,1347,3.523,1348,4.242,1349,3.477,1350,3.477,1351,3.477,1352,2.555,1353,3.952,1354,2.555,1355,2.555,1356,2.555,1357,2.555,1358,2.555,1359,2.555,1360,2.555,1361,2.555,1362,2.555,1363,3.477,1364,2.555,1365,2.555,1366,2.555,1367,2.555,1368,2.555,1369,3.477,1370,2.555,1371,2.555,1372,2.555,1373,2.555,1374,2.555,1375,3.477,1376,4.242,1377,2.555,1378,3.477,1379,4.437,1380,2.555,1381,3.952,1382,2.555,1383,2.555]],["title/interfaces/optionSelectQueryData.html",[135,0.173,1346,2.239]],["body/interfaces/optionSelectQueryData.html",[0,0.318,3,0.122,4,0.122,5,0.107,8,0.092,25,0.014,26,0.251,27,0.138,30,0.272,38,0.29,48,0.217,52,0.21,53,0.107,58,0.548,59,0.525,60,0.201,61,0.122,62,0.335,63,0.659,64,0.783,66,0.759,80,0.341,87,0.009,88,0.009,91,0.25,92,0.669,96,0.669,101,1.017,103,0.749,123,1.651,124,1.023,126,0.709,131,0.721,133,0.749,134,0.548,135,0.306,145,2.359,165,0.964,170,1.134,171,0.964,173,1.031,179,0.964,180,1.247,183,1.677,203,2.178,218,1.812,255,1.235,274,1.542,359,1.812,365,1.812,368,1.017,388,2.424,449,0.777,463,2.377,466,1.192,497,1.562,504,1.904,626,1.429,681,1.542,688,1.072,706,1.668,709,1.668,737,3.272,750,2.424,850,0.619,1109,1.941,1224,2.294,1329,2.424,1333,2.573,1334,3.536,1336,4.254,1337,3.114,1338,2.573,1339,3.493,1340,3.965,1342,3.493,1343,2.573,1344,2.573,1346,3.536,1347,3.114,1348,2.573,1349,3.493,1350,3.493,1351,3.493,1352,2.573,1353,3.966,1354,2.573,1355,2.573,1356,2.573,1357,2.573,1358,2.573,1359,2.573,1360,2.573,1361,2.573,1362,2.573,1363,3.493,1364,2.573,1365,2.573,1366,2.573,1367,2.573,1368,2.573,1369,3.493,1370,2.573,1371,2.573,1372,2.573,1373,2.573,1374,2.573,1375,3.493,1376,4.254,1377,2.573,1378,3.493,1379,4.448,1380,2.573,1381,3.966,1382,2.573,1383,2.573]],["title/interfaces/projectInformation.html",[127,1.847,135,0.173]],["body/interfaces/projectInformation.html",[0,0.321,3,0.124,4,0.124,5,0.109,8,0.093,19,0.512,25,0.014,26,0.468,27,0.106,30,0.349,34,1.477,38,0.304,48,0.221,52,0.223,53,0.109,58,0.557,59,0.534,60,0.203,61,0.124,62,0.338,63,0.773,64,0.787,66,0.764,80,0.436,87,0.009,88,0.009,91,0.253,92,0.68,96,0.68,101,1.029,103,0.762,109,1.311,124,0.962,126,0.468,127,3.466,128,1.844,130,2.136,131,0.734,133,0.762,134,0.557,135,0.275,144,2.849,151,2.274,161,1.768,162,2.309,163,2.014,165,1.605,169,1.844,173,0.68,174,1.824,177,1.303,178,2.849,198,1.925,218,1.844,363,1.257,377,1.964,449,1.447,497,1.17,699,1.698,800,2.795,801,1.569,850,0.629,1008,4.272,1018,2.778,1070,4.574,1087,2.795,1093,3.567,1095,3.007,1096,5.185,1098,3.007,1100,3.007,1101,4.001,1103,3.007,1104,3.007,1106,3.007,1108,3.007,1109,1.964,1110,2.719,1111,3.151,1112,4.06,1113,2.11,1114,2.795,1115,2.795,1116,2.216,1117,2.216,1118,3.007,1119,3.007,1120,4.597,1121,3.007,1122,3.007,1123,3.007,1124,3.007,1125,3.007]],["title/interfaces/projectServerInformation.html",[128,1.769,135,0.173]],["body/interfaces/projectServerInformation.html",[0,0.321,3,0.124,4,0.124,5,0.108,8,0.093,19,0.51,25,0.014,26,0.436,27,0.106,30,0.349,34,1.476,38,0.306,48,0.22,52,0.223,53,0.108,58,0.556,59,0.533,60,0.202,61,0.124,62,0.337,63,0.773,64,0.786,66,0.763,80,0.436,87,0.009,88,0.009,91,0.253,92,0.678,96,0.678,101,1.027,103,0.76,109,1.311,124,0.961,126,0.467,127,3.464,128,2.485,130,2.134,131,0.732,133,0.76,134,0.556,135,0.275,144,3.603,151,2.273,161,1.763,162,2.307,163,2.008,165,1.603,169,1.839,173,0.678,174,1.821,177,1.299,178,2.843,198,1.92,218,1.839,363,1.694,377,1.96,449,1.482,497,1.167,699,1.693,800,2.787,801,1.565,850,0.628,1008,4.266,1018,2.288,1070,2.787,1087,2.787,1093,3.562,1095,2.999,1096,5.182,1098,2.999,1100,2.999,1101,3.996,1103,2.999,1104,2.999,1106,2.999,1108,2.999,1109,1.96,1110,2.713,1111,3.145,1112,4.052,1113,2.104,1114,2.787,1115,2.787,1116,2.21,1117,2.21,1118,4.916,1119,2.999,1120,4.59,1121,2.999,1122,2.999,1123,2.999,1124,2.999,1125,2.999]],["title/properties.html",[91,0.217,1609,2.902]],["body/properties.html",[25,0.013,87,0.012,88,0.012,91,0.296,1996,6.591,1997,6.591]],["title/interfaces/queryData.html",[135,0.173,1340,2.239]],["body/interfaces/queryData.html",[0,0.318,3,0.122,4,0.122,5,0.107,22,1.003,25,0.014,26,0.252,27,0.105,30,0.273,38,0.287,48,0.218,52,0.211,53,0.107,58,0.55,59,0.527,60,0.202,61,0.122,62,0.335,63,0.66,64,0.784,66,0.76,80,0.342,87,0.009,88,0.009,92,0.671,96,0.671,101,1.019,103,0.752,123,1.003,124,1.024,126,0.71,131,0.724,133,0.752,134,0.55,135,0.306,145,2.366,165,0.968,170,1.138,171,0.968,173,1.033,179,0.968,180,1.249,183,1.682,203,2.187,218,1.82,255,1.24,274,1.548,359,1.82,365,1.82,368,1.019,388,2.434,449,0.78,463,2.382,466,1.197,497,1.566,504,1.908,626,1.435,681,1.548,688,1.076,706,2.271,709,1.675,737,3.278,750,2.434,850,0.621,1109,1.946,1224,2.303,1329,2.434,1333,2.583,1334,3.543,1336,4.261,1337,3.123,1338,2.583,1339,3.503,1340,4.094,1342,3.503,1343,2.583,1344,2.583,1346,3.543,1347,3.543,1348,2.583,1349,3.503,1350,3.503,1351,3.503,1352,2.583,1353,3.974,1354,2.583,1355,2.583,1356,2.583,1357,2.583,1358,2.583,1359,2.583,1360,2.583,1361,2.583,1362,2.583,1363,3.503,1364,2.583,1365,2.583,1366,2.583,1367,2.583,1368,2.583,1369,3.503,1370,2.583,1371,2.583,1372,2.583,1373,2.583,1374,2.583,1375,3.503,1376,4.261,1377,2.583,1378,3.503,1379,4.454,1380,2.583,1381,3.974,1382,2.583,1383,2.583,1512,3.582,1998,4.116]],["title/interfaces/rangeFilter.html",[135,0.173,366,2.126]],["body/interfaces/rangeFilter.html",[0,0.367,3,0.152,4,0.152,5,0.133,8,0.114,19,0.627,25,0.014,26,0.431,27,0.15,30,0.25,38,0.293,48,0.271,52,0.219,53,0.133,58,0.683,59,0.655,60,0.219,61,0.152,62,0.341,80,0.313,87,0.011,88,0.011,91,0.289,92,0.834,101,1.175,103,0.934,109,1.09,124,0.97,126,0.574,131,0.9,133,0.934,134,0.683,135,0.328,174,1.656,346,2.717,347,2.861,348,3.209,351,1.783,352,2.717,353,3.209,354,3.209,355,3.209,356,3.599,357,4.131,358,3.209,359,3.264,360,3.599,361,3.209,362,3.417,363,2.12,364,3.209,365,3.264,366,3.738,367,4.634,368,1.081,369,4.634,850,0.772]],["title/interfaces/reportResponse.html",[135,0.173,1111,2.239]],["body/interfaces/reportResponse.html",[0,0.279,3,0.101,4,0.101,5,0.089,8,0.076,19,0.418,25,0.014,26,0.405,27,0.134,30,0.239,31,1.754,38,0.301,52,0.186,53,0.089,58,0.455,59,0.436,60,0.17,61,0.145,62,0.398,63,0.739,64,0.738,66,0.814,80,0.299,87,0.008,88,0.008,91,0.22,126,0.701,135,0.147,142,3.321,145,1.443,214,3.837,218,1.505,228,1.332,231,1.026,243,3.01,255,1.473,343,4.489,351,1.187,368,0.681,377,2.308,397,3.837,464,1.505,466,1.925,467,2.678,468,1.77,504,2.351,555,2.455,608,3.176,626,1.187,639,4.124,688,0.89,702,2.161,844,3.837,850,0.514,883,3.497,1018,2.328,1093,4.064,1101,4.155,1109,2.308,1111,4.064,1126,2.672,1134,2.963,1136,2.963,1138,2.963,1140,2.963,1141,4.977,1143,4.977,1144,2.963,1145,4.254,1147,2.963,1148,5.44,1150,2.455,1151,5.997,1152,2.963,1153,2.963,1154,2.963,1155,2.963,1156,4.254,1157,2.963,1158,2.963,1159,2.963,1160,2.963,1161,4.254,1162,7.024,1163,4.254,1164,6.436,1165,5.44,1166,4.254,1167,2.963,1168,4.254,1169,6.436,1170,2.963,1171,2.963,1172,4.254,1173,6.791,1174,6.177,1175,4.977,1176,5.195,1177,4.254,1178,4.254,1179,6.177,1180,2.963,1181,2.963,1182,5.195,1183,5.7,1184,5.44,1185,4.977,1186,5.761,1187,5.997,1188,5.997,1189,6.177,1190,2.963,1191,6.32,1192,5.408,1193,2.963,1194,2.963,1195,2.963,1196,5.44,1197,2.963,1198,4.977,1199,2.963,1200,5.44,1201,5.44,1202,5.7,1203,4.977,1204,5.44,1205,2.963,1206,4.977,1207,2.963,1208,2.963,1209,4.254,1210,5.997,1211,4.254,1212,3.923,1213,2.963,1214,5.44,1215,4.254,1216,4.254,1217,4.254,1218,2.963,1219,4.254,1220,4.254,1221,4.254,1222,2.963,1223,2.963,1224,3.704,1225,4.977,1226,4.254,1227,3.837,1228,2.672,1229,2.963,1230,4.254,1231,2.963,1232,2.963,1233,2.963,1234,4.254,1235,4.254,1236,2.963,1237,2.963,1238,2.963,1239,4.254,1240,2.963,1241,2.963,1242,2.963,1243,2.963,1244,4.489,1245,2.963,1246,4.254,1247,4.254,1248,4.254,1249,2.963,1250,2.963,1251,2.963,1252,2.963,1253,2.963,1254,2.963,1255,2.963,1256,2.137,1257,2.963,1258,2.963,1259,2.963,1260,2.963,1261,2.963,1262,2.963,1263,2.672,1264,4.254,1265,2.963,1266,2.963,1267,2.963,1268,2.963,1269,2.137,1270,2.963,1271,2.963,1272,2.963,1273,2.963,1274,2.963,1275,2.963,1276,2.963,1277,2.963,1278,2.963,1279,4.254,1280,2.963,1281,2.963,1282,2.963,1283,2.963,1284,2.963,1285,2.963,1286,2.963,1287,2.963,1288,2.963,1289,2.963,1290,2.963,1291,2.963,1292,2.963,1293,2.963,1999,4.888]],["title/interfaces/roomData.html",[135,0.173,1018,1.628]],["body/interfaces/roomData.html",[0,0.315,3,0.12,4,0.12,5,0.105,8,0.091,19,0.497,25,0.014,26,0.465,27,0.133,28,1.21,30,0.346,34,1.471,38,0.307,48,0.215,52,0.221,53,0.105,58,0.542,59,0.519,60,0.2,61,0.12,62,0.333,63,0.77,64,0.78,66,0.756,80,0.432,87,0.009,88,0.009,91,0.248,92,0.661,96,0.661,101,1.009,103,0.741,109,1.304,124,0.948,126,0.455,127,3.362,128,1.792,130,2.118,131,0.714,133,0.741,134,0.542,135,0.271,144,3.571,151,2.262,161,1.719,162,2.287,163,1.957,165,1.586,169,1.792,173,0.661,174,1.789,177,1.266,178,2.794,198,1.872,218,1.792,363,1.222,377,1.926,449,1.458,497,1.138,699,1.65,800,3.701,801,2.078,850,0.612,1008,4.21,1018,2.557,1070,2.717,1087,2.717,1093,3.516,1095,2.923,1096,5.155,1098,2.923,1100,2.923,1101,3.944,1103,2.923,1104,2.923,1106,2.923,1108,2.923,1109,2.353,1110,3.257,1111,3.091,1112,3.983,1113,2.794,1114,3.701,1115,4.521,1116,3.584,1117,3.584,1118,2.923,1119,2.923,1120,4.53,1121,2.923,1122,2.923,1123,2.923,1124,2.923,1125,2.923]],["title/interfaces/roomData-1.html",[135,0.144,801,1.254,1018,1.357]],["body/interfaces/roomData-1.html",[1,1.38,3,0.07,4,0.07,5,0.061,8,0.053,19,0.289,25,0.014,27,0.044,30,0.224,31,2.016,34,1.095,38,0.17,48,0.125,52,0.21,53,0.061,60,0.136,61,0.07,62,0.429,63,0.699,64,0.88,66,0.759,69,1.579,71,1.394,79,1.956,80,0.475,87,0.006,88,0.006,91,0.167,96,0.747,105,1.178,106,1.422,109,0.399,132,0.792,135,0.224,170,0.755,171,0.871,173,1.023,179,0.871,180,0.806,184,1.864,185,0.841,198,2.114,199,1.791,200,0.922,201,1.158,202,1.875,205,2.708,206,0.763,207,0.792,208,0.763,209,0.792,212,0.792,217,0.959,220,1.252,221,1.394,225,1.138,228,1.449,229,1.394,230,2.074,231,0.71,232,1.969,268,0.959,315,0.736,324,1.875,326,3.379,333,2.025,334,1.138,340,2.191,363,1.117,368,1.057,377,0.822,406,1.479,408,1.342,413,1.968,428,1.969,429,1.192,431,2.317,432,1.479,433,0.959,434,1.342,436,1.252,446,1.742,449,0.702,466,1.078,467,2.565,468,2.711,469,0.922,482,0.792,483,1.088,504,2.06,521,2.326,537,2.317,558,2.562,573,1.969,592,1.252,595,1.319,596,1.319,688,1.475,736,2.483,737,2.506,798,1.394,801,2.254,847,2.326,850,0.356,868,1.969,878,1.319,1018,2.551,1051,2.483,1056,1.479,1057,1.479,1081,1.479,1082,1.479,1083,1.479,1084,1.479,1109,2.09,1110,3.026,1113,4.102,1116,1.252,1117,2.999,1212,4.615,1256,3.258,1269,2.874,1456,2.483,1479,2.483,1558,1.479,1567,1.579,1571,3.258,1645,2.483,1657,1.479,1731,3.479,1737,2.483,1738,2.483,1739,3.302,1740,1.699,1741,3.302,1742,1.699,1743,2.672,1744,4.015,1745,2.672,1746,2.483,1747,2.672,1748,4.015,1749,3.743,1750,2.672,1751,2.672,1752,4.069,1753,1.699,1754,1.699,1755,1.699,1756,2.672,1757,1.699,1758,1.699,1759,2.672,1760,1.699,1761,1.699,1762,1.699,1763,1.699,1764,1.699,1765,1.699,1766,1.699,1767,1.699,1768,1.699,1769,1.699,1770,1.699,1771,1.699,1772,2.672,1773,1.699,1774,1.699,1775,1.699,1776,1.699,1777,1.699,1778,4.069,1779,1.699,1780,2.672,1781,2.672,1782,1.699,1783,2.672,1784,3.302,1785,2.672,1786,1.699,1787,3.302,1788,1.699,1789,1.699,1790,1.699,1791,1.699,1792,2.672,1793,2.672,1794,1.699,1795,1.699,1796,1.699,1797,1.699,1798,3.302,1799,1.699,1800,3.302,1801,4.32,1802,4.069,1803,2.672,1804,1.699,1805,2.672,1806,2.672,1807,2.672,1808,1.699,1809,2.672,1810,1.699,1811,1.699,1812,1.699,1813,1.699,1814,1.699,1815,4.52,1816,1.699,1817,3.743,1818,2.672,1819,1.699,1820,1.699,1821,1.699,1822,1.699,1823,1.699,1824,1.699,1825,1.699,1826,1.699,1827,1.699,1828,1.699,1829,1.699,1830,2.672,1831,3.743,1832,1.699,1833,2.672,1834,2.672,1835,2.672,1836,3.743,1837,1.699,1838,3.302,1839,1.699,1840,1.699,1841,1.699,1842,1.699,1843,1.699,1844,2.672,1845,2.672,1846,2.672,1847,2.672,1848,2.672,1849,1.699,1850,1.699,1851,1.579,1852,1.699,1853,1.699,1854,1.699,1855,1.699,1856,1.699,1857,1.699,1858,1.699,1859,1.699,1860,1.699,1861,2.672,1862,1.699,1863,1.699,1864,1.699,1865,1.699,1866,1.699,1867,3.302,1868,1.699,1869,1.699,1870,2.672,1871,3.302,1872,1.699,1873,1.699,1874,3.302,1875,1.699,1876,1.699,1877,1.699,1878,2.672,1879,2.672,1880,1.699,1881,2.672,1882,2.672,1883,1.699,1884,1.699,1885,1.699,1886,1.699,1887,1.699,1888,2.672,1889,3.302,1890,1.699,1891,1.699,1892,1.699,1893,2.672,1894,2.672,1895,1.699,1896,1.699,1897,1.699,1898,1.699,1899,2.672,1900,1.699,1901,1.699,1902,1.699,1903,1.699,1904,3.743,1905,3.302,1906,1.699,1907,1.699,1908,1.699,1909,1.699,1910,1.699,1911,1.699,1912,2.483,1913,4.32,1914,2.672,1915,2.672,1916,2.672,1917,2.672,1918,2.672,1919,2.483,1920,2.672,1921,2.672,1922,2.672,1923,2.672,1924,2.672,1925,2.672,1926,1.699,1927,3.302,1928,1.699,1929,1.699,1930,2.672,1931,2.672,1932,1.699,1933,1.699,1934,1.579,1935,3.302,1936,1.699,1937,1.579,1938,1.579,1939,3.479,1940,1.699,1941,2.672,1942,1.579,1943,1.699,1944,1.699,1945,1.579,1946,1.699,1947,1.699,1948,2.672,1949,1.699,1950,2.672,1951,1.699,1952,1.699,1953,1.699,1954,1.699,1955,1.699,1956,2.672,1957,2.672,1958,3.302,1959,3.302,1960,1.699,1961,2.672,1962,2.672,1963,3.302,1964,3.743,1965,1.699,1966,1.699,1967,1.699,1968,1.699,1969,1.699,1970,1.699,1971,2.672,1972,1.699,1973,1.699,1974,1.699,1975,1.699,1976,1.699,1977,1.699,1978,1.699,1979,1.699,1980,1.699,1981,1.699,1982,1.699,1983,2.672,1984,1.699,1985,1.699,1986,1.699,1987,1.699,1988,3.302,1989,1.699,1990,1.699,1991,1.699,1992,1.699,1993,1.699,1994,1.699]],["title/interfaces/roomSpanSettings.html",[135,0.173,1556,3.14]],["body/interfaces/roomSpanSettings.html",[1,1.328,3,0.066,4,0.066,5,0.058,8,0.099,19,0.272,25,0.014,26,0.375,27,0.103,30,0.173,31,1.409,38,0.164,48,0.118,52,0.199,53,0.058,60,0.066,61,0.066,62,0.421,63,0.568,64,0.855,66,0.681,71,2.97,79,2.28,80,0.471,87,0.006,88,0.006,91,0.159,96,0.362,105,1.326,106,1.572,132,0.746,135,0.096,170,1.191,173,0.362,185,0.803,199,0.869,200,1.965,205,2.605,206,0.72,207,0.746,208,0.72,209,0.746,212,0.746,220,1.18,225,1.073,229,1.314,243,1.439,268,1.793,271,1.026,315,0.694,316,1.632,318,1.073,324,1.789,326,3.711,329,3.078,330,1.933,333,1.948,334,1.073,336,1.744,340,1.314,345,5.083,346,2.341,352,1.879,368,1.085,408,1.28,413,2.558,433,0.904,434,1.28,446,2.321,449,0.421,467,2.68,468,2.68,469,2.627,474,2.775,476,1.602,482,0.746,483,1.026,504,0.669,573,1.879,576,1.789,592,1.18,595,1.243,596,1.979,608,2.377,620,2.37,637,3.153,801,2.784,827,1.744,850,0.335,868,3.103,878,2.465,883,1.243,977,1.744,980,2.55,1018,2.044,1028,2.775,1029,2.775,1030,3.942,1032,1.744,1033,1.489,1037,3.078,1041,1.933,1081,2.22,1082,1.394,1083,1.394,1084,2.22,1085,1.933,1109,1.233,1110,1.707,1113,2.229,1114,1.489,1115,3.366,1116,1.879,1117,1.879,1176,4.584,1182,2.775,1183,1.744,1192,2.775,1202,2.775,1227,3.942,1228,2.775,1244,1.744,1485,1.933,1553,1.933,1556,3.942,1655,1.933,1657,1.394,1737,3.366,1738,3.366,1744,3.914,1746,2.37,1748,3.914,1851,1.489,1912,3.914,1919,2.37,1934,2.37,1937,1.489,1938,1.489,1939,3.366,1942,3.366,1945,1.489,2000,5.023,2001,5.023,2002,5.023,2003,5.023,2004,5.484,2005,3.536,2006,3.536,2007,2.221,2008,2.221,2009,2.221,2010,2.221,2011,2.221,2012,2.221,2013,6.359,2014,6.359,2015,2.221,2016,2.221,2017,2.221,2018,2.221,2019,2.221,2020,2.221,2021,2.221,2022,2.221,2023,3.536,2024,2.221,2025,2.221,2026,2.221,2027,2.221,2028,2.221,2029,2.221,2030,2.221,2031,2.221,2032,2.221,2033,2.221,2034,2.221,2035,2.221,2036,2.221,2037,2.221,2038,4.405,2039,2.221,2040,2.221,2041,2.221,2042,2.221,2043,2.221,2044,3.536,2045,2.221,2046,2.221,2047,2.221,2048,2.221,2049,5.023,2050,5.841,2051,4.405,2052,2.221,2053,2.221,2054,2.221,2055,4.405,2056,2.221,2057,2.221,2058,3.536,2059,2.221,2060,2.221,2061,2.221,2062,2.221,2063,2.221,2064,2.221,2065,4.405,2066,2.221,2067,2.221,2068,2.221,2069,2.221,2070,2.221,2071,2.221,2072,2.221,2073,3.536,2074,2.221,2075,2.221,2076,2.221,2077,2.221,2078,6.126,2079,5.841,2080,5.484,2081,5.841,2082,2.221,2083,2.221,2084,2.221,2085,3.536,2086,4.405,2087,2.221,2088,7.655,2089,2.221,2090,2.221,2091,3.536,2092,2.221,2093,2.221,2094,2.221,2095,4.405,2096,2.221,2097,2.221,2098,4.405,2099,2.221,2100,4.405,2101,2.221,2102,4.405,2103,2.221,2104,4.405,2105,2.221,2106,2.221,2107,4.405,2108,2.221,2109,5.023,2110,5.023,2111,4.405,2112,5.841,2113,6.126,2114,2.221,2115,2.221,2116,5.841,2117,2.221,2118,3.536,2119,3.536,2120,2.221,2121,2.221,2122,6.716,2123,2.221,2124,2.221,2125,2.221,2126,2.221,2127,2.221,2128,5.023,2129,5.023,2130,6.126,2131,2.221,2132,2.221,2133,2.221,2134,2.221,2135,2.221,2136,5.023,2137,3.536,2138,4.405,2139,5.023,2140,4.405,2141,5.484,2142,2.221,2143,6.126,2144,2.221,2145,4.405,2146,2.221,2147,2.221,2148,2.221,2149,3.536,2150,2.221,2151,2.221,2152,2.221,2153,3.536,2154,2.221,2155,2.221,2156,2.221,2157,2.221,2158,2.221,2159,2.221,2160,2.221,2161,2.221,2162,2.221,2163,2.221,2164,2.221,2165,2.221,2166,2.221,2167,2.221,2168,3.536,2169,4.405,2170,2.221,2171,2.221,2172,2.221,2173,2.221,2174,2.221,2175,2.221,2176,2.221,2177,2.221,2178,2.221,2179,2.221,2180,2.221,2181,5.484,2182,2.221,2183,2.221,2184,2.221,2185,3.536,2186,2.221,2187,2.221,2188,3.536,2189,2.221,2190,3.536,2191,2.221,2192,2.221,2193,3.536,2194,2.221,2195,2.221,2196,2.221,2197,5.023,2198,2.221,2199,2.221,2200,2.221,2201,2.221,2202,2.221,2203,2.221,2204,4.405,2205,3.536,2206,5.023,2207,4.405,2208,2.221,2209,2.221,2210,3.536,2211,2.221,2212,2.221,2213,2.221,2214,2.221,2215,3.536,2216,2.221,2217,2.221,2218,2.221,2219,2.221,2220,2.221,2221,2.221,2222,2.221,2223,2.221,2224,2.221,2225,2.221,2226,2.221,2227,2.221,2228,3.536,2229,4.405,2230,4.405,2231,3.536,2232,2.221,2233,3.536,2234,2.221,2235,2.221,2236,4.405,2237,2.221,2238,3.536,2239,6.126,2240,2.221,2241,2.221,2242,4.405,2243,2.221,2244,3.536,2245,3.536,2246,2.221,2247,2.221,2248,2.221,2249,2.221,2250,2.221,2251,5.841,2252,5.841,2253,2.221,2254,3.536,2255,3.536,2256,2.221,2257,4.405,2258,2.221,2259,2.221,2260,2.221,2261,2.221,2262,4.405,2263,4.405,2264,4.405,2265,4.405,2266,2.221]],["title/interfaces/selectFilter.html",[135,0.173,362,2.126]],["body/interfaces/selectFilter.html",[0,0.369,3,0.153,4,0.153,5,0.134,8,0.115,19,0.632,25,0.014,26,0.432,27,0.149,30,0.252,38,0.294,48,0.273,52,0.22,53,0.134,58,0.688,59,0.66,60,0.22,61,0.153,62,0.342,80,0.316,87,0.011,88,0.011,91,0.291,92,0.841,101,1.181,103,0.941,109,1.095,124,0.975,126,0.578,131,0.907,133,0.941,134,0.688,135,0.329,174,1.669,346,2.738,347,2.883,348,3.234,351,1.797,352,2.738,353,3.234,354,3.234,355,3.234,356,3.616,357,4.142,358,3.234,359,3.371,360,4.142,361,3.234,362,3.751,363,2.128,364,4.647,365,3.121,366,3.434,367,3.234,368,0.9,369,3.234,850,0.778]],["title/interfaces/shopData.html",[135,0.173,702,1.769]],["body/interfaces/shopData.html",[0,0.339,3,0.108,4,0.108,5,0.095,8,0.082,25,0.014,26,0.223,27,0.097,30,0.315,34,1.47,38,0.298,48,0.272,52,0.202,53,0.095,58,0.487,59,0.466,60,0.22,61,0.152,62,0.193,63,0.74,64,0.636,66,0.727,80,0.395,87,0.008,88,0.008,91,0.231,92,0.594,96,0.594,101,0.937,103,0.937,105,0.827,109,1.305,124,0.896,126,0.864,130,1.726,131,0.641,133,1.241,134,0.487,135,0.344,151,2.185,162,1.661,165,1.515,170,1.436,171,0.856,173,0.594,177,1.854,179,0.856,180,0.903,182,1.482,183,1.545,201,1.602,231,1.098,351,1.27,363,1.942,368,0.981,372,1.61,446,1.491,449,1.335,463,2.233,464,1.61,465,2.849,466,1.059,467,1.319,468,1.319,469,1.425,481,2.879,484,1.929,485,1.37,486,1.61,497,1.439,499,1.758,502,1.681,528,2.624,529,1.544,530,1.544,531,1.758,608,2.416,626,2.247,669,1.758,681,1.37,683,1.758,684,1.935,685,1.935,687,1.935,688,1.964,697,3.154,698,1.935,699,1.482,700,2.174,701,1.843,702,2.849,703,2.74,704,2.866,705,2.866,706,1.482,707,3.402,708,2.476,709,1.482,710,1.935,711,1.935,712,1.935,713,3.154,714,2.725,715,1.935,716,1.935,717,1.935,718,1.935,719,2.725,720,1.935,721,1.935,722,1.935,723,1.843,724,1.935,725,2.476,726,1.935,727,1.843,850,0.55]],["title/miscellaneous/typealiases.html",[1715,2.093,2267,4.815]],["body/miscellaneous/typealiases.html",[8,0.137,25,0.014,27,0.115,40,3.168,41,2.821,50,3.168,87,0.012,88,0.012,90,3.247,116,4.01,136,2.701,146,3.46,147,3.247,180,1.075,252,2.487,282,4.095,291,4.802,299,3.835,300,3.835,347,3.419,356,4.01,359,2.701,362,3.247,365,2.701,366,3.247,385,3.835,438,3.835,740,4.498,851,4.095,862,4.802,863,4.406,1715,3.835,1718,6.619,2268,6.111,2269,6.111,2270,6.111,2271,7.167]],["title/miscellaneous/variables.html",[1715,2.093,2272,4.191]],["body/miscellaneous/variables.html",[8,0.132,25,0.014,27,0.141,38,0.22,87,0.012,88,0.012,106,1.296,122,2.512,123,1.959,124,1.061,126,0.842,193,6.119,699,3.054,757,4.266,1150,5.41,1519,5.149,1521,6.53,1523,6.53,1524,5.149,1525,6.119,1585,5.149,1586,6.119,1594,5.149,1715,3.713,1721,6.119,2272,5.149,2273,5.916,2274,5.916,2275,7.031,2276,7.031,2277,5.916,2278,5.916,2279,5.916,2280,5.916,2281,5.916,2282,5.916,2283,5.916,2284,5.916,2285,5.916,2286,5.916,2287,5.916,2288,5.916,2289,5.916]]],"invertedIndex":[["",{"_index":25,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"dependencies.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"miscellaneous/functions.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"index.html":{},"interfaces/modelInterface.html":{},"modules.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"properties.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":504,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/PlanHousePageComponent.html":{},"injectables/ReportService.html":{},"injectables/ShopService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"coverage.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureShopData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["0)this.notification.setsuccess",{"_index":545,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["0.0.0",{"_index":1997,"title":{},"body":{"properties.html":{}}}],["0.05",{"_index":1936,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["0.1",{"_index":1818,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["0.10.3",{"_index":1632,"title":{},"body":{"dependencies.html":{}}}],["0.15",{"_index":1857,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["0.15.0",{"_index":1653,"title":{},"body":{"dependencies.html":{}}}],["0.176.0",{"_index":1646,"title":{},"body":{"dependencies.html":{}}}],["0.2",{"_index":1218,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["0.3",{"_index":1258,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["0.3s",{"_index":1220,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["0.6",{"_index":384,"title":{},"body":{"injectables/ClientImageControlService.html":{}}}],["0.8.0",{"_index":1626,"title":{},"body":{"dependencies.html":{}}}],["0.8rem",{"_index":1249,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["0/1",{"_index":1522,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1603,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1518,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1598,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1604,"title":{},"body":{"coverage.html":{}}}],["0deg",{"_index":2234,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["0x000000",{"_index":1822,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["1",{"_index":801,"title":{"interfaces/roomData-1.html":{}},"body":{"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"index.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["1).join",{"_index":1083,"title":{},"body":{"components/PlanHousePageComponent.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["1).tostring",{"_index":1499,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["1.2.1",{"_index":1628,"title":{},"body":{"dependencies.html":{}}}],["1.234.567",{"_index":400,"title":{},"body":{"pipes/CostFormatPipe.html":{}}}],["1.2rem",{"_index":1233,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["1.3rem",{"_index":1222,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["1.4.1",{"_index":1630,"title":{},"body":{"dependencies.html":{}}}],["1.5",{"_index":1763,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["1.5rem",{"_index":1199,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["1.6",{"_index":1181,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["1/1",{"_index":1559,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":1537,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":71,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/FinderService.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["10/10",{"_index":1541,"title":{},"body":{"coverage.html":{}}}],["10/14",{"_index":1579,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":883,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"injectables/ReportService.html":{},"interfaces/UploadEntry.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"coverage.html":{},"interfaces/reportResponse.html":{},"interfaces/roomSpanSettings.html":{}}}],["1000",{"_index":1819,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["10px",{"_index":1225,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["11",{"_index":2168,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["115px",{"_index":1502,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["1250",{"_index":1505,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["13/14",{"_index":1547,"title":{},"body":{"coverage.html":{}}}],["135deg",{"_index":2231,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["14",{"_index":1735,"title":{},"body":{"index.html":{}}}],["15/16",{"_index":1539,"title":{},"body":{"coverage.html":{}}}],["15px",{"_index":1201,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["16",{"_index":1734,"title":{},"body":{"index.html":{}}}],["16.0.0",{"_index":1638,"title":{},"body":{"dependencies.html":{}}}],["16/17",{"_index":1529,"title":{},"body":{"coverage.html":{}}}],["16/19",{"_index":1535,"title":{},"body":{"coverage.html":{}}}],["16px",{"_index":1216,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["18",{"_index":1416,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["19.0.0",{"_index":1641,"title":{},"body":{"dependencies.html":{}}}],["19.1.2",{"_index":1639,"title":{},"body":{"dependencies.html":{}}}],["19.2.9",{"_index":1612,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":1113,"title":{},"body":{"injectables/ProjectService.html":{},"components/UploadOverlayComponent.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["2/2",{"_index":1573,"title":{},"body":{"coverage.html":{}}}],["2/3",{"_index":1584,"title":{},"body":{"coverage.html":{}}}],["2/4",{"_index":1593,"title":{},"body":{"coverage.html":{}}}],["2025",{"_index":848,"title":{},"body":{"components/MainPageComponent.html":{}}}],["20px",{"_index":1210,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["21/23",{"_index":1552,"title":{},"body":{"coverage.html":{}}}],["24.8.2",{"_index":1643,"title":{},"body":{"dependencies.html":{}}}],["25",{"_index":1536,"title":{},"body":{"coverage.html":{}}}],["250",{"_index":330,"title":{},"body":{"directives/AutoHeightDirective.html":{},"interfaces/roomSpanSettings.html":{}}}],["2500",{"_index":540,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"interfaces/clientProportions.html":{}}}],["250px",{"_index":1248,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["25px",{"_index":1213,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["26/27",{"_index":1545,"title":{},"body":{"coverage.html":{}}}],["2px",{"_index":1196,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["2rem",{"_index":1209,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["3",{"_index":800,"title":{},"body":{"components/ImageSliderComponent.html":{},"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["3.0.1",{"_index":1636,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":1531,"title":{},"body":{"coverage.html":{}}}],["300",{"_index":657,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["30px",{"_index":1200,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["32/74",{"_index":1555,"title":{},"body":{"coverage.html":{}}}],["344e41",{"_index":1264,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["350",{"_index":2186,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["36/37",{"_index":1533,"title":{},"body":{"coverage.html":{}}}],["38/40",{"_index":1577,"title":{},"body":{"coverage.html":{}}}],["39/50",{"_index":1569,"title":{},"body":{"coverage.html":{}}}],["3d",{"_index":443,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureModelControlService.html":{},"interfaces/clientProportions.html":{},"miscellaneous/functions.html":{}}}],["3px",{"_index":2258,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["3rem",{"_index":1190,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["4",{"_index":1114,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{},"interfaces/roomSpanSettings.html":{}}}],["4.0.2",{"_index":1622,"title":{},"body":{"dependencies.html":{}}}],["4.17.21",{"_index":1637,"title":{},"body":{"dependencies.html":{}}}],["4.3.3",{"_index":1627,"title":{},"body":{"dependencies.html":{}}}],["4.36.0",{"_index":1618,"title":{},"body":{"dependencies.html":{}}}],["4.37.0",{"_index":1623,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":1570,"title":{},"body":{"coverage.html":{}}}],["4/6",{"_index":1583,"title":{},"body":{"coverage.html":{}}}],["4/9",{"_index":1581,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":639,"title":{},"body":{"components/FinderComponent.html":{},"injectables/ReportService.html":{},"interfaces/foundFurniture.html":{},"interfaces/reportResponse.html":{}}}],["40px",{"_index":1175,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["41",{"_index":1736,"title":{},"body":{"index.html":{}}}],["43",{"_index":1554,"title":{},"body":{"coverage.html":{}}}],["44",{"_index":1580,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":1784,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["5/5",{"_index":1572,"title":{},"body":{"coverage.html":{}}}],["5/6",{"_index":1602,"title":{},"body":{"coverage.html":{}}}],["5/7",{"_index":1592,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":882,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"coverage.html":{}}}],["500",{"_index":1503,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["5000",{"_index":537,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["500px",{"_index":1255,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["6/6",{"_index":1540,"title":{},"body":{"coverage.html":{}}}],["6/7",{"_index":1550,"title":{},"body":{"coverage.html":{}}}],["66",{"_index":1582,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":69,"title":{},"body":{"injectables/AccountCookieService.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["7.3.0",{"_index":1649,"title":{},"body":{"dependencies.html":{}}}],["7.8.2",{"_index":1644,"title":{},"body":{"dependencies.html":{}}}],["7/10",{"_index":1600,"title":{},"body":{"coverage.html":{}}}],["7/7",{"_index":1548,"title":{},"body":{"coverage.html":{}}}],["7/8",{"_index":1597,"title":{},"body":{"coverage.html":{}}}],["7/9",{"_index":1590,"title":{},"body":{"coverage.html":{}}}],["70",{"_index":1599,"title":{},"body":{"coverage.html":{}}}],["71",{"_index":1578,"title":{},"body":{"coverage.html":{}}}],["768",{"_index":2246,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["768px",{"_index":1266,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["77",{"_index":1589,"title":{},"body":{"coverage.html":{}}}],["78",{"_index":1568,"title":{},"body":{"coverage.html":{}}}],["8.0.3",{"_index":1634,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":1595,"title":{},"body":{"coverage.html":{}}}],["81",{"_index":1587,"title":{},"body":{"coverage.html":{}}}],["83",{"_index":1601,"title":{},"body":{"coverage.html":{}}}],["84",{"_index":1534,"title":{},"body":{"coverage.html":{}}}],["85",{"_index":1549,"title":{},"body":{"coverage.html":{}}}],["87",{"_index":1596,"title":{},"body":{"coverage.html":{}}}],["8px",{"_index":1204,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["9/11",{"_index":1588,"title":{},"body":{"coverage.html":{}}}],["90",{"_index":1269,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData-1.html":{}}}],["91",{"_index":1551,"title":{},"body":{"coverage.html":{}}}],["92",{"_index":1546,"title":{},"body":{"coverage.html":{}}}],["93",{"_index":1538,"title":{},"body":{"coverage.html":{}}}],["94",{"_index":1528,"title":{},"body":{"coverage.html":{}}}],["95",{"_index":1576,"title":{},"body":{"coverage.html":{}}}],["96",{"_index":1544,"title":{},"body":{"coverage.html":{}}}],["97",{"_index":1532,"title":{},"body":{"coverage.html":{}}}],["_blank",{"_index":1285,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["_id",{"_index":144,"title":{},"body":{"injectables/AccountService.html":{},"injectables/ProjectService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["a3b18a",{"_index":1192,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{},"interfaces/roomSpanSettings.html":{}}}],["a:hover",{"_index":1253,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["abortconroller",{"_index":1770,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["abortcontroller",{"_index":737,"title":{},"body":{"injectables/FurnitureModelControlService.html":{},"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"interfaces/roomData-1.html":{}}}],["aborterror",{"_index":1374,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["abortloadroom",{"_index":1966,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["abstractcontrol",{"_index":1655,"title":{},"body":{"interfaces/editForm.html":{},"interfaces/roomSpanSettings.html":{}}}],["account",{"_index":125,"title":{},"body":{"injectables/AccountService.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/UploadEntry.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"miscellaneous/functions.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/googleAuthData.html":{}}}],["account.accounttype",{"_index":150,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["account.service",{"_index":57,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AuthService.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{}}}],["account/code",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{}}}],["account_data",{"_index":1681,"title":{},"body":{"interfaces/editForm.html":{}}}],["account_data.email",{"_index":1682,"title":{},"body":{"interfaces/editForm.html":{}}}],["account_data.furnitures",{"_index":1686,"title":{},"body":{"interfaces/editForm.html":{}}}],["account_data.nickname",{"_index":1683,"title":{},"body":{"interfaces/editForm.html":{}}}],["account_data.password",{"_index":1687,"title":{},"body":{"interfaces/editForm.html":{}}}],["account_data.projects",{"_index":1684,"title":{},"body":{"interfaces/editForm.html":{}}}],["account_type",{"_index":1670,"title":{},"body":{"interfaces/editForm.html":{}}}],["accountcookieservice",{"_index":1,"title":{"injectables/AccountCookieService.html":{}},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientProportions.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["accountdata",{"_index":172,"title":{},"body":{"injectables/AccountService.html":{},"components/PlanHousePageComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/furnitureAccountData.html":{}}}],["accountdata.furnitures",{"_index":175,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["accountdata.furnitures.map(furnituredata",{"_index":176,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["accountfulldata",{"_index":138,"title":{"interfaces/accountFullData.html":{}},"body":{"injectables/AccountService.html":{},"components/PlanHousePageComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/furnitureAccountData.html":{}}}],["accountpagecomponent",{"_index":248,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"coverage.html":{},"interfaces/editForm.html":{}}}],["accountservice",{"_index":89,"title":{"injectables/AccountService.html":{}},"body":{"injectables/AccountService.html":{},"components/AppComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/furnitureAccountData.html":{}}}],["accounttype",{"_index":50,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"injectables/AuthService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/googleAuthData.html":{},"miscellaneous/typealiases.html":{}}}],["action",{"_index":549,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["activatedroute",{"_index":428,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/foundFurniture.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["actual_component",{"_index":281,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["addfile",{"_index":1440,"title":{},"body":{"injectables/UploadService.html":{}}}],["addfile(file",{"_index":885,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["additionaldata",{"_index":465,"title":{"interfaces/additionalData.html":{}},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["addmodel(furniturecardid",{"_index":1808,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["addmodule",{"_index":981,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["addroom",{"_index":2208,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["aftercolors",{"_index":1493,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["afterviewchecked",{"_index":979,"title":{},"body":{"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{}}}],["afterviewinit",{"_index":573,"title":{},"body":{"components/FinderComponent.html":{},"components/MainPageComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/foundFurniture.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["alias",{"_index":1591,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":2268,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["align",{"_index":1187,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["all'}/${idfurniture",{"_index":660,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["alpha",{"_index":1826,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["angular",{"_index":2287,"title":{},"body":{"miscellaneous/variables.html":{}}}],["angular/animations",{"_index":1611,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":482,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"dependencies.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["angular/common/http",{"_index":131,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/roomData.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["angular/core",{"_index":53,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"dependencies.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["angular/forms",{"_index":1033,"title":{},"body":{"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"dependencies.html":{},"interfaces/editForm.html":{},"interfaces/roomSpanSettings.html":{}}}],["angular/platform",{"_index":1613,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":217,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"dependencies.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["angular/service",{"_index":1615,"title":{},"body":{"dependencies.html":{}}}],["animate",{"_index":1837,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["animationframeid",{"_index":1761,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["antialias",{"_index":1825,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["any).id",{"_index":1876,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["api",{"_index":699,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"injectables/ProjectService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{},"interfaces/shopData.html":{},"miscellaneous/variables.html":{}}}],["app",{"_index":207,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["app.component.html",{"_index":213,"title":{},"body":{"components/AppComponent.html":{}}}],["appautoheight",{"_index":280,"title":{},"body":{"components/AppComponent.html":{},"directives/AutoHeightDirective.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["appcomponent",{"_index":186,"title":{"components/AppComponent.html":{}},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"coverage.html":{}}}],["appconfig",{"_index":1525,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["applicationconfig",{"_index":2276,"title":{},"body":{"miscellaneous/variables.html":{}}}],["area",{"_index":2014,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["arguments",{"_index":794,"title":{},"body":{"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{}}}],["array(grid_size).fill(false",{"_index":2076,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["array.from",{"_index":2075,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["arrowdown",{"_index":2165,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["arrowleft",{"_index":2167,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["arrowright",{"_index":2166,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["arrowup",{"_index":2164,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["async",{"_index":96,"title":{},"body":{"injectables/AccountService.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FurnitureCardControlService.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/shopData.html":{}}}],["asyncpipe",{"_index":1422,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["auth",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{}}}],["authdata",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{},"miscellaneous/typealiases.html":{}}}],["authdata.accounttype",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{}}}],["authdata.email",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{}}}],["authdata.password",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{}}}],["authorid",{"_index":1118,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["authormatched",{"_index":714,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["authservice",{"_index":196,"title":{"injectables/AuthService.html":{}},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"coverage.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{}}}],["auto",{"_index":343,"title":{},"body":{"directives/AutoHeightDirective.html":{},"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["autoheightdirective",{"_index":194,"title":{"directives/AutoHeightDirective.html":{}},"body":{"components/AppComponent.html":{},"directives/AutoHeightDirective.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"coverage.html":{}}}],["autoproceed",{"_index":871,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["avatarurl",{"_index":139,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/furnitureAccountData.html":{}}}],["await",{"_index":173,"title":{},"body":{"injectables/AccountService.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FurnitureCardControlService.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/shopData.html":{}}}],["background",{"_index":1176,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{},"interfaces/roomSpanSettings.html":{}}}],["baseclienturl",{"_index":1150,"title":{},"body":{"injectables/ReportService.html":{},"coverage.html":{},"interfaces/reportResponse.html":{},"miscellaneous/variables.html":{}}}],["basefilter",{"_index":357,"title":{"interfaces/baseFilter.html":{}},"body":{"injectables/CategoryService.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"coverage.html":{},"interfaces/option.html":{},"interfaces/rangeFilter.html":{},"interfaces/selectFilter.html":{}}}],["baseserviceurl",{"_index":92,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interfaces/MyXhrUploadOptions.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/roomData.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["baseurl",{"_index":124,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interfaces/MyXhrUploadOptions.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/roomData.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{},"miscellaneous/variables.html":{}}}],["baseurl}account/avatar?jwt=${jwt",{"_index":1318,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["beforecolors",{"_index":1492,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["behaviorsubject",{"_index":679,"title":{},"body":{"injectables/FinderService.html":{},"interfaces/MyXhrUploadOptions.html":{},"injectables/NotificationService.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["black",{"_index":1177,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["blob",{"_index":377,"title":{},"body":{"injectables/ClientImageControlService.html":{},"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureModelControlService.html":{},"components/ImageSliderComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"interfaces/clientProportions.html":{},"miscellaneous/functions.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{}}}],["blob([htmlcontent",{"_index":1281,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["bloburl",{"_index":509,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["block",{"_index":1211,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["body",{"_index":1172,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["boolean",{"_index":105,"title":{},"body":{"injectables/AccountService.html":{},"directives/AutoHeightDirective.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FurnitureCardControlService.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/shopData.html":{}}}],["bootstrap",{"_index":1586,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["bootstrapapplication(appcomponent",{"_index":2288,"title":{},"body":{"miscellaneous/variables.html":{}}}],["border",{"_index":1202,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{},"interfaces/roomSpanSettings.html":{}}}],["bottom",{"_index":1191,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["box",{"_index":1214,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["break",{"_index":1942,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["browser",{"_index":1614,"title":{},"body":{"dependencies.html":{}}}],["calculategridarea(objectx",{"_index":2087,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["calculatemoveobjectdata(objectsavedata",{"_index":1884,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["calculateobjectsavedata(object",{"_index":1869,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["calculatepercentage",{"_index":1392,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["calculatepercentage(percentage",{"_index":1400,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["callsaveemitter",{"_index":2036,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["calypso",{"_index":1165,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["camera",{"_index":1757,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["camera_frustum_bounds",{"_index":1891,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["cancelupload",{"_index":1393,"title":{},"body":{"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{}}}],["cancelupload(fileid",{"_index":893,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["cancelupload(id",{"_index":1403,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["canvas_container",{"_index":1827,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["canvas_container.appendchild(this.renderer.domelement",{"_index":1832,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["canvasratioofwindow",{"_index":1762,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["card",{"_index":231,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"interfaces/MyXhrUploadOptions.html":{},"injectables/ReportService.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/additionalData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData-1.html":{},"interfaces/shopData.html":{}}}],["card.cost",{"_index":662,"title":{},"body":{"components/FinderComponent.html":{}}}],["card.name",{"_index":661,"title":{},"body":{"components/FinderComponent.html":{}}}],["case",{"_index":1939,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["catch",{"_index":179,"title":{},"body":{"injectables/AccountService.html":{},"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ShopService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"interfaces/roomData-1.html":{},"interfaces/shopData.html":{}}}],["catcherror",{"_index":774,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{}}}],["catcherror((error",{"_index":777,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{}}}],["category",{"_index":351,"title":{},"body":{"injectables/CategoryService.html":{},"components/FinderComponent.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/ReportService.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/option.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["categoryarray",{"_index":2026,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["categorydata",{"_index":352,"title":{"interfaces/categoryData.html":{}},"body":{"injectables/CategoryService.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"coverage.html":{},"interfaces/option.html":{},"interfaces/rangeFilter.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{}}}],["categoryname",{"_index":1343,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["categoryservice",{"_index":346,"title":{"injectables/CategoryService.html":{}},"body":{"injectables/CategoryService.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"coverage.html":{},"interfaces/option.html":{},"interfaces/rangeFilter.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{}}}],["cdr",{"_index":2012,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["center",{"_index":1188,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["change_data",{"_index":1664,"title":{},"body":{"interfaces/editForm.html":{}}}],["changeaccountdata",{"_index":146,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/googleAuthData.html":{},"miscellaneous/typealiases.html":{}}}],["changeaccountdataemail",{"_index":136,"title":{"interfaces/changeAccountDataEmail.html":{}},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"miscellaneous/functions.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/googleAuthData.html":{},"miscellaneous/typealiases.html":{}}}],["changedata",{"_index":121,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/googleAuthData.html":{}}}],["changedata.accounttype",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{}}}],["changedata.jwt",{"_index":168,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/googleAuthData.html":{}}}],["changedata.nickname",{"_index":167,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["changedata.password",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{}}}],["changedetectionstrategy",{"_index":1423,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["changedetectorref",{"_index":474,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/roomSpanSettings.html":{}}}],["changeimagescounter",{"_index":541,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["changemainimage",{"_index":786,"title":{},"body":{"components/ImageSliderComponent.html":{}}}],["changemainimage(index",{"_index":796,"title":{},"body":{"components/ImageSliderComponent.html":{}}}],["changemodeslider",{"_index":789,"title":{},"body":{"components/ImageSliderComponent.html":{}}}],["changes['roomdata'].currentvalue",{"_index":1779,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["changes['roomdata'].previousvalue",{"_index":1781,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["changesecondarydata",{"_index":119,"title":{"interfaces/changeSecondaryData.html":{}},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["checkauthandloaddata",{"_index":1696,"title":{},"body":{"interfaces/editForm.html":{}}}],["checkdesktop",{"_index":580,"title":{},"body":{"components/FinderComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"coverage.html":{},"interfaces/foundFurniture.html":{},"miscellaneous/functions.html":{}}}],["checkguideinclude",{"_index":2066,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["checkjwt",{"_index":93,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["checkshoppage",{"_index":585,"title":{},"body":{"components/FinderComponent.html":{}}}],["checkshoppage(name",{"_index":599,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["checkvalid",{"_index":416,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["checkvalid(typerequest",{"_index":437,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["checkviewport",{"_index":787,"title":{},"body":{"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{}}}],["child.setattribute('tabindex",{"_index":842,"title":{},"body":{"components/MainPageComponent.html":{}}}],["child.style.pointerevents",{"_index":843,"title":{},"body":{"components/MainPageComponent.html":{}}}],["circumference",{"_index":1389,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["class",{"_index":61,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["clearfurniturecard",{"_index":417,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["clearinput",{"_index":586,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["clearnotification",{"_index":957,"title":{},"body":{"injectables/NotificationService.html":{}}}],["clearroom",{"_index":1901,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["cleartimeout(this.clicktimer",{"_index":2146,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["cleartimeout(this.debouncetimer",{"_index":652,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["clickroom(event",{"_index":2180,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["clicktimer",{"_index":2019,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["clientfilters",{"_index":1337,"title":{"interfaces/clientFilters.html":{}},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"coverage.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["clientimagecontrolservice",{"_index":370,"title":{"injectables/ClientImageControlService.html":{}},"body":{"injectables/ClientImageControlService.html":{},"coverage.html":{},"interfaces/editForm.html":{}}}],["clientproportions",{"_index":487,"title":{"interfaces/clientProportions.html":{}},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{},"coverage.html":{}}}],["clientx",{"_index":2106,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["clienty",{"_index":2107,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["clipboard",{"_index":1480,"title":{},"body":{"components/ViewFurnitureComponent.html":{},"dependencies.html":{}}}],["clipboardservice",{"_index":1464,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["closeaddmodule",{"_index":986,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["closeeditform",{"_index":1708,"title":{},"body":{"interfaces/editForm.html":{}}}],["closefoundresultslist",{"_index":587,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["closeguide",{"_index":2187,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["closeloader",{"_index":1900,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["closeproject",{"_index":987,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["closescene",{"_index":2201,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["closeviewroom",{"_index":2235,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["coeff_proportions",{"_index":2257,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["color",{"_index":608,"title":{},"body":{"components/FinderComponent.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/reportResponse.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/shopData.html":{}}}],["color:white",{"_index":1262,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["color_button_element",{"_index":1484,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["color_button_element.getattribute('data",{"_index":1489,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["color_button_element.style.setproperty('margin",{"_index":1500,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["colorbutton",{"_index":1475,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["colorclientdata",{"_index":704,"title":{"interfaces/colorClientData.html":{}},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["colordata",{"_index":525,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["colordata.color",{"_index":721,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["colordata.imagesdata.idmainimage",{"_index":531,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["colordata.imagesdata.images.length",{"_index":542,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["colordata.imagesdata.images.map(url",{"_index":722,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["colorfromserverdata",{"_index":705,"title":{"interfaces/colorFromServerData.html":{}},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["colorrequest",{"_index":627,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["colors",{"_index":463,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/ShopService.html":{},"interfaces/additionalData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"interfaces/shopData.html":{}}}],["colors.length",{"_index":550,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["colors_element",{"_index":1486,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["colors_element.queryselectorall('.colorvariant",{"_index":1491,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["colors_variants",{"_index":1490,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["colors_variants.foreach((colorvariant",{"_index":1494,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["colorvariant",{"_index":1496,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["column",{"_index":1185,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["commonmodule",{"_index":1654,"title":{},"body":{"interfaces/editForm.html":{}}}],["component",{"_index":185,"title":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{}},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"coverage.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["component_template",{"_index":247,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["components",{"_index":187,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"index.html":{}}}],["components/image",{"_index":701,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"injectables/ServerImageControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["components/notification/notification.component",{"_index":222,"title":{},"body":{"components/AppComponent.html":{}}}],["components/plan",{"_index":219,"title":{},"body":{"components/AppComponent.html":{}}}],["components/scene/scene.component",{"_index":218,"title":{},"body":{"components/AppComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{}}}],["components/upload",{"_index":237,"title":{},"body":{"components/AppComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["compressed_image",{"_index":1691,"title":{},"body":{"interfaces/editForm.html":{}}}],["compressedfile",{"_index":386,"title":{},"body":{"injectables/ClientImageControlService.html":{}}}],["compressimage",{"_index":373,"title":{},"body":{"injectables/ClientImageControlService.html":{}}}],["compressimage(image",{"_index":374,"title":{},"body":{"injectables/ClientImageControlService.html":{}}}],["compressor",{"_index":378,"title":{},"body":{"injectables/ClientImageControlService.html":{}}}],["compressor(image",{"_index":382,"title":{},"body":{"injectables/ClientImageControlService.html":{}}}],["compressor.js",{"_index":376,"title":{},"body":{"injectables/ClientImageControlService.html":{}}}],["compressorjs",{"_index":379,"title":{},"body":{"injectables/ClientImageControlService.html":{},"dependencies.html":{}}}],["config",{"_index":1521,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["console.error",{"_index":388,"title":{},"body":{"injectables/ClientImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["console.error('error",{"_index":181,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["console.error(error",{"_index":505,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{}}}],["console.log(error",{"_index":1057,"title":{},"body":{"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["const",{"_index":64,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/shopData.html":{}}}],["constructor",{"_index":19,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/MainPageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientProportions.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/googleAuthData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{}}}],["constructor(accountservice",{"_index":996,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["constructor(cookieservice",{"_index":20,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["constructor(elementref",{"_index":817,"title":{},"body":{"components/MainPageComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["constructor(finderservice",{"_index":594,"title":{},"body":{"components/FinderComponent.html":{}}}],["constructor(furniturecardservice",{"_index":1444,"title":{},"body":{"injectables/UploadService.html":{}}}],["constructor(httpmodule",{"_index":100,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{}}}],["constructor(notification",{"_index":762,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{}}}],["constructor(notificationservice",{"_index":937,"title":{},"body":{"components/NotificationComponent.html":{}}}],["constructor(private",{"_index":681,"title":{},"body":{"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/additionalData.html":{},"interfaces/clientFilters.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"interfaces/shopData.html":{}}}],["constructor(public",{"_index":1425,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["constructor(route",{"_index":427,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["constructor(uploadservice",{"_index":1398,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["contain",{"_index":1257,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["content",{"_index":1206,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["content:center",{"_index":1251,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["control.service",{"_index":228,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"injectables/ReportService.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData-1.html":{}}}],["control.service.ts",{"_index":372,"title":{},"body":{"injectables/ClientImageControlService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"injectables/ServerImageControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["control.service.ts:108",{"_index":1311,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["control.service.ts:11",{"_index":1301,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["control.service.ts:112",{"_index":686,"title":{},"body":{"injectables/FurnitureCardControlService.html":{}}}],["control.service.ts:12",{"_index":732,"title":{},"body":{"injectables/FurnitureModelControlService.html":{}}}],["control.service.ts:127",{"_index":691,"title":{},"body":{"injectables/FurnitureCardControlService.html":{}}}],["control.service.ts:176",{"_index":694,"title":{},"body":{"injectables/FurnitureCardControlService.html":{}}}],["control.service.ts:19",{"_index":375,"title":{},"body":{"injectables/ClientImageControlService.html":{}}}],["control.service.ts:193",{"_index":696,"title":{},"body":{"injectables/FurnitureCardControlService.html":{}}}],["control.service.ts:20",{"_index":1307,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["control.service.ts:212",{"_index":689,"title":{},"body":{"injectables/FurnitureCardControlService.html":{}}}],["control.service.ts:25",{"_index":738,"title":{},"body":{"injectables/FurnitureModelControlService.html":{}}}],["control.service.ts:30",{"_index":1315,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["control.service.ts:45",{"_index":1313,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["control.service.ts:46",{"_index":741,"title":{},"body":{"injectables/FurnitureModelControlService.html":{}}}],["control.service.ts:56",{"_index":734,"title":{},"body":{"injectables/FurnitureModelControlService.html":{}}}],["control.service.ts:59",{"_index":1513,"title":{},"body":{"interfaces/additionalData.html":{}}}],["control.service.ts:65",{"_index":1305,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["control.service.ts:80",{"_index":1303,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["control.service.ts:94",{"_index":1309,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["controller",{"_index":736,"title":{},"body":{"injectables/FurnitureModelControlService.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["controller.signal",{"_index":751,"title":{},"body":{"injectables/FurnitureModelControlService.html":{}}}],["controls",{"_index":1760,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["cookie",{"_index":55,"title":{},"body":{"injectables/AccountCookieService.html":{},"components/NotificationComponent.html":{},"dependencies.html":{}}}],["cookie.service",{"_index":132,"title":{},"body":{"injectables/AccountService.html":{},"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientProportions.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["cookie.service.ts",{"_index":7,"title":{},"body":{"injectables/AccountCookieService.html":{},"coverage.html":{}}}],["cookie.service.ts:18",{"_index":47,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["cookie.service.ts:31",{"_index":33,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["cookie.service.ts:38",{"_index":42,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["cookie.service.ts:49",{"_index":35,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["cookie.service.ts:56",{"_index":32,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["cookie.service.ts:64",{"_index":37,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["cookie.service.ts:72",{"_index":51,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["cookie.service.ts:8",{"_index":23,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["cookie.service.ts:82",{"_index":39,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["cookie.service.ts:89",{"_index":29,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["cookies",{"_index":1015,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["cookieservice",{"_index":21,"title":{},"body":{"injectables/AccountCookieService.html":{},"components/CreateFurniturePageComponent.html":{},"components/NotificationComponent.html":{},"interfaces/clientProportions.html":{}}}],["copyshoplink",{"_index":1460,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["copyshoplink(furnitureurl",{"_index":1468,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["core",{"_index":1648,"title":{},"body":{"dependencies.html":{}}}],["cost",{"_index":626,"title":{},"body":{"components/FinderComponent.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/ReportService.html":{},"injectables/ShopService.html":{},"interfaces/additionalData.html":{},"interfaces/clientFilters.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"interfaces/reportResponse.html":{},"interfaces/shopData.html":{}}}],["cost.tostring().replace(/\\b(?=(\\d{3})+(?!\\d))/g",{"_index":1280,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["costformat",{"_index":396,"title":{},"body":{"pipes/CostFormatPipe.html":{},"components/FinderComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["costformatpipe",{"_index":392,"title":{"pipes/CostFormatPipe.html":{}},"body":{"pipes/CostFormatPipe.html":{},"components/FinderComponent.html":{},"components/ViewFurnitureComponent.html":{},"coverage.html":{},"interfaces/foundFurniture.html":{}}}],["costpipe",{"_index":1127,"title":{},"body":{"injectables/ReportService.html":{}}}],["costpipe(cost",{"_index":1134,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["courier",{"_index":1169,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["coverage",{"_index":1514,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":252,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/UploadEntry.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"miscellaneous/typealiases.html":{}}}],["createaccountdata",{"_index":116,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{},"miscellaneous/typealiases.html":{}}}],["createaccountdata.accounttype",{"_index":153,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["createaccountdata.email",{"_index":158,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["createaccountdata.nickname",{"_index":155,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["createaccountdata.password",{"_index":160,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["createemailaccountdata",{"_index":147,"title":{"interfaces/createEmailAccountData.html":{}},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{},"miscellaneous/typealiases.html":{}}}],["createfurniture",{"_index":826,"title":{},"body":{"components/MainPageComponent.html":{}}}],["createfurniturecard",{"_index":418,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["createfurniturecomponent",{"_index":251,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"coverage.html":{}}}],["createfurniturecomponentref",{"_index":412,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["createfurniturepagecomponent",{"_index":254,"title":{"components/CreateFurniturePageComponent.html":{}},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"coverage.html":{}}}],["createproject",{"_index":988,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["createreport",{"_index":1128,"title":{},"body":{"injectables/ReportService.html":{}}}],["createreport(roomdata",{"_index":1136,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["createreporthtml",{"_index":1129,"title":{},"body":{"injectables/ReportService.html":{}}}],["createreporthtml(roomdata",{"_index":1138,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["createroom",{"_index":1850,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["createroomshape(widthratio",{"_index":1890,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["createroundedrectanglegeometry(width",{"_index":1839,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["css",{"_index":603,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["current",{"_index":914,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["current_project_id",{"_index":1065,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["current_route",{"_index":646,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["current_route.firstchild",{"_index":648,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["current_route.snapshot.data['pagename",{"_index":650,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["currentcolorid",{"_index":1459,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["currentidclickedroom",{"_index":2031,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["currentplanhouse",{"_index":982,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["currentprojectid",{"_index":983,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["currentviewroom",{"_index":2029,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["cursor",{"_index":2140,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["dad7cd",{"_index":1178,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["dashed",{"_index":2259,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["data",{"_index":891,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["date",{"_index":67,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["date.now().tostring",{"_index":887,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["debounce",{"_index":614,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["debouncetimer",{"_index":581,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["decoration",{"_index":1245,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["decorators",{"_index":458,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/PlanHousePageComponent.html":{}}}],["default",{"_index":122,"title":{},"body":{"injectables/AccountService.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":22,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/additionalData.html":{},"interfaces/queryData.html":{}}}],["delay",{"_index":962,"title":{},"body":{"injectables/NotificationService.html":{}}}],["delete/color",{"_index":1326,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["delete/project",{"_index":1327,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["deleteaccount",{"_index":94,"title":{},"body":{"injectables/AccountService.html":{}}}],["deleteaccount(jwt",{"_index":107,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["deleteaccountjwt",{"_index":95,"title":{},"body":{"injectables/AccountService.html":{}}}],["deleteaccountjwt(jwt",{"_index":110,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["deleteaccounttype",{"_index":10,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["deletecolor",{"_index":419,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["deletecolorcalculate",{"_index":420,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["deletedeleteproject",{"_index":1088,"title":{},"body":{"injectables/ProjectService.html":{}}}],["deletedeleteproject(jwt",{"_index":1095,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["deletefurniturecard",{"_index":421,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"interfaces/clientProportions.html":{}}}],["deletefurniturecard(jwt",{"_index":687,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["deletefurnituremodel",{"_index":728,"title":{},"body":{"injectables/FurnitureModelControlService.html":{}}}],["deletefurnituremodel(jwt",{"_index":733,"title":{},"body":{"injectables/FurnitureModelControlService.html":{}}}],["deleteguiderule",{"_index":11,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["deletejwt",{"_index":12,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["deletemodel",{"_index":1986,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["deleteproject",{"_index":989,"title":{},"body":{"components/PlanHousePageComponent.html":{},"injectables/ServerImageControlService.html":{}}}],["deleteproject(indexproject",{"_index":1003,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["deleteproject(jwt",{"_index":1302,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["deleteprojectcolor",{"_index":1295,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["deleteprojectcolor(jwt",{"_index":1304,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["deleteroom",{"_index":2213,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["dependencies",{"_index":1610,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["description",{"_index":48,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/ClientImageControlService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"miscellaneous/functions.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["direction",{"_index":1184,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["directive",{"_index":245,"title":{"directives/AutoHeightDirective.html":{}},"body":{"components/AppComponent.html":{},"directives/AutoHeightDirective.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"coverage.html":{},"index.html":{}}}],["directives",{"_index":279,"title":{},"body":{"components/AppComponent.html":{},"directives/AutoHeightDirective.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["directives/auto",{"_index":235,"title":{},"body":{"components/AppComponent.html":{}}}],["disabled",{"_index":1078,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["display",{"_index":1182,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{},"interfaces/roomSpanSettings.html":{}}}],["displayuploads",{"_index":1390,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["docheck",{"_index":475,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["document.createelement('a",{"_index":1288,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["document.documentelement.scrolltop",{"_index":2094,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["documentation",{"_index":1515,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":189,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/foundFurniture.html":{}}}],["downloadbutton",{"_index":1287,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["downloadbutton.click",{"_index":1292,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["downloadbutton.download",{"_index":1290,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["downloadbutton.href",{"_index":1289,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["downloadhtml",{"_index":1130,"title":{},"body":{"injectables/ReportService.html":{}}}],["downloadhtml(roomname",{"_index":1140,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["dragged_element",{"_index":2136,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["e",{"_index":1943,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["ease",{"_index":1221,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["editform",{"_index":1530,"title":{"interfaces/editForm.html":{}},"body":{"coverage.html":{},"interfaces/editForm.html":{}}}],["el",{"_index":317,"title":{},"body":{"directives/AutoHeightDirective.html":{}}}],["elem.queryselectorall('*').foreach(child",{"_index":841,"title":{},"body":{"components/MainPageComponent.html":{}}}],["elemenetref",{"_index":997,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["element",{"_index":244,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["elementref",{"_index":333,"title":{},"body":{"directives/AutoHeightDirective.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/MainPageComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/foundFurniture.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["email",{"_index":40,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"injectables/AuthService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"miscellaneous/functions.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/googleAuthData.html":{},"miscellaneous/typealiases.html":{}}}],["emailauthdata",{"_index":299,"title":{"interfaces/emailAuthData.html":{}},"body":{"injectables/AuthService.html":{},"coverage.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{},"miscellaneous/typealiases.html":{}}}],["emitplanhouse",{"_index":2068,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["enable",{"_index":2217,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["end_column",{"_index":2102,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["end_row",{"_index":2104,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["endcolumn",{"_index":2081,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["endpoint",{"_index":852,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["endrow",{"_index":2080,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["endx",{"_index":2000,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["endy",{"_index":2001,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["error",{"_index":180,"title":{},"body":{"injectables/AccountService.html":{},"injectables/ClientImageControlService.html":{},"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"interfaces/MyXhrUploadOptions.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"interfaces/roomData-1.html":{},"interfaces/shopData.html":{},"miscellaneous/typealiases.html":{}}}],["error('invalid",{"_index":716,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["error.interceptor.ts",{"_index":760,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{},"coverage.html":{}}}],["error.interceptor.ts:14",{"_index":763,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{}}}],["error.interceptor.ts:30",{"_index":768,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{}}}],["error.message",{"_index":389,"title":{},"body":{"injectables/ClientImageControlService.html":{}}}],["error.name",{"_index":1373,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["errormessage",{"_index":933,"title":{},"body":{"components/NotificationComponent.html":{}}}],["errormessage||successmessage",{"_index":953,"title":{},"body":{"components/NotificationComponent.html":{}}}],["errorsubject",{"_index":955,"title":{},"body":{"injectables/NotificationService.html":{}}}],["errortext",{"_index":1363,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["escapedraggingmode",{"_index":2178,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["event",{"_index":326,"title":{},"body":{"directives/AutoHeightDirective.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"interfaces/editForm.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["event.changedtouches[0",{"_index":2133,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["event.changedtouches[0].clienty",{"_index":2152,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["event.clientx",{"_index":1916,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["event.clienty",{"_index":1919,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["event.key",{"_index":1938,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["event.preventdefault",{"_index":2149,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["event.target",{"_index":340,"title":{},"body":{"directives/AutoHeightDirective.html":{},"interfaces/editForm.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["event_target",{"_index":2182,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["eventemitter",{"_index":1738,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["eventtarget",{"_index":1473,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["expirationdate",{"_index":65,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["expirationdate.setdate(expirationdate.getdate",{"_index":68,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["expirationdate.setminutes(expirationdate.getminutes",{"_index":70,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["expires",{"_index":73,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["export",{"_index":60,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["extends",{"_index":363,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/ProjectService.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/rangeFilter.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["extension",{"_index":903,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["f.id",{"_index":1432,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["f18dc4",{"_index":2155,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["face",{"_index":1163,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["false",{"_index":79,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"directives/AutoHeightDirective.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientProportions.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["family",{"_index":1164,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["fbx",{"_index":1730,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fetch",{"_index":1360,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["fetch(bloburl.tostring",{"_index":510,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["fetch(imagedataurl",{"_index":1979,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["fetch(url.tostring",{"_index":748,"title":{},"body":{"injectables/FurnitureModelControlService.html":{}}}],["field",{"_index":358,"title":{},"body":{"injectables/CategoryService.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/option.html":{},"interfaces/rangeFilter.html":{},"interfaces/selectFilter.html":{}}}],["fieldname",{"_index":853,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["file",{"_index":5,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["file.data",{"_index":877,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["file.data.name",{"_index":879,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["file.id",{"_index":910,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{}}}],["file.meta.name",{"_index":876,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["file.meta['furniturecardid",{"_index":897,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["file.meta['uploadtype",{"_index":899,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["file.name",{"_index":1438,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["file.progress.percentage",{"_index":881,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["file.status",{"_index":1439,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["file.type",{"_index":890,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["fileid",{"_index":911,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["filename",{"_index":1449,"title":{},"body":{"injectables/UploadService.html":{}}}],["filename.split",{"_index":902,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["filereader",{"_index":1154,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["files.map(file",{"_index":1428,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["filter",{"_index":356,"title":{},"body":{"injectables/CategoryService.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"coverage.html":{},"interfaces/option.html":{},"interfaces/rangeFilter.html":{},"interfaces/selectFilter.html":{},"miscellaneous/typealiases.html":{}}}],["filters",{"_index":355,"title":{},"body":{"injectables/CategoryService.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/option.html":{},"interfaces/rangeFilter.html":{},"interfaces/selectFilter.html":{}}}],["filtersobject",{"_index":1375,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["filtersobject.colors",{"_index":1382,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["filtersobject.colors.push(...furnituredata.colors",{"_index":1380,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["filtersobject.maxcost",{"_index":1379,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["filtersobject.mincost",{"_index":1381,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["find?q",{"_index":675,"title":{},"body":{"injectables/FinderService.html":{}}}],["finder",{"_index":574,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["finder'},{'name",{"_index":257,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["finder.component.html",{"_index":578,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["finder.component.scss",{"_index":579,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["finder/finder.component",{"_index":928,"title":{},"body":{"components/NavigationPanelComponent.html":{}}}],["findercomponent",{"_index":256,"title":{"components/FinderComponent.html":{}},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"coverage.html":{},"interfaces/foundFurniture.html":{}}}],["finderinput",{"_index":822,"title":{},"body":{"components/MainPageComponent.html":{}}}],["finderservice",{"_index":204,"title":{"injectables/FinderService.html":{}},"body":{"components/AppComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"coverage.html":{},"interfaces/foundFurniture.html":{}}}],["findfreespace(roomproportions",{"_index":2072,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["findfurnitures",{"_index":588,"title":{},"body":{"components/FinderComponent.html":{}}}],["findfurnitures(findstring",{"_index":604,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["findstring",{"_index":606,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["firstvaluefrom",{"_index":133,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/roomData.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["firstvaluefrom(this.httpmodule.delete(this.baseserviceurl",{"_index":163,"title":{},"body":{"injectables/AccountService.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["firstvaluefrom(this.httpmodule.get(this.baseserviceurl",{"_index":174,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/FinderService.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"interfaces/accountFullData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/googleAuthData.html":{},"interfaces/option.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/rangeFilter.html":{},"interfaces/roomData.html":{},"interfaces/selectFilter.html":{}}}],["firstvaluefrom(this.httpmodule.post(`${baseurl}account/avatar",{"_index":1320,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["firstvaluefrom(this.httpmodule.post(this.baseserviceurl",{"_index":161,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/googleAuthData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["firstvaluefrom(this.httpmodule.put(this.baseserviceurl",{"_index":169,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/ProjectService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/googleAuthData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["fit",{"_index":1235,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["fixpath",{"_index":1813,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["flex",{"_index":1183,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{},"interfaces/roomSpanSettings.html":{}}}],["floor_size",{"_index":1870,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["floor_size.length",{"_index":1881,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["floor_size.width",{"_index":1878,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["focusfinder",{"_index":813,"title":{},"body":{"components/MainPageComponent.html":{}}}],["font",{"_index":1162,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["format('truetype",{"_index":1168,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["format.pipe",{"_index":625,"title":{},"body":{"components/FinderComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/foundFurniture.html":{}}}],["format.pipe.ts",{"_index":395,"title":{},"body":{"pipes/CostFormatPipe.html":{},"coverage.html":{}}}],["format.pipe.ts:12",{"_index":399,"title":{},"body":{"pipes/CostFormatPipe.html":{}}}],["formcontrol",{"_index":1029,"title":{},"body":{"components/PlanHousePageComponent.html":{},"interfaces/editForm.html":{},"interfaces/roomSpanSettings.html":{}}}],["formcontrol(null",{"_index":2262,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["formcontrol(this.accountdata?.nickname",{"_index":1700,"title":{},"body":{"interfaces/editForm.html":{}}}],["formcontrol(this.accountdata?.password",{"_index":1704,"title":{},"body":{"interfaces/editForm.html":{}}}],["formdata",{"_index":854,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"injectables/ServerImageControlService.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["formdata.append('image",{"_index":1319,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["formdata.append('images",{"_index":1322,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["formelement",{"_index":2022,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["formgroup",{"_index":1028,"title":{},"body":{"components/PlanHousePageComponent.html":{},"interfaces/editForm.html":{},"interfaces/roomSpanSettings.html":{}}}],["found_intersection",{"_index":1927,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["found_intersection.parent",{"_index":1931,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["foundfurniture",{"_index":582,"title":{"interfaces/foundFurniture.html":{}},"body":{"components/FinderComponent.html":{},"coverage.html":{},"interfaces/foundFurniture.html":{}}}],["fromobject",{"_index":166,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/googleAuthData.html":{}}}],["function",{"_index":148,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/MyXhrUploadOptions.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["functions",{"_index":1716,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["functions.used",{"_index":623,"title":{},"body":{"components/FinderComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"interfaces/foundFurniture.html":{}}}],["functions.used.ts",{"_index":1606,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["furnitre/create",{"_index":479,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/MainPageComponent.html":{},"interfaces/clientProportions.html":{},"coverage.html":{}}}],["furniture",{"_index":255,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"injectables/ReportService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"coverage.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"interfaces/reportResponse.html":{}}}],["furniture'},{'name",{"_index":253,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["furniture,app",{"_index":839,"title":{},"body":{"components/MainPageComponent.html":{}}}],["furniture.component",{"_index":480,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/MainPageComponent.html":{},"interfaces/clientProportions.html":{}}}],["furniture.component.html",{"_index":1457,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["furniture.component.scss",{"_index":1458,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["furniture.component.ts",{"_index":1455,"title":{},"body":{"components/ViewFurnitureComponent.html":{},"coverage.html":{}}}],["furniture.component.ts:18",{"_index":1465,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["furniture.component.ts:28",{"_index":1478,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["furniture.component.ts:32",{"_index":1466,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["furniture.component.ts:36",{"_index":1467,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["furniture.component.ts:38",{"_index":1471,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["furniture.component.ts:51",{"_index":1474,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["furniture.component.ts:78",{"_index":1477,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["furniture.component.ts:82",{"_index":1469,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["furniture.name",{"_index":1273,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["furniture.previewurl",{"_index":1371,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["furniture.proportions.height}c",{"_index":1275,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["furniture.proportions.length}c",{"_index":1276,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["furniture.proportions.width}c",{"_index":1274,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["furniture.shops.map(shopdata",{"_index":1277,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["furniture/card",{"_index":698,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["furniture/images",{"_index":1317,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["furniture/model",{"_index":743,"title":{},"body":{"injectables/FurnitureModelControlService.html":{},"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["furniture/view",{"_index":835,"title":{},"body":{"components/MainPageComponent.html":{},"components/ViewFurnitureComponent.html":{},"coverage.html":{}}}],["furniture_card_id",{"_index":896,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["furniture_data",{"_index":519,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["furniture_data.colors.foreach(async",{"_index":524,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["furniture_id",{"_index":521,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["furniture_model_blob",{"_index":533,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["furniture_model_blob[0",{"_index":547,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["furnitureaccountdata",{"_index":143,"title":{"interfaces/furnitureAccountData.html":{}},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["furniturebasedata",{"_index":707,"title":{"interfaces/furnitureBaseData.html":{}},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["furniturecard",{"_index":713,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["furniturecardcontrolservice",{"_index":201,"title":{"injectables/FurnitureCardControlService.html":{}},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/additionalData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/shopData.html":{}}}],["furniturecardid",{"_index":688,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interfaces/MyXhrUploadOptions.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/additionalData.html":{},"interfaces/clientFilters.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData-1.html":{},"interfaces/shopData.html":{}}}],["furniturecardservice",{"_index":429,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["furniturecardupdatedata",{"_index":697,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["furnitureclientdata",{"_index":708,"title":{"interfaces/furnitureClientData.html":{}},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["furnituredata",{"_index":177,"title":{},"body":{"injectables/AccountService.html":{},"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/ProjectService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{},"interfaces/shopData.html":{}}}],["furnituredata.cost",{"_index":1378,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["furnituredata.name",{"_index":1509,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["furnituredata.previewurl",{"_index":178,"title":{},"body":{"injectables/AccountService.html":{},"injectables/ProjectService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["furnitureexampledata",{"_index":810,"title":{},"body":{"components/MainPageComponent.html":{}}}],["furniturefooter",{"_index":1226,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["furniturefromserverdata",{"_index":481,"title":{"interfaces/furnitureFromServerData.html":{}},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/additionalData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["furnitureimage",{"_index":1223,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["furniturelink",{"_index":1261,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["furnituremodelcontrolservice",{"_index":202,"title":{"injectables/FurnitureModelControlService.html":{}},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureModelControlService.html":{},"interfaces/clientProportions.html":{},"coverage.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["furnituremodelinput",{"_index":564,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["furnituremodelservice",{"_index":432,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["furniturename",{"_index":664,"title":{},"body":{"injectables/FinderService.html":{}}}],["furnitureproportions",{"_index":703,"title":{"interfaces/furnitureProportions.html":{}},"body":{"injectables/FurnitureCardControlService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["furnitures",{"_index":142,"title":{},"body":{"injectables/AccountService.html":{},"injectables/ReportService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/reportResponse.html":{}}}],["furnitureshopdata",{"_index":1334,"title":{"interfaces/furnitureShopData.html":{}},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"coverage.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["furnituresize",{"_index":1800,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["furnituresspantitle",{"_index":1208,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["furnituretemplate",{"_index":811,"title":{},"body":{"components/MainPageComponent.html":{}}}],["furnituretitle",{"_index":555,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/ReportService.html":{},"interfaces/clientProportions.html":{},"interfaces/reportResponse.html":{}}}],["furnitureurl",{"_index":1470,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["gap",{"_index":1227,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{},"interfaces/roomSpanSettings.html":{}}}],["generatehtmlcontent",{"_index":1131,"title":{},"body":{"injectables/ReportService.html":{}}}],["generatehtmlcontent(roomdata",{"_index":1144,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["geometry",{"_index":1848,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["getaccount",{"_index":97,"title":{},"body":{"injectables/AccountService.html":{}}}],["getaccount(jwt",{"_index":112,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["getaccountavatar",{"_index":1296,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["getaccountavatar(jwt",{"_index":1306,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["getallprojectimages",{"_index":1297,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["getallprojectimages(furniturecardid",{"_index":1308,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["getcurrentcolorid",{"_index":422,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["getcurrentviewroom",{"_index":990,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["getfileextension",{"_index":1441,"title":{},"body":{"injectables/UploadService.html":{}}}],["getfileextension(filename",{"_index":900,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["getfindfurnitures",{"_index":666,"title":{},"body":{"injectables/FinderService.html":{}}}],["getfindfurnitures(query",{"_index":670,"title":{},"body":{"injectables/FinderService.html":{}}}],["getfindoptionsbyresult",{"_index":1330,"title":{},"body":{"injectables/ShopService.html":{}}}],["getfindoptionsbyresult(resultsarray",{"_index":1333,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["getfurniturecard",{"_index":182,"title":{},"body":{"injectables/AccountService.html":{},"injectables/FurnitureCardControlService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["getfurniturecard(furniturecardid",{"_index":690,"title":{},"body":{"injectables/FurnitureCardControlService.html":{}}}],["getfurnituremodel",{"_index":729,"title":{},"body":{"injectables/FurnitureModelControlService.html":{}}}],["getfurnituremodel(jwt",{"_index":735,"title":{},"body":{"injectables/FurnitureModelControlService.html":{}}}],["getgetallcategories",{"_index":348,"title":{},"body":{"injectables/CategoryService.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/option.html":{},"interfaces/rangeFilter.html":{},"interfaces/selectFilter.html":{}}}],["getgetcategorydata",{"_index":1331,"title":{},"body":{"injectables/ShopService.html":{}}}],["getgetcategorydata(categoryname",{"_index":1338,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["getgetproject",{"_index":1089,"title":{},"body":{"injectables/ProjectService.html":{}}}],["getgetproject(jwt",{"_index":1098,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["getgetreportofroom",{"_index":1090,"title":{},"body":{"injectables/ProjectService.html":{}}}],["getgetreportofroom(jwt",{"_index":1100,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["getguiderule",{"_index":13,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["getimage",{"_index":589,"title":{},"body":{"components/FinderComponent.html":{}}}],["getimage(idfurniture",{"_index":607,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["getitemscount",{"_index":788,"title":{},"body":{"components/ImageSliderComponent.html":{}}}],["getjwt",{"_index":14,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["getmainimage",{"_index":1298,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["getmainimage(furniturecardid",{"_index":1310,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["getreport",{"_index":1970,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["getrequestpasswordcode",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{}}}],["getrequestpasswordcode(email",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{}}}],["getresponseerror",{"_index":855,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["geturl",{"_index":590,"title":{},"body":{"components/FinderComponent.html":{}}}],["geturl(idfurniture",{"_index":611,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["getusertype",{"_index":15,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["glb.loader.ts",{"_index":1563,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["gltf/glb",{"_index":1729,"title":{},"body":{"miscellaneous/functions.html":{}}}],["google",{"_index":41,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"injectables/AuthService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/googleAuthData.html":{},"miscellaneous/typealiases.html":{}}}],["googleauthdata",{"_index":300,"title":{"interfaces/googleAuthData.html":{}},"body":{"injectables/AuthService.html":{},"coverage.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{},"miscellaneous/typealiases.html":{}}}],["grabbing",{"_index":2138,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["grid",{"_index":2013,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["grid_area",{"_index":2113,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["grid_occupied",{"_index":2074,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["grid_size",{"_index":2073,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["gridarea",{"_index":1115,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{},"interfaces/roomSpanSettings.html":{}}}],["guideinclude",{"_index":36,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["guidetemplate",{"_index":2032,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["hasbeenchanged",{"_index":1775,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["hasroomidbeenprocessed",{"_index":984,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["height",{"_index":468,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/ReportService.html":{},"interfaces/additionalData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/shopData.html":{}}}],["height.directive",{"_index":236,"title":{},"body":{"components/AppComponent.html":{}}}],["height.directive.ts",{"_index":314,"title":{},"body":{"directives/AutoHeightDirective.html":{},"coverage.html":{}}}],["height.directive.ts:12",{"_index":332,"title":{},"body":{"directives/AutoHeightDirective.html":{}}}],["height.directive.ts:19",{"_index":322,"title":{},"body":{"directives/AutoHeightDirective.html":{}}}],["height.directive.ts:27",{"_index":323,"title":{},"body":{"directives/AutoHeightDirective.html":{}}}],["height.directive.ts:38",{"_index":327,"title":{},"body":{"directives/AutoHeightDirective.html":{}}}],["height:40px",{"_index":1250,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["heightratio",{"_index":1889,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["hemisphere_light",{"_index":1820,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["hemispherelight",{"_index":1905,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["hostlistener",{"_index":334,"title":{},"body":{"directives/AutoHeightDirective.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["hostlistener('click",{"_index":1910,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["hostlistener('document:contextmenu",{"_index":2173,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["hostlistener('document:keydown.arrowdown",{"_index":2157,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["hostlistener('document:keydown.arrowleft",{"_index":2159,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["hostlistener('document:keydown.arrowright",{"_index":2158,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["hostlistener('document:keydown.arrowup",{"_index":2156,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["hostlistener('document:keydown.escape",{"_index":2177,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["hostlistener('document:keyup.enter",{"_index":2125,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["hostlistener('document:mouseleave",{"_index":2120,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["hostlistener('document:mousemove",{"_index":2147,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["hostlistener('document:mouseup",{"_index":2126,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["hostlistener('document:touchend",{"_index":2124,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["hostlistener('document:touchmove",{"_index":2148,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["hostlistener('mousemove",{"_index":1944,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["hostlistener('window:keydown",{"_index":1932,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["hostlistener('window:resize",{"_index":798,"title":{},"body":{"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["hostlistener('window:scroll",{"_index":2175,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["hostlisteners",{"_index":790,"title":{},"body":{"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{}}}],["house",{"_index":271,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"coverage.html":{},"interfaces/roomSpanSettings.html":{}}}],["house'},{'name",{"_index":269,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["house.component",{"_index":221,"title":{},"body":{"components/AppComponent.html":{},"components/MainPageComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["house.component.html",{"_index":2010,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["house.component.scss",{"_index":2011,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["house.component.ts",{"_index":1553,"title":{},"body":{"coverage.html":{},"interfaces/roomSpanSettings.html":{}}}],["house/plan",{"_index":220,"title":{},"body":{"components/AppComponent.html":{},"components/MainPageComponent.html":{},"components/PlanHousePageComponent.html":{},"coverage.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["housequality",{"_index":215,"title":{},"body":{"components/AppComponent.html":{},"components/MainPageComponent.html":{}}}],["hover",{"_index":1263,"title":{},"body":{"injectables/ReportService.html":{},"components/UploadOverlayComponent.html":{},"interfaces/reportResponse.html":{}}}],["hovermap",{"_index":1391,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["hq",{"_index":929,"title":{},"body":{"components/NavigationPanelComponent.html":{}}}],["html",{"_index":243,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"injectables/ReportService.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/foundFurniture.html":{},"interfaces/reportResponse.html":{},"interfaces/roomSpanSettings.html":{}}}],["html2canvas",{"_index":1629,"title":{},"body":{"dependencies.html":{}}}],["html2pdf.js",{"_index":1631,"title":{},"body":{"dependencies.html":{}}}],["htmlbuttonelement",{"_index":1485,"title":{},"body":{"components/ViewFurnitureComponent.html":{},"interfaces/roomSpanSettings.html":{}}}],["htmlbuttonelement).style.setproperty",{"_index":1497,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["htmlcanvaselement).getboundingclientrect",{"_index":1915,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["htmlcontent",{"_index":1148,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["htmldivelement",{"_index":2112,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["htmlformelement",{"_index":2023,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["htmlinputelement",{"_index":556,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{}}}],["htmlspanelement",{"_index":620,"title":{},"body":{"components/FinderComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/foundFurniture.html":{},"interfaces/roomSpanSettings.html":{}}}],["htmltextareaelement",{"_index":341,"title":{},"body":{"directives/AutoHeightDirective.html":{}}}],["htmlurl",{"_index":1141,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["http",{"_index":669,"title":{},"body":{"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["http_interceptors",{"_index":2283,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http_params",{"_index":151,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/googleAuthData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{},"interfaces/shopData.html":{}}}],["http_params.set('jwt",{"_index":711,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["httpclient",{"_index":101,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/roomData.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["httperrorinterceptor",{"_index":757,"title":{"interceptors/HttpErrorInterceptor.html":{}},"body":{"interceptors/HttpErrorInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["httperrorresponse",{"_index":772,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{}}}],["httpevent",{"_index":770,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{}}}],["httphandler",{"_index":767,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{}}}],["httpinterceptor",{"_index":771,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{}}}],["httpmodule",{"_index":103,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/roomData.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["httpparams",{"_index":130,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/googleAuthData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{},"interfaces/shopData.html":{}}}],["httpparams().set('furniturecardid",{"_index":710,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["httpparams().set('jwt",{"_index":723,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"injectables/ServerImageControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["httprequest",{"_index":765,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{}}}],["https://housequality.site",{"_index":2286,"title":{},"body":{"miscellaneous/variables.html":{}}}],["id",{"_index":449,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interfaces/MyXhrUploadOptions.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/additionalData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/shopData.html":{}}}],["idb",{"_index":1633,"title":{},"body":{"dependencies.html":{}}}],["idcolor",{"_index":1488,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["identifier",{"_index":1516,"title":{},"body":{"coverage.html":{}}}],["idfurniture",{"_index":610,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["idmainimage",{"_index":530,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"components/ImageSliderComponent.html":{},"interfaces/additionalData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/shopData.html":{}}}],["idpage",{"_index":414,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["if(changeimagescounter",{"_index":544,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["if(this.routesub)this.routesub.unsubscribe",{"_index":496,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["image",{"_index":227,"title":{},"body":{"components/AppComponent.html":{},"injectables/ClientImageControlService.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"injectables/ServerImageControlService.html":{},"interfaces/UploadEntry.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"coverage.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{}}}],["imageclientcontrolservice",{"_index":1660,"title":{},"body":{"interfaces/editForm.html":{}}}],["imagedatablob",{"_index":1983,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["imagedataresponse",{"_index":1978,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["imagedataresponse.blob",{"_index":1984,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["imagedataresponse.ok",{"_index":1982,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["imagedataurl",{"_index":1976,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["imagefile",{"_index":1316,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["images",{"_index":529,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"components/ImageSliderComponent.html":{},"interfaces/additionalData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/shopData.html":{}}}],["images_blob_array",{"_index":506,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["images_data",{"_index":543,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["imagesarray",{"_index":456,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["imagesarray.map(async",{"_index":508,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["imagesblobarray",{"_index":526,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["imagesdata",{"_index":528,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"components/ImageSliderComponent.html":{},"injectables/ServerImageControlService.html":{},"interfaces/additionalData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["imagesdata.idmainimage",{"_index":1325,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["imagesdata.idmainimage===i",{"_index":807,"title":{},"body":{"components/ImageSliderComponent.html":{}}}],["imagesdata.images.foreach((file",{"_index":1321,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["imageservercontrolservice",{"_index":1659,"title":{},"body":{"interfaces/editForm.html":{}}}],["imageservice",{"_index":597,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["imagesliderclientdata",{"_index":484,"title":{"interfaces/imageSliderClientData.html":{}},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"components/ImageSliderComponent.html":{},"injectables/ServerImageControlService.html":{},"interfaces/additionalData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/shopData.html":{}}}],["imageslidercomponent",{"_index":258,"title":{"components/ImageSliderComponent.html":{}},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"coverage.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{}}}],["imagesliderfromserverdata",{"_index":700,"title":{"interfaces/imageSliderFromServerData.html":{}},"body":{"injectables/FurnitureCardControlService.html":{},"components/ImageSliderComponent.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/shopData.html":{}}}],["imageurl",{"_index":1156,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["img",{"_index":1254,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["implements",{"_index":315,"title":{},"body":{"directives/AutoHeightDirective.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["import",{"_index":52,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["imports",{"_index":209,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"miscellaneous/functions.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["index=\"${indexroom",{"_index":2250,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["index=\"${this.currentidclickedroom",{"_index":2111,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["index=\"${this.currentviewroom",{"_index":2237,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["indexable",{"_index":1512,"title":{},"body":{"interfaces/additionalData.html":{},"interfaces/queryData.html":{}}}],["indexproject",{"_index":1005,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["indexroom",{"_index":2181,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["indexvariant",{"_index":1495,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["infinity",{"_index":1376,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["info",{"_index":3,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["initcategories",{"_index":2061,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["initeditform",{"_index":1698,"title":{},"body":{"interfaces/editForm.html":{}}}],["initialized",{"_index":2034,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["initthreejs",{"_index":1814,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["inject",{"_index":335,"title":{},"body":{"directives/AutoHeightDirective.html":{}}}],["inject(elementref",{"_index":331,"title":{},"body":{"directives/AutoHeightDirective.html":{}}}],["injectable",{"_index":0,"title":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"injectables/NotificationService.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"injectables/UploadService.html":{}},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"interfaces/MyXhrUploadOptions.html":{},"injectables/NotificationService.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["injectables",{"_index":2,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"injectables/NotificationService.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"injectables/UploadService.html":{},"index.html":{}}}],["inline",{"_index":1243,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["input",{"_index":324,"title":{},"body":{"directives/AutoHeightDirective.html":{},"components/ImageSliderComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["input.scrollheight",{"_index":344,"title":{},"body":{"directives/AutoHeightDirective.html":{}}}],["input.style.height",{"_index":342,"title":{},"body":{"directives/AutoHeightDirective.html":{}}}],["inputelement",{"_index":583,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["inputfurniturenamesubject",{"_index":665,"title":{},"body":{"injectables/FinderService.html":{}}}],["inputprocess",{"_index":591,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["inputs",{"_index":320,"title":{},"body":{"directives/AutoHeightDirective.html":{},"components/ImageSliderComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["instanceof",{"_index":878,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["intercept",{"_index":761,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{}}}],["intercept(request",{"_index":764,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{}}}],["interceptor",{"_index":756,"title":{"interceptors/HttpErrorInterceptor.html":{}},"body":{"coverage.html":{}}}],["interceptors",{"_index":758,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{}}}],["interface",{"_index":135,"title":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FurnitureCardControlService.html":{},"components/ImageSliderComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["interfaces",{"_index":850,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"index.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["intersect.object.name",{"_index":1929,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["intersect.object.type",{"_index":1930,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["intersection_z",{"_index":1950,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["intersections",{"_index":1925,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["intersections.find(intersect",{"_index":1928,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["intersections.length",{"_index":1947,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["intersections[0].point.x",{"_index":1949,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["intersections[0].point.z",{"_index":1951,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["intersections_x",{"_index":1948,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["isclick",{"_index":2018,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["isdoubleclick",{"_index":2020,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["isdragging",{"_index":2017,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["iseditformopen",{"_index":1658,"title":{},"body":{"interfaces/editForm.html":{}}}],["isemailaccount",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"interfaces/emailAuthData.html":{},"miscellaneous/functions.html":{},"interfaces/googleAuthData.html":{}}}],["isemailaccount(account",{"_index":149,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"miscellaneous/functions.html":{},"interfaces/furnitureAccountData.html":{}}}],["isemailaccount(authdata",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{}}}],["isemailaccount(changedata",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{}}}],["isemailaccount(createaccountdata",{"_index":156,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["isguideincluded",{"_index":2027,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["isguidevisible",{"_index":2028,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["ishovered",{"_index":1394,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["ishovered(id",{"_index":1405,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["ismobileview",{"_index":785,"title":{},"body":{"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{}}}],["isoccupied",{"_index":2153,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["isshowloader",{"_index":1774,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["items",{"_index":1267,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["join",{"_index":1279,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["json.stringify(querydata",{"_index":1358,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["jspdf",{"_index":1635,"title":{},"body":{"dependencies.html":{}}}],["justify",{"_index":1229,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["jwt",{"_index":34,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"injectables/AuthService.html":{},"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/googleAuthData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/shopData.html":{}}}],["jwt)).furnituredata._id",{"_index":523,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["jwt/delete",{"_index":164,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["jwt/long",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{}}}],["jwt/temporary',null",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{}}}],["key",{"_index":706,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"injectables/ShopService.html":{},"interfaces/additionalData.html":{},"interfaces/clientFilters.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"interfaces/shopData.html":{}}}],["keyboardevent",{"_index":1934,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["lastplanhouse",{"_index":2025,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["left",{"_index":1242,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["left:0",{"_index":1271,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["legend",{"_index":242,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["length",{"_index":469,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/shopData.html":{}}}],["letter",{"_index":1194,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["line",{"_index":1180,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["link",{"_index":825,"title":{},"body":{"components/MainPageComponent.html":{}}}],["list",{"_index":1237,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["literal",{"_index":1999,"title":{},"body":{"interfaces/reportResponse.html":{}}}],["load_object",{"_index":1803,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["loader",{"_index":1773,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["loaders",{"_index":1742,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["loadfbxmodel",{"_index":1561,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["loadfbxmodel(url",{"_index":1723,"title":{},"body":{"miscellaneous/functions.html":{}}}],["loadfurnituremodel(filemodel",{"_index":1799,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["loadgltfmodel",{"_index":1564,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["loadgltfmodel(url",{"_index":1726,"title":{},"body":{"miscellaneous/functions.html":{}}}],["loadingmanager",{"_index":1725,"title":{},"body":{"miscellaneous/functions.html":{}}}],["loadmodel",{"_index":1558,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["loadmodel(blob",{"_index":1727,"title":{},"body":{"miscellaneous/functions.html":{}}}],["loadmodel(filemodel",{"_index":1804,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["loadobjmodel",{"_index":1566,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["loadobjmodel(url",{"_index":1732,"title":{},"body":{"miscellaneous/functions.html":{}}}],["loaduserdata(jwt",{"_index":1680,"title":{},"body":{"interfaces/editForm.html":{}}}],["location",{"_index":205,"title":{},"body":{"components/AppComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["lodash",{"_index":336,"title":{},"body":{"directives/AutoHeightDirective.html":{},"dependencies.html":{},"interfaces/roomSpanSettings.html":{}}}],["login",{"_index":261,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["loginpagecomponent",{"_index":260,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"coverage.html":{}}}],["logout",{"_index":935,"title":{},"body":{"components/NotificationComponent.html":{},"interfaces/editForm.html":{}}}],["long",{"_index":45,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["main",{"_index":263,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["mainpagecomponent",{"_index":262,"title":{"components/MainPageComponent.html":{}},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"coverage.html":{}}}],["manager",{"_index":1724,"title":{},"body":{"miscellaneous/functions.html":{}}}],["map",{"_index":1419,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["map(object",{"_index":1991,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["margin",{"_index":1173,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["matching",{"_index":88,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"dependencies.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"miscellaneous/functions.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"index.html":{},"interfaces/modelInterface.html":{},"modules.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"properties.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.floor(relative_x",{"_index":2099,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["math.floor(relative_y",{"_index":2101,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["math.pi",{"_index":1415,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["math.round(room_proportions.length",{"_index":2105,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["math.round(room_proportions.width",{"_index":2103,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["max",{"_index":1224,"title":{},"body":{"injectables/ReportService.html":{},"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"interfaces/reportResponse.html":{}}}],["max_z",{"_index":1963,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["maxcost",{"_index":1350,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["maxvalue",{"_index":369,"title":{},"body":{"injectables/CategoryService.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/option.html":{},"interfaces/rangeFilter.html":{},"interfaces/selectFilter.html":{}}}],["maxx",{"_index":1958,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["media",{"_index":1265,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["memberof",{"_index":1151,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["menuopen",{"_index":921,"title":{},"body":{"components/NavigationPanelComponent.html":{}}}],["mergeapplicationconfig(appconfig",{"_index":2289,"title":{},"body":{"miscellaneous/variables.html":{}}}],["message",{"_index":946,"title":{},"body":{"components/NotificationComponent.html":{},"injectables/NotificationService.html":{}}}],["meta",{"_index":892,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["metadata",{"_index":192,"title":{},"body":{"components/AppComponent.html":{},"directives/AutoHeightDirective.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["method",{"_index":749,"title":{},"body":{"injectables/FurnitureModelControlService.html":{}}}],["methods",{"_index":9,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{}}}],["mime",{"_index":1728,"title":{},"body":{"miscellaneous/functions.html":{}}}],["min",{"_index":1348,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["min_z",{"_index":1960,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["mincost",{"_index":1349,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["minvalue",{"_index":367,"title":{},"body":{"injectables/CategoryService.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/option.html":{},"interfaces/rangeFilter.html":{},"interfaces/selectFilter.html":{}}}],["minx",{"_index":1955,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["miscellaneous",{"_index":1715,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":718,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["mobileview",{"_index":321,"title":{},"body":{"directives/AutoHeightDirective.html":{}}}],["model",{"_index":232,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureModelControlService.html":{},"interfaces/clientProportions.html":{},"coverage.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["modelfile",{"_index":742,"title":{},"body":{"injectables/FurnitureModelControlService.html":{}}}],["modelinterface",{"_index":1109,"title":{"interfaces/modelInterface.html":{}},"body":{"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"coverage.html":{},"interfaces/furnitureShopData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["modules",{"_index":1995,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["monospace",{"_index":1179,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["mouse",{"_index":1766,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["mouseevent",{"_index":1912,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["move_room_element",{"_index":2161,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["movedata",{"_index":1802,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["moveroom(event",{"_index":2160,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["multi",{"_index":2285,"title":{},"body":{"miscellaneous/variables.html":{}}}],["myxhruploadoptions",{"_index":849,"title":{"interfaces/MyXhrUploadOptions.html":{}},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"coverage.html":{}}}],["n",{"_index":1506,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["n${description",{"_index":1507,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["name",{"_index":26,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/foundFurniture.html":{},"miscellaneous/functions.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["name.length",{"_index":552,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["nameinput",{"_index":553,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["nameinput.focus",{"_index":557,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["navigatetopage",{"_index":814,"title":{},"body":{"components/MainPageComponent.html":{}}}],["navigatetopage(link",{"_index":823,"title":{},"body":{"components/MainPageComponent.html":{}}}],["navigation",{"_index":265,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{}}}],["navigationpanelcomponent",{"_index":264,"title":{"components/NavigationPanelComponent.html":{}},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"coverage.html":{},"interfaces/editForm.html":{}}}],["new",{"_index":66,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/ClientImageControlService.html":{},"components/CreateFurniturePageComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interfaces/MyXhrUploadOptions.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/shopData.html":{}}}],["new.ttf",{"_index":1171,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["new_grid_area",{"_index":2169,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["new_room",{"_index":2210,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["new_room.gridarea",{"_index":2212,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["new_url",{"_index":1081,"title":{},"body":{"components/PlanHousePageComponent.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["newindex",{"_index":1498,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["newproject",{"_index":1061,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["newproject.projectdata",{"_index":1064,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["newxobjectposition",{"_index":1959,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["newzobjectposition",{"_index":1964,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["next",{"_index":766,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{}}}],["next.handle(request).pipe",{"_index":776,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{}}}],["ngafterviewchecked",{"_index":991,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["ngafterviewinit",{"_index":592,"title":{},"body":{"components/FinderComponent.html":{},"components/MainPageComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/foundFurniture.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["ngclass",{"_index":575,"title":{},"body":{"components/FinderComponent.html":{},"components/MainPageComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/foundFurniture.html":{}}}],["ngfor",{"_index":576,"title":{},"body":{"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/roomSpanSettings.html":{}}}],["ngif",{"_index":408,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["ngonchanges",{"_index":1461,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["ngonchanges(changes",{"_index":1777,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["ngondestroy",{"_index":423,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["ngoninit",{"_index":318,"title":{},"body":{"directives/AutoHeightDirective.html":{},"components/CreateFurniturePageComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{},"interfaces/roomSpanSettings.html":{}}}],["ngtemplateoutlet",{"_index":2006,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["ngx",{"_index":54,"title":{},"body":{"injectables/AccountCookieService.html":{},"components/ViewFurnitureComponent.html":{},"dependencies.html":{}}}],["nickname",{"_index":140,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/furnitureAccountData.html":{}}}],["nodelistof).foreach(elem",{"_index":840,"title":{},"body":{"components/MainPageComponent.html":{}}}],["none",{"_index":844,"title":{},"body":{"components/MainPageComponent.html":{},"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["notification",{"_index":433,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interceptors/HttpErrorInterceptor.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["notification'},{'name",{"_index":267,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["notification.component.html",{"_index":931,"title":{},"body":{"components/NotificationComponent.html":{}}}],["notification.component.scss",{"_index":932,"title":{},"body":{"components/NotificationComponent.html":{}}}],["notification.service",{"_index":861,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["notificationcomponent",{"_index":195,"title":{"components/NotificationComponent.html":{}},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"coverage.html":{}}}],["notificationservice",{"_index":434,"title":{"injectables/NotificationService.html":{}},"body":{"components/CreateFurniturePageComponent.html":{},"interceptors/HttpErrorInterceptor.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"coverage.html":{},"interfaces/editForm.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["null",{"_index":170,"title":{},"body":{"injectables/AccountService.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FurnitureCardControlService.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/PlanHousePageComponent.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/shopData.html":{}}}],["number",{"_index":368,"title":{},"body":{"injectables/CategoryService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FurnitureCardControlService.html":{},"components/ImageSliderComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ReportService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["obj",{"_index":906,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"miscellaneous/functions.html":{}}}],["object",{"_index":1256,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData-1.html":{}}}],["object.keys(querydata).length",{"_index":1355,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["object.name",{"_index":1990,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["object.position",{"_index":1873,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["object.rotation.y",{"_index":1883,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["object.type",{"_index":1904,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["object.userdata",{"_index":1875,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["object_position",{"_index":1872,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["object_position.x",{"_index":1877,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["object_position.z",{"_index":1880,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["objectid",{"_index":1743,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["objectloadinterface",{"_index":1571,"title":{"interfaces/objectLoadInterface.html":{}},"body":{"coverage.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["objects",{"_index":1117,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["objects_scene_array",{"_index":1988,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["objectsavedata",{"_index":1874,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["objectsavedata.xmetersdistance",{"_index":1885,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["objectsavedata.yrotate",{"_index":1887,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["objectsavedata.zmetersdistance",{"_index":1886,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["objectsceneinterface",{"_index":1110,"title":{"interfaces/objectSceneInterface.html":{}},"body":{"injectables/ProjectService.html":{},"coverage.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["objectsize",{"_index":1953,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["objectsize.length",{"_index":1962,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["objectsize.width",{"_index":1957,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["objectx",{"_index":2085,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["objecty",{"_index":2086,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["observable",{"_index":678,"title":{},"body":{"injectables/FinderService.html":{},"interceptors/HttpErrorInterceptor.html":{},"injectables/NotificationService.html":{}}}],["offset",{"_index":1344,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["old",{"_index":1430,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["oldcameraposition",{"_index":1972,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["oldcamerarotation",{"_index":1974,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["oldsizeviewroom",{"_index":2024,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["onchanges",{"_index":1456,"title":{},"body":{"components/ViewFurnitureComponent.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["oncontextmenu(event",{"_index":2174,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["ondestroy",{"_index":406,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["oninit",{"_index":316,"title":{},"body":{"directives/AutoHeightDirective.html":{},"components/CreateFurniturePageComponent.html":{},"components/ImageSliderComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/roomSpanSettings.html":{}}}],["oninput",{"_index":319,"title":{},"body":{"directives/AutoHeightDirective.html":{}}}],["oninput(event",{"_index":325,"title":{},"body":{"directives/AutoHeightDirective.html":{}}}],["onmouseclick(event",{"_index":1911,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["onmouseenter",{"_index":1395,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["onmouseenter(id",{"_index":1408,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["onmouseleave",{"_index":1396,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["onmouseleave(event",{"_index":2121,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["onmouseleave(id",{"_index":1410,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["onmousemove(event",{"_index":1945,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["onmouseup(event",{"_index":2127,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["onresize(event",{"_index":1907,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["onscroll",{"_index":2176,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["op",{"_index":516,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["openaddmodule",{"_index":992,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["opencreatefurniture",{"_index":815,"title":{},"body":{"components/MainPageComponent.html":{}}}],["openeditform",{"_index":1706,"title":{},"body":{"interfaces/editForm.html":{}}}],["openfoundresultslist",{"_index":593,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["openfurniturevariant",{"_index":1462,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["openfurniturevariant(colorbutton",{"_index":1472,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["openhtmlinnewtab",{"_index":1132,"title":{},"body":{"injectables/ReportService.html":{}}}],["openhtmlinnewtab(roomname",{"_index":1147,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["openlink",{"_index":1259,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["openlink,.shoplink",{"_index":1270,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["openproject",{"_index":993,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["openproject(indexproject",{"_index":1012,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["openproject(projectid",{"_index":1710,"title":{},"body":{"interfaces/editForm.html":{}}}],["openscene",{"_index":2198,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["openviewfurniture",{"_index":816,"title":{},"body":{"components/MainPageComponent.html":{}}}],["openviewroom(indexroom",{"_index":2247,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["operations",{"_index":512,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["option",{"_index":360,"title":{"interfaces/option.html":{}},"body":{"injectables/CategoryService.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"coverage.html":{},"interfaces/option.html":{},"interfaces/rangeFilter.html":{},"interfaces/selectFilter.html":{}}}],["optional",{"_index":28,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/editForm.html":{},"miscellaneous/functions.html":{},"interfaces/roomData.html":{}}}],["optionrangequerydata",{"_index":1347,"title":{"interfaces/optionRangeQueryData.html":{}},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"coverage.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["options",{"_index":364,"title":{},"body":{"injectables/CategoryService.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/option.html":{},"interfaces/rangeFilter.html":{},"interfaces/selectFilter.html":{}}}],["optionselectquerydata",{"_index":1346,"title":{"interfaces/optionSelectQueryData.html":{}},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"coverage.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["orbitcontrols",{"_index":1739,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["orbitcontrols(this.camera",{"_index":1853,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["otherstartcolumn",{"_index":2084,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["otherstartrow",{"_index":2083,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["output",{"_index":1737,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["overlay",{"_index":1386,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["overlay'},{'name",{"_index":276,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["overlay.component",{"_index":239,"title":{},"body":{"components/AppComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["overlay.component.html",{"_index":1387,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["overlay.component.scss",{"_index":1388,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["overlay.component.ts",{"_index":1385,"title":{},"body":{"components/UploadOverlayComponent.html":{},"coverage.html":{}}}],["overlay.component.ts:13",{"_index":1399,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["overlay.component.ts:14",{"_index":1421,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["overlay.component.ts:17",{"_index":1417,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["overlay.component.ts:20",{"_index":1414,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["overlay.component.ts:23",{"_index":1418,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["overlay.component.ts:26",{"_index":1420,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["overlay.component.ts:28",{"_index":1407,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["overlay.component.ts:42",{"_index":1401,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["overlay.component.ts:47",{"_index":1404,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["overlay.component.ts:53",{"_index":1413,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["overlay.component.ts:58",{"_index":1409,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["overlay.component.ts:63",{"_index":1411,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["overlay.component.ts:68",{"_index":1406,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["overlay/upload",{"_index":238,"title":{},"body":{"components/AppComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"coverage.html":{}}}],["overview",{"_index":1733,"title":{"index.html":{}},"body":{"index.html":{}}}],["package",{"_index":1609,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["padding",{"_index":1174,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["paddingpolarangle",{"_index":1861,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["page",{"_index":407,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/MainPageComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{}}}],["page'},{'name",{"_index":249,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["page.component.html",{"_index":409,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/MainPageComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{}}}],["page.component.scss",{"_index":411,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/MainPageComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{}}}],["page.component.ts",{"_index":405,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/MainPageComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/clientProportions.html":{},"coverage.html":{},"interfaces/editForm.html":{}}}],["page.component.ts:100",{"_index":1007,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:104",{"_index":453,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["page.component.ts:119",{"_index":1014,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:124",{"_index":455,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["page.component.ts:138",{"_index":447,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["page.component.ts:140",{"_index":1002,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:156",{"_index":1016,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:166",{"_index":442,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["page.component.ts:183",{"_index":1004,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:197",{"_index":1006,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:202",{"_index":457,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["page.component.ts:206",{"_index":1019,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:21",{"_index":818,"title":{},"body":{"components/MainPageComponent.html":{}}}],["page.component.ts:214",{"_index":999,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:222",{"_index":1011,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:230",{"_index":1000,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:240",{"_index":439,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["page.component.ts:241",{"_index":1013,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:248",{"_index":1031,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:29",{"_index":832,"title":{},"body":{"components/MainPageComponent.html":{}}}],["page.component.ts:299",{"_index":441,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["page.component.ts:319",{"_index":445,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["page.component.ts:32",{"_index":831,"title":{},"body":{"components/MainPageComponent.html":{}}}],["page.component.ts:328",{"_index":444,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["page.component.ts:34",{"_index":473,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["page.component.ts:340",{"_index":448,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["page.component.ts:35",{"_index":834,"title":{},"body":{"components/MainPageComponent.html":{}}}],["page.component.ts:36",{"_index":471,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["page.component.ts:38",{"_index":833,"title":{},"body":{"components/MainPageComponent.html":{}}}],["page.component.ts:40",{"_index":460,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["page.component.ts:42",{"_index":998,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:44",{"_index":462,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/MainPageComponent.html":{}}}],["page.component.ts:49",{"_index":470,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["page.component.ts:56",{"_index":1025,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:57",{"_index":828,"title":{},"body":{"components/MainPageComponent.html":{}}}],["page.component.ts:59",{"_index":1021,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:60",{"_index":435,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["page.component.ts:62",{"_index":1023,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:65",{"_index":1020,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:67",{"_index":819,"title":{},"body":{"components/MainPageComponent.html":{}}}],["page.component.ts:68",{"_index":1022,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:71",{"_index":1024,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:74",{"_index":821,"title":{},"body":{"components/MainPageComponent.html":{}}}],["page.component.ts:75",{"_index":1027,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:78",{"_index":451,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["page.component.ts:81",{"_index":1010,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:83",{"_index":830,"title":{},"body":{"components/MainPageComponent.html":{}}}],["page.component.ts:90",{"_index":829,"title":{},"body":{"components/MainPageComponent.html":{}}}],["page.component.ts:93",{"_index":1009,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:95",{"_index":450,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["page.component.ts:98",{"_index":824,"title":{},"body":{"components/MainPageComponent.html":{}}}],["page.mock",{"_index":837,"title":{},"body":{"components/MainPageComponent.html":{}}}],["page/account",{"_index":1527,"title":{},"body":{"coverage.html":{},"interfaces/editForm.html":{}}}],["page/create",{"_index":404,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{},"coverage.html":{}}}],["page/login",{"_index":1543,"title":{},"body":{"coverage.html":{}}}],["page/main",{"_index":809,"title":{},"body":{"components/MainPageComponent.html":{},"coverage.html":{}}}],["page/plan",{"_index":978,"title":{},"body":{"components/PlanHousePageComponent.html":{},"coverage.html":{}}}],["page/shop",{"_index":1575,"title":{},"body":{"coverage.html":{}}}],["pageinit",{"_index":424,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/PlanHousePageComponent.html":{}}}],["pageinit(jwt",{"_index":452,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["pagename",{"_index":649,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["panel",{"_index":918,"title":{},"body":{"components/NavigationPanelComponent.html":{}}}],["panel'},{'name",{"_index":266,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["panel.component",{"_index":478,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/MainPageComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{}}}],["panel.component.html",{"_index":919,"title":{},"body":{"components/NavigationPanelComponent.html":{}}}],["panel.component.scss",{"_index":920,"title":{},"body":{"components/NavigationPanelComponent.html":{}}}],["panel.component.ts",{"_index":917,"title":{},"body":{"components/NavigationPanelComponent.html":{},"coverage.html":{}}}],["panel.component.ts:20",{"_index":927,"title":{},"body":{"components/NavigationPanelComponent.html":{}}}],["panel.component.ts:23",{"_index":926,"title":{},"body":{"components/NavigationPanelComponent.html":{}}}],["panel.component.ts:29",{"_index":924,"title":{},"body":{"components/NavigationPanelComponent.html":{}}}],["panel.component.ts:40",{"_index":923,"title":{},"body":{"components/NavigationPanelComponent.html":{}}}],["panel.component.ts:50",{"_index":925,"title":{},"body":{"components/NavigationPanelComponent.html":{}}}],["panel/navigation",{"_index":477,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/clientProportions.html":{},"coverage.html":{},"interfaces/editForm.html":{}}}],["param",{"_index":63,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/ClientImageControlService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/shopData.html":{}}}],["parameters",{"_index":24,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"miscellaneous/functions.html":{}}}],["paramobject",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{}}}],["paramobject.password",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{}}}],["params",{"_index":165,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/roomData.html":{},"interfaces/shopData.html":{}}}],["params.append('filters",{"_index":1357,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["params.get('id",{"_index":493,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["params.get('planid",{"_index":1050,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["paramsitem",{"_index":1239,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["paramslist",{"_index":1236,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["paramsspan",{"_index":1234,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["paramstitle",{"_index":1231,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["parent_element",{"_index":2046,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["parent_element.classlist.contains('projectpreviewspan",{"_index":2048,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["parseint(params.get('planid",{"_index":1052,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["parseint(this.route.snapshot.params['roomid",{"_index":1040,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["parts",{"_index":901,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["parts.length",{"_index":904,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["parts.pop()?.tolowercase",{"_index":905,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["password",{"_index":137,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/googleAuthData.html":{}}}],["path",{"_index":74,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["pdf",{"_index":1103,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["percentage",{"_index":1402,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["pipe",{"_index":391,"title":{"pipes/CostFormatPipe.html":{}},"body":{"pipes/CostFormatPipe.html":{},"coverage.html":{},"index.html":{}}}],["pipes",{"_index":393,"title":{},"body":{"pipes/CostFormatPipe.html":{}}}],["pipes/cost",{"_index":624,"title":{},"body":{"components/FinderComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/foundFurniture.html":{}}}],["pipetransform",{"_index":401,"title":{},"body":{"pipes/CostFormatPipe.html":{}}}],["plan",{"_index":268,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["plan_id",{"_index":1051,"title":{},"body":{"components/PlanHousePageComponent.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["planhouse",{"_index":827,"title":{},"body":{"components/MainPageComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/roomSpanSettings.html":{}}}],["planhousecomponent",{"_index":199,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"coverage.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["planhouseemitter",{"_index":2035,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["planhouseexampledata",{"_index":812,"title":{},"body":{"components/MainPageComponent.html":{}}}],["planhousepagecomponent",{"_index":270,"title":{"components/PlanHousePageComponent.html":{}},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"coverage.html":{}}}],["planid",{"_index":1001,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["plugins",{"_index":1621,"title":{},"body":{"dependencies.html":{}}}],["position",{"_index":1240,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["postcreateaccount",{"_index":98,"title":{},"body":{"injectables/AccountService.html":{}}}],["postcreateaccount(createaccountdata",{"_index":115,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["postcreatefurniturecard",{"_index":684,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["postcreatefurniturecard(furnituredata",{"_index":693,"title":{},"body":{"injectables/FurnitureCardControlService.html":{}}}],["postcreatelongjwt",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{}}}],["postcreatelongjwt(authdata",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{}}}],["postcreateproject",{"_index":1091,"title":{},"body":{"injectables/ProjectService.html":{}}}],["postcreateproject(jwt",{"_index":1104,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["postcreateshortjwt",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{}}}],["postcreateshortjwt(email",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{}}}],["postuploadfurnituremodel",{"_index":730,"title":{},"body":{"injectables/FurnitureModelControlService.html":{}}}],["postuploadfurnituremodel(modelfile",{"_index":739,"title":{},"body":{"injectables/FurnitureModelControlService.html":{}}}],["postuploadprojectimages",{"_index":1299,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["postuploadprojectimages(color",{"_index":1312,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["postuploaduseravatar",{"_index":1300,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["postuploaduseravatar(imagefile",{"_index":1314,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["previewurl",{"_index":145,"title":{},"body":{"injectables/AccountService.html":{},"injectables/ReportService.html":{},"injectables/ShopService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"interfaces/reportResponse.html":{}}}],["previousgridarea",{"_index":2015,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["private",{"_index":62,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["proccessdescription",{"_index":1463,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["proccessdescription(description",{"_index":1476,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["proccessdescription(furnituredata.description,furnituredata.proportions",{"_index":1510,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["progress",{"_index":865,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["project",{"_index":1108,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["project.service",{"_index":129,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["project_data",{"_index":1069,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["projectdata.name",{"_index":1086,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["projectid",{"_index":1096,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/editForm.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["projectinformation",{"_index":127,"title":{"interfaces/projectInformation.html":{}},"body":{"injectables/AccountService.html":{},"injectables/ProjectService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["projectnameform",{"_index":985,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["projects",{"_index":141,"title":{},"body":{"injectables/AccountService.html":{},"components/PlanHousePageComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/furnitureAccountData.html":{}}}],["projectserverinformation",{"_index":128,"title":{"interfaces/projectServerInformation.html":{}},"body":{"injectables/AccountService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["projectservice",{"_index":198,"title":{"injectables/ProjectService.html":{}},"body":{"components/AppComponent.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"coverage.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{}}}],["promise",{"_index":109,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"components/CreateFurniturePageComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"miscellaneous/functions.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/googleAuthData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/rangeFilter.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["promise((resolve",{"_index":380,"title":{},"body":{"injectables/ClientImageControlService.html":{}}}],["promise.all",{"_index":507,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["properties",{"_index":91,"title":{"properties.html":{}},"body":{"injectables/AccountService.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"properties.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["proportions",{"_index":466,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/ReportService.html":{},"injectables/ShopService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/additionalData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData-1.html":{},"interfaces/shopData.html":{}}}],["proportions.height",{"_index":559,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{}}}],["proportions.length",{"_index":561,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{}}}],["proportions.width",{"_index":560,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{}}}],["protected",{"_index":413,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["provide",{"_index":2282,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provideanimations",{"_index":2279,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provideclienthydration",{"_index":2278,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providedin",{"_index":58,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interfaces/MyXhrUploadOptions.html":{},"injectables/NotificationService.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["provideeventplugins",{"_index":2281,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providehttpclient(withinterceptorsfromdi",{"_index":2280,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providerouter(routes",{"_index":2277,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providers",{"_index":193,"title":{},"body":{"components/AppComponent.html":{},"miscellaneous/variables.html":{}}}],["providers:[autoheightdirective,notificationcomponent,accountservice,authservice,accountcookieservice,serverimagecontrolservice,projectservice,planhousecomponent,scenecomponent,furniturecardcontrolservice,furnituremodelcontrolservice,shopservice,finderservice,location",{"_index":241,"title":{},"body":{"components/AppComponent.html":{}}}],["public",{"_index":868,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["puppeteer",{"_index":1642,"title":{},"body":{"dependencies.html":{}}}],["putupdatebasedata",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{}}}],["putupdatebasedata(changedata",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{}}}],["putupdatefurniturecard",{"_index":685,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["putupdatefurniturecard(furniturecardupdatedata",{"_index":695,"title":{},"body":{"injectables/FurnitureCardControlService.html":{}}}],["putupdateproject",{"_index":1092,"title":{},"body":{"injectables/ProjectService.html":{}}}],["putupdateproject(jwt",{"_index":1106,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["putupdatesecondaryaccountdata",{"_index":99,"title":{},"body":{"injectables/AccountService.html":{}}}],["putupdatesecondaryaccountdata(changedata",{"_index":118,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["px",{"_index":345,"title":{},"body":{"directives/AutoHeightDirective.html":{},"interfaces/roomSpanSettings.html":{}}}],["q",{"_index":1940,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["quality",{"_index":383,"title":{},"body":{"injectables/ClientImageControlService.html":{}}}],["query",{"_index":672,"title":{},"body":{"injectables/FinderService.html":{}}}],["querydata",{"_index":1340,"title":{"interfaces/queryData.html":{}},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"coverage.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["queryvalue",{"_index":361,"title":{},"body":{"injectables/CategoryService.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/option.html":{},"interfaces/rangeFilter.html":{},"interfaces/selectFilter.html":{}}}],["radius",{"_index":1212,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData-1.html":{}}}],["range",{"_index":365,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ShopService.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/selectFilter.html":{},"miscellaneous/typealiases.html":{}}}],["rangefilter",{"_index":366,"title":{"interfaces/rangeFilter.html":{}},"body":{"injectables/CategoryService.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"coverage.html":{},"interfaces/option.html":{},"interfaces/rangeFilter.html":{},"interfaces/selectFilter.html":{},"miscellaneous/typealiases.html":{}}}],["raycaster",{"_index":1764,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["reactiveformsmodule",{"_index":980,"title":{},"body":{"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/editForm.html":{},"interfaces/roomSpanSettings.html":{}}}],["read",{"_index":461,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["reader",{"_index":1153,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["reader.onload",{"_index":1155,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["reader.readasdataurl(renderimage",{"_index":1160,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["reader.result",{"_index":1157,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["received_data",{"_index":632,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["received_data.length",{"_index":635,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["rect",{"_index":1914,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["rect.height",{"_index":1921,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["rect.left",{"_index":1917,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["rect.top",{"_index":1920,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["rect.width",{"_index":1918,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["rectangle_mesh_size",{"_index":1952,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["rectangle_mesh_size.length",{"_index":1961,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["rectangle_mesh_size.width",{"_index":1956,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["rectanglemesh",{"_index":1768,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["reject",{"_index":381,"title":{},"body":{"injectables/ClientImageControlService.html":{}}}],["reject(error",{"_index":390,"title":{},"body":{"injectables/ClientImageControlService.html":{}}}],["relative",{"_index":1241,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["relative_x",{"_index":2090,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["relative_y",{"_index":2092,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["reloadpage",{"_index":936,"title":{},"body":{"components/NotificationComponent.html":{}}}],["removefilefromqueue",{"_index":1442,"title":{},"body":{"injectables/UploadService.html":{}}}],["removefilefromqueue(fileid",{"_index":907,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["removefromqueue",{"_index":1397,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["removefromqueue(id",{"_index":1412,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["renderer",{"_index":595,"title":{},"body":{"components/FinderComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/foundFurniture.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["renderer2",{"_index":596,"title":{},"body":{"components/FinderComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/foundFurniture.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["renderimage",{"_index":1101,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{}}}],["rendertitle",{"_index":1197,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["renderurl",{"_index":1145,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["report.html",{"_index":1291,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["report.service",{"_index":1112,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["reportresponse",{"_index":1111,"title":{"interfaces/reportResponse.html":{}},"body":{"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"coverage.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{}}}],["reportservice",{"_index":1093,"title":{"injectables/ReportService.html":{}},"body":{"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"coverage.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{}}}],["request",{"_index":769,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{}}}],["requestanimationframe",{"_index":1834,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["requesturl",{"_index":1353,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["res.blob",{"_index":754,"title":{},"body":{"injectables/FurnitureModelControlService.html":{}}}],["res.ok",{"_index":753,"title":{},"body":{"injectables/FurnitureModelControlService.html":{}}}],["resetroomposition(clientx",{"_index":2108,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["resize",{"_index":820,"title":{},"body":{"components/MainPageComponent.html":{}}}],["resolve(compressedfile",{"_index":387,"title":{},"body":{"injectables/ClientImageControlService.html":{}}}],["response",{"_index":497,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"interfaces/MyXhrUploadOptions.html":{},"injectables/ProjectService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/additionalData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/roomData.html":{},"interfaces/shopData.html":{}}}],["response.authormatched",{"_index":499,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["response.blob",{"_index":511,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["response.furniturecard",{"_index":502,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/additionalData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["response.furniturecard.colors.map(colordata",{"_index":720,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["response.furnitures",{"_index":1123,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["response.furnitures.map(furnituredata",{"_index":1124,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["response.json",{"_index":1366,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["response.ok",{"_index":1362,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["response.resultsarray",{"_index":1368,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["response.status",{"_index":1365,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["response.statustext",{"_index":874,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["response.text",{"_index":1364,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["response?.furniturecard",{"_index":715,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["responsetext",{"_index":867,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["results",{"_index":87,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"dependencies.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"miscellaneous/functions.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"index.html":{},"interfaces/modelInterface.html":{},"modules.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"properties.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results_array",{"_index":1367,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["results_array.map(furniture",{"_index":1370,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["resultsarray",{"_index":1336,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["resultsarray.foreach(furnituredata",{"_index":1377,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["resultsclientfiltersdata",{"_index":1342,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["return",{"_index":80,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["returns",{"_index":30,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"miscellaneous/functions.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["rgba(0",{"_index":1217,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["right",{"_index":1501,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["room",{"_index":1122,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["room.gridarea.split('/').map(number",{"_index":2082,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["room_data",{"_index":1067,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["room_element",{"_index":2236,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["room_element.getboundingclientrect",{"_index":2253,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["room_id",{"_index":1039,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["room_objects_data",{"_index":1993,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["room_proportions",{"_index":1851,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["room_proportions.length",{"_index":1865,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["roomdata",{"_index":1018,"title":{"interfaces/roomData.html":{},"interfaces/roomData-1.html":{}},"body":{"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"coverage.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["roomdata.furnitures.map(furniture",{"_index":1272,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["roomdata.name",{"_index":1161,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["roomdata.objects",{"_index":1895,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["roomdataplan",{"_index":1741,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["roomfloorbase",{"_index":1867,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["roomform",{"_index":2261,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["roomguidetemplate",{"_index":2043,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["roomheight",{"_index":2252,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["roomid",{"_index":1008,"title":{},"body":{"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["roomname",{"_index":1143,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["roomproportions",{"_index":1116,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["rooms",{"_index":1070,"title":{},"body":{"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["roomsguidetemplate1",{"_index":2039,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["roomsguidetemplate2",{"_index":2041,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["roomspan",{"_index":2016,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["roomspansettings",{"_index":1556,"title":{"interfaces/roomSpanSettings.html":{}},"body":{"coverage.html":{},"interfaces/roomSpanSettings.html":{}}}],["roomview",{"_index":2244,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["roomwidth",{"_index":2251,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["root",{"_index":59,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interfaces/MyXhrUploadOptions.html":{},"injectables/NotificationService.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["root'},{'name",{"_index":250,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["rotate",{"_index":2230,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["rotateangle",{"_index":1935,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["rotatetargetobject(event",{"_index":1933,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["route",{"_index":436,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/foundFurniture.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["router",{"_index":431,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/MainPageComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["routerlink",{"_index":577,"title":{},"body":{"components/FinderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{}}}],["routeroutlet",{"_index":210,"title":{},"body":{"components/AppComponent.html":{}}}],["routeroutlet,notificationcomponent,uploadoverlaycomponent",{"_index":240,"title":{},"body":{"components/AppComponent.html":{}}}],["routesub",{"_index":415,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["routing",{"_index":1650,"title":{},"body":{"dependencies.html":{}}}],["row",{"_index":1228,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{},"interfaces/roomSpanSettings.html":{}}}],["rxjs",{"_index":134,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"components/CreateFurniturePageComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"interfaces/MyXhrUploadOptions.html":{},"injectables/NotificationService.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"dependencies.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/roomData.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["rxjs/operators",{"_index":775,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{}}}],["samesite",{"_index":75,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["savechanges",{"_index":1668,"title":{},"body":{"interfaces/editForm.html":{}}}],["savehouse",{"_index":2070,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["saveobjectsemitter",{"_index":1755,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["saveproject",{"_index":994,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["saveroom",{"_index":1801,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["scene",{"_index":1752,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["scene'},{'name",{"_index":272,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["scene.component.html",{"_index":1753,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["scene.component.scss",{"_index":1754,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["scene/scene.component",{"_index":2005,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["scenecomponent",{"_index":200,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"coverage.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["sceneopentoggle",{"_index":2030,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["segments",{"_index":1838,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["select",{"_index":359,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ShopService.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/selectFilter.html":{},"miscellaneous/typealiases.html":{}}}],["selectfilter",{"_index":362,"title":{"interfaces/selectFilter.html":{}},"body":{"injectables/CategoryService.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"coverage.html":{},"interfaces/option.html":{},"interfaces/rangeFilter.html":{},"interfaces/selectFilter.html":{},"miscellaneous/typealiases.html":{}}}],["selector",{"_index":206,"title":{},"body":{"components/AppComponent.html":{},"directives/AutoHeightDirective.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["self",{"_index":1207,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["server",{"_index":860,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["serverconfig",{"_index":1523,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["serverimagecontrol",{"_index":430,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"interfaces/clientProportions.html":{}}}],["serverimagecontrolservice",{"_index":197,"title":{"injectables/ServerImageControlService.html":{}},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"injectables/ServerImageControlService.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"interfaces/clientProportions.html":{},"coverage.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{}}}],["service",{"_index":56,"title":{},"body":{"injectables/AccountCookieService.html":{},"dependencies.html":{}}}],["services/account",{"_index":225,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["services/account.service",{"_index":223,"title":{},"body":{"components/AppComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/editForm.html":{}}}],["services/auth.service",{"_index":224,"title":{},"body":{"components/AppComponent.html":{},"interfaces/editForm.html":{}}}],["services/category.service",{"_index":2009,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["services/client",{"_index":1656,"title":{},"body":{"interfaces/editForm.html":{}}}],["services/finder.service",{"_index":234,"title":{},"body":{"components/AppComponent.html":{},"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["services/furniture",{"_index":230,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["services/notification.service",{"_index":483,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["services/project.service",{"_index":229,"title":{},"body":{"components/AppComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["services/server",{"_index":226,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{}}}],["services/shop.service",{"_index":233,"title":{},"body":{"components/AppComponent.html":{}}}],["services/upload.service",{"_index":1424,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["set('accounttype",{"_index":152,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/googleAuthData.html":{}}}],["set('color",{"_index":1323,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["set('email",{"_index":157,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/googleAuthData.html":{}}}],["set('furniturecardid",{"_index":725,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"injectables/ServerImageControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["set('idmainimage",{"_index":1324,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["set('jwt",{"_index":162,"title":{},"body":{"injectables/AccountService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{},"interfaces/shopData.html":{}}}],["set('name",{"_index":1119,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["set('nickname",{"_index":154,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["set('password",{"_index":159,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/googleAuthData.html":{}}}],["set('projectid",{"_index":1120,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["set('roomid",{"_index":1121,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["set(filtersobject.colors",{"_index":1383,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["seterror",{"_index":958,"title":{},"body":{"injectables/NotificationService.html":{}}}],["seterror(message",{"_index":961,"title":{},"body":{"injectables/NotificationService.html":{}}}],["setfurniturename",{"_index":667,"title":{},"body":{"injectables/FinderService.html":{}}}],["setfurniturename(name",{"_index":673,"title":{},"body":{"injectables/FinderService.html":{}}}],["setguiderule",{"_index":16,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["setjwt",{"_index":17,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["setjwt(jwt",{"_index":43,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["setsuccess",{"_index":959,"title":{},"body":{"injectables/NotificationService.html":{}}}],["setsuccess(message",{"_index":964,"title":{},"body":{"injectables/NotificationService.html":{}}}],["settimeout",{"_index":637,"title":{},"body":{"components/FinderComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/foundFurniture.html":{},"interfaces/roomSpanSettings.html":{}}}],["setusertype",{"_index":18,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["setusertype(accounttype",{"_index":49,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["shadow",{"_index":1215,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["shape",{"_index":1841,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["shape.lineto",{"_index":1846,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["shape.lineto(width",{"_index":1844,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["shape.moveto",{"_index":1843,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["shape.quadraticcurveto",{"_index":1847,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["shape.quadraticcurveto(width",{"_index":1845,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["shape_ratio",{"_index":1893,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["shop",{"_index":274,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"injectables/ShopService.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientFilters.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["shop/${category",{"_index":659,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["shopdata",{"_index":702,"title":{"interfaces/shopData.html":{}},"body":{"injectables/FurnitureCardControlService.html":{},"injectables/ReportService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/reportResponse.html":{},"interfaces/shopData.html":{}}}],["shopdata.cost",{"_index":1511,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["shoppagecomponent",{"_index":273,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"coverage.html":{}}}],["shops",{"_index":464,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/ReportService.html":{},"interfaces/additionalData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/reportResponse.html":{},"interfaces/shopData.html":{}}}],["shops.length",{"_index":566,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["shopservice",{"_index":203,"title":{"injectables/ShopService.html":{}},"body":{"components/AppComponent.html":{},"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"coverage.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["shopsspan",{"_index":1268,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["shopstitle",{"_index":1232,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["showguide",{"_index":2064,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["showloader",{"_index":1898,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["side_area",{"_index":2095,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["signal",{"_index":750,"title":{},"body":{"injectables/FurnitureModelControlService.html":{},"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["simplechanges",{"_index":1479,"title":{},"body":{"components/ViewFurnitureComponent.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["size",{"_index":1189,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["sizing:border",{"_index":1252,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["slider",{"_index":781,"title":{},"body":{"components/ImageSliderComponent.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{}}}],["slider'},{'name",{"_index":259,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["slider.component",{"_index":486,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/ServerImageControlService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/additionalData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["slider.component.html",{"_index":783,"title":{},"body":{"components/ImageSliderComponent.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{}}}],["slider.component.scss",{"_index":784,"title":{},"body":{"components/ImageSliderComponent.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{}}}],["slider.component.ts",{"_index":780,"title":{},"body":{"components/ImageSliderComponent.html":{},"coverage.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{}}}],["slider.component.ts:40",{"_index":803,"title":{},"body":{"components/ImageSliderComponent.html":{}}}],["slider.component.ts:45",{"_index":804,"title":{},"body":{"components/ImageSliderComponent.html":{}}}],["slider.component.ts:52",{"_index":793,"title":{},"body":{"components/ImageSliderComponent.html":{}}}],["slider.component.ts:58",{"_index":792,"title":{},"body":{"components/ImageSliderComponent.html":{}}}],["slider.component.ts:64",{"_index":802,"title":{},"body":{"components/ImageSliderComponent.html":{}}}],["slider.component.ts:73",{"_index":795,"title":{},"body":{"components/ImageSliderComponent.html":{}}}],["slider.component.ts:81",{"_index":797,"title":{},"body":{"components/ImageSliderComponent.html":{}}}],["slider.component.ts:91",{"_index":799,"title":{},"body":{"components/ImageSliderComponent.html":{}}}],["slider/image",{"_index":485,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"components/ImageSliderComponent.html":{},"injectables/ServerImageControlService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/additionalData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/shopData.html":{}}}],["solid",{"_index":1203,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["source",{"_index":4,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["spacing",{"_index":1195,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["spanheight",{"_index":2255,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["spanwidth",{"_index":2254,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["spinner",{"_index":1640,"title":{},"body":{"dependencies.html":{}}}],["src",{"_index":1166,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["src/.../account.service.ts",{"_index":1718,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../app.config.server.ts",{"_index":2275,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../app.config.ts",{"_index":2273,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.service.ts",{"_index":2269,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../category.service.ts",{"_index":2270,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../fbx.loader.ts",{"_index":1719,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../gltf",{"_index":1720,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../index.ts",{"_index":1721,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../main.server.ts",{"_index":2274,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../obj.loader.ts",{"_index":1722,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../reusable",{"_index":1717,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../upload.service.ts",{"_index":2271,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/app.component.ts",{"_index":191,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app.component.ts:27",{"_index":216,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app.config.server.ts",{"_index":1519,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.config.ts",{"_index":1524,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/components/account",{"_index":1526,"title":{},"body":{"coverage.html":{},"interfaces/editForm.html":{}}}],["src/components/create",{"_index":403,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{},"coverage.html":{}}}],["src/components/finder/finder.component.ts",{"_index":572,"title":{},"body":{"components/FinderComponent.html":{},"coverage.html":{},"interfaces/foundFurniture.html":{}}}],["src/components/finder/finder.component.ts:105",{"_index":602,"title":{},"body":{"components/FinderComponent.html":{}}}],["src/components/finder/finder.component.ts:113",{"_index":617,"title":{},"body":{"components/FinderComponent.html":{}}}],["src/components/finder/finder.component.ts:118",{"_index":601,"title":{},"body":{"components/FinderComponent.html":{}}}],["src/components/finder/finder.component.ts:130",{"_index":600,"title":{},"body":{"components/FinderComponent.html":{}}}],["src/components/finder/finder.component.ts:147",{"_index":613,"title":{},"body":{"components/FinderComponent.html":{}}}],["src/components/finder/finder.component.ts:167",{"_index":609,"title":{},"body":{"components/FinderComponent.html":{}}}],["src/components/finder/finder.component.ts:177",{"_index":612,"title":{},"body":{"components/FinderComponent.html":{}}}],["src/components/finder/finder.component.ts:40",{"_index":621,"title":{},"body":{"components/FinderComponent.html":{}}}],["src/components/finder/finder.component.ts:45",{"_index":619,"title":{},"body":{"components/FinderComponent.html":{}}}],["src/components/finder/finder.component.ts:50",{"_index":618,"title":{},"body":{"components/FinderComponent.html":{}}}],["src/components/finder/finder.component.ts:55",{"_index":598,"title":{},"body":{"components/FinderComponent.html":{}}}],["src/components/finder/finder.component.ts:69",{"_index":615,"title":{},"body":{"components/FinderComponent.html":{}}}],["src/components/finder/finder.component.ts:78",{"_index":605,"title":{},"body":{"components/FinderComponent.html":{}}}],["src/components/finder/finder.component.ts:97",{"_index":616,"title":{},"body":{"components/FinderComponent.html":{}}}],["src/components/image",{"_index":779,"title":{},"body":{"components/ImageSliderComponent.html":{},"coverage.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{}}}],["src/components/login",{"_index":1542,"title":{},"body":{"coverage.html":{}}}],["src/components/main",{"_index":808,"title":{},"body":{"components/MainPageComponent.html":{},"coverage.html":{}}}],["src/components/navigation",{"_index":916,"title":{},"body":{"components/NavigationPanelComponent.html":{},"coverage.html":{}}}],["src/components/notification/notification.component.ts",{"_index":930,"title":{},"body":{"components/NotificationComponent.html":{},"coverage.html":{}}}],["src/components/notification/notification.component.ts:17",{"_index":938,"title":{},"body":{"components/NotificationComponent.html":{}}}],["src/components/notification/notification.component.ts:24",{"_index":942,"title":{},"body":{"components/NotificationComponent.html":{}}}],["src/components/notification/notification.component.ts:27",{"_index":943,"title":{},"body":{"components/NotificationComponent.html":{}}}],["src/components/notification/notification.component.ts:33",{"_index":940,"title":{},"body":{"components/NotificationComponent.html":{}}}],["src/components/notification/notification.component.ts:46",{"_index":941,"title":{},"body":{"components/NotificationComponent.html":{}}}],["src/components/notification/notification.component.ts:53",{"_index":939,"title":{},"body":{"components/NotificationComponent.html":{}}}],["src/components/plan",{"_index":977,"title":{},"body":{"components/PlanHousePageComponent.html":{},"coverage.html":{},"interfaces/roomSpanSettings.html":{}}}],["src/components/scene/loaders/index.ts",{"_index":1557,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/components/scene/loaders/loaders/fbx.loader.ts",{"_index":1560,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/components/scene/loaders/loaders/gltf",{"_index":1562,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/components/scene/loaders/loaders/obj.loader.ts",{"_index":1565,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/components/scene/scene.component.ts",{"_index":1567,"title":{},"body":{"coverage.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["src/components/shop",{"_index":1574,"title":{},"body":{"coverage.html":{}}}],["src/components/upload",{"_index":1384,"title":{},"body":{"components/UploadOverlayComponent.html":{},"coverage.html":{}}}],["src/components/view",{"_index":1454,"title":{},"body":{"components/ViewFurnitureComponent.html":{},"coverage.html":{}}}],["src/directives/auto",{"_index":313,"title":{},"body":{"directives/AutoHeightDirective.html":{},"coverage.html":{}}}],["src/interceptors/http",{"_index":759,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{},"coverage.html":{}}}],["src/main.server.ts",{"_index":1585,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/pipes/cost",{"_index":394,"title":{},"body":{"pipes/CostFormatPipe.html":{},"coverage.html":{}}}],["src/services/account",{"_index":6,"title":{},"body":{"injectables/AccountCookieService.html":{},"coverage.html":{}}}],["src/services/account.service.ts",{"_index":90,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"miscellaneous/functions.html":{},"interfaces/furnitureAccountData.html":{},"miscellaneous/typealiases.html":{}}}],["src/services/account.service.ts:109",{"_index":117,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/services/account.service.ts:128",{"_index":111,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/services/account.service.ts:139",{"_index":120,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/services/account.service.ts:154",{"_index":108,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/services/account.service.ts:165",{"_index":113,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/services/account.service.ts:187",{"_index":104,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/services/account.service.ts:97",{"_index":102,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/services/auth.service.ts",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{},"miscellaneous/typealiases.html":{}}}],["src/services/auth.service.ts:38",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/services/auth.service.ts:49",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/services/auth.service.ts:67",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/services/auth.service.ts:79",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/services/auth.service.ts:98",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/services/category.service.ts",{"_index":347,"title":{},"body":{"injectables/CategoryService.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"coverage.html":{},"interfaces/option.html":{},"interfaces/rangeFilter.html":{},"interfaces/selectFilter.html":{},"miscellaneous/typealiases.html":{}}}],["src/services/category.service.ts:72",{"_index":349,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/services/category.service.ts:82",{"_index":350,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/services/client",{"_index":371,"title":{},"body":{"injectables/ClientImageControlService.html":{},"coverage.html":{}}}],["src/services/finder.service.ts",{"_index":663,"title":{},"body":{"injectables/FinderService.html":{},"coverage.html":{}}}],["src/services/finder.service.ts:17",{"_index":676,"title":{},"body":{"injectables/FinderService.html":{}}}],["src/services/finder.service.ts:20",{"_index":680,"title":{},"body":{"injectables/FinderService.html":{}}}],["src/services/finder.service.ts:23",{"_index":668,"title":{},"body":{"injectables/FinderService.html":{}}}],["src/services/finder.service.ts:35",{"_index":674,"title":{},"body":{"injectables/FinderService.html":{}}}],["src/services/finder.service.ts:44",{"_index":671,"title":{},"body":{"injectables/FinderService.html":{}}}],["src/services/furniture",{"_index":683,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["src/services/index.ts",{"_index":1594,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/services/notification.service.ts",{"_index":954,"title":{},"body":{"injectables/NotificationService.html":{},"coverage.html":{}}}],["src/services/notification.service.ts:16",{"_index":968,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/services/notification.service.ts:21",{"_index":971,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/services/notification.service.ts:24",{"_index":967,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/services/notification.service.ts:27",{"_index":970,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/services/notification.service.ts:34",{"_index":963,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/services/notification.service.ts:44",{"_index":965,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/services/notification.service.ts:53",{"_index":960,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/services/project.service.ts",{"_index":1087,"title":{},"body":{"injectables/ProjectService.html":{},"coverage.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["src/services/project.service.ts:106",{"_index":1107,"title":{},"body":{"injectables/ProjectService.html":{}}}],["src/services/project.service.ts:120",{"_index":1102,"title":{},"body":{"injectables/ProjectService.html":{}}}],["src/services/project.service.ts:53",{"_index":1094,"title":{},"body":{"injectables/ProjectService.html":{}}}],["src/services/project.service.ts:66",{"_index":1105,"title":{},"body":{"injectables/ProjectService.html":{}}}],["src/services/project.service.ts:79",{"_index":1097,"title":{},"body":{"injectables/ProjectService.html":{}}}],["src/services/project.service.ts:92",{"_index":1099,"title":{},"body":{"injectables/ProjectService.html":{}}}],["src/services/report.service.ts",{"_index":1126,"title":{},"body":{"injectables/ReportService.html":{},"coverage.html":{},"interfaces/reportResponse.html":{}}}],["src/services/report.service.ts:29",{"_index":1133,"title":{},"body":{"injectables/ReportService.html":{}}}],["src/services/report.service.ts:322",{"_index":1135,"title":{},"body":{"injectables/ReportService.html":{}}}],["src/services/report.service.ts:334",{"_index":1149,"title":{},"body":{"injectables/ReportService.html":{}}}],["src/services/report.service.ts:349",{"_index":1142,"title":{},"body":{"injectables/ReportService.html":{}}}],["src/services/report.service.ts:39",{"_index":1137,"title":{},"body":{"injectables/ReportService.html":{}}}],["src/services/report.service.ts:51",{"_index":1139,"title":{},"body":{"injectables/ReportService.html":{}}}],["src/services/report.service.ts:72",{"_index":1146,"title":{},"body":{"injectables/ReportService.html":{}}}],["src/services/server",{"_index":1294,"title":{},"body":{"injectables/ServerImageControlService.html":{},"coverage.html":{}}}],["src/services/shop.service.ts",{"_index":1329,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"coverage.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["src/services/shop.service.ts:10",{"_index":1998,"title":{},"body":{"interfaces/queryData.html":{}}}],["src/services/shop.service.ts:151",{"_index":1335,"title":{},"body":{"injectables/ShopService.html":{}}}],["src/services/shop.service.ts:75",{"_index":1345,"title":{},"body":{"injectables/ShopService.html":{}}}],["src/services/shop.service.ts:78",{"_index":1332,"title":{},"body":{"injectables/ShopService.html":{}}}],["src/services/shop.service.ts:97",{"_index":1341,"title":{},"body":{"injectables/ShopService.html":{}}}],["src/services/upload.service.ts",{"_index":851,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/services/upload.service.ts:102",{"_index":1448,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/services/upload.service.ts:107",{"_index":1450,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/services/upload.service.ts:112",{"_index":1451,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/services/upload.service.ts:29",{"_index":1453,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/services/upload.service.ts:30",{"_index":1452,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/services/upload.service.ts:31",{"_index":1445,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/services/upload.service.ts:73",{"_index":1446,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/services/upload.service.ts:87",{"_index":1447,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/usable/reusable",{"_index":1605,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["standalone",{"_index":208,"title":{},"body":{"components/AppComponent.html":{},"directives/AutoHeightDirective.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["start_column",{"_index":2098,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["start_row",{"_index":2100,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["startcolumn",{"_index":2079,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["startrange",{"_index":1339,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["startrow",{"_index":2078,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["startx",{"_index":2002,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["starty",{"_index":2003,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["statements",{"_index":1517,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":2038,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["status",{"_index":866,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["strategies",{"_index":1651,"title":{},"body":{"dependencies.html":{}}}],["strict",{"_index":76,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["string",{"_index":38,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"miscellaneous/functions.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{},"miscellaneous/variables.html":{}}}],["structure",{"_index":717,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["style",{"_index":1238,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["styleurl",{"_index":410,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/foundFurniture.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{}}}],["styleurls",{"_index":1657,"title":{},"body":{"interfaces/editForm.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["subscription",{"_index":472,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["success",{"_index":385,"title":{},"body":{"injectables/ClientImageControlService.html":{},"interfaces/MyXhrUploadOptions.html":{},"injectables/NotificationService.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"miscellaneous/typealiases.html":{}}}],["successmessage",{"_index":934,"title":{},"body":{"components/NotificationComponent.html":{}}}],["successsubject",{"_index":956,"title":{},"body":{"injectables/NotificationService.html":{}}}],["switch",{"_index":1937,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["table",{"_index":1608,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1607,"title":{},"body":{"coverage.html":{}}}],["taiga",{"_index":805,"title":{},"body":{"components/ImageSliderComponent.html":{},"dependencies.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{}}}],["target",{"_index":1689,"title":{},"body":{"interfaces/editForm.html":{}}}],["target.files?.[0",{"_index":1690,"title":{},"body":{"interfaces/editForm.html":{}}}],["target_element",{"_index":2109,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["targetobject",{"_index":1771,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["template",{"_index":188,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["templateref",{"_index":2004,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["templateurl",{"_index":212,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["temporary",{"_index":46,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["text",{"_index":1186,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["text/html",{"_index":1282,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["textarea",{"_index":328,"title":{},"body":{"directives/AutoHeightDirective.html":{}}}],["then((res",{"_index":752,"title":{},"body":{"injectables/FurnitureModelControlService.html":{}}}],["this.abortconroller",{"_index":1798,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.abortconroller.abort",{"_index":1967,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.abortcontroller",{"_index":1351,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["this.abortcontroller.abort",{"_index":1352,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["this.abortcontroller.signal",{"_index":1361,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["this.accountcookieservice.deleteaccounttype",{"_index":1713,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.accountcookieservice.deleteguiderule",{"_index":2194,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.accountcookieservice.deletejwt",{"_index":1712,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.accountcookieservice.getguiderule",{"_index":2067,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.accountcookieservice.getjwt",{"_index":184,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/PlanHousePageComponent.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.accountcookieservice.getusertype",{"_index":1671,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.accountcookieservice.setguiderule",{"_index":2188,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.accountdata",{"_index":1048,"title":{},"body":{"components/PlanHousePageComponent.html":{},"interfaces/editForm.html":{}}}],["this.accountdata.avatarurl",{"_index":1694,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.accountdata.nickname",{"_index":1667,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.accountdata.password",{"_index":1679,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.accountdata.projects",{"_index":1063,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.accountdata.projects.length",{"_index":1053,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.accountdata.projects.splice(indexproject",{"_index":1075,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.accountdata.projects[indexproject]._id",{"_index":1073,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.accountdata.projects[plan_id",{"_index":1054,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.accountdata.projects[this.currentprojectid!].rooms",{"_index":1076,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.accountdata.projects[this.currentprojectid]._id",{"_index":1066,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.accountdata.projects[this.currentprojectid].name",{"_index":1071,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.accountdata?.password",{"_index":1676,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.accountservice.deleteaccountjwt(jwt",{"_index":1711,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.accountservice.getaccount(jwt)).accountdata",{"_index":1049,"title":{},"body":{"components/PlanHousePageComponent.html":{},"interfaces/editForm.html":{}}}],["this.accountservice.putupdatesecondaryaccountdata(change_data",{"_index":1666,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.addmodel(furniture_id",{"_index":1797,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.addmodel(object.objectid",{"_index":1896,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.addmodule",{"_index":1034,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.addobjecttoscene(load_object",{"_index":1805,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.animate",{"_index":1835,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.animationframeid",{"_index":1833,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.authservice.putupdatebasedata(change_data",{"_index":1678,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.baseserviceurl",{"_index":873,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["this.baseserviceurl}?category=${categoryname}&startrange=${startrange",{"_index":1354,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["this.baseserviceurl}main?furniturecardid=${furniturecardid}&color=${color",{"_index":1328,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["this.calculatefrustumbounds",{"_index":1892,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.calculategridarea(clientx",{"_index":2114,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.calculategridarea(event.changedtouches[0].clientx",{"_index":2151,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.calculategridarea(event.clientx",{"_index":2150,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.calculatemoveobjectdata(object",{"_index":1897,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.calculateobjectsavedata(object",{"_index":1992,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.calculateroomspansettings",{"_index":2055,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.callsaveemitter.emit",{"_index":2071,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.camera",{"_index":1815,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.camera.aspect",{"_index":1908,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.camera.position.clone",{"_index":1973,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.camera.position.copy(oldcameraposition",{"_index":1980,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.camera.position.set(0",{"_index":1783,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.camera.position.z",{"_index":1829,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.camera.rotation.clone",{"_index":1975,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.camera.rotation.copy(oldcamerarotation",{"_index":1981,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.camera.rotation.set(three.mathutils.degtorad",{"_index":1785,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.camera.updateprojectionmatrix",{"_index":1909,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.cancelupload(file.id",{"_index":884,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["this.canvasratioofwindow",{"_index":1831,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.categoryarray",{"_index":2062,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.categoryservice.getgetallcategories()).categoryarray",{"_index":2063,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.cdr.detectchanges",{"_index":2052,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.checkauthandloaddata",{"_index":1661,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.checkguideinclude",{"_index":2044,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.checkshoppage(value",{"_index":655,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["this.checkvalid('create",{"_index":518,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.checkvalid('update",{"_index":538,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.checkviewport",{"_index":845,"title":{},"body":{"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{}}}],["this.circumference",{"_index":1433,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["this.clearfurniturecard",{"_index":494,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.clearnotification",{"_index":973,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.clearroom",{"_index":1782,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.clicktimer",{"_index":2142,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.clipboardservice.copyfromcontent(furnitureurl",{"_index":1508,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["this.closeaddmodule",{"_index":1058,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.closeeditform",{"_index":1674,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.closefoundresultslist",{"_index":636,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["this.closeloader",{"_index":1807,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.controls",{"_index":1852,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.controls.dampingfactor",{"_index":1856,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.controls.enabledamping",{"_index":1855,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.controls.enablezoom",{"_index":1858,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.controls.maxdistance",{"_index":1860,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.controls.maxpolarangle",{"_index":1862,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.controls.mindistance",{"_index":1859,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.cookieservice.delete('accounttype",{"_index":86,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["this.cookieservice.delete('guideinclude",{"_index":82,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["this.cookieservice.delete('jwt",{"_index":77,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["this.cookieservice.deleteaccounttype",{"_index":951,"title":{},"body":{"components/NotificationComponent.html":{}}}],["this.cookieservice.deletejwt",{"_index":950,"title":{},"body":{"components/NotificationComponent.html":{}}}],["this.cookieservice.get('accounttype",{"_index":85,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["this.cookieservice.get('guideinclude",{"_index":81,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["this.cookieservice.get('jwt",{"_index":83,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["this.cookieservice.getjwt",{"_index":488,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.cookieservice.set('accounttype",{"_index":84,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["this.cookieservice.set('guideinclude",{"_index":78,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["this.cookieservice.set('jwt",{"_index":72,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["this.costpipe(shopdata.cost",{"_index":1278,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["this.createfurniturecomponent",{"_index":569,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.createfurniturecomponent.currentcolorid",{"_index":503,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.createfurniturecomponent.furnituredata",{"_index":520,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.createfurniturecomponent.furnituredata.colors.length",{"_index":571,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.createfurniturecomponent.furnituredata.colors[this.createfurniturecomponent.currentcolorid].color",{"_index":570,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.createfurniturecomponent.furnituremodelinput.files",{"_index":546,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.createfurniturecomponent.furnituremodelinput.files![0",{"_index":534,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.createfurniturecomponent.openadditional",{"_index":562,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.createfurniturecomponent.opencolormodule",{"_index":551,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.createfurniturecomponent.openshopsmodule",{"_index":567,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.createfurniturecomponentref.nativeelement.queryselector",{"_index":554,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.createreporthtml(roomdata",{"_index":1152,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["this.createroom",{"_index":1788,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.createroomshape(room_proportions.width",{"_index":1864,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.currentcolorid",{"_index":1504,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["this.currentidclickedroom",{"_index":2088,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.currentplanhouse",{"_index":1068,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.currentprojectid",{"_index":1055,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.currentviewroom",{"_index":2130,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.debouncetimer",{"_index":653,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["this.displayuploads",{"_index":1427,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["this.displayuploads.find(f",{"_index":1431,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["this.downloadhtml(roomname",{"_index":1286,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["this.editform",{"_index":1699,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.editform.addcontrol('password",{"_index":1703,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.editform.reset",{"_index":1709,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.editform.valid",{"_index":1669,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.editform.value.nickname",{"_index":1665,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.editform.value.password",{"_index":1677,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.el.nativeelement.addeventlistener('input",{"_index":338,"title":{},"body":{"directives/AutoHeightDirective.html":{}}}],["this.elemenetref.nativeelement.queryselector('.addmodule",{"_index":1035,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.elementref.nativeelement.parentelement",{"_index":2047,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.elementref.nativeelement.queryselector('#canvascontainer",{"_index":1828,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.elementref.nativeelement.queryselector('.addmodulebtn",{"_index":2059,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.elementref.nativeelement.queryselector('.colors",{"_index":1487,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["this.elementref.nativeelement.queryselector('.finderinput",{"_index":631,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["this.elementref.nativeelement.queryselector('.roomspan",{"_index":2054,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.elementref.nativeelement.queryselector('.variantsspan",{"_index":629,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["this.elementref.nativeelement.queryselector('[style*=\"cursor",{"_index":2137,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.elementref.nativeelement.queryselector('form",{"_index":2057,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.elementref.nativeelement.queryselector(`[data",{"_index":2162,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.elementref.nativeelement.queryselectorall('app",{"_index":838,"title":{},"body":{"components/MainPageComponent.html":{}}}],["this.emitplanhouse",{"_index":2141,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.errormessage",{"_index":945,"title":{},"body":{"components/NotificationComponent.html":{}}}],["this.errorsubject.asobservable",{"_index":966,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.errorsubject.next",{"_index":975,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.errorsubject.next(message",{"_index":972,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.finderservice.getfindfurnitures(findstring",{"_index":633,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["this.finderservice.setfurniturename(name",{"_index":651,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["this.findfreespace(new_room.roomproportions",{"_index":2211,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.findfurnitures(value",{"_index":656,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["this.fixpath",{"_index":1796,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.formelement",{"_index":2056,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.formelement.classlist.add('openaddmodule",{"_index":2228,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.formelement.classlist.contains('openaddmodule",{"_index":2232,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.formelement.classlist.remove('openaddmodule",{"_index":2233,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.foundfurniture",{"_index":638,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["this.foundfurniture.length",{"_index":640,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["this.furniturecardid",{"_index":1481,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["this.furniturecardservice.deletefurniturecard(jwt",{"_index":515,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"interfaces/clientProportions.html":{}}}],["this.furniturecardservice.getfurniturecard(furniturecardid)).furniturecard.proportions",{"_index":1810,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.furniturecardservice.getfurniturecard(this.furniturecardid",{"_index":1482,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["this.furniturecardservice.getfurniturecard(this.idpage",{"_index":498,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.furniturecardservice.postcreatefurniturecard(furniture_data",{"_index":522,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.furniturecardservice.putupdatefurniturecard(furniture_data",{"_index":539,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.furnituredata",{"_index":501,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.furnituremodelservice.deletefurnituremodel(jwt",{"_index":513,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.furnituremodelservice.getfurnituremodel(jwt",{"_index":1811,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.furnituremodelservice.postuploadfurnituremodel(furniture_model_blob",{"_index":535,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.furnituremodelservice.postuploadfurnituremodel(furniture_model_blob[0",{"_index":548,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.generatehtmlcontent(roomdata",{"_index":1158,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["this.getfileextension(file.name",{"_index":889,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["this.getfindoptionsbyresult(updated_results",{"_index":1372,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["this.getobjectsize(this.rectanglemesh",{"_index":1871,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.getobjectsize(this.rectanglemesh).width",{"_index":1791,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.getobjectsize(this.targetobject",{"_index":1954,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.guidetemplate",{"_index":2050,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.hasbeenchanged",{"_index":1793,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.hasroomidbeenprocessed",{"_index":1036,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.hovermap.get(id",{"_index":1437,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["this.hovermap.set(id",{"_index":1436,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["this.httpmodule.delete(this.baseserviceurl",{"_index":727,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["this.httpmodule.get(this.baseserviceurl",{"_index":712,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["this.httpmodule.post(this.baseserviceurl",{"_index":724,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["this.httpmodule.put(this.baseserviceurl",{"_index":726,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["this.idpage",{"_index":492,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.imageclientcontrolservice.compressimage(file",{"_index":1692,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.imageservercontrolservice.getaccountavatar(jwt",{"_index":1685,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.imageservercontrolservice.postuploaduseravatar(compressed_image",{"_index":1693,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.imageservice.getmainimage(idfurniture",{"_index":658,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["this.initcategories",{"_index":2045,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.initeditform",{"_index":1662,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.initialized.emit",{"_index":2060,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.initthreejs",{"_index":1776,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.inputelement",{"_index":630,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["this.inputelement.value",{"_index":644,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["this.inputfurniturenamesubject.asobservable",{"_index":677,"title":{},"body":{"injectables/FinderService.html":{}}}],["this.inputfurniturenamesubject.next(name",{"_index":682,"title":{},"body":{"injectables/FinderService.html":{}}}],["this.inputprocess",{"_index":645,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["this.isareaoccupied(dragged_element.style.gridarea",{"_index":2179,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.isareaoccupied(grid_area",{"_index":2115,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.isareaoccupied(gridarea",{"_index":2154,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.isareaoccupied(new_grid_area",{"_index":2170,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.isclick",{"_index":2143,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.isdoubleclick",{"_index":2145,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.isdragging",{"_index":2122,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.iseditformopen",{"_index":1707,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.isguideincluded",{"_index":2049,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.isguidevisible",{"_index":2065,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.ishovered(file.id",{"_index":1429,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["this.ismobileview",{"_index":846,"title":{},"body":{"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{}}}],["this.isshowloader",{"_index":1899,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.lastplanhouse",{"_index":2248,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.loadfurnituremodel(model",{"_index":1812,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.loadroom",{"_index":1794,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.loaduserdata(jwt",{"_index":1697,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.location.path",{"_index":1085,"title":{},"body":{"components/PlanHousePageComponent.html":{},"interfaces/roomSpanSettings.html":{}}}],["this.location.path().split('/').slice(0",{"_index":1082,"title":{},"body":{"components/PlanHousePageComponent.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["this.location.replacestate(new_url",{"_index":1084,"title":{},"body":{"components/PlanHousePageComponent.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["this.mobileview",{"_index":337,"title":{},"body":{"directives/AutoHeightDirective.html":{}}}],["this.mouse.x",{"_index":1922,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.mouse.y",{"_index":1923,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.notification.seterror",{"_index":558,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.notification.seterror(error.error.message",{"_index":778,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{}}}],["this.notification.setsuccess",{"_index":536,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/PlanHousePageComponent.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{}}}],["this.notificationservice.error$.subscribe(message",{"_index":944,"title":{},"body":{"components/NotificationComponent.html":{}}}],["this.notificationservice.success$.subscribe(message",{"_index":947,"title":{},"body":{"components/NotificationComponent.html":{}}}],["this.oldsizeviewroom",{"_index":2238,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.oldsizeviewroom.height",{"_index":2241,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.oldsizeviewroom.width",{"_index":2240,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.oninput.bind(this.el.nativeelement",{"_index":339,"title":{},"body":{"directives/AutoHeightDirective.html":{}}}],["this.onmouseup(event",{"_index":2123,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.openfoundresultslist",{"_index":634,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["this.openhtmlinnewtab(roomdata.name",{"_index":1159,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["this.openviewroom(this.currentidclickedroom",{"_index":2184,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.pageinit(jwt",{"_index":495,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.planhouse",{"_index":1037,"title":{},"body":{"components/PlanHousePageComponent.html":{},"interfaces/roomSpanSettings.html":{}}}],["this.planhouse.currentidclickedroom",{"_index":1043,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.planhouse.currentviewroom",{"_index":1042,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.planhouse.foreach(room",{"_index":2077,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.planhouse.guidetemplate",{"_index":1046,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.planhouse.openviewroom(room_id",{"_index":1044,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.planhouse.roomguidetemplate",{"_index":1047,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.planhouse.sceneopentoggle",{"_index":1045,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.planhouse.splice(this.currentidclickedroom",{"_index":2214,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.planhouse[indexroom",{"_index":2249,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.planhouse[indexroom].name",{"_index":2226,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.planhouse[indexroom].roomproportions",{"_index":2225,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.planhouse[this.currentidclickedroom!].gridarea",{"_index":2117,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.planhouse[this.currentidclickedroom].gridarea",{"_index":2172,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.planhouse[this.currentidclickedroom].gridarea.split('/').map(number",{"_index":2163,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.planhouse[this.currentidclickedroom].name",{"_index":2205,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.planhouse[this.currentidclickedroom].roomproportions",{"_index":2089,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.planhouse[this.currentviewroom].objects",{"_index":2196,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.planhousecomponent.closeviewroom",{"_index":1968,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.planhousecomponent.sceneopentoggle",{"_index":1792,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.planhouseemitter.emit(this.planhouse",{"_index":2069,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.previousgridarea",{"_index":2118,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.projectnameform.value",{"_index":1059,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.projectnameform.value.name",{"_index":1060,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.projectservice.deletedeleteproject(jwt",{"_index":1074,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.projectservice.getgetreportofroom(jwt",{"_index":1985,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.projectservice.postcreateproject(jwt",{"_index":1062,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.projectservice.putupdateproject(jwt",{"_index":1072,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.raycaster.intersectobject(this.rectanglemesh",{"_index":1946,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.raycaster.intersectobjects(this.scene.children",{"_index":1926,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.raycaster.setfromcamera(this.mouse",{"_index":1924,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.rectanglemesh",{"_index":1868,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.rectanglemesh.name",{"_index":1866,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.rectanglemesh.rotation.x",{"_index":1789,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.reloadpage",{"_index":952,"title":{},"body":{"components/NotificationComponent.html":{}}}],["this.renderer",{"_index":1824,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.renderer.addclass(room_element",{"_index":2260,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.renderer.addclass(this.addmodule",{"_index":1077,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.renderer.addclass(this.variantsspan",{"_index":641,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["this.renderer.domelement",{"_index":1854,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.renderer.domelement.todataurl('image/png",{"_index":1977,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.renderer.removeclass(room_element",{"_index":2243,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.renderer.removeclass(this.addmodule",{"_index":1079,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.renderer.removeclass(this.variantsspan",{"_index":643,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["this.renderer.removestyle(dragged_element",{"_index":2139,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.renderer.removestyle(room_element",{"_index":2242,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.renderer.removestyle(target_element",{"_index":2119,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.renderer.render(this.scene",{"_index":1836,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.renderer.setsize(window.innerwidth",{"_index":1830,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.renderer.setstyle(event_target",{"_index":2185,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.renderer.setstyle(move_room_element",{"_index":2171,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.renderer.setstyle(room_element",{"_index":2239,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.renderer.setstyle(target_element",{"_index":2116,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.renderer.setstyle(this.roomspan",{"_index":2245,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.renderer.setstyle(this.togglemodulebutton",{"_index":2229,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.reportservice.createreport(response",{"_index":1125,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["this.resetroomposition(event.clientx",{"_index":2131,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.resetroomposition(touch.clientx",{"_index":2134,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.roomdata",{"_index":1778,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.roomdata.objects",{"_index":1894,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.roomdata.roomproportions",{"_index":1787,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.roomdata?._id",{"_index":1971,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.roomform.get('height')?.disable",{"_index":2222,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.roomform.get('height')?.enable",{"_index":2219,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.roomform.get('length')?.disable",{"_index":2223,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.roomform.get('length')?.enable",{"_index":2220,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.roomform.get('width')?.disable",{"_index":2221,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.roomform.get('width')?.enable",{"_index":2218,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.roomform.patchvalue",{"_index":2207,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.roomform.value",{"_index":2209,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.roomform.value.name",{"_index":2204,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.roomguidetemplate",{"_index":2193,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.roomproportions",{"_index":1786,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.roomproportions.length",{"_index":1882,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.roomproportions.width",{"_index":1879,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.roomsguidetemplate1",{"_index":2051,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.roomsguidetemplate2",{"_index":2189,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.roomspan",{"_index":2053,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.roomspan.getboundingclientrect",{"_index":2256,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.roomspan.queryselector(`[data",{"_index":2110,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.roomspansettings.endx",{"_index":2096,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.roomspansettings.gap",{"_index":2097,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.roomspansettings.startx",{"_index":2091,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.roomspansettings.starty",{"_index":2093,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.route.parammap.subscribe(params",{"_index":491,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.route.root",{"_index":647,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["this.route.snapshot.params['furniturecardid",{"_index":1795,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.route.snapshot.params['planid",{"_index":1969,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.route.snapshot.params['roomid",{"_index":1038,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.router.navigatebyurl",{"_index":1714,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.router.navigatebyurl('/account",{"_index":517,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.router.navigatebyurl('/create/new",{"_index":500,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.router.navigatebyurl('/login",{"_index":489,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{}}}],["this.router.navigatebyurl('/plan",{"_index":1056,"title":{},"body":{"components/PlanHousePageComponent.html":{},"interfaces/editForm.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.router.navigatebyurl('/shop",{"_index":1483,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["this.routesub",{"_index":490,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.savehouse",{"_index":2197,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.saveobjectsemitter.emit(room_objects_data",{"_index":1994,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.saveproject",{"_index":1080,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.saveroom",{"_index":1806,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.scene",{"_index":1780,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.scene.add(hemisphere_light",{"_index":1823,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.scene.children.filter(object",{"_index":1989,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.scene.children.length",{"_index":1902,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.scene.children[i",{"_index":1903,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.scene.remove(object",{"_index":1906,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.scene.remove(this.targetobject",{"_index":1987,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.scenecomponent.hasbeenchanged",{"_index":2199,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.scenecomponent.loadroom",{"_index":2200,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.scenecomponent.saveroom",{"_index":2202,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.sceneopentoggle",{"_index":2129,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.serverimagecontrol.deleteproject(jwt",{"_index":514,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"interfaces/clientProportions.html":{}}}],["this.serverimagecontrol.postuploadprojectimages(colordata.color",{"_index":532,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.showguide",{"_index":2190,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.showloader",{"_index":1809,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.successmessage",{"_index":948,"title":{},"body":{"components/NotificationComponent.html":{}}}],["this.successsubject.asobservable",{"_index":969,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.successsubject.next",{"_index":976,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.successsubject.next(message",{"_index":974,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.targetobject",{"_index":1913,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.targetobject.position.set(newxobjectposition",{"_index":1965,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.targetobject.rotation.y",{"_index":1941,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.togglecontrols(false",{"_index":2227,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.togglecontrols(true",{"_index":2215,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.togglemodulebutton",{"_index":2058,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.toggleopenroommodule",{"_index":2206,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.toggleopenroommodule(this.currentidclickedroom",{"_index":2144,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.transformurlarraytoblob(colordata.imagesdata.images",{"_index":527,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.updatebasedataifneeded(jwt",{"_index":1673,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.updatesecondaryaccountdata(jwt",{"_index":1672,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.updateupload(file.id",{"_index":880,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["this.uploads$.next([...current",{"_index":915,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["this.uploads$.next(updatedqueue",{"_index":912,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["this.uploads$.value.filter(file",{"_index":909,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["this.uploadservice.addfile(modelfile",{"_index":755,"title":{},"body":{"injectables/FurnitureModelControlService.html":{}}}],["this.uploadservice.cancelupload(id",{"_index":1434,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["this.uploadservice.removefilefromqueue(id",{"_index":1435,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["this.uploadservice.uploads$.subscribe(files",{"_index":1426,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["this.uppy",{"_index":870,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["this.uppy.addfile",{"_index":888,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["this.uppy.getfile(fileid",{"_index":894,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["this.uppy.on('upload",{"_index":875,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["this.uppy.removefile(fileid",{"_index":895,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["this.uppy.use(xhrupload",{"_index":872,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["this.variantsspan",{"_index":628,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["three",{"_index":1645,"title":{},"body":{"dependencies.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["three.buffergeometry",{"_index":1840,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["three.hemispherelight(0xaaaaaa",{"_index":1821,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["three.js",{"_index":1731,"title":{},"body":{"miscellaneous/functions.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["three.mathutils.degtorad",{"_index":1790,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["three.mathutils.degtorad(90",{"_index":1863,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["three.mesh",{"_index":1769,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["three.object3d",{"_index":1772,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["three.perspectivecamera",{"_index":1758,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["three.perspectivecamera(75",{"_index":1816,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["three.raycaster",{"_index":1765,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["three.scene",{"_index":1759,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["three.shape",{"_index":1842,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["three.shapegeometry(shape",{"_index":1849,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["three.vector2",{"_index":1767,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["three.webglrenderer",{"_index":1756,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["three/examples/jsm/controls/orbitcontrols.js",{"_index":1740,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["throttle",{"_index":329,"title":{},"body":{"directives/AutoHeightDirective.html":{},"interfaces/roomSpanSettings.html":{}}}],["throw",{"_index":183,"title":{},"body":{"injectables/AccountService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"injectables/ShopService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"interfaces/shopData.html":{}}}],["throwerror",{"_index":773,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{}}}],["throws",{"_index":709,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"injectables/ShopService.html":{},"interfaces/additionalData.html":{},"interfaces/clientFilters.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"interfaces/shopData.html":{}}}],["title",{"_index":214,"title":{},"body":{"components/AppComponent.html":{},"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["togglecontrols(enable",{"_index":2216,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["togglemenu",{"_index":922,"title":{},"body":{"components/NavigationPanelComponent.html":{}}}],["togglemodulebutton",{"_index":2021,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["toggleopenroommodule(indexroom",{"_index":2224,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["top",{"_index":1260,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["touch",{"_index":2132,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["touch.clienty",{"_index":2135,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["touchevent",{"_index":2128,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["transform",{"_index":397,"title":{},"body":{"pipes/CostFormatPipe.html":{},"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["transform(value",{"_index":398,"title":{},"body":{"pipes/CostFormatPipe.html":{}}}],["transformedfurniturecard",{"_index":719,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["transformurlarraytoblob",{"_index":425,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["transformurlarraytoblob(imagesarray",{"_index":454,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["transition",{"_index":1219,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["translatemany",{"_index":354,"title":{},"body":{"injectables/CategoryService.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/option.html":{},"interfaces/rangeFilter.html":{},"interfaces/selectFilter.html":{}}}],["translateone",{"_index":353,"title":{},"body":{"injectables/CategoryService.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/option.html":{},"interfaces/rangeFilter.html":{},"interfaces/selectFilter.html":{}}}],["transparent",{"_index":1246,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["tree",{"_index":190,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["true",{"_index":106,"title":{},"body":{"injectables/AccountService.html":{},"components/AppComponent.html":{},"directives/AutoHeightDirective.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/UploadEntry.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientProportions.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"miscellaneous/functions.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":171,"title":{},"body":{"injectables/AccountService.html":{},"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ShopService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"interfaces/roomData-1.html":{},"interfaces/shopData.html":{}}}],["tuicarousel",{"_index":782,"title":{},"body":{"components/ImageSliderComponent.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{}}}],["turnoff",{"_index":2192,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["turnoffguides(turnoff",{"_index":2191,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["type",{"_index":27,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"miscellaneous/functions.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":2267,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typejwt",{"_index":44,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["typeof",{"_index":1041,"title":{},"body":{"components/PlanHousePageComponent.html":{},"interfaces/roomSpanSettings.html":{}}}],["typerequest",{"_index":440,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["ui/cdk",{"_index":1617,"title":{},"body":{"dependencies.html":{}}}],["ui/core",{"_index":1619,"title":{},"body":{"dependencies.html":{}}}],["ui/event",{"_index":1620,"title":{},"body":{"dependencies.html":{}}}],["ui/kit",{"_index":806,"title":{},"body":{"components/ImageSliderComponent.html":{},"dependencies.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{}}}],["ui/legacy",{"_index":1624,"title":{},"body":{"dependencies.html":{}}}],["undefined",{"_index":446,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FurnitureCardControlService.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/PlanHousePageComponent.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/additionalData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/shopData.html":{}}}],["unique_id",{"_index":886,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["unknown",{"_index":114,"title":{},"body":{"injectables/AccountService.html":{},"injectables/ShopService.html":{}}}],["update",{"_index":438,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"interfaces/clientProportions.html":{},"miscellaneous/typealiases.html":{}}}],["updatebasedataifneeded(jwt",{"_index":1675,"title":{},"body":{"interfaces/editForm.html":{}}}],["updated_results",{"_index":1369,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["updatedqueue",{"_index":908,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["updatefurniturecard",{"_index":426,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["updateplandata",{"_index":995,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["updateplandata(planhouse",{"_index":1017,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["updateroom",{"_index":2203,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["updateroomobjects(objects",{"_index":2195,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["updatesecondaryaccountdata(jwt",{"_index":1663,"title":{},"body":{"interfaces/editForm.html":{}}}],["updateupload",{"_index":1443,"title":{},"body":{"injectables/UploadService.html":{}}}],["updateupload(id",{"_index":913,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["upload",{"_index":275,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"injectables/ServerImageControlService.html":{},"interfaces/UploadEntry.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"dependencies.html":{}}}],["upload.service",{"_index":744,"title":{},"body":{"injectables/FurnitureModelControlService.html":{}}}],["upload_type",{"_index":898,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["uploadavatar(event",{"_index":1688,"title":{},"body":{"interfaces/editForm.html":{}}}],["uploadentry",{"_index":864,"title":{"interfaces/UploadEntry.html":{}},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"coverage.html":{}}}],["uploadimagesinput",{"_index":568,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["uploading",{"_index":863,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"miscellaneous/typealiases.html":{}}}],["uploadinput",{"_index":563,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["uploadinput.click",{"_index":565,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["uploadoverlaycomponent",{"_index":211,"title":{"components/UploadOverlayComponent.html":{}},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/UploadEntry.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"coverage.html":{}}}],["uploads",{"_index":869,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["uploadservice",{"_index":731,"title":{"injectables/UploadService.html":{}},"body":{"injectables/FurnitureModelControlService.html":{},"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"coverage.html":{}}}],["uploadstatus",{"_index":862,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["uploadtype",{"_index":740,"title":{},"body":{"injectables/FurnitureModelControlService.html":{},"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["uppercase",{"_index":1193,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["uppy",{"_index":856,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["uppy/angular",{"_index":1625,"title":{},"body":{"dependencies.html":{}}}],["uppy/core",{"_index":857,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["uppy/xhr",{"_index":859,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"dependencies.html":{}}}],["url",{"_index":126,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"components/ImageSliderComponent.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"miscellaneous/functions.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{},"miscellaneous/variables.html":{}}}],["url('${baseclienturl}assets/fonts/calypso.ttf",{"_index":1167,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["url('${baseclienturl}assets/fonts/courier",{"_index":1170,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["url(this.baseserviceurl",{"_index":745,"title":{},"body":{"injectables/FurnitureModelControlService.html":{}}}],["url.createobjecturl(blob",{"_index":1283,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["url.createobjecturl(compressed_image",{"_index":1695,"title":{},"body":{"interfaces/editForm.html":{}}}],["url.revokeobjecturl(htmlurl",{"_index":1293,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["url.searchparams.set('furniturecardid",{"_index":747,"title":{},"body":{"injectables/FurnitureModelControlService.html":{}}}],["url.searchparams.set('jwt",{"_index":746,"title":{},"body":{"injectables/FurnitureModelControlService.html":{}}}],["urlsearchparams",{"_index":1356,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["urlsearchparams(params).tostring",{"_index":1359,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["usable/main",{"_index":836,"title":{},"body":{"components/MainPageComponent.html":{}}}],["usable/reusable",{"_index":622,"title":{},"body":{"components/FinderComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"interfaces/foundFurniture.html":{}}}],["useclass",{"_index":2284,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validationerrors",{"_index":2008,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["validatorfn",{"_index":2007,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["validators",{"_index":1032,"title":{},"body":{"components/PlanHousePageComponent.html":{},"interfaces/editForm.html":{},"interfaces/roomSpanSettings.html":{}}}],["validators.max(10",{"_index":2264,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["validators.maxlength(20",{"_index":2266,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["validators.maxlength(30",{"_index":1702,"title":{},"body":{"interfaces/editForm.html":{}}}],["validators.min(0.1",{"_index":2263,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["validators.minlength(3",{"_index":1701,"title":{},"body":{"interfaces/editForm.html":{}}}],["validators.minlength(6",{"_index":1705,"title":{},"body":{"interfaces/editForm.html":{}}}],["validators.pattern(/^\\d*\\.?\\d",{"_index":2265,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["validators.required",{"_index":1030,"title":{},"body":{"components/PlanHousePageComponent.html":{},"interfaces/editForm.html":{},"interfaces/roomSpanSettings.html":{}}}],["value",{"_index":123,"title":{},"body":{"injectables/AccountService.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientFilters.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"miscellaneous/variables.html":{}}}],["value.length",{"_index":654,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["value.tostring().replace(/\\b(?=(\\d{3})+(?!\\d))/g",{"_index":402,"title":{},"body":{"pipes/CostFormatPipe.html":{}}}],["var",{"_index":246,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["variable",{"_index":1520,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":2272,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["variantsspan",{"_index":584,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["variantsspanopen",{"_index":642,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["version",{"_index":1996,"title":{},"body":{"properties.html":{}}}],["view",{"_index":278,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["viewchild",{"_index":476,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/roomSpanSettings.html":{}}}],["viewchild('planhouse",{"_index":1026,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["viewchild('roomguidetemplate",{"_index":2042,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["viewchild('roomsguidetemplate1",{"_index":2037,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["viewchild('roomsguidetemplate2",{"_index":2040,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["viewchild('scene",{"_index":2033,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["viewchild(createfurniturecomponent",{"_index":459,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["viewfurniturecomponent",{"_index":277,"title":{"components/ViewFurnitureComponent.html":{}},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"coverage.html":{}}}],["void",{"_index":31,"title":{},"body":{"injectables/AccountCookieService.html":{},"directives/AutoHeightDirective.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureModelControlService.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ReportService.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["weight",{"_index":1198,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["white",{"_index":1244,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{},"interfaces/roomSpanSettings.html":{}}}],["width",{"_index":467,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/ReportService.html":{},"interfaces/additionalData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/shopData.html":{}}}],["width:250px",{"_index":1247,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["width:fit",{"_index":1205,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["widthratio",{"_index":1888,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["window.getcomputedstyle(event_target).getpropertyvalue('grid",{"_index":2183,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["window.innerheight",{"_index":1817,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["window.innerwidth",{"_index":847,"title":{},"body":{"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["window.location.reload",{"_index":949,"title":{},"body":{"components/NotificationComponent.html":{}}}],["window.open(url",{"_index":1284,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["window:resize",{"_index":791,"title":{},"body":{"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{}}}],["workbox",{"_index":1647,"title":{},"body":{"dependencies.html":{}}}],["worker",{"_index":1616,"title":{},"body":{"dependencies.html":{}}}],["wrap",{"_index":1230,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["x",{"_index":1744,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["xdistance",{"_index":1750,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["xhrupload",{"_index":858,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["xmetersdistance",{"_index":1745,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["y",{"_index":1748,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["yes",{"_index":692,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"injectables/ShopService.html":{},"miscellaneous/functions.html":{}}}],["yrotate",{"_index":1749,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["z",{"_index":1746,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["zdistance",{"_index":1751,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["zmetersdistance",{"_index":1747,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["zone.js",{"_index":1652,"title":{},"body":{"dependencies.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"injectables/AccountCookieService.html":{"url":"injectables/AccountCookieService.html","title":"injectable - AccountCookieService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccountCookieService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/account-cookie.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                deleteAccountType\n                            \n                            \n                                deleteGuideRule\n                            \n                            \n                                deleteJwt\n                            \n                            \n                                getGuideRule\n                            \n                            \n                                getJwt\n                            \n                            \n                                getUserType\n                            \n                            \n                                setGuideRule\n                            \n                            \n                                setJwt\n                            \n                            \n                                setUserType\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cookieService: CookieService)\n                    \n                \n                        \n                            \n                                Defined in src/services/account-cookie.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cookieService\n                                                  \n                                                        \n                                                                    CookieService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        deleteAccountType\n                        \n                    \n                \n            \n            \n                \ndeleteAccountType()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/account-cookie.service.ts:89\n                        \n                    \n\n\n            \n                \n                        Удаление типа пользователя из куки\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteGuideRule\n                        \n                    \n                \n            \n            \n                \ndeleteGuideRule()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/account-cookie.service.ts:56\n                        \n                    \n\n\n            \n                \n                        Удаление флага отображения руководства из куки\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteJwt\n                        \n                    \n                \n            \n            \n                \ndeleteJwt()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/account-cookie.service.ts:31\n                        \n                    \n\n\n            \n                \n                        Удаление JWT токена из куки\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getGuideRule\n                        \n                    \n                \n            \n            \n                \ngetGuideRule()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/account-cookie.service.ts:49\n                        \n                    \n\n\n            \n                \n                        Получение значения флага отображения руководства из куки\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                Значение куки guideInclude\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getJwt\n                        \n                    \n                \n            \n            \n                \ngetJwt()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/account-cookie.service.ts:64\n                        \n                    \n\n\n            \n                \n                        Получение JWT токена из куки\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                JWT токен, либо пустую строку, если кука отсутствует\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserType\n                        \n                    \n                \n            \n            \n                \ngetUserType()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/account-cookie.service.ts:82\n                        \n                    \n\n\n            \n                \n                        Получение типа пользователя из куки\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                Тип аккаунта ('email' или 'google'), либо пустая строка, если кука отсутствует\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setGuideRule\n                        \n                    \n                \n            \n            \n                \nsetGuideRule()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/account-cookie.service.ts:38\n                        \n                    \n\n\n            \n                \n                        Установка флага отображения руководства (guideInclude) в куки\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setJwt\n                        \n                    \n                \n            \n            \n                \nsetJwt(jwt: string, typeJwt: \"long\" | \"temporary\")\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/account-cookie.service.ts:18\n                        \n                    \n\n\n            \n                \n                        Установка JWT токена в куки с указанием срока действия\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    JWT токен\n\n                                            \n                                        \n                                        \n                                                typeJwt\n                                            \n                                                        \"long\" | \"temporary\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Тип JWT токена ('long' — долгосрочный, 'temporary' — временный)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setUserType\n                        \n                    \n                \n            \n            \n                \nsetUserType(accountType: accountType)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/account-cookie.service.ts:72\n                        \n                    \n\n\n            \n                \n                        Установка типа пользователя в куки\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                accountType\n                                            \n                                                            accountType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Тип аккаунта ('email' или 'google')\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { CookieService } from 'ngx-cookie-service';\nimport { accountType } from './account.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccountCookieService {\n  constructor(\n    private cookieService: CookieService\n  ) { }\n\n  /**\n   * Установка JWT токена в куки с указанием срока действия\n   * @param jwt JWT токен\n   * @param typeJwt Тип JWT токена ('long' — долгосрочный, 'temporary' — временный)\n   */\n  setJwt(jwt: string, typeJwt: 'long' | 'temporary') {\n    const expirationDate = new Date();\n    if (typeJwt === 'long') {\n      expirationDate.setDate(expirationDate.getDate() + 7); // срок действия 7 дней\n    } else {\n      expirationDate.setMinutes(expirationDate.getMinutes() + 10); // срок действия 10 минут\n    }\n    this.cookieService.set('jwt', jwt, { expires: expirationDate, path: '/', sameSite: 'Strict' });\n  }\n\n  /**\n   * Удаление JWT токена из куки\n   */\n  deleteJwt() {\n    this.cookieService.delete('jwt', '/');\n  }\n\n  /**\n   * Установка флага отображения руководства (guideInclude) в куки\n   */\n  setGuideRule() {\n    // Здесь исправил установку срока действия куки — должно быть объект Date, а не число\n    const expirationDate = new Date();\n    expirationDate.setDate(expirationDate.getDate() + 7);\n    this.cookieService.set('guideInclude', 'false', { expires: expirationDate, path: '/', sameSite: 'Strict' });\n  }\n\n  /**\n   * Получение значения флага отображения руководства из куки\n   * @returns Значение куки guideInclude\n   */\n  getGuideRule() {\n    return this.cookieService.get('guideInclude');\n  }\n\n  /**\n   * Удаление флага отображения руководства из куки\n   */\n  deleteGuideRule() {\n    this.cookieService.delete('guideInclude', '/');\n  }\n\n  /**\n   * Получение JWT токена из куки\n   * @returns JWT токен, либо пустую строку, если кука отсутствует\n   */\n  getJwt(): string {\n    return this.cookieService.get('jwt');\n  }\n\n  /**\n   * Установка типа пользователя в куки\n   * @param accountType Тип аккаунта ('email' или 'google')\n   */\n  setUserType(accountType: accountType) {\n    const expirationDate = new Date();\n    expirationDate.setDate(expirationDate.getDate() + 7);\n    this.cookieService.set('accountType', accountType, { expires: expirationDate, path: '/', sameSite: 'Strict' });\n  }\n\n  /**\n   * Получение типа пользователя из куки\n   * @returns Тип аккаунта ('email' или 'google'), либо пустая строка, если кука отсутствует\n   */\n  getUserType(): string {\n    return this.cookieService.get('accountType');\n  }\n\n  /**\n   * Удаление типа пользователя из куки\n   */\n  deleteAccountType() {\n    this.cookieService.delete('accountType', '/');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AccountService.html":{"url":"injectables/AccountService.html","title":"injectable - AccountService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccountService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/account.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseServiceUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                checkJwt\n                            \n                            \n                                DELETEaccount\n                            \n                            \n                                DELETEaccountJwt\n                            \n                            \n                                    Async\n                                GETaccount\n                            \n                            \n                                POSTcreateAccount\n                            \n                            \n                                PUTupdateSecondaryAccountData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpModule: HttpClient, accountCookieService: AccountCookieService)\n                    \n                \n                        \n                            \n                                Defined in src/services/account.service.ts:97\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpModule\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accountCookieService\n                                                  \n                                                        \n                                                                        AccountCookieService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        checkJwt\n                        \n                    \n                \n            \n            \n                \ncheckJwt()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/account.service.ts:187\n                        \n                    \n\n\n            \n                \n                        Проверка наличия JWT токена в куках\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                true, если JWT токен найден, иначе false\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DELETEaccount\n                        \n                    \n                \n            \n            \n                \nDELETEaccount(jwt: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/account.service.ts:154\n                        \n                    \n\n\n            \n                \n                        Удаление аккаунта пользователя\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    JWT токен\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise с сообщением об успешном удалении пользователя\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DELETEaccountJwt\n                        \n                    \n                \n            \n            \n                \nDELETEaccountJwt(jwt: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/account.service.ts:128\n                        \n                    \n\n\n            \n                \n                        Удаление JWT токена пользователя\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    JWT токен\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise с сообщением об успешном удалении токена\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        GETaccount\n                        \n                    \n                \n            \n            \n                \n                        \n                    GETaccount(jwt: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/account.service.ts:165\n                        \n                    \n\n\n            \n                \n                        Получение полной информации об аккаунте пользователя\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    JWT токен\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Promise с данными аккаунта (включая проекты и мебель)\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        POSTcreateAccount\n                        \n                    \n                \n            \n            \n                \nPOSTcreateAccount(createAccountData: createAccountData)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/account.service.ts:109\n                        \n                    \n\n\n            \n                \n                        Создание нового пользователя\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createAccountData\n                                            \n                                                            createAccountData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Основная информация о пользователе (никнейм, email, пароль)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise с сообщением об успешном создании пользователя\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PUTupdateSecondaryAccountData\n                        \n                    \n                \n            \n            \n                \nPUTupdateSecondaryAccountData(changeData: changeSecondaryData)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/account.service.ts:139\n                        \n                    \n\n\n            \n                \n                        Обновление вторичных данных аккаунта (например, никнейм)\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                changeData\n                                            \n                                                            changeSecondaryData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Данные для изменения\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise с сообщением об успешном обновлении\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseServiceUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : baseUrl + 'account'\n                    \n                \n                    \n                        \n                                Defined in src/services/account.service.ts:97\n                        \n                    \n\n            \n                \n                    Базовый URL для аккаунт-сервисов\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { projectInformation, projectServerInformation } from './project.service';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { AccountCookieService } from './account-cookie.service';\nimport { baseUrl } from '.';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные для изменения аккаунта с email\n */\nexport interface changeAccountDataEmail {\n  /** JWT токен */\n  jwt: string;\n  /** Тип аккаунта (email) */\n  accountType: 'email';\n  /** Пароль пользователя */\n  password: string;\n}\n\n/**\n * Полные данные аккаунта пользователя\n */\nexport interface accountFullData {\n  /** URL аватара */\n  avatarUrl: string;\n  /** Никнейм пользователя */\n  nickname: string;\n  /** Email пользователя */\n  email: string;\n  /** Массив проектов пользователя */\n  projects: projectInformation[];\n  /** Массив мебели, связанной с аккаунтом */\n  furnitures: furnitureAccountData[];\n  /** Пароль пользователя (необязательный) */\n  password?: string;\n}\n\n/**\n * Данные для изменения вторичных данных аккаунта\n */\nexport interface changeSecondaryData {\n  /** JWT токен */\n  jwt: string;\n  /** Новый никнейм */\n  nickname: string;\n}\n\n/**\n * Данные по мебели, связанной с аккаунтом\n */\nexport interface furnitureAccountData {\n  /** Идентификатор мебели */\n  _id: string;\n  /** Название мебели */\n  name: string;\n  /** URL превью изображения мебели */\n  previewUrl: string;\n}\n\n/** Тип аккаунта */\nexport type accountType = 'google' | 'email';\n\n/** Тип данных для изменения аккаунта (на данный момент только email) */\nexport type changeAccountData = changeAccountDataEmail;\n\n/**\n * Данные для создания аккаунта с email\n */\ninterface createEmailAccountData {\n  /** Email */\n  email: string;\n  /** Пароль */\n  password: string;\n  /** Никнейм */\n  nickname: string;\n  /** Тип аккаунта (email) */\n  accountType: 'email';\n}\n\n/** Тип данных для создания аккаунта */\nexport type createAccountData = createEmailAccountData;\n\n/**\n * Функция-помощник для проверки, что аккаунт с типом email\n * @param account Объект аккаунта\n * @returns true, если аккаунт с типом email\n */\nexport function isEmailAccount(account: { accountType: accountType }): account is changeAccountDataEmail {\n  return account.accountType === 'email';\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccountService {\n  /** Базовый URL для аккаунт-сервисов */\n  private baseServiceUrl = baseUrl + 'account';\n\n  constructor(\n    private httpModule: HttpClient,\n    private accountCookieService: AccountCookieService\n  ) { }\n\n  /**\n   * Создание нового пользователя\n   * @param createAccountData Основная информация о пользователе (никнейм, email, пароль)\n   * @returns Promise с сообщением об успешном создании пользователя\n   */\n  POSTcreateAccount(createAccountData: createAccountData) {\n    let HTTP_PARAMS = new HttpParams()\n      .set('accountType', createAccountData.accountType)\n      .set('nickname', createAccountData.nickname);\n\n    if (isEmailAccount(createAccountData)) {\n      HTTP_PARAMS = HTTP_PARAMS\n        .set('email', createAccountData.email)\n        .set('password', createAccountData.password);\n    }\n\n    return firstValueFrom(this.httpModule.post(this.baseServiceUrl, HTTP_PARAMS)) as Promise;\n  }\n\n  /**\n   * Удаление JWT токена пользователя\n   * @param jwt JWT токен\n   * @returns Promise с сообщением об успешном удалении токена\n   */\n  DELETEaccountJwt(jwt: string) {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt);\n    return firstValueFrom(this.httpModule.delete(this.baseServiceUrl + '/jwt/delete', { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Обновление вторичных данных аккаунта (например, никнейм)\n   * @param changeData Данные для изменения\n   * @returns Promise с сообщением об успешном обновлении\n   */\n  PUTupdateSecondaryAccountData(changeData: changeSecondaryData) {\n    const HTTP_PARAMS = new HttpParams({\n      fromObject: {\n        nickname: changeData.nickname,\n        jwt: changeData.jwt\n      }\n    });\n    return firstValueFrom(this.httpModule.put(this.baseServiceUrl, null, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Удаление аккаунта пользователя\n   * @param jwt JWT токен\n   * @returns Promise с сообщением об успешном удалении пользователя\n   */\n  DELETEaccount(jwt: string) {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt);\n    return firstValueFrom(this.httpModule.delete(this.baseServiceUrl, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Получение полной информации об аккаунте пользователя\n   * @param jwt JWT токен\n   * @returns Promise с данными аккаунта (включая проекты и мебель)\n   */\n  async GETaccount(jwt: string) {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt);\n    try {\n      let { accountData } = await firstValueFrom(this.httpModule.get(this.baseServiceUrl, { params: HTTP_PARAMS })) as { accountData: accountFullData & { projects: projectServerInformation[] } };\n      accountData.furnitures = accountData.furnitures.map(furnitureData => {\n        return {\n          ...furnitureData,\n          previewUrl: baseUrl + furnitureData.previewUrl\n        };\n      });\n      return { accountData: accountData };\n    } catch (error) {\n      console.error('Error in GETfurnitureCard:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Проверка наличия JWT токена в куках\n   * @returns true, если JWT токен найден, иначе false\n   */\n  checkJwt(): boolean {\n    return this.accountCookieService.getJwt() ? true : false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n            \n                providers\n                \n                                AutoHeightDirective\n                                NotificationComponent\n                                AccountService\n                                AuthService\n                                AccountCookieService\n                                ServerImageControlService\n                                ProjectService\n                                PlanHouseComponent\n                                SceneComponent\n                                FurnitureCardControlService\n                                FurnitureModelControlService\n                                ShopService\n                                FinderService\n                            Location\n                \n            \n\n\n            \n                selector\n                app-root\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            RouterOutlet\n                                NotificationComponent\n                                UploadOverlayComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'HouseQuality'\n                    \n                \n                    \n                        \n                                Defined in src/app.component.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component} from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\nimport { SceneComponent } from './components/scene/scene.component';\nimport { PlanHouseComponent } from './components/plan-house/plan-house.component';\nimport { NotificationComponent } from './components/notification/notification.component';\nimport { AccountService } from './services/account.service';\nimport { AuthService } from './services/auth.service';\nimport { AccountCookieService } from './services/account-cookie.service';\nimport { ServerImageControlService } from './services/server-image-control.service';\nimport { ProjectService } from './services/project.service';\nimport { FurnitureCardControlService } from './services/furniture-card-control.service';\nimport { FurnitureModelControlService } from './services/furniture-model-control.service';\nimport { ShopService } from './services/shop.service';\nimport { FinderService } from './services/finder.service';\nimport { AutoHeightDirective } from './directives/auto-height.directive';\nimport { UploadOverlayComponent } from './components/upload-overlay/upload-overlay.component';\n\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [RouterOutlet,NotificationComponent,UploadOverlayComponent],\n  providers:[AutoHeightDirective,NotificationComponent,AccountService,AuthService,AccountCookieService,ServerImageControlService,ProjectService,PlanHouseComponent,SceneComponent,FurnitureCardControlService,FurnitureModelControlService,ShopService,FinderService,Location],\n  templateUrl: './app.component.html'\n})\nexport class AppComponent {\n  title = 'HouseQuality'; \n}\n\n    \n\n    \n        \n\n\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AccountPageComponent', 'selector': 'app-account-page'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreateFurnitureComponent', 'selector': 'app-create-furniture'},{'name': 'CreateFurniturePageComponent', 'selector': 'app-create-furniture-page'},{'name': 'FinderComponent', 'selector': 'app-finder'},{'name': 'ImageSliderComponent', 'selector': 'app-image-slider'},{'name': 'LoginPageComponent', 'selector': 'app-login-page'},{'name': 'MainPageComponent', 'selector': 'app-main-page'},{'name': 'NavigationPanelComponent', 'selector': 'app-navigation-panel'},{'name': 'NotificationComponent', 'selector': 'app-notification'},{'name': 'PlanHouseComponent', 'selector': 'app-plan-house'},{'name': 'PlanHousePageComponent', 'selector': 'app-plan-house-page'},{'name': 'SceneComponent', 'selector': 'app-scene'},{'name': 'ShopPageComponent', 'selector': 'app-shop-page'},{'name': 'UploadOverlayComponent', 'selector': 'app-upload-overlay'},{'name': 'ViewFurnitureComponent', 'selector': 'app-view-furniture'}];\n    var DIRECTIVES = [{'name': 'AutoHeightDirective', 'selector': '[appAutoHeight]'}];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseServiceUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                GETrequestPasswordCode\n                            \n                            \n                                POSTcreateLongJWT\n                            \n                            \n                                POSTcreateShortJWT\n                            \n                            \n                                PUTupdateBaseData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpModule: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/services/auth.service.ts:38\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpModule\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        GETrequestPasswordCode\n                        \n                    \n                \n            \n            \n                \nGETrequestPasswordCode(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/auth.service.ts:98\n                        \n                    \n\n\n            \n                \n                        Запрос кода сброса пароля по email\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Email пользователя\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise с кодом для сброса пароля\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        POSTcreateLongJWT\n                        \n                    \n                \n            \n            \n                \nPOSTcreateLongJWT(authData: authData)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/auth.service.ts:49\n                        \n                    \n\n\n            \n                \n                        Создание длинного JWT токена\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                authData\n                                            \n                                                            authData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Данные для входа (email+пароль или google)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise с JWT токеном\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        POSTcreateShortJWT\n                        \n                    \n                \n            \n            \n                \nPOSTcreateShortJWT(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/auth.service.ts:67\n                        \n                    \n\n\n            \n                \n                        Создание короткого (временного) JWT токена\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Email пользователя\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise с временным JWT токеном\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PUTupdateBaseData\n                        \n                    \n                \n            \n            \n                \nPUTupdateBaseData(changeData: changeAccountData)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/auth.service.ts:79\n                        \n                    \n\n\n            \n                \n                        Обновление базовой информации о пользователе\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                changeData\n                                            \n                                                            changeAccountData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Новые данные для обновления аккаунта\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise с сообщением об успехе обновления\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseServiceUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : baseUrl + 'auth/'\n                    \n                \n                    \n                        \n                                Defined in src/services/auth.service.ts:38\n                        \n                    \n\n            \n                \n                    Базовый URL для auth-роутов\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { accountType, changeAccountDataEmail, changeAccountData } from './account.service';\nimport { baseUrl } from '.';\nimport { isEmailAccount } from './account.service';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные для аутентификации через email\n */\nexport interface emailAuthData {\n  /** Email пользователя */\n  email: string;\n  /** Пароль пользователя */\n  password: string;\n  /** Тип аккаунта - 'email' */\n  accountType: 'email';\n}\n\n/**\n * Данные для аутентификации через Google\n */\nexport interface googleAuthData {\n  /** Тип аккаунта - 'google' */\n  accountType: 'google';\n}\n\n/**\n * Объединённый тип данных для аутентификации\n */\nexport type authData = googleAuthData | emailAuthData;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  /** Базовый URL для auth-роутов */\n  private baseServiceUrl = baseUrl + 'auth/';\n\n  constructor(\n    private httpModule: HttpClient\n  ) { }\n\n  /**\n   * Создание длинного JWT токена\n   * @param authData Данные для входа (email+пароль или google)\n   * @returns Promise с JWT токеном\n   */\n  POSTcreateLongJWT(authData: authData) {\n    let HTTP_PARAMS = new HttpParams()\n      .set('accountType', authData.accountType);\n\n    if (isEmailAccount(authData)) {\n      HTTP_PARAMS = HTTP_PARAMS\n        .set('email', authData.email)\n        .set('password', authData.password);\n    }\n\n    return firstValueFrom(this.httpModule.post(this.baseServiceUrl + 'jwt/long', HTTP_PARAMS)) as Promise;\n  }\n\n  /**\n   * Создание короткого (временного) JWT токена\n   * @param email Email пользователя\n   * @returns Promise с временным JWT токеном\n   */\n  POSTcreateShortJWT(email: string) {\n    let HTTP_PARAMS = new HttpParams()\n      .set('email', email);\n\n    return firstValueFrom(this.httpModule.post(this.baseServiceUrl + 'jwt/temporary',null, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Обновление базовой информации о пользователе\n   * @param changeData Новые данные для обновления аккаунта\n   * @returns Promise с сообщением об успехе обновления\n   */\n  PUTupdateBaseData(changeData: changeAccountData) {\n    const paramObject: any = {\n      accountType: changeData.accountType,\n      jwt: changeData.jwt\n    };\n\n    if (isEmailAccount(changeData)) {\n      paramObject.password = changeData.password;\n    }\n\n    const HTTP_PARAMS = new HttpParams({ fromObject: paramObject });\n    return firstValueFrom(this.httpModule.put(this.baseServiceUrl + 'account', changeData)) as Promise;\n  }\n\n  /**\n   * Запрос кода сброса пароля по email\n   * @param email Email пользователя\n   * @returns Promise с кодом для сброса пароля\n   */\n  GETrequestPasswordCode(email: string) {\n    let HTTP_PARAMS = new HttpParams()\n      .set('email', email);\n\n    return firstValueFrom(this.httpModule.get(this.baseServiceUrl + 'account/code', { params: HTTP_PARAMS })) as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/AutoHeightDirective.html":{"url":"directives/AutoHeightDirective.html","title":"directive - AutoHeightDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  AutoHeightDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/directives/auto-height.directive.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        OnInit\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [appAutoHeight]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                el\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                            \n                                onInput\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                mobileView\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/directives/auto-height.directive.ts:19\n                            \n                        \n\n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        mobileView\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in src/directives/auto-height.directive.ts:19\n                            \n                        \n                \n                    \n                        Флаг мобильного отображения.\nЕсли true, включается автоизменение высоты текстового поля\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/directives/auto-height.directive.ts:27\n                        \n                    \n\n\n            \n                \n                        Инициализация директивы\nДобавляет слушатель события 'input' только если включён мобильный режим\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onInput\n                        \n                    \n                \n            \n            \n                \nonInput(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/directives/auto-height.directive.ts:38\n                        \n                    \n\n\n            \n                \n                        Обработчик события ввода текста в textarea\nАвтоматически регулирует высоту textarea под содержимое\nФункция вызова ограничена (throttle) с задержкой 250 мс\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Событие ввода\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        el\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ElementRef)\n                    \n                \n                    \n                        \n                                Defined in src/directives/auto-height.directive.ts:12\n                        \n                    \n\n            \n                \n                    Элемент, к которому привязана директива\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, ElementRef, HostListener, inject, Input, OnInit } from '@angular/core';\nimport { throttle } from 'lodash';\n\n@Directive({\n  selector: '[appAutoHeight]',\n  standalone: true\n})\nexport class AutoHeightDirective implements OnInit {\n  /**\n   * Элемент, к которому привязана директива\n   */\n  private el = inject(ElementRef);\n  \n  /**\n   * Флаг мобильного отображения.\n   * Если true, включается автоизменение высоты текстового поля\n   */\n  @Input()\n  mobileView: boolean = false;\n\n  constructor() { }\n\n  /**\n   * Инициализация директивы\n   * Добавляет слушатель события 'input' только если включён мобильный режим\n   */\n  ngOnInit(): void {\n    if (!this.mobileView) return;\n    this.el.nativeElement.addEventListener('input', this.onInput.bind(this.el.nativeElement));\n  }\n  \n  /**\n   * Обработчик события ввода текста в textarea\n   * Автоматически регулирует высоту textarea под содержимое\n   * Функция вызова ограничена (throttle) с задержкой 250 мс\n   * @param event Событие ввода\n   */\n  onInput(event: Event) {\n    const input = event.target as HTMLTextAreaElement;\n    throttle(() => {\n      input.style.height = 'auto';\n      input.style.height = (input.scrollHeight) + 'px';\n    }, 250)();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CategoryService.html":{"url":"injectables/CategoryService.html","title":"injectable - CategoryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CategoryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/category.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseServiceUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                GETgetAllCategories\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpModule: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/services/category.service.ts:72\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpModule\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        GETgetAllCategories\n                        \n                    \n                \n            \n            \n                \nGETgetAllCategories()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/category.service.ts:82\n                        \n                    \n\n\n            \n                \n                        Получение всех категорий\n\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise с массивом категорий\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseServiceUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : baseUrl + 'category'\n                    \n                \n                    \n                        \n                                Defined in src/services/category.service.ts:72\n                        \n                    \n\n            \n                \n                    Базовый URL для работы с категориями\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные категории\n */\nexport interface categoryData {\n  /** Название категории */\n  name: string;\n  /** Перевод категории в единственном числе */\n  translateOne: string;\n  /** Перевод категории во множественном числе */\n  translateMany: string;\n  /** Массив фильтров категории */\n  filters: filter[];\n}\n\n/**\n * Базовый фильтр\n */\ninterface baseFilter {\n  /** Имя фильтра */\n  name: string;\n  /** Поле, по которому фильтр */\n  field: string;\n}\n\n/**\n * Опция для select-фильтра\n */\nexport interface option {\n  /** Название опции */\n  name: string;\n  /** Значение опции для запроса */\n  queryValue: string;\n}\n\n/**\n * Фильтр типа select\n */\ninterface selectFilter extends baseFilter {\n  /** Тип фильтра */\n  type: 'select';\n  /** Варианты выбора */\n  options: option[];\n}\n\n/**\n * Фильтр типа range\n */\ninterface rangeFilter extends baseFilter {\n  /** Тип фильтра */\n  type: 'range';\n  /** Минимальное значение */\n  minValue: number;\n  /** Максимальное значение */\n  maxValue: number;\n}\n\n/**\n * Тип фильтра: select или range\n */\nexport type filter = rangeFilter | selectFilter;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CategoryService {\n  /** Базовый URL для работы с категориями */\n  private baseServiceUrl = baseUrl + 'category';\n\n  constructor(\n    private httpModule: HttpClient\n  ) { }\n\n  /**\n   * Получение всех категорий\n   * @returns Promise с массивом категорий\n   */\n  GETgetAllCategories() {\n    return firstValueFrom(this.httpModule.get(this.baseServiceUrl)) as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ClientImageControlService.html":{"url":"injectables/ClientImageControlService.html","title":"injectable - ClientImageControlService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ClientImageControlService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/client-image-control.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для работы с клиентскими изображениями, включая сжатие\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                compressImage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        compressImage\n                        \n                    \n                \n            \n            \n                \ncompressImage(image: File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/client-image-control.service.ts:19\n                        \n                    \n\n\n            \n                \n                        Сжимает изображение с помощью библиотеки Compressor.js\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                image\n                                            \n                                                        File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nИсходный файл изображения (Blob или File)\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise, который резолвится в сжатый Blob или отклоняется с ошибкой\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport Compressor from 'compressorjs';\n\n/**\n * Сервис для работы с клиентскими изображениями, включая сжатие\n * @class ClientImageControlService\n * @injectable\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ClientImageControlService {\n\n  /**\n   * Сжимает изображение с помощью библиотеки Compressor.js\n   * @param image - Исходный файл изображения (Blob или File)\n   * @returns Promise, который резолвится в сжатый Blob или отклоняется с ошибкой\n   */\n  compressImage(image: File): Promise {\n    return new Promise((resolve, reject) => {\n      new Compressor(image, {\n        quality: 0.6,\n        success: (compressedFile: Blob) => {\n          resolve(compressedFile);\n        },\n        error: (error) => {\n          console.error('Ошибка сжатия:', error.message);\n          reject(error);\n        },\n      });\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/CostFormatPipe.html":{"url":"pipes/CostFormatPipe.html","title":"pipe - CostFormatPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  CostFormatPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/pipes/cost-format.pipe.ts\n        \n\n\n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        costFormat\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/pipes/cost-format.pipe.ts:12\n                        \n                    \n\n\n            \n                \n                        Форматирование числа стоимости в строку с разделением тысяч точками и добавлением символа рубля\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Число стоимости для форматирования\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                Отформатированная строка, например: \"1.234.567 ₽\"\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'costFormat'\n})\nexport class CostFormatPipe implements PipeTransform {\n  /**\n   * Форматирование числа стоимости в строку с разделением тысяч точками и добавлением символа рубля\n   * @param value Число стоимости для форматирования\n   * @returns Отформатированная строка, например: \"1.234.567 ₽\"\n   */\n  transform(value: number): string {\n    return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.') + ' ₽';\n  }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/CreateFurniturePageComponent.html":{"url":"components/CreateFurniturePageComponent.html","title":"component - CreateFurniturePageComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  CreateFurniturePageComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/components/create-furniture-page/create-furniture-page.component.ts\n\n\n\n    \n        Description\n    \n    \n        Компонент страницы создания и редактирования мебели.\nОтвечает за загрузку данных, валидацию, сохранение и удаление мебели.\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-create-furniture-page\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                                NavigationPanelComponent\n                                CreateFurnitureComponent\n                            NgIf\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./create-furniture-page.component.html\n            \n\n\n\n            \n                styleUrl\n                ./create-furniture-page.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Private\n                                createFurnitureComponent\n                            \n                            \n                                    \n                                    Private\n                                createFurnitureComponentRef\n                            \n                            \n                                    Protected\n                                furnitureData\n                            \n                            \n                                    Protected\n                                idPage\n                            \n                            \n                                    Private\n                                routeSub\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                checkValid\n                            \n                            \n                                    Protected\n                                clearFurnitureCard\n                            \n                            \n                                    Protected\n                                    Async\n                                createFurnitureCard\n                            \n                            \n                                    Protected\n                                deleteColor\n                            \n                            \n                                    Protected\n                                deleteColorCalculate\n                            \n                            \n                                    Protected\n                                    Async\n                                deleteFurnitureCard\n                            \n                            \n                                    Protected\n                                getCurrentColorId\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Private\n                                    Async\n                                pageInit\n                            \n                            \n                                    Private\n                                    Async\n                                transformUrlArrayToBlob\n                            \n                            \n                                    Protected\n                                    Async\n                                updateFurnitureCard\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(route: ActivatedRoute, cookieService: AccountCookieService, furnitureCardService: FurnitureCardControlService, serverImageControl: ServerImageControlService, router: Router, furnitureModelService: FurnitureModelControlService, notification: NotificationService)\n                    \n                \n                        \n                            \n                                Defined in src/components/create-furniture-page/create-furniture-page.component.ts:60\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        route\n                                                  \n                                                        \n                                                                    ActivatedRoute\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cookieService\n                                                  \n                                                        \n                                                                        AccountCookieService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        furnitureCardService\n                                                  \n                                                        \n                                                                        FurnitureCardControlService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        serverImageControl\n                                                  \n                                                        \n                                                                        ServerImageControlService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        furnitureModelService\n                                                  \n                                                        \n                                                                        FurnitureModelControlService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        notification\n                                                  \n                                                        \n                                                                        NotificationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        checkValid\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkValid(typeRequest: \"update\" | \"create\")\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/create-furniture-page/create-furniture-page.component.ts:240\n                        \n                    \n\n\n            \n                \n                        Проверяет валидность данных мебели.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                typeRequest\n                                            \n                                                        \"update\" | \"create\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nтип операции ('create' или 'update').\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                true, если данные валидны, иначе false.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        clearFurnitureCard\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearFurnitureCard()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/create-furniture-page/create-furniture-page.component.ts:299\n                        \n                    \n\n\n            \n                \n                        Очищает данные мебели в компоненте.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Async\n                        createFurnitureCard\n                        \n                    \n                \n            \n            \n                \n                        \n                    createFurnitureCard()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/create-furniture-page/create-furniture-page.component.ts:166\n                        \n                    \n\n\n            \n                \n                        Создаёт новую мебель:\n\nпроверяет валидность,\nсоздаёт карточку,\nзагружает изображения по цветам,\nзагружает 3D модель,\nпоказывает уведомление и перенаправляет пользователя.\n\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        deleteColor\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteColor()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/create-furniture-page/create-furniture-page.component.ts:328\n                        \n                    \n\n\n            \n                \n                        Удаляет текущий цвет, если цветов больше одного.\nЕсли цветов один — показывает ошибку.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        deleteColorCalculate\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteColorCalculate()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/create-furniture-page/create-furniture-page.component.ts:319\n                        \n                    \n\n\n            \n                \n                        Возвращает цвет, который планируется удалить (для расчётов и логирования).\n\n\n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                цвет (строка) текущего выделенного цвета или undefined.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Async\n                        deleteFurnitureCard\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteFurnitureCard()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/create-furniture-page/create-furniture-page.component.ts:138\n                        \n                    \n\n\n            \n                \n                        Удаляет мебель, 3D модель и связанные изображения с сервера.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        getCurrentColorId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCurrentColorId()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/create-furniture-page/create-furniture-page.component.ts:340\n                        \n                    \n\n\n            \n                \n                        Возвращает текущий id выбранного цвета.\n\n\n                        \n                            Returns :     number | undefined\n\n                        \n                            \n                                id цвета или undefined.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/create-furniture-page/create-furniture-page.component.ts:95\n                        \n                    \n\n\n            \n                \n                        Отписка от подписки при уничтожении компонента.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/create-furniture-page/create-furniture-page.component.ts:78\n                        \n                    \n\n\n            \n                \n                        Инициализация компонента:\n\nпроверяет JWT,\nподписывается на изменения параметров маршрута,\nзагружает мебель, если id не \"new\".\n\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        pageInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    pageInit(jwt: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/create-furniture-page/create-furniture-page.component.ts:104\n                        \n                    \n\n\n            \n                \n                        Загружает данные мебели по id и JWT.\nЕсли автор не совпадает, происходит перенаправление на создание новой мебели.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nJWT токен пользователя.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        transformUrlArrayToBlob\n                        \n                    \n                \n            \n            \n                \n                        \n                    transformUrlArrayToBlob(imagesArray: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/create-furniture-page/create-furniture-page.component.ts:124\n                        \n                    \n\n\n            \n                \n                        Преобразует массив URL строк изображений в массив Blob объектов.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                imagesArray\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nмассив URL строк изображений.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise с массивом Blob объектов.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Async\n                        updateFurnitureCard\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateFurnitureCard()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/create-furniture-page/create-furniture-page.component.ts:202\n                        \n                    \n\n\n            \n                \n                        Обновляет данные мебели:\n\nпроверяет валидность,\nобновляет карточку мебели,\nобновляет изображения,\nпри необходимости загружает новую 3D модель,\nпоказывает уведомление об успешном обновлении.\n\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        createFurnitureComponent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateFurnitureComponent\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild(CreateFurnitureComponent)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/create-furniture-page/create-furniture-page.component.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        createFurnitureComponentRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild(CreateFurnitureComponent, {read: ElementRef})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/create-furniture-page/create-furniture-page.component.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        furnitureData\n                        \n                    \n                \n            \n                \n                    \n                        Default value : {\n    name: '',\n    description: '',\n    colors: [],\n    shops: [],\n    additionalData: {},\n    proportions: {\n      width: null,\n      height: null,\n      length: null\n    }\n  }\n                    \n                \n                    \n                        \n                                Defined in src/components/create-furniture-page/create-furniture-page.component.ts:49\n                        \n                    \n\n            \n                \n                    Данные мебели с дополнительным полем пропорций клиента.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        idPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/components/create-furniture-page/create-furniture-page.component.ts:36\n                        \n                    \n\n            \n                \n                    Id страницы.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        routeSub\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                \n                    \n                        Default value : new Subscription()\n                    \n                \n                    \n                        \n                                Defined in src/components/create-furniture-page/create-furniture-page.component.ts:34\n                        \n                    \n\n            \n                \n                    Подписка на изменения маршрута в приложении.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { ChangeDetectorRef, Component, DoCheck, ElementRef, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { NavigationPanelComponent } from '../navigation-panel/navigation-panel.component';\nimport { CreateFurnitureComponent } from '../create-furnitre/create-furniture.component';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AccountCookieService } from '../../services/account-cookie.service';\nimport { FurnitureCardControlService, furnitureFromServerData } from '../../services/furniture-card-control.service';\nimport { ServerImageControlService } from '../../services/server-image-control.service';\nimport { NgIf } from '@angular/common';\nimport { FurnitureModelControlService } from '../../services/furniture-model-control.service';\nimport { NotificationService } from '../../services/notification.service';\nimport { imageSliderClientData } from '../image-slider/image-slider.component';\nimport { Subscription } from 'rxjs';\n\n/** Данные для формы габаритов мебели на клиенте.*/\ninterface clientProportions {\n  width: number | null;\n  height: number | null;\n  length: number | null;\n}\n\n/**\n * Компонент страницы создания и редактирования мебели.\n * Отвечает за загрузку данных, валидацию, сохранение и удаление мебели.\n */\n@Component({\n  selector: 'app-create-furniture-page',\n  standalone: true,\n  imports: [NavigationPanelComponent, CreateFurnitureComponent, NgIf],\n  templateUrl: './create-furniture-page.component.html',\n  styleUrl: './create-furniture-page.component.scss'\n})\nexport class CreateFurniturePageComponent implements OnInit, OnDestroy {\n  /** Подписка на изменения маршрута в приложении.*/\n  private routeSub: Subscription = new Subscription();\n  /** Id страницы.*/\n  protected idPage!: string;\n  \n  @ViewChild(CreateFurnitureComponent)\n  /** Переменная для взаимодействия с методами дочернего компонента.*/\n  private createFurnitureComponent!: CreateFurnitureComponent;\n  \n  @ViewChild(CreateFurnitureComponent, { read: ElementRef })\n  /** Переменная для взаимодействия с html дочернего компонента.*/\n  private createFurnitureComponentRef!: ElementRef;\n\n  /**\n   * Данные мебели с дополнительным полем пропорций клиента.\n   */\n  protected furnitureData: furnitureFromServerData & { proportions: clientProportions } = {\n    name: '',\n    description: '',\n    colors: [],\n    shops: [],\n    additionalData: {},\n    proportions: {\n      width: null,\n      height: null,\n      length: null\n    }\n  };\n\n  constructor(\n    private route: ActivatedRoute,\n    private cookieService: AccountCookieService,\n    private furnitureCardService: FurnitureCardControlService,\n    private serverImageControl: ServerImageControlService,\n    private router: Router,\n    private furnitureModelService: FurnitureModelControlService,\n    private notification: NotificationService\n  ) { }\n\n  /**\n   * Инициализация компонента:\n   * - проверяет JWT,\n   * - подписывается на изменения параметров маршрута,\n   * - загружает мебель, если id не \"new\".\n   */\n  ngOnInit(): void {\n    const JWT = this.cookieService.getJwt();\n    if (!JWT) {\n      this.router.navigateByUrl('/login');\n      return;\n    }\n\n    this.routeSub = this.route.paramMap.subscribe(params => {\n      this.idPage = params.get('id') ?? 'new';\n      this.clearFurnitureCard();\n      if (this.idPage !== 'new') this.pageInit(JWT);\n    });\n  }\n\n  /**\n   * Отписка от подписки при уничтожении компонента.\n   */\n  ngOnDestroy() {\n    if(this.routeSub)this.routeSub.unsubscribe();\n  }\n\n  /**\n   * Загружает данные мебели по id и JWT.\n   * Если автор не совпадает, происходит перенаправление на создание новой мебели.\n   * @param jwt - JWT токен пользователя.\n   */\n  private async pageInit(jwt: string) {\n    try {\n      const RESPONSE = await this.furnitureCardService.GETfurnitureCard(this.idPage, jwt);\n      if (RESPONSE.authorMatched === false) {\n        this.router.navigateByUrl('/create/new');\n        return;\n      }\n      this.furnitureData = RESPONSE.furnitureCard;\n      this.createFurnitureComponent.currentColorId = 0;\n    } catch (error) {\n      this.router.navigateByUrl('/create/new');\n      console.error(error);\n    }\n  }\n\n  /**\n   * Преобразует массив URL строк изображений в массив Blob объектов.\n   * @param imagesArray - массив URL строк изображений.\n   * @returns Promise с массивом Blob объектов.\n   */\n  private async transformUrlArrayToBlob(imagesArray: string[]): Promise {\n    const IMAGES_BLOB_ARRAY: Blob[] = await Promise.all(\n      imagesArray.map(async (blobUrl): Promise => {\n        const RESPONSE = await fetch(blobUrl.toString());\n        const BLOB = await RESPONSE.blob();\n        return BLOB;\n      })\n    );\n    return IMAGES_BLOB_ARRAY;\n  }\n\n  /**\n   * Удаляет мебель, 3D модель и связанные изображения с сервера.\n   */\n  protected async deleteFurnitureCard() {\n    const JWT = this.cookieService.getJwt();\n    if (!JWT) return;\n\n    const operations = [\n      () => this.furnitureModelService.DELETEfurnitureModel(JWT, this.idPage),\n      () => this.serverImageControl.DELETEproject(JWT, this.idPage),\n      () => this.furnitureCardService.DELETEfurnitureCard(JWT, this.idPage)\n    ];\n\nfor (const op of operations) {\n  try {\n    await op();\n  } catch (error) {\n  }\n}\n\n    this.router.navigateByUrl('/account');\n  }\n\n  /**\n   * Создаёт новую мебель:\n   * - проверяет валидность,\n   * - создаёт карточку,\n   * - загружает изображения по цветам,\n   * - загружает 3D модель,\n   * - показывает уведомление и перенаправляет пользователя.\n   */\n  protected async createFurnitureCard() {\n    const JWT = this.cookieService.getJwt();\n    if (!this.checkValid('create') || !JWT) return;\n    try {\n      const FURNITURE_DATA = this.createFurnitureComponent.furnitureData;\n      const FURNITURE_ID = (await this.furnitureCardService.POSTcreateFurnitureCard(FURNITURE_DATA, JWT)).furnitureData._id;\n\n\n      FURNITURE_DATA.colors.forEach(async (colorData) => {\n        const imagesBlobArray = await this.transformUrlArrayToBlob(colorData.imagesData.images);\n        const imagesData: imageSliderClientData = {\n          images: imagesBlobArray,\n          idMainImage: colorData.imagesData.idMainImage\n        };\n        await this.serverImageControl.POSTuploadProjectImages(colorData.color, imagesData, JWT, FURNITURE_ID);\n      });\n\n\n      const FURNITURE_MODEL_BLOB = this.createFurnitureComponent.furnitureModelInput.files![0];\n      this.furnitureModelService.POSTuploadFurnitureModel(FURNITURE_MODEL_BLOB, JWT, FURNITURE_ID, 'create');\n\n      this.notification.setSuccess('Мебель добавлена', 5000);\n      this.router.navigateByUrl('/account');\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  /**\n   * Обновляет данные мебели:\n   * - проверяет валидность,\n   * - обновляет карточку мебели,\n   * - обновляет изображения,\n   * - при необходимости загружает новую 3D модель,\n   * - показывает уведомление об успешном обновлении.\n   */\n  protected async updateFurnitureCard() {\n    const JWT = this.cookieService.getJwt();\n    if (!this.checkValid('update') || !JWT) return;\n    try {\n      const FURNITURE_DATA = this.createFurnitureComponent.furnitureData;\n      await this.furnitureCardService.PUTupdateFurnitureCard(FURNITURE_DATA, this.idPage, JWT);\n      this.notification.setSuccess('Карточка обновлена', 2500);\n\n      let changeImagesCounter = 0\n      FURNITURE_DATA.colors.forEach(async (colorData) => {\n        if (colorData.imagesData.images.length === 0) return;\n        const IMAGES_BLOB_ARRAY = await this.transformUrlArrayToBlob(colorData.imagesData.images);\n        const IMAGES_DATA: imageSliderClientData = {\n          images: IMAGES_BLOB_ARRAY,\n          idMainImage: colorData.imagesData.idMainImage\n        };\n        await this.serverImageControl.POSTuploadProjectImages(colorData.color, IMAGES_DATA, JWT, this.idPage);\n        changeImagesCounter++;\n      });\n      if(changeImagesCounter > 0)this.notification.setSuccess('Изображения обновлены', 2500);\n\n      const FURNITURE_MODEL_BLOB = this.createFurnitureComponent.furnitureModelInput.files!;\n      if (FURNITURE_MODEL_BLOB[0]) {\n        this.furnitureModelService.POSTuploadFurnitureModel(FURNITURE_MODEL_BLOB[0], JWT, this.idPage, 'update');\n      }\n\n      \n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  /**\n   * Проверяет валидность данных мебели.\n   * @param typeRequest - тип операции ('create' или 'update').\n   * @param action - если true, то при ошибке вызываются уведомления и открываются необходимые модули.\n   * @returns true, если данные валидны, иначе false.\n   */\n  protected checkValid(typeRequest: 'update' | 'create'): boolean {\n    const { colors, shops, proportions, name } = this.furnitureData;\n    const FURNITURE_MODEL_BLOB = this.createFurnitureComponent.furnitureModelInput.files![0];\n\n    if (colors.length == 0) {\n      this.createFurnitureComponent.openColorModule();\n      return false;\n    }\n    if (name.length == 0) {\n      const nameInput = this.createFurnitureComponentRef.nativeElement.querySelector(\n        '.furnitureTitle'\n      ) as HTMLInputElement;\n\n      if (nameInput) {\n        nameInput.focus();\n      }\n      this.notification.setError('Заполните название мебели', 5000);\n      return false;\n    }\n    if (!proportions.height || !proportions.width || !proportions.length) {\n      this.createFurnitureComponent.openAdditional();\n      this.notification.setError('Заполните параметры', 5000);\n      return false;\n    }\n    if (!FURNITURE_MODEL_BLOB && typeRequest === 'create') {\n      const uploadInput = this.createFurnitureComponentRef.nativeElement.querySelector(\n        '.furnitureModelInput'\n      ) as HTMLInputElement;\n\n      if (uploadInput) {\n        uploadInput.click();\n      }\n      this.notification.setError('Загрузите 3D модель', 5000);\n      return false;\n    }\n    if (shops.length == 0) {\n      this.createFurnitureComponent.openShopsModule();\n      this.notification.setError('Добавьте магазины', 5000);\n      return false;\n    }\n    for (let colorData of colors) {\n      if (colorData.imagesData.images.length == 0 && typeRequest === 'create') {\n        const uploadInput = this.createFurnitureComponentRef.nativeElement.querySelector(\n          '.uploadImagesInput'\n        ) as HTMLInputElement;\n\n        if (uploadInput) {\n          uploadInput.click();\n        }\n        this.notification.setError('Загрузите изображения', 5000);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Очищает данные мебели в компоненте.\n   */\n  protected clearFurnitureCard() {\n    if (this.createFurnitureComponent) this.createFurnitureComponent.currentColorId = undefined;\n    this.furnitureData = {\n      name: '',\n      description: '',\n      colors: [],\n      shops: [],\n      additionalData: {},\n      proportions: {\n        width: null,\n        height: null,\n        length: null\n      }\n    };\n  }\n\n  /**\n   * Возвращает цвет, который планируется удалить (для расчётов и логирования).\n   * @returns цвет (строка) текущего выделенного цвета или undefined.\n   */\n  protected deleteColorCalculate(): string | undefined {\n    if (!this.createFurnitureComponent || this.createFurnitureComponent.currentColorId === undefined) return undefined;\n    return this.createFurnitureComponent.furnitureData.colors[this.createFurnitureComponent.currentColorId].color;\n  }\n\n  /**\n   * Удаляет текущий цвет, если цветов больше одного.\n   * Если цветов один — показывает ошибку.\n   */\n  protected deleteColor() {\n    if (this.createFurnitureComponent.furnitureData.colors.length \n    \n\n    \n        \n  \n  \n  \n    \n        \n    \n    \n      {{idPage === 'new' ? 'Создать' : 'Обновить'}}\n    \n    \n      \n    \n  \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                {{idPage === \\'new\\' ? \\'Создать\\' : \\'Обновить\\'}}                    '\n    var COMPONENTS = [{'name': 'AccountPageComponent', 'selector': 'app-account-page'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreateFurnitureComponent', 'selector': 'app-create-furniture'},{'name': 'CreateFurniturePageComponent', 'selector': 'app-create-furniture-page'},{'name': 'FinderComponent', 'selector': 'app-finder'},{'name': 'ImageSliderComponent', 'selector': 'app-image-slider'},{'name': 'LoginPageComponent', 'selector': 'app-login-page'},{'name': 'MainPageComponent', 'selector': 'app-main-page'},{'name': 'NavigationPanelComponent', 'selector': 'app-navigation-panel'},{'name': 'NotificationComponent', 'selector': 'app-notification'},{'name': 'PlanHouseComponent', 'selector': 'app-plan-house'},{'name': 'PlanHousePageComponent', 'selector': 'app-plan-house-page'},{'name': 'SceneComponent', 'selector': 'app-scene'},{'name': 'ShopPageComponent', 'selector': 'app-shop-page'},{'name': 'UploadOverlayComponent', 'selector': 'app-upload-overlay'},{'name': 'ViewFurnitureComponent', 'selector': 'app-view-furniture'}];\n    var DIRECTIVES = [{'name': 'AutoHeightDirective', 'selector': '[appAutoHeight]'}];\n    var ACTUAL_COMPONENT = {'name': 'CreateFurniturePageComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FinderComponent.html":{"url":"components/FinderComponent.html","title":"component - FinderComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  FinderComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/components/finder/finder.component.ts\n\n\n\n    \n        Description\n    \n    \n        Компонент поиска мебели.\nПозволяет искать мебель по названию и отображать результаты.\n\n    \n\n\n    \n        Implements\n    \n    \n                AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-finder\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            NgClass\n                            NgFor\n                            NgIf\n                            RouterLink\n                            CostFormatPipe\n                            RouterLink\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./finder.component.html\n            \n\n\n\n            \n                styleUrl\n                ./finder.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                checkDesktop\n                            \n                            \n                                    Private\n                                debounceTimer\n                            \n                            \n                                    Protected\n                                    Optional\n                                foundFurniture\n                            \n                            \n                                    Private\n                                inputElement\n                            \n                            \n                                    Private\n                                variantsSpan\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                checkShopPage\n                            \n                            \n                                    Protected\n                                clearInput\n                            \n                            \n                                    Private\n                                closeFoundResultsList\n                            \n                            \n                                    Private\n                                    Async\n                                findFurnitures\n                            \n                            \n                                    Protected\n                                getImage\n                            \n                            \n                                    Protected\n                                getUrl\n                            \n                            \n                                    Protected\n                                inputProcess\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                    Private\n                                openFoundResultsList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(finderService: FinderService, elementRef: ElementRef, renderer: Renderer2, imageService: ServerImageControlService, route: ActivatedRoute)\n                    \n                \n                        \n                            \n                                Defined in src/components/finder/finder.component.ts:55\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        finderService\n                                                  \n                                                        \n                                                                        FinderService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        elementRef\n                                                  \n                                                        \n                                                                    ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                    Renderer2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        imageService\n                                                  \n                                                        \n                                                                        ServerImageControlService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        route\n                                                  \n                                                        \n                                                                    ActivatedRoute\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        checkShopPage\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkShopPage(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/finder/finder.component.ts:130\n                        \n                    \n\n\n            \n                \n                        Проверяет, находится ли пользователь на странице магазина.\nЕсли да, устанавливает в сервисе имя мебели.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Имя мебели для поиска\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                true если на странице магазина, иначе false\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        clearInput\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearInput()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/finder/finder.component.ts:118\n                        \n                    \n\n\n            \n                \n                        Очищает поле ввода и скрывает список результатов.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        closeFoundResultsList\n                        \n                    \n                \n            \n            \n                \n                        \n                    closeFoundResultsList()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/finder/finder.component.ts:105\n                        \n                    \n\n\n            \n                \n                        Закрывает список найденных результатов (удаляет CSS класс).\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        findFurnitures\n                        \n                    \n                \n            \n            \n                \n                        \n                    findFurnitures(findString: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/finder/finder.component.ts:78\n                        \n                    \n\n\n            \n                \n                        Выполняет поиск мебели на сервере по заданной строке.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                findString\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Строка для поиска мебели\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        getImage\n                        \n                    \n                \n            \n            \n                \n                        \n                    getImage(idFurniture: string, color: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/finder/finder.component.ts:167\n                        \n                    \n\n\n            \n                \n                        Возвращает URL главного изображения мебели по id и цвету.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                idFurniture\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор мебели\n\n                                            \n                                        \n                                        \n                                                color\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Цвет мебели\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                URL изображения\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        getUrl\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUrl(idFurniture: string, category: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/finder/finder.component.ts:177\n                        \n                    \n\n\n            \n                \n                        Формирует URL для перехода на страницу мебели.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                idFurniture\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор мебели\n\n                                            \n                                        \n                                        \n                                                category\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Категория мебели\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                URL для маршрутизации\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        inputProcess\n                        \n                    \n                \n            \n            \n                \n                        \n                    inputProcess()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/finder/finder.component.ts:147\n                        \n                    \n\n\n            \n                \n                        Обрабатывает ввод пользователя с задержкой (debounce).\nЗапускает поиск, если введена строка.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/finder/finder.component.ts:69\n                        \n                    \n\n\n            \n                \n                        Инициализация после рендера компонента:\nПолучение необходимых DOM-элементов для управления поиском.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        openFoundResultsList\n                        \n                    \n                \n            \n            \n                \n                        \n                    openFoundResultsList()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/finder/finder.component.ts:97\n                        \n                    \n\n\n            \n                \n                        Открывает список найденных результатов (добавляет CSS класс).\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        checkDesktop\n                        \n                    \n                \n            \n                \n                    \n                        Default value : checkDesktop\n                    \n                \n                    \n                        \n                                Defined in src/components/finder/finder.component.ts:113\n                        \n                    \n\n            \n                \n                    Утилитная функция проверки, запущено ли приложение на десктопе.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        debounceTimer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/components/finder/finder.component.ts:55\n                        \n                    \n\n            \n                \n                    Таймер для реализации дебаунса ввода.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Optional\n                        foundFurniture\n                        \n                    \n                \n            \n                \n                    \n                        Type :         foundFurniture[]\n\n                    \n                \n                    \n                        \n                                Defined in src/components/finder/finder.component.ts:50\n                        \n                    \n\n            \n                \n                    Массив найденных объектов мебели.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        inputElement\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HTMLInputElement\n\n                    \n                \n                    \n                        \n                                Defined in src/components/finder/finder.component.ts:45\n                        \n                    \n\n            \n                \n                    Ссылка на HTML-элемент текстового поля ввода.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        variantsSpan\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HTMLSpanElement\n\n                    \n                \n                    \n                        \n                                Defined in src/components/finder/finder.component.ts:40\n                        \n                    \n\n            \n                \n                    Ссылка на HTML-элемент с результатами поиска (список вариантов).\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { NgClass, NgFor, NgIf } from '@angular/common';\nimport { AfterViewInit, Component, ElementRef, Renderer2 } from '@angular/core';\nimport { FinderService } from '../../services/finder.service';\nimport { ServerImageControlService } from '../../services/server-image-control.service';\nimport { ActivatedRoute, RouterLink } from '@angular/router';\nimport { checkDesktop } from '../../usable/reusable-functions.used';\nimport { CostFormatPipe } from '../../pipes/cost-format.pipe';\n\n/**\n * Интерфейс, описывающий найденную мебель.\n */\ninterface foundFurniture {\n  /** Название мебели */\n  name: string;\n  /** Цена мебели */\n  cost: number;\n  /** Цвет, указанный в запросе */\n  colorRequest: string;\n  /** Уникальный идентификатор мебели */\n  id: string;\n  /** Категория мебели */\n  category: string;\n}\n\n/**\n * Компонент поиска мебели.\n * Позволяет искать мебель по названию и отображать результаты.\n */\n@Component({\n  selector: 'app-finder',\n  standalone: true,\n  imports: [NgClass, NgFor, NgIf, RouterLink, CostFormatPipe, RouterLink],\n  templateUrl: './finder.component.html',\n  styleUrl: './finder.component.scss'\n})\nexport class FinderComponent implements AfterViewInit {\n  /**\n   * Ссылка на HTML-элемент с результатами поиска (список вариантов).\n   */\n  private variantsSpan!: HTMLSpanElement;\n\n  /**\n   * Ссылка на HTML-элемент текстового поля ввода.\n   */\n  private inputElement!: HTMLInputElement;\n\n  /**\n   * Массив найденных объектов мебели.\n   */\n  protected foundFurniture?: foundFurniture[];\n\n  /**\n   * Таймер для реализации дебаунса ввода.\n   */\n  private debounceTimer: any = null;\n\n  constructor(\n    private finderService: FinderService,\n    private elementRef: ElementRef,\n    private renderer: Renderer2,\n    private imageService: ServerImageControlService,\n    private route: ActivatedRoute\n  ) { }\n\n  /**\n   * Инициализация после рендера компонента:\n   * Получение необходимых DOM-элементов для управления поиском.\n   */\n  ngAfterViewInit(): void {\n    this.variantsSpan = this.elementRef.nativeElement.querySelector('.variantsSpan') as HTMLSpanElement;\n    this.inputElement = this.elementRef.nativeElement.querySelector('.finderInput') as HTMLInputElement;\n  }\n\n  /**\n   * Выполняет поиск мебели на сервере по заданной строке.\n   * @param findString Строка для поиска мебели\n   */\n  private async findFurnitures(findString: string) {\n    const RECEIVED_DATA = await this.finderService.GETfindFurnitures(findString) as foundFurniture[];\n    this.openFoundResultsList();\n\n    if (RECEIVED_DATA.length > 0) {\n      this.closeFoundResultsList();\n      setTimeout(() => {\n        this.foundFurniture = RECEIVED_DATA;\n        this.openFoundResultsList();\n      }, 400);\n    } else {\n      // Если результатов нет, очищаем массив foundFurniture\n      this.foundFurniture !== undefined ? this.foundFurniture.length = 0 : this.foundFurniture = [];\n    }\n  }\n\n  /**\n   * Открывает список найденных результатов (добавляет CSS класс).\n   */\n  private openFoundResultsList() {\n    if (!this.variantsSpan) return;\n    this.renderer.addClass(this.variantsSpan, 'variantsSpanOpen');\n  }\n\n  /**\n   * Закрывает список найденных результатов (удаляет CSS класс).\n   */\n  private closeFoundResultsList() {\n    if (!this.variantsSpan) return;\n    this.renderer.removeClass(this.variantsSpan, 'variantsSpanOpen');\n  }\n\n  /**\n   * Утилитная функция проверки, запущено ли приложение на десктопе.\n   */\n  protected checkDesktop = checkDesktop;\n\n  /**\n   * Очищает поле ввода и скрывает список результатов.\n   */\n  protected clearInput() {\n    this.inputElement.value = '';\n    this.inputProcess();\n    this.closeFoundResultsList();\n  }\n\n  /**\n   * Проверяет, находится ли пользователь на странице магазина.\n   * Если да, устанавливает в сервисе имя мебели.\n   * @param name Имя мебели для поиска\n   * @returns true если на странице магазина, иначе false\n   */\n  private checkShopPage(name: string): boolean {\n    let CURRENT_ROUTE = this.route.root;\n    while (CURRENT_ROUTE.firstChild) {\n      CURRENT_ROUTE = CURRENT_ROUTE.firstChild;\n    }\n    const pageName = CURRENT_ROUTE.snapshot.data['pageName'];\n    if (pageName === 'shop') {\n      this.finderService.setFurnitureName(name);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Обрабатывает ввод пользователя с задержкой (debounce).\n   * Запускает поиск, если введена строка.\n   */\n  protected inputProcess() {\n    const VALUE = this.inputElement.value;\n    clearTimeout(this.debounceTimer);\n    this.debounceTimer = setTimeout(() => {\n      if (VALUE.length === 0) {\n        if (this.checkShopPage(VALUE)) this.closeFoundResultsList();\n        return;\n      }\n      if (this.checkShopPage(VALUE)) return;\n\n      this.findFurnitures(VALUE);\n    }, 300);\n  }\n\n  /**\n   * Возвращает URL главного изображения мебели по id и цвету.\n   * @param idFurniture Идентификатор мебели\n   * @param color Цвет мебели\n   * @returns URL изображения\n   */\n  protected getImage(idFurniture: string, color: string): string {\n    return this.imageService.GETmainImage(idFurniture, color);\n  }\n\n  /**\n   * Формирует URL для перехода на страницу мебели.\n   * @param idFurniture Идентификатор мебели\n   * @param category Категория мебели\n   * @returns URL для маршрутизации\n   */\n  protected getUrl(idFurniture: string, category: string): string {\n    return `/shop/${category ?? 'all'}/${idFurniture}`;\n  }\n}\n\n    \n\n    \n        \n    \n        \n            \n        \n        \n        \n            \n        \n    \n    \n        Ничего не найдено :(\n        \n            \n                {{card.name}}\n                {{ card.cost | costFormat }}\n            \n            \n        \n        Перейти в магазин\n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                                    Ничего не найдено :(                                    {{card.name}}                {{ card.cost | costFormat }}                                        Перейти в магазин    '\n    var COMPONENTS = [{'name': 'AccountPageComponent', 'selector': 'app-account-page'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreateFurnitureComponent', 'selector': 'app-create-furniture'},{'name': 'CreateFurniturePageComponent', 'selector': 'app-create-furniture-page'},{'name': 'FinderComponent', 'selector': 'app-finder'},{'name': 'ImageSliderComponent', 'selector': 'app-image-slider'},{'name': 'LoginPageComponent', 'selector': 'app-login-page'},{'name': 'MainPageComponent', 'selector': 'app-main-page'},{'name': 'NavigationPanelComponent', 'selector': 'app-navigation-panel'},{'name': 'NotificationComponent', 'selector': 'app-notification'},{'name': 'PlanHouseComponent', 'selector': 'app-plan-house'},{'name': 'PlanHousePageComponent', 'selector': 'app-plan-house-page'},{'name': 'SceneComponent', 'selector': 'app-scene'},{'name': 'ShopPageComponent', 'selector': 'app-shop-page'},{'name': 'UploadOverlayComponent', 'selector': 'app-upload-overlay'},{'name': 'ViewFurnitureComponent', 'selector': 'app-view-furniture'}];\n    var DIRECTIVES = [{'name': 'AutoHeightDirective', 'selector': '[appAutoHeight]'}];\n    var ACTUAL_COMPONENT = {'name': 'FinderComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FinderService.html":{"url":"injectables/FinderService.html","title":"injectable - FinderService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FinderService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/finder.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для поиска мебели по названию\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseServiceUrl\n                            \n                            \n                                furnitureName$\n                            \n                            \n                                    Private\n                                inputFurnitureNameSubject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                GETfindFurnitures\n                            \n                            \n                                setFurnitureName\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpModule: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/services/finder.service.ts:23\n                            \n                        \n\n                \n                    \n                            Конструктор сервиса\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        httpModule\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nHTTP клиент для выполнения запросов\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        GETfindFurnitures\n                        \n                    \n                \n            \n            \n                \nGETfindFurnitures(query: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/finder.service.ts:44\n                        \n                    \n\n\n            \n                \n                        Выполняет поиск мебели по названию, возвращая до 10 найденных публикаций\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nСтрока запроса поиска\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise с результатами поиска (массив публикаций или любая структура, возвращаемая сервером)\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setFurnitureName\n                        \n                    \n                \n            \n            \n                \nsetFurnitureName(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/finder.service.ts:35\n                        \n                    \n\n\n            \n                \n                        Устанавливает текущее название мебели для поиска\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nНазвание мебели\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseServiceUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : baseUrl + 'find?q='\n                    \n                \n                    \n                        \n                                Defined in src/services/finder.service.ts:17\n                        \n                    \n\n            \n                \n                    Базовый URL для запросов поиска\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        furnitureName$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.inputFurnitureNameSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/services/finder.service.ts:23\n                        \n                    \n\n            \n                \n                    Observable для подписки на изменения названия мебели\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        inputFurnitureNameSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject('')\n                    \n                \n                    \n                        \n                                Defined in src/services/finder.service.ts:20\n                        \n                    \n\n            \n                \n                    BehaviorSubject для хранения текущего названия мебели для поиска\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { BehaviorSubject, firstValueFrom } from 'rxjs';\n\n/**\n * Сервис для поиска мебели по названию\n * @class FinderService\n * @injectable\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class FinderService {\n\n  /** Базовый URL для запросов поиска */\n  private baseServiceUrl = baseUrl + 'find?q=';\n\n  /** BehaviorSubject для хранения текущего названия мебели для поиска */\n  private inputFurnitureNameSubject = new BehaviorSubject('');\n\n  /** Observable для подписки на изменения названия мебели */\n  furnitureName$ = this.inputFurnitureNameSubject.asObservable();\n\n  /**\n   * Конструктор сервиса\n   * @param httpModule - HTTP клиент для выполнения запросов\n   */\n  constructor(private httpModule: HttpClient) { }\n\n  /**\n   * Устанавливает текущее название мебели для поиска\n   * @param name - Название мебели\n   */\n  setFurnitureName(name: string): void {\n    this.inputFurnitureNameSubject.next(name);\n  }\n\n  /**\n   * Выполняет поиск мебели по названию, возвращая до 10 найденных публикаций\n   * @param query - Строка запроса поиска\n   * @returns Promise с результатами поиска (массив публикаций или любая структура, возвращаемая сервером)\n   */\n  GETfindFurnitures(query: string): Promise {\n    return firstValueFrom(this.httpModule.get(this.baseServiceUrl + query));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FurnitureCardControlService.html":{"url":"injectables/FurnitureCardControlService.html","title":"injectable - FurnitureCardControlService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FurnitureCardControlService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/furniture-card-control.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для управления карточками мебели\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseServiceUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                DELETEfurnitureCard\n                            \n                            \n                                    Async\n                                GETfurnitureCard\n                            \n                            \n                                POSTcreateFurnitureCard\n                            \n                            \n                                PUTupdateFurnitureCard\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpModule: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/services/furniture-card-control.service.ts:112\n                            \n                        \n\n                \n                    \n                            Конструктор сервиса\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        httpModule\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                HTTP клиент для запросов\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        DELETEfurnitureCard\n                        \n                    \n                \n            \n            \n                \nDELETEfurnitureCard(jwt: string, furnitureCardId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/furniture-card-control.service.ts:212\n                        \n                    \n\n\n            \n                \n                        Удаление карточки мебели по ID и JWT токену\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nJWT токен пользователя\n\n\n                                            \n                                        \n                                        \n                                                furnitureCardId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID карточки мебели для удаления\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise с сообщением результата удаления\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        GETfurnitureCard\n                        \n                    \n                \n            \n            \n                \n                        \n                    GETfurnitureCard(furnitureCardId: string, jwt?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/furniture-card-control.service.ts:127\n                        \n                    \n\n\n            \n                \n                        Получение карточки мебели по ID и опциональному JWT токену\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                furnitureCardId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID карточки мебели\n\n\n                                            \n                                        \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nJWT токен пользователя (опционально)\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise с объектом, содержащим данные карточки и флаг совпадения автора\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        POSTcreateFurnitureCard\n                        \n                    \n                \n            \n            \n                \nPOSTcreateFurnitureCard(furnitureData: furnitureFromServerData, jwt: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/furniture-card-control.service.ts:176\n                        \n                    \n\n\n            \n                \n                        Создание новой карточки мебели\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                furnitureData\n                                            \n                                                            furnitureFromServerData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nДанные новой карточки мебели\n\n\n                                            \n                                        \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nJWT токен пользователя\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise с данными созданной карточки, включая её ID\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PUTupdateFurnitureCard\n                        \n                    \n                \n            \n            \n                \nPUTupdateFurnitureCard(furnitureCardUpdateData: furnitureFromServerData, furnitureCardId: string, jwt: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/furniture-card-control.service.ts:193\n                        \n                    \n\n\n            \n                \n                        Обновление существующей карточки мебели\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                furnitureCardUpdateData\n                                            \n                                                            furnitureFromServerData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nОбновленные данные карточки мебели\n\n\n                                            \n                                        \n                                        \n                                                furnitureCardId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID карточки мебели для обновления\n\n\n                                            \n                                        \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nJWT токен пользователя\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise с сообщением результата обновления\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseServiceUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : baseUrl + 'furniture/card'\n                    \n                \n                    \n                        \n                                Defined in src/services/furniture-card-control.service.ts:112\n                        \n                    \n\n            \n                \n                    Базовый URL для запросов к API мебели\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { imageSliderClientData, imageSliderFromServerData } from '../components/image-slider/image-slider.component';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные магазина с ценой и URL\n * @interface shopData\n */\nexport interface shopData {\n  /** Цена мебели */\n  cost: number;\n  /** URL магазина или товара */\n  url: string;\n}\n\n/**\n * Пропорции мебели (ширина, длина, высота)\n * @interface furnitureProportions\n */\nexport interface furnitureProportions {\n  /** Ширина мебели (или null, если не задана) */\n  width: number | null;\n  /** Длина мебели (или null, если не задана) */\n  length: number | null;\n  /** Высота мебели (или null, если не задана) */\n  height: number | null;\n}\n\n/**\n * Данные цвета на клиенте, включая слайдер изображений\n * @interface colorClientData\n */\nexport interface colorClientData {\n  /** Цвет мебели */\n  color: string;\n  /** Данные для слайдера изображений */\n  imagesData: imageSliderClientData;\n}\n\n/**\n * Данные цвета с сервера, включая слайдер изображений\n * @interface colorFromServerData\n */\nexport interface colorFromServerData {\n  /** Цвет мебели */\n  color: string;\n  /** Данные для слайдера изображений */\n  imagesData: imageSliderFromServerData;\n}\n\n/**\n * Дополнительные данные мебели с динамическими ключами\n * @interface additionalData\n */\nexport interface additionalData {\n  /** Категория мебели (опционально) */\n  category?: string;\n  /** Другие динамические свойства */\n  [key: string]: string | undefined;\n}\n\n/**\n * Базовые данные мебели, общие для клиента и сервера\n * @interface furnitureBaseData\n */\ninterface furnitureBaseData {\n  /** Название мебели */\n  name: string;\n  /** Описание мебели */\n  description: string;\n  /** Пропорции мебели */\n  proportions: furnitureProportions;\n  /** Список магазинов с ценами и URL */\n  shops: shopData[];\n  /** Дополнительные данные */\n  additionalData: additionalData;\n}\n\n/**\n * Данные мебели на клиенте с цветами\n * @interface furnitureClientData\n * @extends furnitureBaseData\n */\nexport interface furnitureClientData extends furnitureBaseData {\n  /** Список цветов с данными для клиента */\n  colors: colorClientData[];\n}\n\n/**\n * Данные мебели с сервера с цветами\n * @interface furnitureFromServerData\n * @extends furnitureBaseData\n */\nexport interface furnitureFromServerData extends furnitureBaseData {\n  /** Список цветов с данными с сервера */\n  colors: colorFromServerData[];\n}\n\n/**\n * Сервис для управления карточками мебели\n * @class FurnitureCardControlService\n * @injectable\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class FurnitureCardControlService {\n\n  /** Базовый URL для запросов к API мебели */\n  private baseServiceUrl = baseUrl + 'furniture/card';\n\n  /**\n   * Конструктор сервиса\n   * @param httpModule HTTP клиент для запросов\n   */\n  constructor(private httpModule: HttpClient) { }\n\n  /**\n   * Получение карточки мебели по ID и опциональному JWT токену\n   * @param furnitureCardId - ID карточки мебели\n   * @param [jwt] - JWT токен пользователя (опционально)\n   * @returns Promise с объектом, содержащим данные карточки и флаг совпадения автора\n   * @throws Ошибка при некорректной структуре ответа или при ошибках запроса\n   */\n  async GETfurnitureCard(\n    furnitureCardId: string,\n    jwt?: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams().set('furnitureCardId', furnitureCardId);\n\n    if (jwt !== undefined) {\n      HTTP_PARAMS = HTTP_PARAMS.set('jwt', jwt);\n    }\n\n    try {\n      const response = await firstValueFrom(\n        this.httpModule.get(this.baseServiceUrl, { params: HTTP_PARAMS })\n      ) as {\n        furnitureCard: furnitureFromServerData;\n        authorMatched: boolean;\n      };\n\n      if (!response?.furnitureCard) {\n        throw new Error('Invalid response structure: furnitureCard missing');\n      }\n\n      const transformedFurnitureCard = {\n        ...response.furnitureCard,\n        colors: response.furnitureCard.colors.map(colorData => ({\n          color: colorData.color,\n          imagesData: {\n            idMainImage: colorData.imagesData.idMainImage,\n            images: colorData.imagesData.images.map(url => baseUrl + url)\n          }\n        }))\n      };\n\n      return {\n        furnitureCard: transformedFurnitureCard,\n        authorMatched: response.authorMatched\n      };\n\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Создание новой карточки мебели\n   * @param furnitureData - Данные новой карточки мебели\n   * @param jwt - JWT токен пользователя\n   * @returns Promise с данными созданной карточки, включая её ID\n   */\n  POSTcreateFurnitureCard(\n    furnitureData: furnitureFromServerData,\n    jwt: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams().set('jwt', jwt);\n    return firstValueFrom(\n      this.httpModule.post(this.baseServiceUrl, furnitureData, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n\n  /**\n   * Обновление существующей карточки мебели\n   * @param furnitureCardUpdateData - Обновленные данные карточки мебели\n   * @param furnitureCardId - ID карточки мебели для обновления\n   * @param jwt - JWT токен пользователя\n   * @returns Promise с сообщением результата обновления\n   */\n  PUTupdateFurnitureCard(\n    furnitureCardUpdateData: furnitureFromServerData,\n    furnitureCardId: string,\n    jwt: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId);\n    return firstValueFrom(\n      this.httpModule.put(this.baseServiceUrl, furnitureCardUpdateData, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n\n  /**\n   * Удаление карточки мебели по ID и JWT токену\n   * @param jwt - JWT токен пользователя\n   * @param furnitureCardId - ID карточки мебели для удаления\n   * @returns Promise с сообщением результата удаления\n   */\n  DELETEfurnitureCard(jwt: string, furnitureCardId: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId);\n    return firstValueFrom(\n      this.httpModule.delete(this.baseServiceUrl, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FurnitureModelControlService.html":{"url":"injectables/FurnitureModelControlService.html","title":"injectable - FurnitureModelControlService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FurnitureModelControlService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/furniture-model-control.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseServiceUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                DELETEfurnitureModel\n                            \n                            \n                                GETfurnitureModel\n                            \n                            \n                                POSTuploadFurnitureModel\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpModule: HttpClient, uploadService: UploadService)\n                    \n                \n                        \n                            \n                                Defined in src/services/furniture-model-control.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpModule\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        uploadService\n                                                  \n                                                        \n                                                                        UploadService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        DELETEfurnitureModel\n                        \n                    \n                \n            \n            \n                \nDELETEfurnitureModel(jwt: string, furnitureCardId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/furniture-model-control.service.ts:56\n                        \n                    \n\n\n            \n                \n                        Удаление 3D модели мебели по ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nJWT токен пользователя\n\n\n                                            \n                                        \n                                        \n                                                furnitureCardId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID модели мебели для удаления\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nРезультат запроса с сообщением\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        GETfurnitureModel\n                        \n                    \n                \n            \n            \n                \nGETfurnitureModel(jwt: string, furnitureCardId: string, controller: AbortController)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/furniture-model-control.service.ts:25\n                        \n                    \n\n\n            \n                \n                        Получение 3D модели мебели по ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nJWT токен пользователя для авторизации\n\n\n                                            \n                                        \n                                        \n                                                furnitureCardId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID модели мебели\n\n\n                                            \n                                        \n                                        \n                                                controller\n                                            \n                                                        AbortController\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nФайл модели в формате Blob\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        POSTuploadFurnitureModel\n                        \n                    \n                \n            \n            \n                \nPOSTuploadFurnitureModel(modelFile: File, jwt: string, furnitureCardId: string, uploadType: uploadType)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/furniture-model-control.service.ts:46\n                        \n                    \n\n\n            \n                \n                        Загрузка 3D модели мебели на сервер\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                modelFile\n                                            \n                                                        File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nФайл модели для загрузки\n\n\n                                            \n                                        \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nJWT токен пользователя\n\n\n                                            \n                                        \n                                        \n                                                furnitureCardId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID мебели, к которой относится модель\n\n\n                                            \n                                        \n                                        \n                                                uploadType\n                                            \n                                                            uploadType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseServiceUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : baseUrl + 'furniture/model'\n                    \n                \n                    \n                        \n                                Defined in src/services/furniture-model-control.service.ts:12\n                        \n                    \n\n            \n                \n                    Базовый URL для API запросов к моделям мебели\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { firstValueFrom } from 'rxjs';\nimport { UploadService, uploadType } from './upload.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FurnitureModelControlService {\n  /** Базовый URL для API запросов к моделям мебели */\n  private baseServiceUrl = baseUrl + 'furniture/model';\n\n  constructor(\n    private httpModule: HttpClient,\n    private uploadService: UploadService\n  ) { }\n\n  /**\n   * Получение 3D модели мебели по ID\n   * @param {string} jwt - JWT токен пользователя для авторизации\n   * @param {string} furnitureCardId - ID модели мебели\n   * @returns {Promise} - Файл модели в формате Blob\n   */\n  GETfurnitureModel(jwt: string, furnitureCardId: string, controller: AbortController): Promise {\n    const url = new URL(this.baseServiceUrl);\n    url.searchParams.set('jwt', jwt);\n    url.searchParams.set('furnitureCardId', furnitureCardId);\n\n    return fetch(url.toString(), {\n      method: 'GET',\n      signal: controller.signal,\n    })\n      .then((res) => {\n        if (!res.ok) throw new Error('Отмена загрузки');\n        return res.blob();\n      });\n  }\n\n  /**\n   * Загрузка 3D модели мебели на сервер\n   * @param {Blob} modelFile - Файл модели для загрузки\n   * @param {string} jwt - JWT токен пользователя\n   * @param {string} furnitureCardId - ID мебели, к которой относится модель\n   */\n  POSTuploadFurnitureModel(modelFile: File, jwt: string, furnitureCardId: string, uploadType: uploadType) {\n    this.uploadService.addFile(modelFile, jwt, furnitureCardId, uploadType)\n  }\n\n  /**\n   * Удаление 3D модели мебели по ID\n   * @param {string} jwt - JWT токен пользователя\n   * @param {string} furnitureCardId - ID модели мебели для удаления\n   * @returns {Promise} - Результат запроса с сообщением\n   */\n  DELETEfurnitureModel(jwt: string, furnitureCardId: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId);\n\n    return firstValueFrom(\n      this.httpModule.delete(this.baseServiceUrl, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interceptors/HttpErrorInterceptor.html":{"url":"interceptors/HttpErrorInterceptor.html","title":"interceptor - HttpErrorInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Interceptors\n  HttpErrorInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interceptors/http-error.interceptor.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(notification: NotificationService)\n                    \n                \n                        \n                            \n                                Defined in src/interceptors/http-error.interceptor.ts:14\n                            \n                        \n\n                \n                    \n                            Конструктор интерсептора ошибок HTTP\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        notification\n                                                  \n                                                        \n                                                                        NotificationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Сервис уведомлений для отображения ошибок\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(request: HttpRequest, next: HttpHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/interceptors/http-error.interceptor.ts:30\n                        \n                    \n\n\n            \n                \n                        Перехватчик HTTP-запросов для обработки ошибок\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        HttpRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    HTTP-запрос\n\n                                            \n                                        \n                                        \n                                                next\n                                            \n                                                        HttpHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Обработчик HTTP-запроса\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable>\n\n                        \n                            \n                                Observable с HTTP-событиями, с обработкой ошибок\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpErrorResponse\n} from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { NotificationService } from '../services/notification.service';\n\n@Injectable()\nexport class HttpErrorInterceptor implements HttpInterceptor {\n\n  /**\n   * Конструктор интерсептора ошибок HTTP\n   * @param notification Сервис уведомлений для отображения ошибок\n   */\n  constructor(\n    private notification: NotificationService,\n  ) {}\n\n  /**\n   * Перехватчик HTTP-запросов для обработки ошибок\n   * @param request HTTP-запрос\n   * @param next Обработчик HTTP-запроса\n   * @returns Observable с HTTP-событиями, с обработкой ошибок\n   */\n  intercept(request: HttpRequest, next: HttpHandler): Observable> {\n    return next.handle(request).pipe(\n      catchError((error: HttpErrorResponse) => {\n        this.notification.setError(error.error.message, 5000);\n        return throwError(() => error);\n      })\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ImageSliderComponent.html":{"url":"components/ImageSliderComponent.html","title":"component - ImageSliderComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ImageSliderComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/components/image-slider/image-slider.component.ts\n\n\n\n    \n        Description\n    \n    \n        Компонент слайдера изображений.\nОтображает изображения с возможностью выбора главного изображения.\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-image-slider\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            NgIf\n                            NgFor\n                            TuiCarousel\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./image-slider.component.html\n            \n\n\n\n            \n                styleUrl\n                ./image-slider.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                index\n                            \n                            \n                                    Protected\n                                isMobileView\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                changeMainImage\n                            \n                            \n                                    \n                                    Private\n                                checkViewport\n                            \n                            \n                                    Protected\n                                getItemsCount\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                changeModeSlider\n                            \n                            \n                                imagesData\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                window:resize\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        changeModeSlider\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in src/components/image-slider/image-slider.component.ts:58\n                            \n                        \n                \n                    \n                        Входной параметр, который может менять режим слайдера (не используется явно в коде).\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        imagesData\n                    \n                \n                \n                    \n                        Type :         imageSliderFromServerData\n\n                    \n                \n                        \n                            \n                                    Defined in src/components/image-slider/image-slider.component.ts:52\n                            \n                        \n                \n                    \n                        Входные данные с изображениями с сервера.\nСодержит массив URL и индекс главного изображения.\n\n                    \n                \n            \n        \n\n\n\n    \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        window:resize\n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \nwindow:resize()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/image-slider/image-slider.component.ts:73\n                        \n                    \n\n\n            \n                \n                        Отслеживание изменения размера окна браузера.\nОбновляет флаг isMobileView при изменении ширины окна.\n\n\n                \n            \n        \n    \n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        changeMainImage\n                        \n                    \n                \n            \n            \n                \n                        \n                    changeMainImage(index: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/image-slider/image-slider.component.ts:81\n                        \n                    \n\n\n            \n                \n                        Меняет индекс главного изображения (idMainImage) в данных.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                index\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Индекс изображения, выбранного пользователем\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        checkViewport\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkViewport()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('window:resize', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in src/components/image-slider/image-slider.component.ts:73\n                        \n                    \n\n\n            \n                \n                        Отслеживание изменения размера окна браузера.\nОбновляет флаг isMobileView при изменении ширины окна.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        getItemsCount\n                        \n                    \n                \n            \n            \n                \n                        \n                    getItemsCount()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/image-slider/image-slider.component.ts:91\n                        \n                    \n\n\n            \n                \n                        Возвращает количество элементов для отображения в слайдере.\nЕсли изображений меньше 3 — возвращает длину массива,\nиначе 1 для мобильного и 3 для десктопного вида.\n\n\n                        \n                            Returns :         number\n\n                        \n                            \n                                Количество видимых элементов слайдера\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/image-slider/image-slider.component.ts:64\n                        \n                    \n\n\n            \n                \n                        Инициализация компонента.\nПроверяет ширину экрана при загрузке.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        index\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/components/image-slider/image-slider.component.ts:40\n                        \n                    \n\n            \n                \n                    Текущий индекс выбранного слайда (используется для локального отслеживания).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        isMobileView\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/components/image-slider/image-slider.component.ts:45\n                        \n                    \n\n            \n                \n                    Флаг, указывающий, находится ли текущее отображение в мобильном виде (ширина \n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, HostListener, Input, OnInit } from '@angular/core';\nimport { NgIf, NgFor } from '@angular/common';\nimport { TuiCarousel } from '@taiga-ui/kit';\n\n/**\n * Интерфейс данных для слайдера с клиентскими изображениями в формате Blob.\n */\nexport interface imageSliderClientData {\n  /** Массив изображений в формате Blob */\n  images: Blob[];\n  /** Индекс главного (выбранного) изображения */\n  idMainImage: number;\n}\n\n/**\n * Интерфейс данных для слайдера с изображениями с сервера в виде URL-строк.\n */\nexport interface imageSliderFromServerData {\n  /** Массив URL-строк изображений */\n  images: string[];\n  /** Индекс главного (выбранного) изображения */\n  idMainImage: number;\n}\n\n/**\n * Компонент слайдера изображений.\n * Отображает изображения с возможностью выбора главного изображения.\n */\n@Component({\n  selector: 'app-image-slider',\n  standalone: true,\n  imports: [NgIf, NgFor, TuiCarousel],\n  templateUrl: './image-slider.component.html',\n  styleUrl: './image-slider.component.scss'\n})\nexport class ImageSliderComponent implements OnInit {\n  /**\n   * Текущий индекс выбранного слайда (используется для локального отслеживания).\n   */\n  protected index: number = 0;\n\n  /**\n   * Флаг, указывающий, находится ли текущее отображение в мобильном виде (ширина \n    \n\n    \n        \n  \n    \n      \n      {{imagesData.idMainImage===i?'Основная':'Сделать основной'}}\n    \n  \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                  {{imagesData.idMainImage===i?\\'Основная\\':\\'Сделать основной\\'}}      '\n    var COMPONENTS = [{'name': 'AccountPageComponent', 'selector': 'app-account-page'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreateFurnitureComponent', 'selector': 'app-create-furniture'},{'name': 'CreateFurniturePageComponent', 'selector': 'app-create-furniture-page'},{'name': 'FinderComponent', 'selector': 'app-finder'},{'name': 'ImageSliderComponent', 'selector': 'app-image-slider'},{'name': 'LoginPageComponent', 'selector': 'app-login-page'},{'name': 'MainPageComponent', 'selector': 'app-main-page'},{'name': 'NavigationPanelComponent', 'selector': 'app-navigation-panel'},{'name': 'NotificationComponent', 'selector': 'app-notification'},{'name': 'PlanHouseComponent', 'selector': 'app-plan-house'},{'name': 'PlanHousePageComponent', 'selector': 'app-plan-house-page'},{'name': 'SceneComponent', 'selector': 'app-scene'},{'name': 'ShopPageComponent', 'selector': 'app-shop-page'},{'name': 'UploadOverlayComponent', 'selector': 'app-upload-overlay'},{'name': 'ViewFurnitureComponent', 'selector': 'app-view-furniture'}];\n    var DIRECTIVES = [{'name': 'AutoHeightDirective', 'selector': '[appAutoHeight]'}];\n    var ACTUAL_COMPONENT = {'name': 'ImageSliderComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/MainPageComponent.html":{"url":"components/MainPageComponent.html","title":"component - MainPageComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  MainPageComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/components/main-page/main-page.component.ts\n\n\n\n    \n        Description\n    \n    \n        Компонент главной страницы.\nУправляет отображением различных секций для создания мебели, планировки дома и просмотра мебели.\n\n    \n\n\n    \n        Implements\n    \n    \n                AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-main-page\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                                CreateFurnitureComponent\n                                ViewFurnitureComponent\n                                PlanHouseComponent\n                            NgClass\n                                NavigationPanelComponent\n                            RouterLink\n                            NgIf\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./main-page.component.html\n            \n\n\n\n            \n                styleUrl\n                ./main-page.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                furnitureExampleData\n                            \n                            \n                                    Protected\n                                furnitureTemplate\n                            \n                            \n                                    Protected\n                                isMobileView\n                            \n                            \n                                    Protected\n                                planHouseExampleData\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Private\n                                checkViewport\n                            \n                            \n                                    Protected\n                                focusFinder\n                            \n                            \n                                    Protected\n                                navigateToPage\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Protected\n                                openCreateFurniture\n                            \n                            \n                                    Protected\n                                openViewFurniture\n                            \n                        \n                    \n                \n\n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                window:resize\n                            \n                        \n                    \n                \n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(elementRef: ElementRef, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/components/main-page/main-page.component.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        elementRef\n                                                  \n                                                        \n                                                                    ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n    \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        window:resize\n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \nwindow:resize()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/main-page/main-page.component.ts:67\n                        \n                    \n\n\n            \n                \n                        Слушатель события изменения размера окна.\nОбновляет флаг isMobileView.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Событие resize окна\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        checkViewport\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkViewport()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('window:resize', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in src/components/main-page/main-page.component.ts:67\n                        \n                    \n\n\n            \n                \n                        Слушатель события изменения размера окна.\nОбновляет флаг isMobileView.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        focusFinder\n                        \n                    \n                \n            \n            \n                \n                        \n                    focusFinder()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/main-page/main-page.component.ts:74\n                        \n                    \n\n\n            \n                \n                        Фокусирует элемент ввода с классом 'finderInput', если он существует.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        navigateToPage\n                        \n                    \n                \n            \n            \n                \n                        \n                    navigateToPage(link: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/main-page/main-page.component.ts:98\n                        \n                    \n\n\n            \n                \n                        Навигация по приложению.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                link\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Ссылка для перехода на другую страницу\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/main-page/main-page.component.ts:44\n                        \n                    \n\n\n            \n                \n                        Инициализация компонента после загрузки представления.\nОтключает события для дочерних элементов в компонентах CreateFurniture и PlanHouse.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/main-page/main-page.component.ts:57\n                        \n                    \n\n\n            \n                \n                        Проверка на мобильную версию при инициализации компонента.\nУстанавливает флаг isMobileView в зависимости от ширины окна.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        openCreateFurniture\n                        \n                    \n                \n            \n            \n                \n                        \n                    openCreateFurniture()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/main-page/main-page.component.ts:90\n                        \n                    \n\n\n            \n                \n                        Открывает шаблон для создания новой мебели.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        openViewFurniture\n                        \n                    \n                \n            \n            \n                \n                        \n                    openViewFurniture()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/main-page/main-page.component.ts:83\n                        \n                    \n\n\n            \n                \n                        Открывает шаблон для просмотра мебели.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        furnitureExampleData\n                        \n                    \n                \n            \n                \n                    \n                        Default value : furnitureExampleData\n                    \n                \n                    \n                        \n                                Defined in src/components/main-page/main-page.component.ts:32\n                        \n                    \n\n            \n                \n                    Пример данных мебели\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        furnitureTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"view\" | \"create\"\n\n                    \n                \n                \n                    \n                        Default value : 'create'\n                    \n                \n                    \n                        \n                                Defined in src/components/main-page/main-page.component.ts:29\n                        \n                    \n\n            \n                \n                    Текущий отображаемый шаблон: 'view' или 'create'\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        isMobileView\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/components/main-page/main-page.component.ts:38\n                        \n                    \n\n            \n                \n                    Флаг для определения, находится ли пользователь на мобильном устройстве\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        planHouseExampleData\n                        \n                    \n                \n            \n                \n                    \n                        Default value : planHouseExampleData\n                    \n                \n                    \n                        \n                                Defined in src/components/main-page/main-page.component.ts:35\n                        \n                    \n\n            \n                \n                    Пример данных планировки дома\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { AfterViewInit, Component, ElementRef, HostListener } from '@angular/core';\nimport { CreateFurnitureComponent } from '../create-furnitre/create-furniture.component';\nimport { ViewFurnitureComponent } from '../view-furniture/view-furniture.component';\nimport { PlanHouseComponent } from '../plan-house/plan-house.component';\nimport { NgClass, NgIf } from '@angular/common';\nimport { NavigationPanelComponent } from '../navigation-panel/navigation-panel.component';\nimport { Router, RouterLink } from '@angular/router';\nimport { furnitureExampleData, planHouseExampleData } from '../../usable/main-page.mock';\n\n/**\n * Компонент главной страницы.\n * Управляет отображением различных секций для создания мебели, планировки дома и просмотра мебели.\n */\n@Component({\n  selector: 'app-main-page',\n  standalone: true,\n  imports: [CreateFurnitureComponent, ViewFurnitureComponent, PlanHouseComponent, NgClass, NavigationPanelComponent, RouterLink, NgIf],\n  templateUrl: './main-page.component.html',\n  styleUrl: './main-page.component.scss'\n})\nexport class MainPageComponent implements AfterViewInit {\n\n  constructor(\n    private elementRef: ElementRef, /** Элемент компонента */\n    private router: Router /** Сервис для навигации */\n  ) {}\n\n  /** Текущий отображаемый шаблон: 'view' или 'create' */\n  protected furnitureTemplate: 'view' | 'create' = 'create';\n\n  /** Пример данных мебели */\n  protected furnitureExampleData = furnitureExampleData;\n\n  /** Пример данных планировки дома */\n  protected planHouseExampleData = planHouseExampleData;\n\n  /** Флаг для определения, находится ли пользователь на мобильном устройстве */\n  protected isMobileView: boolean = false;\n\n  /**\n   * Инициализация компонента после загрузки представления.\n   * Отключает события для дочерних элементов в компонентах CreateFurniture и PlanHouse.\n   */\n  ngAfterViewInit(): void {\n    (this.elementRef.nativeElement.querySelectorAll('app-create-furniture,app-plan-house') as NodeListOf).forEach(elem => {\n      elem.querySelectorAll('*').forEach(child => {\n        child.setAttribute('tabindex', \"-1\"); /** Отключает фокусировку для дочерних элементов */\n        child.style.pointerEvents = 'none'; /** Отключает взаимодействие с дочерними элементами */\n      });\n    });\n  }\n\n  /**\n   * Проверка на мобильную версию при инициализации компонента.\n   * Устанавливает флаг isMobileView в зависимости от ширины окна.\n   */\n  ngOnInit() {\n    this.checkViewport();\n  }\n\n  /**\n   * Слушатель события изменения размера окна.\n   * Обновляет флаг isMobileView.\n   * @param event Событие resize окна\n   */\n  @HostListener('window:resize', ['$event'])\n  private checkViewport() {\n    this.isMobileView = window.innerWidth \n    \n\n    \n        \n    \n        \n            \n            \n            \n            \n        \n    \n    \n        \n            \n            \n            \n            \n        \n        HOUSEQUALITY\n        \n            Магазин\n            Мебель\n            Проекты\n            Аккаунт\n        \n    \n\n\n    \n    \n        \n            Ваш идеальный дом\n            HouseQuality - платформа для создания идеального дома. Зайдите в наш магазин цифрового дизайна и начните свое путешествие!\n            \n                \n                    Стиль\n                    Ваша идея\n                \n                \n                    Дом\n                    Ваша зона\n                \n                \n                    План\n                    Новый вид\n                \n                \n                    Мебель\n                    Большой выбор\n                \n            \n        \n\n        \n            Создаем и воплощаем ваши мечты\n            \n                Добавить мебель\n                Посмотреть мебель\n            \n        \n\n        \n            \n\n            \n        \n\n        \n            Создайте свой дом\n            Добавьте комнаты и передвиньте их\n        \n        \n    \n\n\n\n    \n        \n            Найти мебель\n            Аккаунт\n        \n        \n            Добавить мебель\n            Планировка\n        \n    \n    HouseQuality 2025\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                                                                                                    HOUSEQUALITY                    Магазин            Мебель            Проекты            Аккаунт                                        Ваш идеальный дом            HouseQuality - платформа для создания идеального дома. Зайдите в наш магазин цифрового дизайна и начните свое путешествие!                                                Стиль                    Ваша идея                                                    Дом                    Ваша зона                                                    План                    Новый вид                                                    Мебель                    Большой выбор                                                        Создаем и воплощаем ваши мечты                            Добавить мебель                Посмотреть мебель                                                                                Создайте свой дом            Добавьте комнаты и передвиньте их                                            Найти мебель            Аккаунт                            Добавить мебель            Планировка                HouseQuality 2025'\n    var COMPONENTS = [{'name': 'AccountPageComponent', 'selector': 'app-account-page'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreateFurnitureComponent', 'selector': 'app-create-furniture'},{'name': 'CreateFurniturePageComponent', 'selector': 'app-create-furniture-page'},{'name': 'FinderComponent', 'selector': 'app-finder'},{'name': 'ImageSliderComponent', 'selector': 'app-image-slider'},{'name': 'LoginPageComponent', 'selector': 'app-login-page'},{'name': 'MainPageComponent', 'selector': 'app-main-page'},{'name': 'NavigationPanelComponent', 'selector': 'app-navigation-panel'},{'name': 'NotificationComponent', 'selector': 'app-notification'},{'name': 'PlanHouseComponent', 'selector': 'app-plan-house'},{'name': 'PlanHousePageComponent', 'selector': 'app-plan-house-page'},{'name': 'SceneComponent', 'selector': 'app-scene'},{'name': 'ShopPageComponent', 'selector': 'app-shop-page'},{'name': 'UploadOverlayComponent', 'selector': 'app-upload-overlay'},{'name': 'ViewFurnitureComponent', 'selector': 'app-view-furniture'}];\n    var DIRECTIVES = [{'name': 'AutoHeightDirective', 'selector': '[appAutoHeight]'}];\n    var ACTUAL_COMPONENT = {'name': 'MainPageComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MyXhrUploadOptions.html":{"url":"interfaces/MyXhrUploadOptions.html","title":"interface - MyXhrUploadOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MyXhrUploadOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/upload.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            endpoint\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            fieldName\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            formData\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            getResponseError\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        endpoint\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        endpoint:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fieldName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fieldName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        formData\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        formData:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getResponseError\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getResponseError:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport Uppy from '@uppy/core';\nimport XHRUpload from '@uppy/xhr-upload';\nimport { BehaviorSubject } from 'rxjs';\nimport { baseUrl } from '.';\nimport { FurnitureCardControlService } from './furniture-card-control.service';\nimport { ServerImageControlService } from './server-image-control.service';\nimport { AccountCookieService } from './account-cookie.service';\nimport { NotificationService } from './notification.service';\nimport { UploadOverlayComponent } from '../components/upload-overlay/upload-overlay.component';\n\ntype uploadStatus = 'uploading' | 'success' | 'error';\nexport type uploadType = 'create' | 'update';\nexport interface UploadEntry {\n  id: string;\n  name: string;\n  progress: number;\n  status: uploadStatus;\n}\ninterface MyXhrUploadOptions {\n  endpoint: string;\n  fieldName?: string;\n  formData?: boolean;\n  getResponseError?: (responseText: string, response: Response) => Error | null;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class UploadService {\n  private uppy: Uppy;\n  public uploads$ = new BehaviorSubject([]);\n  private baseServiceUrl = baseUrl + 'furniture/model';\n\n  constructor(\n    private furnitureCardService: FurnitureCardControlService,\n    private serverImageControl: ServerImageControlService,\n    private accountCookieService: AccountCookieService,\n    private notification: NotificationService\n  ) {\n    this.uppy = new Uppy({ autoProceed: true });\n\n    this.uppy.use(XHRUpload, {\n      endpoint: this.baseServiceUrl,\n      fieldName: 'file',\n      formData: true,\n      getResponseError: (responseText, response) => {\n        return new Error(`Ошибка: ${response.statusText}`);\n      }\n    } as MyXhrUploadOptions);\n\n    this.uppy.on('upload-progress', (file, progress) => {\n      if (file === undefined || file.meta.name === undefined) return;\n      const NAME = file.data instanceof File ? file.data.name : 'file';\n      this.updateUpload(file.id, NAME, file.progress.percentage ?? 50, 'uploading');\n    });\n\n    this.uppy.on('upload-success', (file) => {\n      if (file === undefined || file.meta.name === undefined) return;\n\n      const NAME = file.data instanceof File ? file.data.name : 'file'\n      this.updateUpload(file.id, NAME, 100, 'success');\n      this.notification.setSuccess('Модель обновлена', 2500);\n    });\n\n    this.uppy.on('upload-error', (file, error) => {\n      if (file === undefined || file.meta.name === undefined) return;\n\n      const NAME = file.data instanceof File ? file.data.name : 'file'\n      this.updateUpload(file.id, NAME, 100, 'error');\n      this.cancelUpload(file.id);\n    });\n  }\n\n  addFile(file: File, jwt: string, furnitureCardId: string, uploadType: uploadType) {\n    const UNIQUE_ID = Date.now().toString();\n    this.uppy.addFile({\n      name: UNIQUE_ID + this.getFileExtension(file.name),\n      type: file.type,\n      data: file,\n      meta: {\n        furnitureCardId: furnitureCardId,\n        jwt: jwt,\n        uploadType: uploadType\n      }\n    });\n  }\n\n  async cancelUpload(fileID: string) {\n    const file = this.uppy.getFile(fileID);\n    if (file) {\n      this.uppy.removeFile(fileID);\n      const JWT = this.accountCookieService.getJwt()\n      const FURNITURE_CARD_ID = file.meta['furnitureCardId'] as string;\n      const UPLOAD_TYPE = file.meta['uploadType'] as string;\n\n\n      if (JWT && FURNITURE_CARD_ID && UPLOAD_TYPE === 'create') {\n        await this.serverImageControl.DELETEproject(JWT, FURNITURE_CARD_ID)\n        this.furnitureCardService.DELETEfurnitureCard(JWT, FURNITURE_CARD_ID)\n      }\n    }\n  }\n  private getFileExtension(fileName: string): string | null {\n    const parts = fileName.split('.');\n    const EXTENSION = parts.length > 1 ? parts.pop()?.toLowerCase() : \"obj\"\n    return `.${EXTENSION}`\n  }\n  removeFileFromQueue(fileID: string) {\n    const updatedQueue = this.uploads$.value.filter(file => file.id !== fileID);\n    this.uploads$.next(updatedQueue);\n  }\n\n  private updateUpload(id: string, name: string, progress: number, status: uploadStatus) {\n    const current = this.uploads$.value.filter(file => file.id !== id);\n    this.uploads$.next([...current, { id, name, progress, status }]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NavigationPanelComponent.html":{"url":"components/NavigationPanelComponent.html","title":"component - NavigationPanelComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NavigationPanelComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/components/navigation-panel/navigation-panel.component.ts\n\n\n\n    \n        Description\n    \n    \n        Компонент навигационной панели.\nОтображает меню навигации и компонент поиска.\nПоддерживает адаптивность под мобильные устройства.\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-navigation-panel\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            RouterLink\n                                FinderComponent\n                            NgIf\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./navigation-panel.component.html\n            \n\n\n\n            \n                styleUrl\n                ./navigation-panel.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                isMobileView\n                            \n                            \n                                    Protected\n                                menuOpen\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Private\n                                checkViewport\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Protected\n                                toggleMenu\n                            \n                        \n                    \n                \n\n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                window:resize\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n\n\n\n    \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        window:resize\n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \nwindow:resize()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/navigation-panel/navigation-panel.component.ts:40\n                        \n                    \n\n\n            \n                \n                        Обработчик события изменения размера окна.\nПроверяет ширину окна и обновляет флаг isMobileView.\nЕсли устройство не мобильное — закрывает меню.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Событие изменения размера окна\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        checkViewport\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkViewport()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('window:resize', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in src/components/navigation-panel/navigation-panel.component.ts:40\n                        \n                    \n\n\n            \n                \n                        Обработчик события изменения размера окна.\nПроверяет ширину окна и обновляет флаг isMobileView.\nЕсли устройство не мобильное — закрывает меню.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/navigation-panel/navigation-panel.component.ts:29\n                        \n                    \n\n\n            \n                \n                        Жизненный цикл OnInit.\nВыполняет начальную проверку размера экрана.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        toggleMenu\n                        \n                    \n                \n            \n            \n                \n                        \n                    toggleMenu()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/navigation-panel/navigation-panel.component.ts:50\n                        \n                    \n\n\n            \n                \n                        Переключает состояние меню (открыто/закрыто).\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        isMobileView\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/components/navigation-panel/navigation-panel.component.ts:23\n                        \n                    \n\n            \n                \n                    Флаг, указывающий, отображается ли компонент в мобильной версии\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        menuOpen\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/components/navigation-panel/navigation-panel.component.ts:20\n                        \n                    \n\n            \n                \n                    Состояние открытия выпадающего меню (используется на мобильных устройствах)\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, HostListener, OnInit } from '@angular/core';\nimport { RouterLink } from '@angular/router';\nimport { FinderComponent } from '../finder/finder.component';\nimport { NgIf } from '@angular/common';\n\n/**\n * Компонент навигационной панели.\n * Отображает меню навигации и компонент поиска.\n * Поддерживает адаптивность под мобильные устройства.\n */\n@Component({\n  selector: 'app-navigation-panel',\n  standalone: true,\n  imports: [RouterLink, FinderComponent, NgIf],\n  templateUrl: './navigation-panel.component.html',\n  styleUrl: './navigation-panel.component.scss'\n})\nexport class NavigationPanelComponent implements OnInit {\n  /** Состояние открытия выпадающего меню (используется на мобильных устройствах) */\n  protected menuOpen = false;\n\n  /** Флаг, указывающий, отображается ли компонент в мобильной версии */\n  protected isMobileView = false;\n\n  /**\n   * Жизненный цикл OnInit.\n   * Выполняет начальную проверку размера экрана.\n   */\n  ngOnInit() {\n    this.checkViewport();\n  }\n\n  /**\n   * Обработчик события изменения размера окна.\n   * Проверяет ширину окна и обновляет флаг `isMobileView`.\n   * Если устройство не мобильное — закрывает меню.\n   * @param event Событие изменения размера окна\n   */\n  @HostListener('window:resize', ['$event'])\n  private checkViewport() {\n    this.isMobileView = window.innerWidth \n    \n\n    \n        \n    HQ\n\n    \n        \n    \n\n    \n        \n        \n            \n                \n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n\n    \n        \n        \n            \n            Аккаунт\n        \n        \n            \n            Расстановка\n        \n        \n            \n            Мебель\n        \n        \n            \n            Магазин\n        \n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    HQ                                                                                                                                                                                                                                                            Аккаунт                                        Расстановка                                        Мебель                                        Магазин            '\n    var COMPONENTS = [{'name': 'AccountPageComponent', 'selector': 'app-account-page'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreateFurnitureComponent', 'selector': 'app-create-furniture'},{'name': 'CreateFurniturePageComponent', 'selector': 'app-create-furniture-page'},{'name': 'FinderComponent', 'selector': 'app-finder'},{'name': 'ImageSliderComponent', 'selector': 'app-image-slider'},{'name': 'LoginPageComponent', 'selector': 'app-login-page'},{'name': 'MainPageComponent', 'selector': 'app-main-page'},{'name': 'NavigationPanelComponent', 'selector': 'app-navigation-panel'},{'name': 'NotificationComponent', 'selector': 'app-notification'},{'name': 'PlanHouseComponent', 'selector': 'app-plan-house'},{'name': 'PlanHousePageComponent', 'selector': 'app-plan-house-page'},{'name': 'SceneComponent', 'selector': 'app-scene'},{'name': 'ShopPageComponent', 'selector': 'app-shop-page'},{'name': 'UploadOverlayComponent', 'selector': 'app-upload-overlay'},{'name': 'ViewFurnitureComponent', 'selector': 'app-view-furniture'}];\n    var DIRECTIVES = [{'name': 'AutoHeightDirective', 'selector': '[appAutoHeight]'}];\n    var ACTUAL_COMPONENT = {'name': 'NavigationPanelComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NotificationComponent.html":{"url":"components/NotificationComponent.html","title":"component - NotificationComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NotificationComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/components/notification/notification.component.ts\n\n\n\n    \n        Description\n    \n    \n        Компонент отображения уведомлений об ошибках и успехах.\nТакже содержит методы выхода из аккаунта и перезагрузки страницы.\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-notification\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            NgClass\n                            NgIf\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./notification.component.html\n            \n\n\n\n            \n                styleUrl\n                ./notification.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                errorMessage\n                            \n                            \n                                    Protected\n                                successMessage\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logout\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Protected\n                                reloadPage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(notificationService: NotificationService, cookieService: AccountCookieService)\n                    \n                \n                        \n                            \n                                Defined in src/components/notification/notification.component.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        notificationService\n                                                  \n                                                        \n                                                                        NotificationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cookieService\n                                                  \n                                                        \n                                                                        AccountCookieService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logout\n                        \n                    \n                \n            \n            \n                \n                        \n                    logout()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/notification/notification.component.ts:53\n                        \n                    \n\n\n            \n                \n                        Удаляет JWT и тип аккаунта из cookie, затем перезагружает страницу.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/notification/notification.component.ts:33\n                        \n                    \n\n\n            \n                \n                        Подписка на потоки сообщений при инициализации компонента.\nПолученные сообщения сохраняются в соответствующие свойства.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        reloadPage\n                        \n                    \n                \n            \n            \n                \n                        \n                    reloadPage()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/notification/notification.component.ts:46\n                        \n                    \n\n\n            \n                \n                        Перезагружает текущую страницу.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        errorMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/components/notification/notification.component.ts:24\n                        \n                    \n\n            \n                \n                    Сообщение об ошибке, получаемое из NotificationService\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        successMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/components/notification/notification.component.ts:27\n                        \n                    \n\n            \n                \n                    Сообщение об успешном действии, получаемое из NotificationService\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { NgClass, NgIf } from '@angular/common';\nimport { Component, OnInit } from '@angular/core';\nimport { NotificationService } from '../../services/notification.service';\nimport { AccountCookieService } from '../../services/account-cookie.service';\n\n/**\n * Компонент отображения уведомлений об ошибках и успехах.\n * Также содержит методы выхода из аккаунта и перезагрузки страницы.\n */\n@Component({\n  selector: 'app-notification',\n  standalone: true,\n  imports: [NgClass, NgIf],\n  templateUrl: './notification.component.html',\n  styleUrl: './notification.component.scss'\n})\nexport class NotificationComponent implements OnInit {\n  constructor(\n    private notificationService: NotificationService,\n    private cookieService: AccountCookieService\n  ) {}\n\n  /** Сообщение об ошибке, получаемое из NotificationService */\n  protected errorMessage!: string;\n\n  /** Сообщение об успешном действии, получаемое из NotificationService */\n  protected successMessage!: string;\n\n  /**\n   * Подписка на потоки сообщений при инициализации компонента.\n   * Полученные сообщения сохраняются в соответствующие свойства.\n   */\n  ngOnInit(): void {\n    this.notificationService.error$.subscribe(message => {\n      this.errorMessage = message;\n    });\n\n    this.notificationService.success$.subscribe(message => {\n      this.successMessage = message;\n    });\n  }\n\n  /**\n   * Перезагружает текущую страницу.\n   */\n  protected reloadPage(): void {\n    window.location.reload();\n  }\n\n  /**\n   * Удаляет JWT и тип аккаунта из cookie, затем перезагружает страницу.\n   */\n  protected logout(): void {\n    this.cookieService.deleteJwt();\n    this.cookieService.deleteAccountType();\n    this.reloadPage();\n  }\n}\n\n    \n\n    \n        \n    \n    \n        {{errorMessage?'Что-то пошло не так':'Успешно'}}\n        {{errorMessage||successMessage}}\n    \n    \n        \n            \n        \n        \n            \n        \n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                {{errorMessage?\\'Что-то пошло не так\\':\\'Успешно\\'}}        {{errorMessage||successMessage}}                                                                    '\n    var COMPONENTS = [{'name': 'AccountPageComponent', 'selector': 'app-account-page'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreateFurnitureComponent', 'selector': 'app-create-furniture'},{'name': 'CreateFurniturePageComponent', 'selector': 'app-create-furniture-page'},{'name': 'FinderComponent', 'selector': 'app-finder'},{'name': 'ImageSliderComponent', 'selector': 'app-image-slider'},{'name': 'LoginPageComponent', 'selector': 'app-login-page'},{'name': 'MainPageComponent', 'selector': 'app-main-page'},{'name': 'NavigationPanelComponent', 'selector': 'app-navigation-panel'},{'name': 'NotificationComponent', 'selector': 'app-notification'},{'name': 'PlanHouseComponent', 'selector': 'app-plan-house'},{'name': 'PlanHousePageComponent', 'selector': 'app-plan-house-page'},{'name': 'SceneComponent', 'selector': 'app-scene'},{'name': 'ShopPageComponent', 'selector': 'app-shop-page'},{'name': 'UploadOverlayComponent', 'selector': 'app-upload-overlay'},{'name': 'ViewFurnitureComponent', 'selector': 'app-view-furniture'}];\n    var DIRECTIVES = [{'name': 'AutoHeightDirective', 'selector': '[appAutoHeight]'}];\n    var ACTUAL_COMPONENT = {'name': 'NotificationComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NotificationService.html":{"url":"injectables/NotificationService.html","title":"injectable - NotificationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NotificationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/notification.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для управления уведомлениями об ошибках и успехах.\nПозволяет подписываться на сообщения и автоматически очищать их через заданный промежуток времени.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                error$\n                            \n                            \n                                    Private\n                                errorSubject\n                            \n                            \n                                success$\n                            \n                            \n                                    Private\n                                successSubject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                clearNotification\n                            \n                            \n                                setError\n                            \n                            \n                                setSuccess\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        clearNotification\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearNotification()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/notification.service.ts:53\n                        \n                    \n\n\n            \n                \n                        Очищает сообщения об ошибках и успехах\n(устанавливает значения в пустую строку)\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setError\n                        \n                    \n                \n            \n            \n                \nsetError(message: string, delay: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/notification.service.ts:34\n                        \n                    \n\n\n            \n                \n                        Устанавливает сообщение об ошибке и очищает его после задержки\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Текст ошибки для отображения\n\n                                            \n                                        \n                                        \n                                                delay\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Задержка в миллисекундах перед автоматическим удалением сообщения\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setSuccess\n                        \n                    \n                \n            \n            \n                \nsetSuccess(message: string, delay: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/notification.service.ts:44\n                        \n                    \n\n\n            \n                \n                        Устанавливает сообщение об успешном действии и очищает его после задержки\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Текст успешного сообщения\n\n                                            \n                                        \n                                        \n                                                delay\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Задержка в миллисекундах перед автоматическим удалением сообщения\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        error$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.errorSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/services/notification.service.ts:24\n                        \n                    \n\n            \n                \n                    Observable для подписки на сообщения об ошибках\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        errorSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject('')\n                    \n                \n                    \n                        \n                                Defined in src/services/notification.service.ts:16\n                        \n                    \n\n            \n                \n                    BehaviorSubject для ошибок, содержит строку с сообщением об ошибке или пустую строку.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        success$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.successSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/services/notification.service.ts:27\n                        \n                    \n\n            \n                \n                    Observable для подписки на успешные сообщения\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        successSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject('')\n                    \n                \n                    \n                        \n                                Defined in src/services/notification.service.ts:21\n                        \n                    \n\n            \n                \n                    BehaviorSubject для успешных сообщений, содержит строку с сообщением успеха или пустую строку.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n/**\n * Сервис для управления уведомлениями об ошибках и успехах.\n * Позволяет подписываться на сообщения и автоматически очищать их через заданный промежуток времени.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotificationService {\n\n  /** \n   * BehaviorSubject для ошибок, содержит строку с сообщением об ошибке или пустую строку.\n   */\n  private errorSubject = new BehaviorSubject('');\n\n  /** \n   * BehaviorSubject для успешных сообщений, содержит строку с сообщением успеха или пустую строку.\n   */\n  private successSubject = new BehaviorSubject('');\n\n  /** Observable для подписки на сообщения об ошибках */\n  error$ = this.errorSubject.asObservable();\n\n  /** Observable для подписки на успешные сообщения */\n  success$ = this.successSubject.asObservable();\n\n  /**\n   * Устанавливает сообщение об ошибке и очищает его после задержки\n   * @param message Текст ошибки для отображения\n   * @param delay Задержка в миллисекундах перед автоматическим удалением сообщения\n   */\n  setError(message: string, delay: number): void {\n    this.errorSubject.next(message);\n    setTimeout(() => this.clearNotification(), delay);\n  }\n\n  /**\n   * Устанавливает сообщение об успешном действии и очищает его после задержки\n   * @param message Текст успешного сообщения\n   * @param delay Задержка в миллисекундах перед автоматическим удалением сообщения\n   */\n  setSuccess(message: string, delay: number): void {\n    this.successSubject.next(message);\n    setTimeout(() => this.clearNotification(), delay);\n  }\n\n  /**\n   * Очищает сообщения об ошибках и успехах\n   * (устанавливает значения в пустую строку)\n   */\n  private clearNotification(): void {\n    this.errorSubject.next('');\n    this.successSubject.next('');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/PlanHousePageComponent.html":{"url":"components/PlanHousePageComponent.html","title":"component - PlanHousePageComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  PlanHousePageComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/components/plan-house-page/plan-house-page.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                AfterViewInit\n                OnInit\n                AfterViewChecked\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-plan-house-page\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                                NavigationPanelComponent\n                                PlanHouseComponent\n                            NgFor\n                            NgIf\n                            ReactiveFormsModule\n                            NgIf\n                            NgClass\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./plan-house-page.component.html\n            \n\n\n\n            \n                styleUrl\n                ./plan-house-page.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                accountData\n                            \n                            \n                                    Private\n                                addModule\n                            \n                            \n                                    Protected\n                                checkDesktop\n                            \n                            \n                                    Private\n                                currentPlanHouse\n                            \n                            \n                                    Protected\n                                currentProjectId\n                            \n                            \n                                    Private\n                                hasRoomIdBeenProcessed\n                            \n                            \n                                    \n                                    Private\n                                planHouse\n                            \n                            \n                                    Protected\n                                projectNameForm\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                closeAddModule\n                            \n                            \n                                    Protected\n                                closeProject\n                            \n                            \n                                    Protected\n                                    Async\n                                createProject\n                            \n                            \n                                    Protected\n                                    Async\n                                deleteProject\n                            \n                            \n                                    Protected\n                                getCurrentViewRoom\n                            \n                            \n                                ngAfterViewChecked\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Protected\n                                openAddModule\n                            \n                            \n                                    Protected\n                                openProject\n                            \n                            \n                                    Private\n                                    Async\n                                pageInit\n                            \n                            \n                                    Protected\n                                    Async\n                                saveProject\n                            \n                            \n                                    Protected\n                                updatePlanData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(accountService: AccountService, accountCookieService: AccountCookieService, router: Router, route: ActivatedRoute, elemenetRef: ElementRef, renderer: Renderer2, projectService: ProjectService, notification: NotificationService, location: Location)\n                    \n                \n                        \n                            \n                                Defined in src/components/plan-house-page/plan-house-page.component.ts:42\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        accountService\n                                                  \n                                                        \n                                                                        AccountService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accountCookieService\n                                                  \n                                                        \n                                                                        AccountCookieService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        route\n                                                  \n                                                        \n                                                                    ActivatedRoute\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        elemenetRef\n                                                  \n                                                        \n                                                                    ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                    Renderer2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        projectService\n                                                  \n                                                        \n                                                                        ProjectService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        notification\n                                                  \n                                                        \n                                                                        NotificationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        location\n                                                  \n                                                        \n                                                                    Location\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        closeAddModule\n                        \n                    \n                \n            \n            \n                \n                        \n                    closeAddModule()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/plan-house-page/plan-house-page.component.ts:214\n                        \n                    \n\n\n            \n                \n                        Закрывает модуль добавления проекта.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        closeProject\n                        \n                    \n                \n            \n            \n                \n                        \n                    closeProject()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/plan-house-page/plan-house-page.component.ts:230\n                        \n                    \n\n\n            \n                \n                        Закрывает текущий проект и убирает planId из URL.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Async\n                        createProject\n                        \n                    \n                \n            \n            \n                \n                        \n                    createProject()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/plan-house-page/plan-house-page.component.ts:140\n                        \n                    \n\n\n            \n                \n                        Создает новый проект с именем из формы.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Async\n                        deleteProject\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteProject(indexProject: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/plan-house-page/plan-house-page.component.ts:183\n                        \n                    \n\n\n            \n                \n                        Удаляет указанный проект пользователя.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                indexProject\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Индекс проекта в массиве\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        getCurrentViewRoom\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCurrentViewRoom()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/plan-house-page/plan-house-page.component.ts:197\n                        \n                    \n\n\n            \n                \n                        Возвращает текущую выбранную комнату в планировке.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngAfterViewChecked\n                        \n                    \n                \n            \n            \n                \nngAfterViewChecked()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/plan-house-page/plan-house-page.component.ts:100\n                        \n                    \n\n\n            \n                \n                        При загрузке проверяет наличие roomId и открывает комнату, если нужно.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/plan-house-page/plan-house-page.component.ts:93\n                        \n                    \n\n\n            \n                \n                        Получает DOM-элемент кнопки добавления проекта после инициализации view.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/plan-house-page/plan-house-page.component.ts:81\n                        \n                    \n\n\n            \n                \n                        Инициализация компонента.\nПроверяет наличие JWT, при отсутствии — редирект на страницу логина.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        openAddModule\n                        \n                    \n                \n            \n            \n                \n                        \n                    openAddModule()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/plan-house-page/plan-house-page.component.ts:222\n                        \n                    \n\n\n            \n                \n                        Открывает модуль добавления проекта.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        openProject\n                        \n                    \n                \n            \n            \n                \n                        \n                    openProject(indexProject: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/plan-house-page/plan-house-page.component.ts:241\n                        \n                    \n\n\n            \n                \n                        Открывает проект по его индексу и обновляет URL.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                indexProject\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Индекс проекта в массиве\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        pageInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    pageInit(jwt: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/plan-house-page/plan-house-page.component.ts:119\n                        \n                    \n\n\n            \n                \n                        Загружает данные аккаунта и инициализирует текущий проект по параметру в URL.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    JWT-токен из cookies\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Async\n                        saveProject\n                        \n                    \n                \n            \n            \n                \n                        \n                    saveProject()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/plan-house-page/plan-house-page.component.ts:156\n                        \n                    \n\n\n            \n                \n                        Сохраняет текущий открытый проект на сервер.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        updatePlanData\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePlanData(planHouse: roomData[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/plan-house-page/plan-house-page.component.ts:206\n                        \n                    \n\n\n            \n                \n                        Обновляет локальные данные проекта при изменении планировки.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                planHouse\n                                            \n                                                        roomData[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Новый массив данных комнат\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        accountData\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/components/plan-house-page/plan-house-page.component.ts:65\n                        \n                    \n\n            \n                \n                    Данные аккаунта пользователя с массивом проектов\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        addModule\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HTMLSpanElement\n\n                    \n                \n                    \n                        \n                                Defined in src/components/plan-house-page/plan-house-page.component.ts:59\n                        \n                    \n\n            \n                \n                    DOM-элемент кнопки добавления проекта\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        checkDesktop\n                        \n                    \n                \n            \n                \n                    \n                        Default value : checkDesktop()\n                    \n                \n                    \n                        \n                                Defined in src/components/plan-house-page/plan-house-page.component.ts:68\n                        \n                    \n\n            \n                \n                    Проверка, является ли текущее устройство десктопом\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        currentPlanHouse\n                        \n                    \n                \n            \n                \n                    \n                        Type :     roomData[] | undefined\n\n                    \n                \n                    \n                        \n                                Defined in src/components/plan-house-page/plan-house-page.component.ts:62\n                        \n                    \n\n            \n                \n                    Данные текущего плана комнат\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        currentProjectId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | undefined\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                    \n                        \n                                Defined in src/components/plan-house-page/plan-house-page.component.ts:71\n                        \n                    \n\n            \n                \n                    Индекс текущего выбранного проекта\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hasRoomIdBeenProcessed\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/components/plan-house-page/plan-house-page.component.ts:56\n                        \n                    \n\n            \n                \n                    Флаг, чтобы комната не открывалась повторно\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        planHouse\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PlanHouseComponent\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('planHouse')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/plan-house-page/plan-house-page.component.ts:75\n                        \n                    \n\n            \n                \n                    Ссылка на дочерний компонент планировки дома\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        projectNameForm\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new FormGroup({\n    name: new FormControl('', [Validators.required])\n  })\n                    \n                \n                    \n                        \n                                Defined in src/components/plan-house-page/plan-house-page.component.ts:248\n                        \n                    \n\n            \n                \n                    Форма для ввода названия проекта\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import {\n  AfterViewChecked,\n  AfterViewInit,\n  Component,\n  ElementRef,\n  OnInit,\n  Renderer2,\n  ViewChild\n} from '@angular/core';\nimport { NavigationPanelComponent } from '../navigation-panel/navigation-panel.component';\nimport { PlanHouseComponent } from '../plan-house/plan-house.component';\nimport { Location, NgClass, NgFor, NgIf } from '@angular/common';\nimport { accountFullData, AccountService } from '../../services/account.service';\nimport { AccountCookieService } from '../../services/account-cookie.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormControl, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { projectServerInformation, ProjectService, roomData } from '../../services/project.service';\nimport { NotificationService } from '../../services/notification.service';\nimport { checkDesktop } from '../../usable/reusable-functions.used';\n\n@Component({\n  selector: 'app-plan-house-page',\n  standalone: true,\n  imports: [\n    NavigationPanelComponent,\n    PlanHouseComponent,\n    NgFor,\n    NgIf,\n    ReactiveFormsModule,\n    NgIf,\n    NgClass\n  ],\n  templateUrl: './plan-house-page.component.html',\n  styleUrl: './plan-house-page.component.scss'\n})\nexport class PlanHousePageComponent implements AfterViewInit, OnInit, AfterViewChecked {\n  constructor(\n    private accountService: AccountService,\n    private accountCookieService: AccountCookieService,\n    private router: Router,\n    private route: ActivatedRoute,\n    private elemenetRef: ElementRef,\n    private renderer: Renderer2,\n    private projectService: ProjectService,\n    private notification: NotificationService,\n    private location: Location\n  ) { }\n\n  /** Флаг, чтобы комната не открывалась повторно */\n  private hasRoomIdBeenProcessed = false;\n\n  /** DOM-элемент кнопки добавления проекта */\n  private addModule!: HTMLSpanElement;\n\n  /** Данные текущего плана комнат */\n  private currentPlanHouse: roomData[] | undefined;\n\n  /** Данные аккаунта пользователя с массивом проектов */\n  protected accountData!: accountFullData & { projects: projectServerInformation[] };\n\n  /** Проверка, является ли текущее устройство десктопом */\n  protected checkDesktop = checkDesktop();\n\n  /** Индекс текущего выбранного проекта */\n  protected currentProjectId: number | undefined = undefined;\n\n  /** Ссылка на дочерний компонент планировки дома */\n  @ViewChild('planHouse')\n  private planHouse!: PlanHouseComponent;\n\n  /**\n   * Инициализация компонента.\n   * Проверяет наличие JWT, при отсутствии — редирект на страницу логина.\n   */\n  ngOnInit(): void {\n    const JWT = this.accountCookieService.getJwt();\n    if (!JWT) {\n      this.router.navigateByUrl('/login');\n      return;\n    }\n    this.pageInit(JWT);\n  }\n\n  /**\n   * Получает DOM-элемент кнопки добавления проекта после инициализации view.\n   */\n  ngAfterViewInit(): void {\n    this.addModule = this.elemenetRef.nativeElement.querySelector('.addModule');\n  }\n\n  /**\n   * При загрузке проверяет наличие roomId и открывает комнату, если нужно.\n   */\n  ngAfterViewChecked(): void {\n    if (this.hasRoomIdBeenProcessed || !this.planHouse || !this.route.snapshot.params['roomId']) return;\n    const ROOM_ID = parseInt(this.route.snapshot.params['roomId']!);\n    setTimeout(() => {\n      if (typeof ROOM_ID === 'number') {\n        this.planHouse.currentViewRoom = ROOM_ID;\n        this.planHouse.currentIdClickedRoom = ROOM_ID;\n        this.planHouse.openViewRoom(ROOM_ID);\n        this.planHouse.sceneOpenToggle = true;\n        this.planHouse.guideTemplate = this.planHouse.roomGuideTemplate;\n        this.hasRoomIdBeenProcessed = true;\n      }\n    }, 0);\n  }\n\n  /**\n   * Загружает данные аккаунта и инициализирует текущий проект по параметру в URL.\n   * @param jwt JWT-токен из cookies\n   */\n  private async pageInit(jwt: string) {\n    try {\n      this.accountData = (await this.accountService.GETaccount(jwt)).accountData;\n\n      this.route.paramMap.subscribe(params => {\n        if (params.get('planId') === null) return;\n        const PLAN_ID = parseInt(params.get('planId')!);\n        if (this.accountData.projects.length >= PLAN_ID && PLAN_ID >= 0 && this.accountData.projects[PLAN_ID] !== undefined) {\n          this.currentProjectId = PLAN_ID;\n        } else {\n          this.router.navigateByUrl('/plan')\n        }\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  /**\n   * Создает новый проект с именем из формы.\n   */\n  protected async createProject() {\n    this.closeAddModule();\n    const JWT = this.accountCookieService.getJwt();\n    if (!this.projectNameForm.value || !this.projectNameForm.value.name || !JWT) return;\n    try {\n      const newProject = await this.projectService.POSTcreateProject(JWT, this.projectNameForm.value.name);\n      this.accountData.projects = [...this.accountData.projects, newProject.projectData];\n      this.notification.setSuccess('Проект создан', 5000);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  /**\n   * Сохраняет текущий открытый проект на сервер.\n   */\n  protected async saveProject() {\n    if (this.currentProjectId === undefined) return;\n\n    const CURRENT_PROJECT_ID = this.accountData.projects[this.currentProjectId]._id;\n    const ROOM_DATA = this.currentPlanHouse;\n    if (ROOM_DATA === undefined) return;\n\n    const JWT = this.accountCookieService.getJwt();\n    if (!JWT) return;\n\n    const PROJECT_DATA = {\n      rooms: ROOM_DATA,\n      name: this.accountData.projects[this.currentProjectId].name\n    };\n\n    try {\n      await this.projectService.PUTupdateProject(JWT, CURRENT_PROJECT_ID, PROJECT_DATA);\n      this.notification.setSuccess('Проект обновлен', 5000);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  /**\n   * Удаляет указанный проект пользователя.\n   * @param indexProject Индекс проекта в массиве\n   */\n  protected async deleteProject(indexProject: number) {\n    const JWT = this.accountCookieService.getJwt();\n    const CURRENT_PROJECT_ID = this.accountData.projects[indexProject]._id;\n    if (!JWT || !CURRENT_PROJECT_ID) return;\n\n    await this.projectService.DELETEdeleteProject(JWT, CURRENT_PROJECT_ID);\n    this.notification.setSuccess('Проект удален', 5000);\n    this.accountData.projects.splice(indexProject, 1);\n  }\n\n\n  /**\n   * Возвращает текущую выбранную комнату в планировке.\n   */\n  protected getCurrentViewRoom() {\n    if (this.planHouse === undefined) return undefined;\n    return this.planHouse.currentViewRoom;\n  }\n\n  /**\n   * Обновляет локальные данные проекта при изменении планировки.\n   * @param planHouse Новый массив данных комнат\n   */\n  protected updatePlanData(planHouse: roomData[]) {\n    this.currentPlanHouse = planHouse;\n    this.accountData.projects[this.currentProjectId!].rooms = planHouse;\n  }\n\n  /**\n   * Закрывает модуль добавления проекта.\n   */\n  protected closeAddModule() {\n    if (!this.addModule) return;\n    this.renderer.addClass(this.addModule, 'disabled');\n  }\n\n  /**\n   * Открывает модуль добавления проекта.\n   */\n  protected openAddModule() {\n    if (!this.addModule) return;\n    this.renderer.removeClass(this.addModule, 'disabled');\n  }\n\n  /**\n   * Закрывает текущий проект и убирает `planId` из URL.\n   */\n  protected closeProject() {\n    this.saveProject();\n    this.currentProjectId = undefined;\n    const NEW_URL = this.location.path().split('/').slice(0, -1).join('/');\n    this.location.replaceState(NEW_URL);\n  }\n\n  /**\n   * Открывает проект по его индексу и обновляет URL.\n   * @param indexProject Индекс проекта в массиве\n   */\n  protected openProject(indexProject: number) {\n    const NEW_URL = this.location.path() + '/' + indexProject;\n    this.location.replaceState(NEW_URL);\n    this.currentProjectId = indexProject;\n  }\n\n  /** Форма для ввода названия проекта */\n  protected projectNameForm = new FormGroup({\n    name: new FormControl('', [Validators.required])\n  });\n}\n\n    \n\n    \n        \n  \n  Просмотр этой страницы с мобильных устройств невозможен. Пожалуйста, используйте компьютер.\n  \n    \n      \n        \n          {{projectData.name}}\n          \n            \n            \n          \n        \n        \n          \n        \n      \n      \n        Создать\n        \n      \n    \n    \n      \n        \n      \n      \n    \n  \n\n\n  \n    \n      \n    \n    \n      Название дома\n      \n        Название\n        \n      \n      Продолжить\n    \n  \n\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    Просмотр этой страницы с мобильных устройств невозможен. Пожалуйста, используйте компьютер.                              {{projectData.name}}                                                                                                  Создать                                                                                Название дома              Название                    Продолжить      '\n    var COMPONENTS = [{'name': 'AccountPageComponent', 'selector': 'app-account-page'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreateFurnitureComponent', 'selector': 'app-create-furniture'},{'name': 'CreateFurniturePageComponent', 'selector': 'app-create-furniture-page'},{'name': 'FinderComponent', 'selector': 'app-finder'},{'name': 'ImageSliderComponent', 'selector': 'app-image-slider'},{'name': 'LoginPageComponent', 'selector': 'app-login-page'},{'name': 'MainPageComponent', 'selector': 'app-main-page'},{'name': 'NavigationPanelComponent', 'selector': 'app-navigation-panel'},{'name': 'NotificationComponent', 'selector': 'app-notification'},{'name': 'PlanHouseComponent', 'selector': 'app-plan-house'},{'name': 'PlanHousePageComponent', 'selector': 'app-plan-house-page'},{'name': 'SceneComponent', 'selector': 'app-scene'},{'name': 'ShopPageComponent', 'selector': 'app-shop-page'},{'name': 'UploadOverlayComponent', 'selector': 'app-upload-overlay'},{'name': 'ViewFurnitureComponent', 'selector': 'app-view-furniture'}];\n    var DIRECTIVES = [{'name': 'AutoHeightDirective', 'selector': '[appAutoHeight]'}];\n    var ACTUAL_COMPONENT = {'name': 'PlanHousePageComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProjectService.html":{"url":"injectables/ProjectService.html","title":"injectable - ProjectService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProjectService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/project.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для управления проектами: создание, удаление, получение, обновление и генерация отчетов\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseServiceUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                DELETEdeleteProject\n                            \n                            \n                                GETgetProject\n                            \n                            \n                                    Async\n                                GETgetReportOfRoom\n                            \n                            \n                                POSTcreateProject\n                            \n                            \n                                PUTupdateProject\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpModule: HttpClient, reportService: ReportService)\n                    \n                \n                        \n                            \n                                Defined in src/services/project.service.ts:53\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpModule\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reportService\n                                                  \n                                                        \n                                                                        ReportService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        DELETEdeleteProject\n                        \n                    \n                \n            \n            \n                \nDELETEdeleteProject(jwt: string, projectId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/project.service.ts:79\n                        \n                    \n\n\n            \n                \n                        Удаление проекта\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    JWT токен для авторизации\n\n                                            \n                                        \n                                        \n                                                projectId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID проекта, который нужно удалить\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Промис с сообщением об удалении\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        GETgetProject\n                        \n                    \n                \n            \n            \n                \nGETgetProject(jwt: string, projectId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/project.service.ts:92\n                        \n                    \n\n\n            \n                \n                        Получение проекта по ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    JWT токен для авторизации\n\n                                            \n                                        \n                                        \n                                                projectId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID проекта, который нужно получить\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Промис с данными проекта\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        GETgetReportOfRoom\n                        \n                    \n                \n            \n            \n                \n                        \n                    GETgetReportOfRoom(jwt: string, roomId: string, renderImage: Blob)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/project.service.ts:120\n                        \n                    \n\n\n            \n                \n                        Получение отчета о комнате и генерация PDF отчета\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    JWT токен для авторизации\n\n                                            \n                                        \n                                        \n                                                roomId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID комнаты, по которой нужно получить отчет\n\n                                            \n                                        \n                                        \n                                                renderImage\n                                            \n                                                        Blob\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Изображение рендера комнаты в формате Blob\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Промис, завершающийся после создания отчета\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        POSTcreateProject\n                        \n                    \n                \n            \n            \n                \nPOSTcreateProject(jwt: string, name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/project.service.ts:66\n                        \n                    \n\n\n            \n                \n                        Создание нового проекта\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    JWT токен для авторизации\n\n                                            \n                                        \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Название проекта\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Промис с объектом, содержащим данные проекта\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PUTupdateProject\n                        \n                    \n                \n            \n            \n                \nPUTupdateProject(jwt: string, projectId: string, projectInformation: projectInformation)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/project.service.ts:106\n                        \n                    \n\n\n            \n                \n                        Обновление данных проекта\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    JWT токен для авторизации\n\n                                            \n                                        \n                                        \n                                                projectId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID проекта, который нужно обновить\n\n                                            \n                                        \n                                        \n                                                projectInformation\n                                            \n                                                            projectInformation\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Новые данные проекта\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Промис с сообщением об успешном обновлении\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseServiceUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : baseUrl + 'project'\n                    \n                \n                    \n                        \n                                Defined in src/services/project.service.ts:53\n                        \n                    \n\n            \n                \n                    Базовый URL для API запросов к проектам\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { baseUrl } from '.';\nimport { modelInterface, objectSceneInterface } from '../components/scene/scene.component';\nimport { firstValueFrom } from 'rxjs';\nimport { reportResponse } from './report.service';\nimport { ReportService } from './report.service';\n\n/**\n * Интерфейс описания комнаты\n */\nexport interface roomData {\n  /** Название комнаты */\n  name: string;\n  /** Сетка размещения (например, '1 / 2 / 3 / 4') */\n  gridArea: string;\n  /** Пропорции комнаты (ширина, высота, глубина) */\n  roomProportions: modelInterface;\n  /** Список объектов, размещённых в комнате */\n  objects: objectSceneInterface[];\n  /** (Необязательно) ID комнаты */\n  _id?: string;\n}\n\n/**\n * Интерфейс информации о проекте\n */\nexport interface projectInformation {\n  /** Название проекта */\n  name: string;\n  /** Список комнат в проекте */\n  rooms: roomData[];\n}\n\n/**\n * Интерфейс информации о проекте, получаемой с сервера\n */\nexport interface projectServerInformation extends projectInformation {\n  /** ID проекта */\n  _id: string;\n  /** ID автора проекта */\n  authorId: string;\n}\n\n/**\n * Сервис для управления проектами: создание, удаление, получение, обновление и генерация отчетов\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProjectService {\n  /** Базовый URL для API запросов к проектам */\n  private baseServiceUrl = baseUrl + 'project';\n\n  constructor(\n    private httpModule: HttpClient,\n    private reportService: ReportService\n  ) {}\n\n  /**\n   * Создание нового проекта\n   * @param jwt JWT токен для авторизации\n   * @param name Название проекта\n   * @returns Промис с объектом, содержащим данные проекта\n   */\n  POSTcreateProject(jwt: string, name: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('name', name);\n    return firstValueFrom(this.httpModule.post(this.baseServiceUrl, HTTP_PARAMS)) as Promise;\n  }\n\n  /**\n   * Удаление проекта\n   * @param jwt JWT токен для авторизации\n   * @param projectId ID проекта, который нужно удалить\n   * @returns Промис с сообщением об удалении\n   */\n  DELETEdeleteProject(jwt: string, projectId: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('projectId', projectId);\n    return firstValueFrom(this.httpModule.delete(this.baseServiceUrl, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Получение проекта по ID\n   * @param jwt JWT токен для авторизации\n   * @param projectId ID проекта, который нужно получить\n   * @returns Промис с данными проекта\n   */\n  GETgetProject(jwt: string, projectId: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('projectId', projectId);\n    return firstValueFrom(this.httpModule.get(this.baseServiceUrl, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Обновление данных проекта\n   * @param jwt JWT токен для авторизации\n   * @param projectId ID проекта, который нужно обновить\n   * @param projectInformation Новые данные проекта\n   * @returns Промис с сообщением об успешном обновлении\n   */\n  PUTupdateProject(jwt: string, projectId: string, projectInformation: projectInformation): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('projectId', projectId);\n    return firstValueFrom(this.httpModule.put(this.baseServiceUrl, projectInformation, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Получение отчета о комнате и генерация PDF отчета\n   * @param jwt JWT токен для авторизации\n   * @param roomId ID комнаты, по которой нужно получить отчет\n   * @param renderImage Изображение рендера комнаты в формате Blob\n   * @returns Промис, завершающийся после создания отчета\n   */\n  async GETgetReportOfRoom(jwt: string, roomId: string, renderImage: Blob): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('roomId', roomId);\n\n    const RESPONSE = await firstValueFrom(this.httpModule.get(this.baseServiceUrl + '/room', { params: HTTP_PARAMS })) as reportResponse;\n\n    RESPONSE.furnitures = RESPONSE.furnitures.map(furnitureData => {\n      furnitureData.previewUrl = baseUrl + furnitureData.previewUrl;\n      return furnitureData;\n    });\n\n    this.reportService.createReport(RESPONSE, renderImage);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ReportService.html":{"url":"injectables/ReportService.html","title":"injectable - ReportService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ReportService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/report.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для генерации HTML-отчёта по комнате и мебели.\nОткрывает отчет в новой вкладке и скачивает его.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                costPipe\n                            \n                            \n                                createReport\n                            \n                            \n                                    Private\n                                createReportHTML\n                            \n                            \n                                    Private\n                                downloadHtml\n                            \n                            \n                                    Private\n                                generateHtmlContent\n                            \n                            \n                                    Private\n                                openHtmlInNewTab\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/services/report.service.ts:29\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        costPipe\n                        \n                    \n                \n            \n            \n                \n                        \n                    costPipe(cost: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/report.service.ts:322\n                        \n                    \n\n\n            \n                \n                        Форматирует цену с разделителями тысяч.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cost\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nСтоимость\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                Отформатированная строка с ценой\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createReport\n                        \n                    \n                \n            \n            \n                \ncreateReport(roomData: reportResponse, renderImage: Blob)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/report.service.ts:39\n                        \n                    \n\n\n            \n                \n                        Инициирует создание HTML-отчета.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                roomData\n                                            \n                                                            reportResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nДанные комнаты и мебели\n\n\n                                            \n                                        \n                                        \n                                                renderImage\n                                            \n                                                        Blob\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nИзображение визуализации комнаты\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        createReportHTML\n                        \n                    \n                \n            \n            \n                \n                        \n                    createReportHTML(roomData: reportResponse, renderImage: Blob)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/report.service.ts:51\n                        \n                    \n\n\n            \n                \n                        Создаёт HTML-страницу отчета и открывает её.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                roomData\n                                            \n                                                            reportResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nДанные комнаты\n\n\n                                            \n                                        \n                                        \n                                                renderImage\n                                            \n                                                        Blob\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nРендер комнаты\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        downloadHtml\n                        \n                    \n                \n            \n            \n                \n                        \n                    downloadHtml(roomName: string, htmlUrl: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/report.service.ts:349\n                        \n                    \n\n\n            \n                \n                        Загружает HTML-файл отчета.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                roomName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nНазвание комнаты (для имени файла)\n\n\n                                            \n                                        \n                                        \n                                                htmlUrl\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nURL HTML-файла\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        generateHtmlContent\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateHtmlContent(roomData: reportResponse, renderUrl: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/report.service.ts:72\n                        \n                    \n\n\n            \n                \n                        Генерирует HTML-содержимое отчета.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                roomData\n                                            \n                                                            reportResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nДанные комнаты и мебели\n\n\n                                            \n                                        \n                                        \n                                                renderUrl\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nURL рендер-изображения\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                HTML-контент отчета\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        openHtmlInNewTab\n                        \n                    \n                \n            \n            \n                \n                        \n                    openHtmlInNewTab(roomName: string, htmlContent: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/report.service.ts:334\n                        \n                    \n\n\n            \n                \n                        Открывает HTML-контент в новой вкладке и запускает загрузку.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                roomName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nНазвание комнаты (используется для имени файла)\n\n\n                                            \n                                        \n                                        \n                                                htmlContent\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nСодержимое HTML\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { baseClientUrl } from '.';\nimport { modelInterface } from '../components/scene/scene.component';\nimport { shopData } from './furniture-card-control.service';\n\nexport interface reportResponse {\n    name: string;\n    proportions: modelInterface,\n    furnitures: {\n        name: string;\n        furnitureCardId: string;\n        previewUrl: string;\n        proportions: modelInterface;\n        shops: shopData[];\n        category: string;\n    }[]\n}\n\n/**\n * Сервис для генерации HTML-отчёта по комнате и мебели.\n * Открывает отчет в новой вкладке и скачивает его.\n *\n * @export\n * @class ReportService\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class ReportService {\n    constructor() { }\n\n    /**\n     * Инициирует создание HTML-отчета.\n     *\n     * @param {reportResponse} roomData - Данные комнаты и мебели\n     * @param {Blob} renderImage - Изображение визуализации комнаты\n     * @memberof ReportService\n     */\n    createReport(roomData: reportResponse, renderImage: Blob): void {\n        this.createReportHTML(roomData, renderImage);\n    }\n\n    /**\n     * Создаёт HTML-страницу отчета и открывает её.\n     *\n     * @private\n     * @param {reportResponse} roomData - Данные комнаты\n     * @param {Blob} renderImage - Рендер комнаты\n     * @memberof ReportService\n     */\n    private createReportHTML(roomData: reportResponse, renderImage: Blob): void {\n        const reader = new FileReader();\n\n        reader.onload = () => {\n            const imageUrl = reader.result as string;\n            const htmlContent = this.generateHtmlContent(roomData, imageUrl);\n            this.openHtmlInNewTab(roomData.name, htmlContent);\n        };\n\n        reader.readAsDataURL(renderImage);\n    }\n\n    /**\n     * Генерирует HTML-содержимое отчета.\n     *\n     * @private\n     * @param {reportResponse} roomData - Данные комнаты и мебели\n     * @param {string} renderUrl - URL рендер-изображения\n     * @returns {string} HTML-контент отчета\n     * @memberof ReportService\n     */\n    private generateHtmlContent(roomData: reportResponse, renderUrl: string): string {\n        return `\n      \n\n\n\n    \n    \n    Отчет по комнате ${roomData.name}\n    \n        @font-face {\n            font-family: 'Calypso';\n            src: url('${baseClientUrl}assets/fonts/Calypso.ttf') format('truetype');\n        }\n\n        @font-face {\n            font-family: 'Courier New';\n            src: url('${baseClientUrl}assets/fonts/Courier New.ttf') format('truetype');\n        }\n\n        body {\n            margin: 0;\n            padding: 40px;\n            background-color: black;\n            color: #DAD7CD;\n            font-family: 'Courier New', monospace;\n            line-height: 1.6;\n            display: flex;\n            flex-direction: column;\n        }\n\n        .title {\n            font-family: 'Calypso', 'Courier New', monospace;\n            text-align: center;\n            font-size: 3rem;\n            margin-bottom: 40px;\n            color: #A3B18A;\n            text-transform: uppercase;\n            letter-spacing: 2px;\n        }\n\n        .renderTitle {\n            font-family: 'Courier New', 'Courier New', monospace;\n            font-weight: 400;\n            font-size: 1.5rem;\n            margin: 30px 0 15px;\n            color: #A3B18A;\n            border-bottom: 2px solid #A3B18A;\n            padding-bottom: 8px;\n            width:fit-content;\n            align-self: center;\n        }\n\n        .furnituresSpanTitle {\n            font-family: 'Calypso', 'Courier New', monospace;\n            font-size: 2rem;\n            margin: 40px 0 20px;\n            color: #A3B18A;\n            display: block;\n            text-align: center;\n        }\n\n        .furniture {\n            display: flex;\n            flex-direction: column;\n            border-radius: 15px;\n            padding: 25px;\n            margin-bottom: 30px;\n            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);\n            transition: transform 0.3s ease;\n        }\n\n        .furnitureTitle {\n            font-family: 'Courier New', monospace;\n            font-weight: 400;\n            margin: 0 auto 15px;\n            font-size: 1.3rem;\n            color: #DAD7CD;\n        }\n\n        .furnitureImage {\n            margin: 0 auto;\n            max-width: 100%;\n            border-radius: 10px;\n            margin-bottom: 20px;\n        }\n\n        .furnitureFooter {\n            display: flex;\n            gap: 30px;\n            flex-direction: row;\n            justify-content: center;\n            flex-wrap: wrap;\n        }\n\n        .paramsTitle,\n        .shopsTitle {\n            font-family: 'Calypso', 'Courier New', monospace;\n            font-size: 1.2rem;\n            color: #A3B18A;\n            margin-bottom: 15px;\n        }\n\n        .paramsSpan {\n            width: fit-content;\n        }\n\n        .paramsList {\n            list-style-type: none;\n            padding: 0;\n            margin: 0;\n        }\n\n        .paramsItem {\n            margin-bottom: 8px;\n            position: relative;\n            padding-left: 20px;\n        }\n\n\n        a {\n            display: inline-block;\n            background-color: white;\n            color: black;\n            text-decoration: none;\n            border-radius: 10px;\n            transition: all 0.3s ease;\n            border: 2px solid transparent;\n            width:250px;\n            max-width: 250px;\n            text-align: center;\n            font-family: 'Courier New', monospace;\n            font-weight: 400;\n            font-size: 0.8rem;\n            height:40px;\n            align-content:center;\n            box-sizing:border-box;\n        }\n\n        a:hover {\n            background-color: transparent;\n            color: white;\n            border-color: white;\n        }\n\n        img {\n            width: 100%;\n            max-height: 500px;\n            object-fit: contain;\n            border-radius: 10px;\n            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);\n            margin-bottom: 30px;\n        }\n\n        .openLink {\n            width:250px;\n            max-width: 250px;\n            margin: 0 auto;\n            margin-top: 20px;\n        }\n        .furnitureLink{\n            background-color: #A3B18A;\n            color:white;\n            &:hover{\n                background-color: #344E41;\n                border: 2px solid #344E41;\n            }\n        }\n\n        @media (max-width: 768px) {\n            .furnitureFooter {\n                flex-direction: column;\n                align-items: center;\n                gap: 20px;\n                width: 100%;\n            }\n\n            .paramsSpan,\n            .shopsSpan {\n                width: 90%;\n            }\n\n            .openLink,.shopLink {\n                width: 100%;\n            }\n\n            .title {\n                font-size: 2rem;\n            }\n\n            body {\n                padding: 20px;\n            }\n            .paramsItem{\n                padding-left:0;\n            }\n                \n        }\n    \n\nОтчет по комнате${roomData.name}\nВид сверху\n\n\nДобавленная мебель\n${roomData.furnitures.map(furniture => `\n    \n    ${furniture.name}\n    \n    \n    \n     Параметры \n    \n     Ширина: ${furniture.proportions.width}cм \n     Высота: ${furniture.proportions.height}cм \n     Длина: ${furniture.proportions.length}cм \n    \n    \n    \n    ${furniture.shops.map(shopData => `\n         Магазины \n        \n      \n      ${this.costPipe(shopData.cost)}\n      \n      \n      `).join('')\n            }\n    \n    \n     Посмотреть мебель \n    \n    `).join('')}\nПосмотреть проект\n\n\n    `;\n    }\n\n    /**\n     * Форматирует цену с разделителями тысяч.\n     *\n     * @private\n     * @param {number} cost - Стоимость\n     * @returns {string} Отформатированная строка с ценой\n     * @memberof ReportService\n     */\n    private costPipe(cost: number): string {\n        return cost.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.');\n    }\n\n    /**\n     * Открывает HTML-контент в новой вкладке и запускает загрузку.\n     *\n     * @private\n     * @param {string} roomName - Название комнаты (используется для имени файла)\n     * @param {string} htmlContent - Содержимое HTML\n     * @memberof ReportService\n     */\n    private openHtmlInNewTab(roomName: string, htmlContent: string): void {\n        const blob = new Blob([htmlContent], { type: 'text/html' });\n        const url = URL.createObjectURL(blob);\n        window.open(url, '_blank');\n        this.downloadHtml(roomName, url);\n    }\n\n    /**\n     * Загружает HTML-файл отчета.\n     *\n     * @private\n     * @param {string} roomName - Название комнаты (для имени файла)\n     * @param {string} htmlUrl - URL HTML-файла\n     * @memberof ReportService\n     */\n    private downloadHtml(roomName: string, htmlUrl: string): void {\n        const downloadButton = document.createElement('a');\n        downloadButton.href = htmlUrl;\n        downloadButton.download = `${roomName}-report.html`;\n        downloadButton.click();\n        URL.revokeObjectURL(htmlUrl);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ServerImageControlService.html":{"url":"injectables/ServerImageControlService.html","title":"injectable - ServerImageControlService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ServerImageControlService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/server-image-control.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseServiceUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                DELETEproject\n                            \n                            \n                                DELETEprojectColor\n                            \n                            \n                                GETaccountAvatar\n                            \n                            \n                                GETallProjectImages\n                            \n                            \n                                GETmainImage\n                            \n                            \n                                POSTuploadProjectImages\n                            \n                            \n                                POSTuploadUserAvatar\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpModule: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/services/server-image-control.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpModule\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        DELETEproject\n                        \n                    \n                \n            \n            \n                \nDELETEproject(jwt: string, furnitureCardId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/server-image-control.service.ts:80\n                        \n                    \n\n\n            \n                \n                        Удаление проекта по ID карточки мебели.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    JWT токен пользователя.\n\n                                            \n                                        \n                                        \n                                                furnitureCardId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID карточки мебели.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Промис с сообщением об успешном удалении проекта.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DELETEprojectColor\n                        \n                    \n                \n            \n            \n                \nDELETEprojectColor(jwt: string, furnitureCardId: string, color: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/server-image-control.service.ts:65\n                        \n                    \n\n\n            \n                \n                        Удаление цвета проекта (мебели).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    JWT токен пользователя.\n\n                                            \n                                        \n                                        \n                                                furnitureCardId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID карточки мебели.\n\n                                            \n                                        \n                                        \n                                                color\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Цвет, который нужно удалить.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Промис с сообщением об успешном удалении.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        GETaccountAvatar\n                        \n                    \n                \n            \n            \n                \nGETaccountAvatar(jwt: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/server-image-control.service.ts:20\n                        \n                    \n\n\n            \n                \n                        Получение URL аватара пользователя.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    JWT токен пользователя.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                Строка с URL для получения аватара.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        GETallProjectImages\n                        \n                    \n                \n            \n            \n                \nGETallProjectImages(furnitureCardId: string, color: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/server-image-control.service.ts:94\n                        \n                    \n\n\n            \n                \n                        Получение всех изображений проекта по цвету и ID карточки мебели.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                furnitureCardId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID карточки мебели.\n\n                                            \n                                        \n                                        \n                                                color\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Цвет мебели.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Промис с URL изображений и ID главного изображения.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        GETmainImage\n                        \n                    \n                \n            \n            \n                \nGETmainImage(furnitureCardId: string, color: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/server-image-control.service.ts:108\n                        \n                    \n\n\n            \n                \n                        Получение URL главного изображения по ID карточки мебели и цвету.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                furnitureCardId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID карточки мебели.\n\n                                            \n                                        \n                                        \n                                                color\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Цвет мебели.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                Строка с URL главного изображения.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        POSTuploadProjectImages\n                        \n                    \n                \n            \n            \n                \nPOSTuploadProjectImages(color: string, imagesData: imageSliderClientData, jwt: string, furnitureCardId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/server-image-control.service.ts:45\n                        \n                    \n\n\n            \n                \n                        Загрузка изображений проекта.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                color\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Цвет мебели.\n\n                                            \n                                        \n                                        \n                                                imagesData\n                                            \n                                                            imageSliderClientData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Данные изображений (включая главную).\n\n                                            \n                                        \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    JWT токен пользователя.\n\n                                            \n                                        \n                                        \n                                                furnitureCardId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID карточки мебели.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Промис с сообщением об успешной загрузке.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        POSTuploadUserAvatar\n                        \n                    \n                \n            \n            \n                \nPOSTuploadUserAvatar(imageFile: Blob, jwt: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/server-image-control.service.ts:30\n                        \n                    \n\n\n            \n                \n                        Загрузка аватара пользователя.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                imageFile\n                                            \n                                                        Blob\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Изображение аватара.\n\n                                            \n                                        \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    JWT токен пользователя.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Промис с сообщением об успешной загрузке.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseServiceUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : baseUrl + 'furniture/images/'\n                    \n                \n                    \n                        \n                                Defined in src/services/server-image-control.service.ts:11\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { baseUrl } from '.';\nimport { firstValueFrom } from 'rxjs';\nimport { imageSliderClientData } from '../components/image-slider/image-slider.component';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ServerImageControlService {\n  private baseServiceUrl = baseUrl + 'furniture/images/';\n\n  constructor(private httpModule: HttpClient) {}\n\n  /**\n   * Получение URL аватара пользователя.\n   * @param {string} jwt JWT токен пользователя.\n   * @returns {string} Строка с URL для получения аватара.\n   */\n  GETaccountAvatar(jwt: string): string {\n    return `${baseUrl}account/avatar?jwt=${jwt}`;\n  }\n\n  /**\n   * Загрузка аватара пользователя.\n   * @param {Blob} imageFile Изображение аватара.\n   * @param {string} jwt JWT токен пользователя.\n   * @returns {Promise} Промис с сообщением об успешной загрузке.\n   */\n  POSTuploadUserAvatar(imageFile: Blob, jwt: string): Promise {\n    const formData = new FormData();\n    formData.append('image', imageFile);\n    const HTTP_PARAMS = new HttpParams().set('jwt', jwt);\n    return firstValueFrom(this.httpModule.post(`${baseUrl}account/avatar`, formData, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Загрузка изображений проекта.\n   * @param {string} color Цвет мебели.\n   * @param {imageSliderClientData} imagesData Данные изображений (включая главную).\n   * @param {string} jwt JWT токен пользователя.\n   * @param {string} furnitureCardId ID карточки мебели.\n   * @returns {Promise} Промис с сообщением об успешной загрузке.\n   */\n  POSTuploadProjectImages(color: string, imagesData: imageSliderClientData, jwt: string, furnitureCardId: string): Promise {\n    const formData = new FormData();\n    imagesData.images.forEach((file) => formData.append('images', file));\n\n    const HTTP_PARAMS = new HttpParams()\n      .set('furnitureCardId', furnitureCardId)\n      .set('color', color)\n      .set('idMainImage', imagesData.idMainImage)\n      .set('jwt', jwt);\n\n    return firstValueFrom(this.httpModule.post(this.baseServiceUrl + 'upload', formData, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Удаление цвета проекта (мебели).\n   * @param {string} jwt JWT токен пользователя.\n   * @param {string} furnitureCardId ID карточки мебели.\n   * @param {string} color Цвет, который нужно удалить.\n   * @returns {Promise} Промис с сообщением об успешном удалении.\n   */\n  DELETEprojectColor(jwt: string, furnitureCardId: string, color: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId)\n      .set('color', color);\n\n    return firstValueFrom(this.httpModule.delete(this.baseServiceUrl + 'delete/color', { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Удаление проекта по ID карточки мебели.\n   * @param {string} jwt JWT токен пользователя.\n   * @param {string} furnitureCardId ID карточки мебели.\n   * @returns {Promise} Промис с сообщением об успешном удалении проекта.\n   */\n  DELETEproject(jwt: string, furnitureCardId: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId);\n\n    return firstValueFrom(this.httpModule.delete(this.baseServiceUrl + 'delete/project', { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Получение всех изображений проекта по цвету и ID карточки мебели.\n   * @param {string} furnitureCardId ID карточки мебели.\n   * @param {string} color Цвет мебели.\n   * @returns {Promise} Промис с URL изображений и ID главного изображения.\n   */\n  GETallProjectImages(furnitureCardId: string, color: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('furnitureCardId', furnitureCardId)\n      .set('color', color);\n\n    return firstValueFrom(this.httpModule.get(this.baseServiceUrl + 'all', { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Получение URL главного изображения по ID карточки мебели и цвету.\n   * @param {string} furnitureCardId ID карточки мебели.\n   * @param {string} color Цвет мебели.\n   * @returns {string} Строка с URL главного изображения.\n   */\n  GETmainImage(furnitureCardId: string, color: string): string {\n    return `${this.baseServiceUrl}main?furnitureCardId=${furnitureCardId}&color=${color}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ShopService.html":{"url":"injectables/ShopService.html","title":"injectable - ShopService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ShopService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/shop.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для получения данных о мебели из магазина, с учетом фильтрации и пагинации.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                abortController\n                            \n                            \n                                    Private\n                                baseServiceUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getFindOptionsByResult\n                            \n                            \n                                    Async\n                                GETgetCategoryData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpModule: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/services/shop.service.ts:78\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpModule\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getFindOptionsByResult\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFindOptionsByResult(resultsArray: furnitureShopData[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/shop.service.ts:151\n                        \n                    \n\n\n            \n                \n                        Формирует объект фильтров на основе полученных данных о мебели.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                resultsArray\n                                            \n                                                            furnitureShopData[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nМассив карточек мебели\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         clientFilters\n\n                        \n                            \n                                Объект клиентских фильтров (цвета, минимальная и максимальная цена)\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        GETgetCategoryData\n                        \n                    \n                \n            \n            \n                \n                        \n                    GETgetCategoryData(categoryName: string, startRange: number, queryData?: queryData)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/shop.service.ts:97\n                        \n                    \n\n\n            \n                \n                        Выполняет GET-запрос на получение данных по категории мебели.\nПоддерживает фильтрацию и стартовую позицию для пагинации.\nПри повторном вызове отменяет предыдущий запрос.\n\nresultsArray: массив карточек мебели с обновлёнными URL превью\nresultsClientFiltersData: агрегированные данные фильтров для клиента\n\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                categoryName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nНазвание категории мебели.\n\n\n                                            \n                                        \n                                        \n                                                startRange\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nНачальный индекс (offset) выборки.\n\n\n                                            \n                                        \n                                        \n                                                queryData\n                                            \n                                                            queryData\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nОбъект фильтров (опционально).\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Промис с объектом, содержащим:\n\nresultsArray: массив карточек мебели с обновлёнными URL превью\nresultsClientFiltersData: агрегированные данные фильтров для клиента\n\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        abortController\n                        \n                    \n                \n            \n                \n                    \n                        Type :     AbortController | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/services/shop.service.ts:78\n                        \n                    \n\n            \n                \n                    Активный AbortController для отмены предыдущих запросов\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseServiceUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : baseUrl + 'shop'\n                    \n                \n                    \n                        \n                                Defined in src/services/shop.service.ts:75\n                        \n                    \n\n            \n                \n                    Базовый URL сервиса\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { firstValueFrom } from 'rxjs';\nimport { modelInterface } from '../components/scene/scene.component';\n\n/**\n * Интерфейс объекта фильтров, отправляемых на сервер.\n*/\nexport interface queryData {\n  /** Любое ключ:значение */\n  [key: string]: optionSelectQueryData | optionRangeQueryData;\n}\n\n/**\n * Фильтр типа \"выбор из списка\".\n */\ninterface optionSelectQueryData {\n  /** Тип фильтра */\n  type: 'select';\n  /** Выбранные значения */\n  value: string[];\n}\n\n/**\n * Фильтр типа \"диапазон значений\".\n*/\ninterface optionRangeQueryData {\n  /** Тип фильтра */\n  type: 'range';\n  /** Минимум в диапазоне */\n  min: number;\n  /** Максимум в диапазоне */\n  max: number;\n}\n\n/**\n * Интерфейс данных о мебели, получаемых из магазина.\n */\nexport interface furnitureShopData {\n  /** Название */\n  name: string;\n  /** Стоимость мебели */\n  cost: number;\n  /** Неполный Url превью (вначало надо вставить baseUrl сервера) */\n  previewUrl: string;\n  /** Id мебели */\n  furnitureCardId: string;\n  /** Массив цветов мебели */\n  colors: string[];\n  /** Габариты мебели */\n  proportions: modelInterface;\n}\n\n/**\n * Интерфейс клиентских фильтров, значения которых формируются на основе ответа от сервера.\n */\nexport interface clientFilters {\n  /** Цвета мебели */\n  colors: string[];\n  /** Минимальная стоимость */\n  minCost: number;\n  /** Максимальная стоимость */\n  maxCost: number;\n}\n\n/**\n * Сервис для получения данных о мебели из магазина, с учетом фильтрации и пагинации.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ShopService {\n  /** Базовый URL сервиса */\n  private baseServiceUrl = baseUrl + 'shop';\n\n  /** Активный AbortController для отмены предыдущих запросов */\n  private abortController: AbortController | null = null;\n\n  constructor(private httpModule: HttpClient) { }\n\n  /**\n   * Выполняет GET-запрос на получение данных по категории мебели.\n   * Поддерживает фильтрацию и стартовую позицию для пагинации.\n   * При повторном вызове отменяет предыдущий запрос.\n   *\n   * @param categoryName - Название категории мебели.\n   * @param startRange - Начальный индекс (offset) выборки.\n   * @param queryData - Объект фильтров (опционально).\n   *\n   * @returns Промис с объектом, содержащим:\n   * - `resultsArray`: массив карточек мебели с обновлёнными URL превью\n   * - `resultsClientFiltersData`: агрегированные данные фильтров для клиента\n   *\n   * @throws {Error} В случае сетевой ошибки или отмены запроса.\n   */\n  async GETgetCategoryData(categoryName: string, startRange: number, queryData?: queryData) {\n    if (this.abortController) {\n      this.abortController.abort();\n    }\n\n    this.abortController = new AbortController();\n\n    try {\n      let requestUrl = `${this.baseServiceUrl}?category=${categoryName}&startRange=${startRange}`;\n\n      if (queryData && Object.keys(queryData).length > 0) {\n        const params = new URLSearchParams();\n        params.append('filters', JSON.stringify(queryData));\n        requestUrl += `&${new URLSearchParams(params).toString()}`;\n      }\n\n      const response = await fetch(\n        requestUrl,\n        { signal: this.abortController.signal }\n      );\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Ошибка: ${response.status} — ${errorText}`);\n      }\n\n      const RESPONSE = await response.json() as { resultsArray: furnitureShopData[] };\n      const RESULTS_ARRAY = RESPONSE.resultsArray;\n\n      const UPDATED_RESULTS = RESULTS_ARRAY.map(furniture => ({\n        ...furniture,\n        previewUrl: baseUrl + furniture.previewUrl\n      }));\n\n      return {\n        resultsArray: UPDATED_RESULTS,\n        resultsClientFiltersData: this.getFindOptionsByResult(UPDATED_RESULTS)\n      };\n\n    } catch (error: any) {\n      if (error.name === 'AbortError') {\n      } else {\n        console.error('Ошибка запроса:', error);\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Формирует объект фильтров на основе полученных данных о мебели.\n   *\n   * @param resultsArray - Массив карточек мебели\n   * @returns Объект клиентских фильтров (цвета, минимальная и максимальная цена)\n   */\n  private getFindOptionsByResult(resultsArray: furnitureShopData[]) {\n    let filtersObject: clientFilters = {\n      colors: [],\n      minCost: Infinity,\n      maxCost: -Infinity\n    };\n\n    resultsArray.forEach(furnitureData => {\n      if (furnitureData.cost  filtersObject.maxCost) filtersObject.maxCost = furnitureData.cost;\n\n      filtersObject.colors.push(...furnitureData.colors);\n    });\n\n    filtersObject.minCost = filtersObject.minCost!== Infinity ? filtersObject.minCost : 0;\n    filtersObject.maxCost = filtersObject.maxCost!== -Infinity ? filtersObject.maxCost : 0;\n\n    filtersObject.colors = [...new Set(filtersObject.colors)];\n    return filtersObject;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UploadEntry.html":{"url":"interfaces/UploadEntry.html","title":"interface - UploadEntry","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UploadEntry\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/upload.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            progress\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        progress\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        progress:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         uploadStatus\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         uploadStatus\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport Uppy from '@uppy/core';\nimport XHRUpload from '@uppy/xhr-upload';\nimport { BehaviorSubject } from 'rxjs';\nimport { baseUrl } from '.';\nimport { FurnitureCardControlService } from './furniture-card-control.service';\nimport { ServerImageControlService } from './server-image-control.service';\nimport { AccountCookieService } from './account-cookie.service';\nimport { NotificationService } from './notification.service';\nimport { UploadOverlayComponent } from '../components/upload-overlay/upload-overlay.component';\n\ntype uploadStatus = 'uploading' | 'success' | 'error';\nexport type uploadType = 'create' | 'update';\nexport interface UploadEntry {\n  id: string;\n  name: string;\n  progress: number;\n  status: uploadStatus;\n}\ninterface MyXhrUploadOptions {\n  endpoint: string;\n  fieldName?: string;\n  formData?: boolean;\n  getResponseError?: (responseText: string, response: Response) => Error | null;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class UploadService {\n  private uppy: Uppy;\n  public uploads$ = new BehaviorSubject([]);\n  private baseServiceUrl = baseUrl + 'furniture/model';\n\n  constructor(\n    private furnitureCardService: FurnitureCardControlService,\n    private serverImageControl: ServerImageControlService,\n    private accountCookieService: AccountCookieService,\n    private notification: NotificationService\n  ) {\n    this.uppy = new Uppy({ autoProceed: true });\n\n    this.uppy.use(XHRUpload, {\n      endpoint: this.baseServiceUrl,\n      fieldName: 'file',\n      formData: true,\n      getResponseError: (responseText, response) => {\n        return new Error(`Ошибка: ${response.statusText}`);\n      }\n    } as MyXhrUploadOptions);\n\n    this.uppy.on('upload-progress', (file, progress) => {\n      if (file === undefined || file.meta.name === undefined) return;\n      const NAME = file.data instanceof File ? file.data.name : 'file';\n      this.updateUpload(file.id, NAME, file.progress.percentage ?? 50, 'uploading');\n    });\n\n    this.uppy.on('upload-success', (file) => {\n      if (file === undefined || file.meta.name === undefined) return;\n\n      const NAME = file.data instanceof File ? file.data.name : 'file'\n      this.updateUpload(file.id, NAME, 100, 'success');\n      this.notification.setSuccess('Модель обновлена', 2500);\n    });\n\n    this.uppy.on('upload-error', (file, error) => {\n      if (file === undefined || file.meta.name === undefined) return;\n\n      const NAME = file.data instanceof File ? file.data.name : 'file'\n      this.updateUpload(file.id, NAME, 100, 'error');\n      this.cancelUpload(file.id);\n    });\n  }\n\n  addFile(file: File, jwt: string, furnitureCardId: string, uploadType: uploadType) {\n    const UNIQUE_ID = Date.now().toString();\n    this.uppy.addFile({\n      name: UNIQUE_ID + this.getFileExtension(file.name),\n      type: file.type,\n      data: file,\n      meta: {\n        furnitureCardId: furnitureCardId,\n        jwt: jwt,\n        uploadType: uploadType\n      }\n    });\n  }\n\n  async cancelUpload(fileID: string) {\n    const file = this.uppy.getFile(fileID);\n    if (file) {\n      this.uppy.removeFile(fileID);\n      const JWT = this.accountCookieService.getJwt()\n      const FURNITURE_CARD_ID = file.meta['furnitureCardId'] as string;\n      const UPLOAD_TYPE = file.meta['uploadType'] as string;\n\n\n      if (JWT && FURNITURE_CARD_ID && UPLOAD_TYPE === 'create') {\n        await this.serverImageControl.DELETEproject(JWT, FURNITURE_CARD_ID)\n        this.furnitureCardService.DELETEfurnitureCard(JWT, FURNITURE_CARD_ID)\n      }\n    }\n  }\n  private getFileExtension(fileName: string): string | null {\n    const parts = fileName.split('.');\n    const EXTENSION = parts.length > 1 ? parts.pop()?.toLowerCase() : \"obj\"\n    return `.${EXTENSION}`\n  }\n  removeFileFromQueue(fileID: string) {\n    const updatedQueue = this.uploads$.value.filter(file => file.id !== fileID);\n    this.uploads$.next(updatedQueue);\n  }\n\n  private updateUpload(id: string, name: string, progress: number, status: uploadStatus) {\n    const current = this.uploads$.value.filter(file => file.id !== id);\n    this.uploads$.next([...current, { id, name, progress, status }]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/UploadOverlayComponent.html":{"url":"components/UploadOverlayComponent.html","title":"component - UploadOverlayComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  UploadOverlayComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/components/upload-overlay/upload-overlay.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-upload-overlay\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            NgFor\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./upload-overlay.component.html\n            \n\n\n\n            \n                styleUrl\n                ./upload-overlay.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                checkDesktop\n                            \n                            \n                                    Protected\n                                circumference\n                            \n                            \n                                    Public\n                                displayUploads\n                            \n                            \n                                    Protected\n                                hoverMap\n                            \n                            \n                                    Public\n                                uploadService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                calculatePercentage\n                            \n                            \n                                    Protected\n                                cancelUpload\n                            \n                            \n                                    Public\n                                isHovered\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Protected\n                                onMouseEnter\n                            \n                            \n                                    Protected\n                                onMouseLeave\n                            \n                            \n                                    Protected\n                                removeFromQueue\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(uploadService: UploadService)\n                    \n                \n                        \n                            \n                                Defined in src/components/upload-overlay/upload-overlay.component.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        uploadService\n                                                  \n                                                        \n                                                                        UploadService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        calculatePercentage\n                        \n                    \n                \n            \n            \n                \n                        \n                    calculatePercentage(percentage: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/upload-overlay/upload-overlay.component.ts:42\n                        \n                    \n\n\n            \n                \n                        Вычисление длины окружности для прогресса\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                percentage\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        cancelUpload\n                        \n                    \n                \n            \n            \n                \n                        \n                    cancelUpload(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/upload-overlay/upload-overlay.component.ts:47\n                        \n                    \n\n\n            \n                \n                        Отмена загрузки\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isHovered\n                        \n                    \n                \n            \n            \n                \n                        \n                    isHovered(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/upload-overlay/upload-overlay.component.ts:68\n                        \n                    \n\n\n            \n                \n                        Проверка на hover\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/upload-overlay/upload-overlay.component.ts:28\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        onMouseEnter\n                        \n                    \n                \n            \n            \n                \n                        \n                    onMouseEnter(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/upload-overlay/upload-overlay.component.ts:58\n                        \n                    \n\n\n            \n                \n                        Указание, что у файла hover\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        onMouseLeave\n                        \n                    \n                \n            \n            \n                \n                        \n                    onMouseLeave(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/upload-overlay/upload-overlay.component.ts:63\n                        \n                    \n\n\n            \n                \n                        Указание, что у файла hover\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        removeFromQueue\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeFromQueue(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/upload-overlay/upload-overlay.component.ts:53\n                        \n                    \n\n\n            \n                \n                        Удаление файла из очереди\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        checkDesktop\n                        \n                    \n                \n            \n                \n                    \n                        Default value : checkDesktop\n                    \n                \n                    \n                        \n                                Defined in src/components/upload-overlay/upload-overlay.component.ts:20\n                        \n                    \n\n            \n                \n                    Проверка десктоп ли клиент\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        circumference\n                        \n                    \n                \n            \n                \n                    \n                        Default value : 2 * Math.PI * 18\n                    \n                \n                    \n                        \n                                Defined in src/components/upload-overlay/upload-overlay.component.ts:17\n                        \n                    \n\n            \n                \n                    Максимальная длина прогресс бара\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        displayUploads\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UploadEntry[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/components/upload-overlay/upload-overlay.component.ts:23\n                        \n                    \n\n            \n                \n                    Список загруженных файлов с учетом остановки визуального изменения прогресса при наведении\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        hoverMap\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in src/components/upload-overlay/upload-overlay.component.ts:26\n                        \n                    \n\n            \n                \n                    Хеш мапа \n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        uploadService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UploadService\n\n                    \n                \n                    \n                        \n                                Defined in src/components/upload-overlay/upload-overlay.component.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { AsyncPipe, NgFor } from '@angular/common';\nimport { AfterViewChecked, ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { UploadEntry, UploadService } from '../../services/upload.service';\nimport { checkDesktop } from '../../usable/reusable-functions.used';\n\n@Component({\n  selector: 'app-upload-overlay',\n  standalone: true,\n  imports: [NgFor],\n  templateUrl: './upload-overlay.component.html',\n  styleUrl: './upload-overlay.component.scss'\n})\nexport class UploadOverlayComponent implements OnInit {\n  constructor(public uploadService: UploadService) { }\n\n  /**Максимальная длина прогресс бара*/\n  protected circumference = 2 * Math.PI * 18;\n\n  /**Проверка десктоп ли клиент*/\n  protected checkDesktop = checkDesktop;\n\n  /**Список загруженных файлов с учетом остановки визуального изменения прогресса при наведении*/\n  public displayUploads: UploadEntry[] = [];\n\n  /**Хеш мапа  */\n  protected hoverMap = new Map();\n\n  ngOnInit() {\n    this.uploadService.uploads$.subscribe(files => {\n\n      this.displayUploads = files.map(file => {\n        if (this.isHovered(file.id)) {\n          const old = this.displayUploads.find(f => f.id === file.id);\n          return old ?? file;\n        }\n        return file;\n      });\n    });\n  }\n\n  /**Вычисление длины окружности для прогресса*/\n  protected calculatePercentage(percentage: number) {\n    return this.circumference - (percentage / 100) * this.circumference\n  }\n\n  /**Отмена загрузки*/\n  protected cancelUpload(id: string) {\n    this.uploadService.cancelUpload(id);\n    this.uploadService.removeFileFromQueue(id);\n  }\n\n  /**Удаление файла из очереди*/\n  protected removeFromQueue(id: string) {\n    this.uploadService.removeFileFromQueue(id);\n  }\n\n  /**Указание, что у файла hover*/\n  protected onMouseEnter(id: string) {\n    this.hoverMap.set(id, true);\n  }\n\n  /**Указание, что у файла hover*/\n  protected onMouseLeave(id: string) {\n    this.hoverMap.set(id, false);\n  }\n\n  /**Проверка на hover*/\n  public isHovered(id: string): boolean {\n    return this.hoverMap.get(id) || false;\n  }\n}\n\n    \n\n    \n        \n  \n    \n      {{ file.name }}\n      {{ file.status }}\n    \n\n    \n      \n        \n        \n      \n\n      \n        \n      \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            {{ file.name }}      {{ file.status }}                                                              '\n    var COMPONENTS = [{'name': 'AccountPageComponent', 'selector': 'app-account-page'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreateFurnitureComponent', 'selector': 'app-create-furniture'},{'name': 'CreateFurniturePageComponent', 'selector': 'app-create-furniture-page'},{'name': 'FinderComponent', 'selector': 'app-finder'},{'name': 'ImageSliderComponent', 'selector': 'app-image-slider'},{'name': 'LoginPageComponent', 'selector': 'app-login-page'},{'name': 'MainPageComponent', 'selector': 'app-main-page'},{'name': 'NavigationPanelComponent', 'selector': 'app-navigation-panel'},{'name': 'NotificationComponent', 'selector': 'app-notification'},{'name': 'PlanHouseComponent', 'selector': 'app-plan-house'},{'name': 'PlanHousePageComponent', 'selector': 'app-plan-house-page'},{'name': 'SceneComponent', 'selector': 'app-scene'},{'name': 'ShopPageComponent', 'selector': 'app-shop-page'},{'name': 'UploadOverlayComponent', 'selector': 'app-upload-overlay'},{'name': 'ViewFurnitureComponent', 'selector': 'app-view-furniture'}];\n    var DIRECTIVES = [{'name': 'AutoHeightDirective', 'selector': '[appAutoHeight]'}];\n    var ACTUAL_COMPONENT = {'name': 'UploadOverlayComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UploadService.html":{"url":"injectables/UploadService.html","title":"injectable - UploadService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UploadService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/upload.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseServiceUrl\n                            \n                            \n                                    Public\n                                uploads$\n                            \n                            \n                                    Private\n                                uppy\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addFile\n                            \n                            \n                                    Async\n                                cancelUpload\n                            \n                            \n                                    Private\n                                getFileExtension\n                            \n                            \n                                removeFileFromQueue\n                            \n                            \n                                    Private\n                                updateUpload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(furnitureCardService: FurnitureCardControlService, serverImageControl: ServerImageControlService, accountCookieService: AccountCookieService, notification: NotificationService)\n                    \n                \n                        \n                            \n                                Defined in src/services/upload.service.ts:31\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        furnitureCardService\n                                                  \n                                                        \n                                                                        FurnitureCardControlService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        serverImageControl\n                                                  \n                                                        \n                                                                        ServerImageControlService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accountCookieService\n                                                  \n                                                        \n                                                                        AccountCookieService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        notification\n                                                  \n                                                        \n                                                                        NotificationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addFile\n                        \n                    \n                \n            \n            \n                \naddFile(file: File, jwt: string, furnitureCardId: string, uploadType: uploadType)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/upload.service.ts:73\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                furnitureCardId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                uploadType\n                                            \n                                                            uploadType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        cancelUpload\n                        \n                    \n                \n            \n            \n                \n                        \n                    cancelUpload(fileID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/upload.service.ts:87\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fileID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getFileExtension\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFileExtension(fileName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/upload.service.ts:102\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fileName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeFileFromQueue\n                        \n                    \n                \n            \n            \n                \nremoveFileFromQueue(fileID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/upload.service.ts:107\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fileID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        updateUpload\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUpload(id: string, name: string, progress: number, status: uploadStatus)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/upload.service.ts:112\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                progress\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                status\n                                            \n                                                            uploadStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseServiceUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : baseUrl + 'furniture/model'\n                    \n                \n                    \n                        \n                                Defined in src/services/upload.service.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        uploads$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject([])\n                    \n                \n                    \n                        \n                                Defined in src/services/upload.service.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        uppy\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Uppy\n\n                    \n                \n                    \n                        \n                                Defined in src/services/upload.service.ts:29\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport Uppy from '@uppy/core';\nimport XHRUpload from '@uppy/xhr-upload';\nimport { BehaviorSubject } from 'rxjs';\nimport { baseUrl } from '.';\nimport { FurnitureCardControlService } from './furniture-card-control.service';\nimport { ServerImageControlService } from './server-image-control.service';\nimport { AccountCookieService } from './account-cookie.service';\nimport { NotificationService } from './notification.service';\nimport { UploadOverlayComponent } from '../components/upload-overlay/upload-overlay.component';\n\ntype uploadStatus = 'uploading' | 'success' | 'error';\nexport type uploadType = 'create' | 'update';\nexport interface UploadEntry {\n  id: string;\n  name: string;\n  progress: number;\n  status: uploadStatus;\n}\ninterface MyXhrUploadOptions {\n  endpoint: string;\n  fieldName?: string;\n  formData?: boolean;\n  getResponseError?: (responseText: string, response: Response) => Error | null;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class UploadService {\n  private uppy: Uppy;\n  public uploads$ = new BehaviorSubject([]);\n  private baseServiceUrl = baseUrl + 'furniture/model';\n\n  constructor(\n    private furnitureCardService: FurnitureCardControlService,\n    private serverImageControl: ServerImageControlService,\n    private accountCookieService: AccountCookieService,\n    private notification: NotificationService\n  ) {\n    this.uppy = new Uppy({ autoProceed: true });\n\n    this.uppy.use(XHRUpload, {\n      endpoint: this.baseServiceUrl,\n      fieldName: 'file',\n      formData: true,\n      getResponseError: (responseText, response) => {\n        return new Error(`Ошибка: ${response.statusText}`);\n      }\n    } as MyXhrUploadOptions);\n\n    this.uppy.on('upload-progress', (file, progress) => {\n      if (file === undefined || file.meta.name === undefined) return;\n      const NAME = file.data instanceof File ? file.data.name : 'file';\n      this.updateUpload(file.id, NAME, file.progress.percentage ?? 50, 'uploading');\n    });\n\n    this.uppy.on('upload-success', (file) => {\n      if (file === undefined || file.meta.name === undefined) return;\n\n      const NAME = file.data instanceof File ? file.data.name : 'file'\n      this.updateUpload(file.id, NAME, 100, 'success');\n      this.notification.setSuccess('Модель обновлена', 2500);\n    });\n\n    this.uppy.on('upload-error', (file, error) => {\n      if (file === undefined || file.meta.name === undefined) return;\n\n      const NAME = file.data instanceof File ? file.data.name : 'file'\n      this.updateUpload(file.id, NAME, 100, 'error');\n      this.cancelUpload(file.id);\n    });\n  }\n\n  addFile(file: File, jwt: string, furnitureCardId: string, uploadType: uploadType) {\n    const UNIQUE_ID = Date.now().toString();\n    this.uppy.addFile({\n      name: UNIQUE_ID + this.getFileExtension(file.name),\n      type: file.type,\n      data: file,\n      meta: {\n        furnitureCardId: furnitureCardId,\n        jwt: jwt,\n        uploadType: uploadType\n      }\n    });\n  }\n\n  async cancelUpload(fileID: string) {\n    const file = this.uppy.getFile(fileID);\n    if (file) {\n      this.uppy.removeFile(fileID);\n      const JWT = this.accountCookieService.getJwt()\n      const FURNITURE_CARD_ID = file.meta['furnitureCardId'] as string;\n      const UPLOAD_TYPE = file.meta['uploadType'] as string;\n\n\n      if (JWT && FURNITURE_CARD_ID && UPLOAD_TYPE === 'create') {\n        await this.serverImageControl.DELETEproject(JWT, FURNITURE_CARD_ID)\n        this.furnitureCardService.DELETEfurnitureCard(JWT, FURNITURE_CARD_ID)\n      }\n    }\n  }\n  private getFileExtension(fileName: string): string | null {\n    const parts = fileName.split('.');\n    const EXTENSION = parts.length > 1 ? parts.pop()?.toLowerCase() : \"obj\"\n    return `.${EXTENSION}`\n  }\n  removeFileFromQueue(fileID: string) {\n    const updatedQueue = this.uploads$.value.filter(file => file.id !== fileID);\n    this.uploads$.next(updatedQueue);\n  }\n\n  private updateUpload(id: string, name: string, progress: number, status: uploadStatus) {\n    const current = this.uploads$.value.filter(file => file.id !== id);\n    this.uploads$.next([...current, { id, name, progress, status }]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ViewFurnitureComponent.html":{"url":"components/ViewFurnitureComponent.html","title":"component - ViewFurnitureComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ViewFurnitureComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/components/view-furniture/view-furniture.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-view-furniture\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                                ImageSliderComponent\n                            NgFor\n                            NgIf\n                            ReactiveFormsModule\n                            CostFormatPipe\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./view-furniture.component.html\n            \n\n\n\n            \n                styleUrl\n                ./view-furniture.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                currentColorId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                copyShopLink\n                            \n                            \n                                    Async\n                                ngOnChanges\n                            \n                            \n                                    Protected\n                                openFurnitureVariant\n                            \n                            \n                                    Protected\n                                proccessDescription\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                furnitureCardId\n                            \n                            \n                                furnitureData\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(elementRef: ElementRef, clipboardService: ClipboardService, furnitureCardService: FurnitureCardControlService, notification: NotificationService, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/components/view-furniture/view-furniture.component.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        elementRef\n                                                  \n                                                        \n                                                                    ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        clipboardService\n                                                  \n                                                        \n                                                                    ClipboardService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        furnitureCardService\n                                                  \n                                                        \n                                                                        FurnitureCardControlService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        notification\n                                                  \n                                                        \n                                                                        NotificationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        furnitureCardId\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/components/view-furniture/view-furniture.component.ts:32\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        furnitureData\n                    \n                \n                \n                    \n                        Type :         furnitureFromServerData\n\n                    \n                \n                        \n                            \n                                    Defined in src/components/view-furniture/view-furniture.component.ts:36\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        copyShopLink\n                        \n                    \n                \n            \n            \n                \n                        \n                    copyShopLink(furnitureUrl: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/view-furniture/view-furniture.component.ts:82\n                        \n                    \n\n\n            \n                \n                        Копирование ссылки на магазин\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                furnitureUrl\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnChanges()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/view-furniture/view-furniture.component.ts:38\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        openFurnitureVariant\n                        \n                    \n                \n            \n            \n                \n                        \n                    openFurnitureVariant(colorButton: EventTarget)\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/view-furniture/view-furniture.component.ts:51\n                        \n                    \n\n\n            \n                \n                        Смена цвета мебели на выбранный вариант\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                colorButton\n                                            \n                                                        EventTarget\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        proccessDescription\n                        \n                    \n                \n            \n            \n                \n                        \n                    proccessDescription(description: string, proportions: furnitureProportions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/view-furniture/view-furniture.component.ts:78\n                        \n                    \n\n\n            \n                \n                        Добавление габаритов к описанию мебели\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                description\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                proportions\n                                            \n                                                            furnitureProportions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        currentColorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/components/view-furniture/view-furniture.component.ts:28\n                        \n                    \n\n            \n                \n                    Текущий индекс выбранного цвета\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, ElementRef, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { ImageSliderComponent } from '../image-slider/image-slider.component';\nimport { NgFor, NgIf } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ClipboardService } from 'ngx-clipboard';\nimport { FurnitureCardControlService, furnitureFromServerData, furnitureProportions } from '../../services/furniture-card-control.service';\nimport { NotificationService } from '../../services/notification.service';\nimport { CostFormatPipe } from '../../pipes/cost-format.pipe';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-view-furniture',\n  standalone: true,\n  imports: [ImageSliderComponent, NgFor, NgIf, ReactiveFormsModule, CostFormatPipe],\n  templateUrl: './view-furniture.component.html',\n  styleUrl: './view-furniture.component.scss'\n})\nexport class ViewFurnitureComponent implements OnChanges {\n  constructor(\n    private elementRef: ElementRef,\n    private clipboardService: ClipboardService,\n    private furnitureCardService: FurnitureCardControlService,\n    private notification: NotificationService,\n    private router: Router\n  ) { }\n\n  /** Текущий индекс выбранного цвета */\n  protected currentColorId: number = 0\n\n  @Input()\n  /** ID карточки мебели, передаваемый как входной параметр */\n  furnitureCardId?: string\n\n  @Input()\n  /** Данные карточки мебели, загружаемые из сервиса */\n  furnitureData?: furnitureFromServerData;\n\n  async ngOnChanges() {\n    if (this.furnitureCardId === undefined) return\n    try {\n      const RESPONSE = await this.furnitureCardService.GETfurnitureCard(this.furnitureCardId);\n      this.furnitureData = RESPONSE.furnitureCard\n    } catch (error) {\n      this.notification.setError('Ошибка при получении', 5000);\n      this.router.navigateByUrl('/shop')\n      console.log(error)\n    }\n  }\n\n  /** Смена цвета мебели на выбранный вариант */\n  protected openFurnitureVariant(colorButton: EventTarget) {\n    const COLOR_BUTTON_ELEMENT = colorButton as HTMLButtonElement;\n    const COLORS_ELEMENT = this.elementRef.nativeElement.querySelector('.colors') as HTMLSpanElement;\n    const idColor = COLOR_BUTTON_ELEMENT.getAttribute('data-idcolor');\n    if (!idColor) return;\n\n    const COLORS_VARIANTS = COLORS_ELEMENT.querySelectorAll('.colorVariant')\n    let beforeColors: HTMLButtonElement[] = [], afterColors: HTMLButtonElement[] = []\n    COLORS_VARIANTS.forEach((colorVariant, indexVariant) => {\n      if (indexVariant > +idColor) {\n        afterColors = [...afterColors, colorVariant as HTMLButtonElement]\n      } else if (indexVariant  {\n      (colorVariant as HTMLButtonElement).style.setProperty('--index', (newIndex + 1).toString())\n    })\n    setTimeout(() => {\n      COLOR_BUTTON_ELEMENT.style.setProperty('margin-right', '115px')\n    }, 500)\n    setTimeout(() => {\n      this.currentColorId = +idColor\n      COLOR_BUTTON_ELEMENT.style.setProperty('margin-right', '0')\n    }, 1250)\n  }\n  /** Добавление габаритов к описанию мебели */\n  protected proccessDescription(description: string, proportions: furnitureProportions) {\n    return `Ширина: ${proportions.width} см\\nДлина: ${proportions.length} см\\nВысота: ${proportions.height} см\\n${description}`;\n  }\n  /** Копирование ссылки на магазин */\n  protected copyShopLink(furnitureUrl: string) {\n    this.clipboardService.copyFromContent(furnitureUrl)\n  }\n}\n\n    \n\n    \n        \n    {{furnitureData.name}}\n    \n    \n        \n        \n    \n    \n        \n            \n            \n                \n            \n        \n        \n            \n                Описание\n                {{proccessDescription(furnitureData.description,furnitureData.proportions)}}\n            \n            \n                Магазины\n                \n                    \n                        {{shopData.cost | costFormat}}\n                        \n                            \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    {{furnitureData.name}}                                                                                                                                        Описание                {{proccessDescription(furnitureData.description,furnitureData.proportions)}}                                        Магазины                                                            {{shopData.cost | costFormat}}                                                                                                                                        '\n    var COMPONENTS = [{'name': 'AccountPageComponent', 'selector': 'app-account-page'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreateFurnitureComponent', 'selector': 'app-create-furniture'},{'name': 'CreateFurniturePageComponent', 'selector': 'app-create-furniture-page'},{'name': 'FinderComponent', 'selector': 'app-finder'},{'name': 'ImageSliderComponent', 'selector': 'app-image-slider'},{'name': 'LoginPageComponent', 'selector': 'app-login-page'},{'name': 'MainPageComponent', 'selector': 'app-main-page'},{'name': 'NavigationPanelComponent', 'selector': 'app-navigation-panel'},{'name': 'NotificationComponent', 'selector': 'app-notification'},{'name': 'PlanHouseComponent', 'selector': 'app-plan-house'},{'name': 'PlanHousePageComponent', 'selector': 'app-plan-house-page'},{'name': 'SceneComponent', 'selector': 'app-scene'},{'name': 'ShopPageComponent', 'selector': 'app-shop-page'},{'name': 'UploadOverlayComponent', 'selector': 'app-upload-overlay'},{'name': 'ViewFurnitureComponent', 'selector': 'app-view-furniture'}];\n    var DIRECTIVES = [{'name': 'AutoHeightDirective', 'selector': '[appAutoHeight]'}];\n    var ACTUAL_COMPONENT = {'name': 'ViewFurnitureComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/accountFullData.html":{"url":"interfaces/accountFullData.html","title":"interface - accountFullData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  accountFullData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/account.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Полные данные аккаунта пользователя\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            avatarUrl\n                                        \n                                \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            furnitures\n                                        \n                                \n                                \n                                        \n                                            nickname\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            password\n                                        \n                                \n                                \n                                        \n                                            projects\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        avatarUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        avatarUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    URL аватара\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Email пользователя\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        furnitures\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        furnitures:         furnitureAccountData[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         furnitureAccountData[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Массив мебели, связанной с аккаунтом\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nickname\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nickname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Никнейм пользователя\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Пароль пользователя (необязательный)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        projects\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        projects:         projectInformation[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         projectInformation[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Массив проектов пользователя\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { projectInformation, projectServerInformation } from './project.service';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { AccountCookieService } from './account-cookie.service';\nimport { baseUrl } from '.';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные для изменения аккаунта с email\n */\nexport interface changeAccountDataEmail {\n  /** JWT токен */\n  jwt: string;\n  /** Тип аккаунта (email) */\n  accountType: 'email';\n  /** Пароль пользователя */\n  password: string;\n}\n\n/**\n * Полные данные аккаунта пользователя\n */\nexport interface accountFullData {\n  /** URL аватара */\n  avatarUrl: string;\n  /** Никнейм пользователя */\n  nickname: string;\n  /** Email пользователя */\n  email: string;\n  /** Массив проектов пользователя */\n  projects: projectInformation[];\n  /** Массив мебели, связанной с аккаунтом */\n  furnitures: furnitureAccountData[];\n  /** Пароль пользователя (необязательный) */\n  password?: string;\n}\n\n/**\n * Данные для изменения вторичных данных аккаунта\n */\nexport interface changeSecondaryData {\n  /** JWT токен */\n  jwt: string;\n  /** Новый никнейм */\n  nickname: string;\n}\n\n/**\n * Данные по мебели, связанной с аккаунтом\n */\nexport interface furnitureAccountData {\n  /** Идентификатор мебели */\n  _id: string;\n  /** Название мебели */\n  name: string;\n  /** URL превью изображения мебели */\n  previewUrl: string;\n}\n\n/** Тип аккаунта */\nexport type accountType = 'google' | 'email';\n\n/** Тип данных для изменения аккаунта (на данный момент только email) */\nexport type changeAccountData = changeAccountDataEmail;\n\n/**\n * Данные для создания аккаунта с email\n */\ninterface createEmailAccountData {\n  /** Email */\n  email: string;\n  /** Пароль */\n  password: string;\n  /** Никнейм */\n  nickname: string;\n  /** Тип аккаунта (email) */\n  accountType: 'email';\n}\n\n/** Тип данных для создания аккаунта */\nexport type createAccountData = createEmailAccountData;\n\n/**\n * Функция-помощник для проверки, что аккаунт с типом email\n * @param account Объект аккаунта\n * @returns true, если аккаунт с типом email\n */\nexport function isEmailAccount(account: { accountType: accountType }): account is changeAccountDataEmail {\n  return account.accountType === 'email';\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccountService {\n  /** Базовый URL для аккаунт-сервисов */\n  private baseServiceUrl = baseUrl + 'account';\n\n  constructor(\n    private httpModule: HttpClient,\n    private accountCookieService: AccountCookieService\n  ) { }\n\n  /**\n   * Создание нового пользователя\n   * @param createAccountData Основная информация о пользователе (никнейм, email, пароль)\n   * @returns Promise с сообщением об успешном создании пользователя\n   */\n  POSTcreateAccount(createAccountData: createAccountData) {\n    let HTTP_PARAMS = new HttpParams()\n      .set('accountType', createAccountData.accountType)\n      .set('nickname', createAccountData.nickname);\n\n    if (isEmailAccount(createAccountData)) {\n      HTTP_PARAMS = HTTP_PARAMS\n        .set('email', createAccountData.email)\n        .set('password', createAccountData.password);\n    }\n\n    return firstValueFrom(this.httpModule.post(this.baseServiceUrl, HTTP_PARAMS)) as Promise;\n  }\n\n  /**\n   * Удаление JWT токена пользователя\n   * @param jwt JWT токен\n   * @returns Promise с сообщением об успешном удалении токена\n   */\n  DELETEaccountJwt(jwt: string) {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt);\n    return firstValueFrom(this.httpModule.delete(this.baseServiceUrl + '/jwt/delete', { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Обновление вторичных данных аккаунта (например, никнейм)\n   * @param changeData Данные для изменения\n   * @returns Promise с сообщением об успешном обновлении\n   */\n  PUTupdateSecondaryAccountData(changeData: changeSecondaryData) {\n    const HTTP_PARAMS = new HttpParams({\n      fromObject: {\n        nickname: changeData.nickname,\n        jwt: changeData.jwt\n      }\n    });\n    return firstValueFrom(this.httpModule.put(this.baseServiceUrl, null, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Удаление аккаунта пользователя\n   * @param jwt JWT токен\n   * @returns Promise с сообщением об успешном удалении пользователя\n   */\n  DELETEaccount(jwt: string) {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt);\n    return firstValueFrom(this.httpModule.delete(this.baseServiceUrl, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Получение полной информации об аккаунте пользователя\n   * @param jwt JWT токен\n   * @returns Promise с данными аккаунта (включая проекты и мебель)\n   */\n  async GETaccount(jwt: string) {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt);\n    try {\n      let { accountData } = await firstValueFrom(this.httpModule.get(this.baseServiceUrl, { params: HTTP_PARAMS })) as { accountData: accountFullData & { projects: projectServerInformation[] } };\n      accountData.furnitures = accountData.furnitures.map(furnitureData => {\n        return {\n          ...furnitureData,\n          previewUrl: baseUrl + furnitureData.previewUrl\n        };\n      });\n      return { accountData: accountData };\n    } catch (error) {\n      console.error('Error in GETfurnitureCard:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Проверка наличия JWT токена в куках\n   * @returns true, если JWT токен найден, иначе false\n   */\n  checkJwt(): boolean {\n    return this.accountCookieService.getJwt() ? true : false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/additionalData.html":{"url":"interfaces/additionalData.html","title":"interface - additionalData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  additionalData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/furniture-card-control.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Дополнительные данные мебели с динамическими ключами\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            category\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    string | undefined\n\n                    \n                \n                        \n                            \n                                Defined in src/services/furniture-card-control.service.ts:59\n                            \n                        \n                \n                    \n                        Другие динамические свойства\n\n                    \n                \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        category\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        category:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Категория мебели (опционально)\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { imageSliderClientData, imageSliderFromServerData } from '../components/image-slider/image-slider.component';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные магазина с ценой и URL\n * @interface shopData\n */\nexport interface shopData {\n  /** Цена мебели */\n  cost: number;\n  /** URL магазина или товара */\n  url: string;\n}\n\n/**\n * Пропорции мебели (ширина, длина, высота)\n * @interface furnitureProportions\n */\nexport interface furnitureProportions {\n  /** Ширина мебели (или null, если не задана) */\n  width: number | null;\n  /** Длина мебели (или null, если не задана) */\n  length: number | null;\n  /** Высота мебели (или null, если не задана) */\n  height: number | null;\n}\n\n/**\n * Данные цвета на клиенте, включая слайдер изображений\n * @interface colorClientData\n */\nexport interface colorClientData {\n  /** Цвет мебели */\n  color: string;\n  /** Данные для слайдера изображений */\n  imagesData: imageSliderClientData;\n}\n\n/**\n * Данные цвета с сервера, включая слайдер изображений\n * @interface colorFromServerData\n */\nexport interface colorFromServerData {\n  /** Цвет мебели */\n  color: string;\n  /** Данные для слайдера изображений */\n  imagesData: imageSliderFromServerData;\n}\n\n/**\n * Дополнительные данные мебели с динамическими ключами\n * @interface additionalData\n */\nexport interface additionalData {\n  /** Категория мебели (опционально) */\n  category?: string;\n  /** Другие динамические свойства */\n  [key: string]: string | undefined;\n}\n\n/**\n * Базовые данные мебели, общие для клиента и сервера\n * @interface furnitureBaseData\n */\ninterface furnitureBaseData {\n  /** Название мебели */\n  name: string;\n  /** Описание мебели */\n  description: string;\n  /** Пропорции мебели */\n  proportions: furnitureProportions;\n  /** Список магазинов с ценами и URL */\n  shops: shopData[];\n  /** Дополнительные данные */\n  additionalData: additionalData;\n}\n\n/**\n * Данные мебели на клиенте с цветами\n * @interface furnitureClientData\n * @extends furnitureBaseData\n */\nexport interface furnitureClientData extends furnitureBaseData {\n  /** Список цветов с данными для клиента */\n  colors: colorClientData[];\n}\n\n/**\n * Данные мебели с сервера с цветами\n * @interface furnitureFromServerData\n * @extends furnitureBaseData\n */\nexport interface furnitureFromServerData extends furnitureBaseData {\n  /** Список цветов с данными с сервера */\n  colors: colorFromServerData[];\n}\n\n/**\n * Сервис для управления карточками мебели\n * @class FurnitureCardControlService\n * @injectable\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class FurnitureCardControlService {\n\n  /** Базовый URL для запросов к API мебели */\n  private baseServiceUrl = baseUrl + 'furniture/card';\n\n  /**\n   * Конструктор сервиса\n   * @param httpModule HTTP клиент для запросов\n   */\n  constructor(private httpModule: HttpClient) { }\n\n  /**\n   * Получение карточки мебели по ID и опциональному JWT токену\n   * @param furnitureCardId - ID карточки мебели\n   * @param [jwt] - JWT токен пользователя (опционально)\n   * @returns Promise с объектом, содержащим данные карточки и флаг совпадения автора\n   * @throws Ошибка при некорректной структуре ответа или при ошибках запроса\n   */\n  async GETfurnitureCard(\n    furnitureCardId: string,\n    jwt?: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams().set('furnitureCardId', furnitureCardId);\n\n    if (jwt !== undefined) {\n      HTTP_PARAMS = HTTP_PARAMS.set('jwt', jwt);\n    }\n\n    try {\n      const response = await firstValueFrom(\n        this.httpModule.get(this.baseServiceUrl, { params: HTTP_PARAMS })\n      ) as {\n        furnitureCard: furnitureFromServerData;\n        authorMatched: boolean;\n      };\n\n      if (!response?.furnitureCard) {\n        throw new Error('Invalid response structure: furnitureCard missing');\n      }\n\n      const transformedFurnitureCard = {\n        ...response.furnitureCard,\n        colors: response.furnitureCard.colors.map(colorData => ({\n          color: colorData.color,\n          imagesData: {\n            idMainImage: colorData.imagesData.idMainImage,\n            images: colorData.imagesData.images.map(url => baseUrl + url)\n          }\n        }))\n      };\n\n      return {\n        furnitureCard: transformedFurnitureCard,\n        authorMatched: response.authorMatched\n      };\n\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Создание новой карточки мебели\n   * @param furnitureData - Данные новой карточки мебели\n   * @param jwt - JWT токен пользователя\n   * @returns Promise с данными созданной карточки, включая её ID\n   */\n  POSTcreateFurnitureCard(\n    furnitureData: furnitureFromServerData,\n    jwt: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams().set('jwt', jwt);\n    return firstValueFrom(\n      this.httpModule.post(this.baseServiceUrl, furnitureData, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n\n  /**\n   * Обновление существующей карточки мебели\n   * @param furnitureCardUpdateData - Обновленные данные карточки мебели\n   * @param furnitureCardId - ID карточки мебели для обновления\n   * @param jwt - JWT токен пользователя\n   * @returns Promise с сообщением результата обновления\n   */\n  PUTupdateFurnitureCard(\n    furnitureCardUpdateData: furnitureFromServerData,\n    furnitureCardId: string,\n    jwt: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId);\n    return firstValueFrom(\n      this.httpModule.put(this.baseServiceUrl, furnitureCardUpdateData, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n\n  /**\n   * Удаление карточки мебели по ID и JWT токену\n   * @param jwt - JWT токен пользователя\n   * @param furnitureCardId - ID карточки мебели для удаления\n   * @returns Promise с сообщением результата удаления\n   */\n  DELETEfurnitureCard(jwt: string, furnitureCardId: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId);\n    return firstValueFrom(\n      this.httpModule.delete(this.baseServiceUrl, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/baseFilter.html":{"url":"interfaces/baseFilter.html","title":"interface - baseFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  baseFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/category.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Базовый фильтр\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            field\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        field\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        field:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Поле, по которому фильтр\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Имя фильтра\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные категории\n */\nexport interface categoryData {\n  /** Название категории */\n  name: string;\n  /** Перевод категории в единственном числе */\n  translateOne: string;\n  /** Перевод категории во множественном числе */\n  translateMany: string;\n  /** Массив фильтров категории */\n  filters: filter[];\n}\n\n/**\n * Базовый фильтр\n */\ninterface baseFilter {\n  /** Имя фильтра */\n  name: string;\n  /** Поле, по которому фильтр */\n  field: string;\n}\n\n/**\n * Опция для select-фильтра\n */\nexport interface option {\n  /** Название опции */\n  name: string;\n  /** Значение опции для запроса */\n  queryValue: string;\n}\n\n/**\n * Фильтр типа select\n */\ninterface selectFilter extends baseFilter {\n  /** Тип фильтра */\n  type: 'select';\n  /** Варианты выбора */\n  options: option[];\n}\n\n/**\n * Фильтр типа range\n */\ninterface rangeFilter extends baseFilter {\n  /** Тип фильтра */\n  type: 'range';\n  /** Минимальное значение */\n  minValue: number;\n  /** Максимальное значение */\n  maxValue: number;\n}\n\n/**\n * Тип фильтра: select или range\n */\nexport type filter = rangeFilter | selectFilter;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CategoryService {\n  /** Базовый URL для работы с категориями */\n  private baseServiceUrl = baseUrl + 'category';\n\n  constructor(\n    private httpModule: HttpClient\n  ) { }\n\n  /**\n   * Получение всех категорий\n   * @returns Promise с массивом категорий\n   */\n  GETgetAllCategories() {\n    return firstValueFrom(this.httpModule.get(this.baseServiceUrl)) as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/categoryData.html":{"url":"interfaces/categoryData.html","title":"interface - categoryData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  categoryData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/category.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Данные категории\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            filters\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            translateMany\n                                        \n                                \n                                \n                                        \n                                            translateOne\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        filters\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        filters:         filter[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         filter[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Массив фильтров категории\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Название категории\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        translateMany\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        translateMany:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Перевод категории во множественном числе\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        translateOne\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        translateOne:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Перевод категории в единственном числе\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные категории\n */\nexport interface categoryData {\n  /** Название категории */\n  name: string;\n  /** Перевод категории в единственном числе */\n  translateOne: string;\n  /** Перевод категории во множественном числе */\n  translateMany: string;\n  /** Массив фильтров категории */\n  filters: filter[];\n}\n\n/**\n * Базовый фильтр\n */\ninterface baseFilter {\n  /** Имя фильтра */\n  name: string;\n  /** Поле, по которому фильтр */\n  field: string;\n}\n\n/**\n * Опция для select-фильтра\n */\nexport interface option {\n  /** Название опции */\n  name: string;\n  /** Значение опции для запроса */\n  queryValue: string;\n}\n\n/**\n * Фильтр типа select\n */\ninterface selectFilter extends baseFilter {\n  /** Тип фильтра */\n  type: 'select';\n  /** Варианты выбора */\n  options: option[];\n}\n\n/**\n * Фильтр типа range\n */\ninterface rangeFilter extends baseFilter {\n  /** Тип фильтра */\n  type: 'range';\n  /** Минимальное значение */\n  minValue: number;\n  /** Максимальное значение */\n  maxValue: number;\n}\n\n/**\n * Тип фильтра: select или range\n */\nexport type filter = rangeFilter | selectFilter;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CategoryService {\n  /** Базовый URL для работы с категориями */\n  private baseServiceUrl = baseUrl + 'category';\n\n  constructor(\n    private httpModule: HttpClient\n  ) { }\n\n  /**\n   * Получение всех категорий\n   * @returns Promise с массивом категорий\n   */\n  GETgetAllCategories() {\n    return firstValueFrom(this.httpModule.get(this.baseServiceUrl)) as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/changeAccountDataEmail.html":{"url":"interfaces/changeAccountDataEmail.html","title":"interface - changeAccountDataEmail","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  changeAccountDataEmail\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/account.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Данные для изменения аккаунта с email\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            accountType\n                                        \n                                \n                                \n                                        \n                                            jwt\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accountType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accountType:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                            \n                                \n                                    Тип аккаунта (email)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        jwt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        jwt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    JWT токен\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Пароль пользователя\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { projectInformation, projectServerInformation } from './project.service';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { AccountCookieService } from './account-cookie.service';\nimport { baseUrl } from '.';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные для изменения аккаунта с email\n */\nexport interface changeAccountDataEmail {\n  /** JWT токен */\n  jwt: string;\n  /** Тип аккаунта (email) */\n  accountType: 'email';\n  /** Пароль пользователя */\n  password: string;\n}\n\n/**\n * Полные данные аккаунта пользователя\n */\nexport interface accountFullData {\n  /** URL аватара */\n  avatarUrl: string;\n  /** Никнейм пользователя */\n  nickname: string;\n  /** Email пользователя */\n  email: string;\n  /** Массив проектов пользователя */\n  projects: projectInformation[];\n  /** Массив мебели, связанной с аккаунтом */\n  furnitures: furnitureAccountData[];\n  /** Пароль пользователя (необязательный) */\n  password?: string;\n}\n\n/**\n * Данные для изменения вторичных данных аккаунта\n */\nexport interface changeSecondaryData {\n  /** JWT токен */\n  jwt: string;\n  /** Новый никнейм */\n  nickname: string;\n}\n\n/**\n * Данные по мебели, связанной с аккаунтом\n */\nexport interface furnitureAccountData {\n  /** Идентификатор мебели */\n  _id: string;\n  /** Название мебели */\n  name: string;\n  /** URL превью изображения мебели */\n  previewUrl: string;\n}\n\n/** Тип аккаунта */\nexport type accountType = 'google' | 'email';\n\n/** Тип данных для изменения аккаунта (на данный момент только email) */\nexport type changeAccountData = changeAccountDataEmail;\n\n/**\n * Данные для создания аккаунта с email\n */\ninterface createEmailAccountData {\n  /** Email */\n  email: string;\n  /** Пароль */\n  password: string;\n  /** Никнейм */\n  nickname: string;\n  /** Тип аккаунта (email) */\n  accountType: 'email';\n}\n\n/** Тип данных для создания аккаунта */\nexport type createAccountData = createEmailAccountData;\n\n/**\n * Функция-помощник для проверки, что аккаунт с типом email\n * @param account Объект аккаунта\n * @returns true, если аккаунт с типом email\n */\nexport function isEmailAccount(account: { accountType: accountType }): account is changeAccountDataEmail {\n  return account.accountType === 'email';\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccountService {\n  /** Базовый URL для аккаунт-сервисов */\n  private baseServiceUrl = baseUrl + 'account';\n\n  constructor(\n    private httpModule: HttpClient,\n    private accountCookieService: AccountCookieService\n  ) { }\n\n  /**\n   * Создание нового пользователя\n   * @param createAccountData Основная информация о пользователе (никнейм, email, пароль)\n   * @returns Promise с сообщением об успешном создании пользователя\n   */\n  POSTcreateAccount(createAccountData: createAccountData) {\n    let HTTP_PARAMS = new HttpParams()\n      .set('accountType', createAccountData.accountType)\n      .set('nickname', createAccountData.nickname);\n\n    if (isEmailAccount(createAccountData)) {\n      HTTP_PARAMS = HTTP_PARAMS\n        .set('email', createAccountData.email)\n        .set('password', createAccountData.password);\n    }\n\n    return firstValueFrom(this.httpModule.post(this.baseServiceUrl, HTTP_PARAMS)) as Promise;\n  }\n\n  /**\n   * Удаление JWT токена пользователя\n   * @param jwt JWT токен\n   * @returns Promise с сообщением об успешном удалении токена\n   */\n  DELETEaccountJwt(jwt: string) {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt);\n    return firstValueFrom(this.httpModule.delete(this.baseServiceUrl + '/jwt/delete', { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Обновление вторичных данных аккаунта (например, никнейм)\n   * @param changeData Данные для изменения\n   * @returns Promise с сообщением об успешном обновлении\n   */\n  PUTupdateSecondaryAccountData(changeData: changeSecondaryData) {\n    const HTTP_PARAMS = new HttpParams({\n      fromObject: {\n        nickname: changeData.nickname,\n        jwt: changeData.jwt\n      }\n    });\n    return firstValueFrom(this.httpModule.put(this.baseServiceUrl, null, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Удаление аккаунта пользователя\n   * @param jwt JWT токен\n   * @returns Promise с сообщением об успешном удалении пользователя\n   */\n  DELETEaccount(jwt: string) {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt);\n    return firstValueFrom(this.httpModule.delete(this.baseServiceUrl, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Получение полной информации об аккаунте пользователя\n   * @param jwt JWT токен\n   * @returns Promise с данными аккаунта (включая проекты и мебель)\n   */\n  async GETaccount(jwt: string) {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt);\n    try {\n      let { accountData } = await firstValueFrom(this.httpModule.get(this.baseServiceUrl, { params: HTTP_PARAMS })) as { accountData: accountFullData & { projects: projectServerInformation[] } };\n      accountData.furnitures = accountData.furnitures.map(furnitureData => {\n        return {\n          ...furnitureData,\n          previewUrl: baseUrl + furnitureData.previewUrl\n        };\n      });\n      return { accountData: accountData };\n    } catch (error) {\n      console.error('Error in GETfurnitureCard:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Проверка наличия JWT токена в куках\n   * @returns true, если JWT токен найден, иначе false\n   */\n  checkJwt(): boolean {\n    return this.accountCookieService.getJwt() ? true : false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/changeSecondaryData.html":{"url":"interfaces/changeSecondaryData.html","title":"interface - changeSecondaryData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  changeSecondaryData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/account.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Данные для изменения вторичных данных аккаунта\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            jwt\n                                        \n                                \n                                \n                                        \n                                            nickname\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        jwt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        jwt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    JWT токен\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nickname\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nickname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Новый никнейм\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { projectInformation, projectServerInformation } from './project.service';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { AccountCookieService } from './account-cookie.service';\nimport { baseUrl } from '.';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные для изменения аккаунта с email\n */\nexport interface changeAccountDataEmail {\n  /** JWT токен */\n  jwt: string;\n  /** Тип аккаунта (email) */\n  accountType: 'email';\n  /** Пароль пользователя */\n  password: string;\n}\n\n/**\n * Полные данные аккаунта пользователя\n */\nexport interface accountFullData {\n  /** URL аватара */\n  avatarUrl: string;\n  /** Никнейм пользователя */\n  nickname: string;\n  /** Email пользователя */\n  email: string;\n  /** Массив проектов пользователя */\n  projects: projectInformation[];\n  /** Массив мебели, связанной с аккаунтом */\n  furnitures: furnitureAccountData[];\n  /** Пароль пользователя (необязательный) */\n  password?: string;\n}\n\n/**\n * Данные для изменения вторичных данных аккаунта\n */\nexport interface changeSecondaryData {\n  /** JWT токен */\n  jwt: string;\n  /** Новый никнейм */\n  nickname: string;\n}\n\n/**\n * Данные по мебели, связанной с аккаунтом\n */\nexport interface furnitureAccountData {\n  /** Идентификатор мебели */\n  _id: string;\n  /** Название мебели */\n  name: string;\n  /** URL превью изображения мебели */\n  previewUrl: string;\n}\n\n/** Тип аккаунта */\nexport type accountType = 'google' | 'email';\n\n/** Тип данных для изменения аккаунта (на данный момент только email) */\nexport type changeAccountData = changeAccountDataEmail;\n\n/**\n * Данные для создания аккаунта с email\n */\ninterface createEmailAccountData {\n  /** Email */\n  email: string;\n  /** Пароль */\n  password: string;\n  /** Никнейм */\n  nickname: string;\n  /** Тип аккаунта (email) */\n  accountType: 'email';\n}\n\n/** Тип данных для создания аккаунта */\nexport type createAccountData = createEmailAccountData;\n\n/**\n * Функция-помощник для проверки, что аккаунт с типом email\n * @param account Объект аккаунта\n * @returns true, если аккаунт с типом email\n */\nexport function isEmailAccount(account: { accountType: accountType }): account is changeAccountDataEmail {\n  return account.accountType === 'email';\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccountService {\n  /** Базовый URL для аккаунт-сервисов */\n  private baseServiceUrl = baseUrl + 'account';\n\n  constructor(\n    private httpModule: HttpClient,\n    private accountCookieService: AccountCookieService\n  ) { }\n\n  /**\n   * Создание нового пользователя\n   * @param createAccountData Основная информация о пользователе (никнейм, email, пароль)\n   * @returns Promise с сообщением об успешном создании пользователя\n   */\n  POSTcreateAccount(createAccountData: createAccountData) {\n    let HTTP_PARAMS = new HttpParams()\n      .set('accountType', createAccountData.accountType)\n      .set('nickname', createAccountData.nickname);\n\n    if (isEmailAccount(createAccountData)) {\n      HTTP_PARAMS = HTTP_PARAMS\n        .set('email', createAccountData.email)\n        .set('password', createAccountData.password);\n    }\n\n    return firstValueFrom(this.httpModule.post(this.baseServiceUrl, HTTP_PARAMS)) as Promise;\n  }\n\n  /**\n   * Удаление JWT токена пользователя\n   * @param jwt JWT токен\n   * @returns Promise с сообщением об успешном удалении токена\n   */\n  DELETEaccountJwt(jwt: string) {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt);\n    return firstValueFrom(this.httpModule.delete(this.baseServiceUrl + '/jwt/delete', { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Обновление вторичных данных аккаунта (например, никнейм)\n   * @param changeData Данные для изменения\n   * @returns Promise с сообщением об успешном обновлении\n   */\n  PUTupdateSecondaryAccountData(changeData: changeSecondaryData) {\n    const HTTP_PARAMS = new HttpParams({\n      fromObject: {\n        nickname: changeData.nickname,\n        jwt: changeData.jwt\n      }\n    });\n    return firstValueFrom(this.httpModule.put(this.baseServiceUrl, null, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Удаление аккаунта пользователя\n   * @param jwt JWT токен\n   * @returns Promise с сообщением об успешном удалении пользователя\n   */\n  DELETEaccount(jwt: string) {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt);\n    return firstValueFrom(this.httpModule.delete(this.baseServiceUrl, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Получение полной информации об аккаунте пользователя\n   * @param jwt JWT токен\n   * @returns Promise с данными аккаунта (включая проекты и мебель)\n   */\n  async GETaccount(jwt: string) {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt);\n    try {\n      let { accountData } = await firstValueFrom(this.httpModule.get(this.baseServiceUrl, { params: HTTP_PARAMS })) as { accountData: accountFullData & { projects: projectServerInformation[] } };\n      accountData.furnitures = accountData.furnitures.map(furnitureData => {\n        return {\n          ...furnitureData,\n          previewUrl: baseUrl + furnitureData.previewUrl\n        };\n      });\n      return { accountData: accountData };\n    } catch (error) {\n      console.error('Error in GETfurnitureCard:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Проверка наличия JWT токена в куках\n   * @returns true, если JWT токен найден, иначе false\n   */\n  checkJwt(): boolean {\n    return this.accountCookieService.getJwt() ? true : false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/clientFilters.html":{"url":"interfaces/clientFilters.html","title":"interface - clientFilters","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  clientFilters\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/shop.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс клиентских фильтров, значения которых формируются на основе ответа от сервера.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            colors\n                                        \n                                \n                                \n                                        \n                                            maxCost\n                                        \n                                \n                                \n                                        \n                                            minCost\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        colors\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        colors:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Цвета мебели\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxCost\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        maxCost:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Максимальная стоимость\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        minCost\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        minCost:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Минимальная стоимость\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { firstValueFrom } from 'rxjs';\nimport { modelInterface } from '../components/scene/scene.component';\n\n/**\n * Интерфейс объекта фильтров, отправляемых на сервер.\n*/\nexport interface queryData {\n  /** Любое ключ:значение */\n  [key: string]: optionSelectQueryData | optionRangeQueryData;\n}\n\n/**\n * Фильтр типа \"выбор из списка\".\n */\ninterface optionSelectQueryData {\n  /** Тип фильтра */\n  type: 'select';\n  /** Выбранные значения */\n  value: string[];\n}\n\n/**\n * Фильтр типа \"диапазон значений\".\n*/\ninterface optionRangeQueryData {\n  /** Тип фильтра */\n  type: 'range';\n  /** Минимум в диапазоне */\n  min: number;\n  /** Максимум в диапазоне */\n  max: number;\n}\n\n/**\n * Интерфейс данных о мебели, получаемых из магазина.\n */\nexport interface furnitureShopData {\n  /** Название */\n  name: string;\n  /** Стоимость мебели */\n  cost: number;\n  /** Неполный Url превью (вначало надо вставить baseUrl сервера) */\n  previewUrl: string;\n  /** Id мебели */\n  furnitureCardId: string;\n  /** Массив цветов мебели */\n  colors: string[];\n  /** Габариты мебели */\n  proportions: modelInterface;\n}\n\n/**\n * Интерфейс клиентских фильтров, значения которых формируются на основе ответа от сервера.\n */\nexport interface clientFilters {\n  /** Цвета мебели */\n  colors: string[];\n  /** Минимальная стоимость */\n  minCost: number;\n  /** Максимальная стоимость */\n  maxCost: number;\n}\n\n/**\n * Сервис для получения данных о мебели из магазина, с учетом фильтрации и пагинации.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ShopService {\n  /** Базовый URL сервиса */\n  private baseServiceUrl = baseUrl + 'shop';\n\n  /** Активный AbortController для отмены предыдущих запросов */\n  private abortController: AbortController | null = null;\n\n  constructor(private httpModule: HttpClient) { }\n\n  /**\n   * Выполняет GET-запрос на получение данных по категории мебели.\n   * Поддерживает фильтрацию и стартовую позицию для пагинации.\n   * При повторном вызове отменяет предыдущий запрос.\n   *\n   * @param categoryName - Название категории мебели.\n   * @param startRange - Начальный индекс (offset) выборки.\n   * @param queryData - Объект фильтров (опционально).\n   *\n   * @returns Промис с объектом, содержащим:\n   * - `resultsArray`: массив карточек мебели с обновлёнными URL превью\n   * - `resultsClientFiltersData`: агрегированные данные фильтров для клиента\n   *\n   * @throws {Error} В случае сетевой ошибки или отмены запроса.\n   */\n  async GETgetCategoryData(categoryName: string, startRange: number, queryData?: queryData) {\n    if (this.abortController) {\n      this.abortController.abort();\n    }\n\n    this.abortController = new AbortController();\n\n    try {\n      let requestUrl = `${this.baseServiceUrl}?category=${categoryName}&startRange=${startRange}`;\n\n      if (queryData && Object.keys(queryData).length > 0) {\n        const params = new URLSearchParams();\n        params.append('filters', JSON.stringify(queryData));\n        requestUrl += `&${new URLSearchParams(params).toString()}`;\n      }\n\n      const response = await fetch(\n        requestUrl,\n        { signal: this.abortController.signal }\n      );\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Ошибка: ${response.status} — ${errorText}`);\n      }\n\n      const RESPONSE = await response.json() as { resultsArray: furnitureShopData[] };\n      const RESULTS_ARRAY = RESPONSE.resultsArray;\n\n      const UPDATED_RESULTS = RESULTS_ARRAY.map(furniture => ({\n        ...furniture,\n        previewUrl: baseUrl + furniture.previewUrl\n      }));\n\n      return {\n        resultsArray: UPDATED_RESULTS,\n        resultsClientFiltersData: this.getFindOptionsByResult(UPDATED_RESULTS)\n      };\n\n    } catch (error: any) {\n      if (error.name === 'AbortError') {\n      } else {\n        console.error('Ошибка запроса:', error);\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Формирует объект фильтров на основе полученных данных о мебели.\n   *\n   * @param resultsArray - Массив карточек мебели\n   * @returns Объект клиентских фильтров (цвета, минимальная и максимальная цена)\n   */\n  private getFindOptionsByResult(resultsArray: furnitureShopData[]) {\n    let filtersObject: clientFilters = {\n      colors: [],\n      minCost: Infinity,\n      maxCost: -Infinity\n    };\n\n    resultsArray.forEach(furnitureData => {\n      if (furnitureData.cost  filtersObject.maxCost) filtersObject.maxCost = furnitureData.cost;\n\n      filtersObject.colors.push(...furnitureData.colors);\n    });\n\n    filtersObject.minCost = filtersObject.minCost!== Infinity ? filtersObject.minCost : 0;\n    filtersObject.maxCost = filtersObject.maxCost!== -Infinity ? filtersObject.maxCost : 0;\n\n    filtersObject.colors = [...new Set(filtersObject.colors)];\n    return filtersObject;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/clientProportions.html":{"url":"interfaces/clientProportions.html","title":"interface - clientProportions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  clientProportions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/create-furniture-page/create-furniture-page.component.ts\n        \n\n\n            \n                Description\n            \n            \n                Данные для формы габаритов мебели на клиенте.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            height\n                                        \n                                \n                                \n                                        \n                                            length\n                                        \n                                \n                                \n                                        \n                                            width\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        height:     number | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        length\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        length:     number | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        width:     number | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ChangeDetectorRef, Component, DoCheck, ElementRef, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { NavigationPanelComponent } from '../navigation-panel/navigation-panel.component';\nimport { CreateFurnitureComponent } from '../create-furnitre/create-furniture.component';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AccountCookieService } from '../../services/account-cookie.service';\nimport { FurnitureCardControlService, furnitureFromServerData } from '../../services/furniture-card-control.service';\nimport { ServerImageControlService } from '../../services/server-image-control.service';\nimport { NgIf } from '@angular/common';\nimport { FurnitureModelControlService } from '../../services/furniture-model-control.service';\nimport { NotificationService } from '../../services/notification.service';\nimport { imageSliderClientData } from '../image-slider/image-slider.component';\nimport { Subscription } from 'rxjs';\n\n/** Данные для формы габаритов мебели на клиенте.*/\ninterface clientProportions {\n  width: number | null;\n  height: number | null;\n  length: number | null;\n}\n\n/**\n * Компонент страницы создания и редактирования мебели.\n * Отвечает за загрузку данных, валидацию, сохранение и удаление мебели.\n */\n@Component({\n  selector: 'app-create-furniture-page',\n  standalone: true,\n  imports: [NavigationPanelComponent, CreateFurnitureComponent, NgIf],\n  templateUrl: './create-furniture-page.component.html',\n  styleUrl: './create-furniture-page.component.scss'\n})\nexport class CreateFurniturePageComponent implements OnInit, OnDestroy {\n  /** Подписка на изменения маршрута в приложении.*/\n  private routeSub: Subscription = new Subscription();\n  /** Id страницы.*/\n  protected idPage!: string;\n  \n  @ViewChild(CreateFurnitureComponent)\n  /** Переменная для взаимодействия с методами дочернего компонента.*/\n  private createFurnitureComponent!: CreateFurnitureComponent;\n  \n  @ViewChild(CreateFurnitureComponent, { read: ElementRef })\n  /** Переменная для взаимодействия с html дочернего компонента.*/\n  private createFurnitureComponentRef!: ElementRef;\n\n  /**\n   * Данные мебели с дополнительным полем пропорций клиента.\n   */\n  protected furnitureData: furnitureFromServerData & { proportions: clientProportions } = {\n    name: '',\n    description: '',\n    colors: [],\n    shops: [],\n    additionalData: {},\n    proportions: {\n      width: null,\n      height: null,\n      length: null\n    }\n  };\n\n  constructor(\n    private route: ActivatedRoute,\n    private cookieService: AccountCookieService,\n    private furnitureCardService: FurnitureCardControlService,\n    private serverImageControl: ServerImageControlService,\n    private router: Router,\n    private furnitureModelService: FurnitureModelControlService,\n    private notification: NotificationService\n  ) { }\n\n  /**\n   * Инициализация компонента:\n   * - проверяет JWT,\n   * - подписывается на изменения параметров маршрута,\n   * - загружает мебель, если id не \"new\".\n   */\n  ngOnInit(): void {\n    const JWT = this.cookieService.getJwt();\n    if (!JWT) {\n      this.router.navigateByUrl('/login');\n      return;\n    }\n\n    this.routeSub = this.route.paramMap.subscribe(params => {\n      this.idPage = params.get('id') ?? 'new';\n      this.clearFurnitureCard();\n      if (this.idPage !== 'new') this.pageInit(JWT);\n    });\n  }\n\n  /**\n   * Отписка от подписки при уничтожении компонента.\n   */\n  ngOnDestroy() {\n    if(this.routeSub)this.routeSub.unsubscribe();\n  }\n\n  /**\n   * Загружает данные мебели по id и JWT.\n   * Если автор не совпадает, происходит перенаправление на создание новой мебели.\n   * @param jwt - JWT токен пользователя.\n   */\n  private async pageInit(jwt: string) {\n    try {\n      const RESPONSE = await this.furnitureCardService.GETfurnitureCard(this.idPage, jwt);\n      if (RESPONSE.authorMatched === false) {\n        this.router.navigateByUrl('/create/new');\n        return;\n      }\n      this.furnitureData = RESPONSE.furnitureCard;\n      this.createFurnitureComponent.currentColorId = 0;\n    } catch (error) {\n      this.router.navigateByUrl('/create/new');\n      console.error(error);\n    }\n  }\n\n  /**\n   * Преобразует массив URL строк изображений в массив Blob объектов.\n   * @param imagesArray - массив URL строк изображений.\n   * @returns Promise с массивом Blob объектов.\n   */\n  private async transformUrlArrayToBlob(imagesArray: string[]): Promise {\n    const IMAGES_BLOB_ARRAY: Blob[] = await Promise.all(\n      imagesArray.map(async (blobUrl): Promise => {\n        const RESPONSE = await fetch(blobUrl.toString());\n        const BLOB = await RESPONSE.blob();\n        return BLOB;\n      })\n    );\n    return IMAGES_BLOB_ARRAY;\n  }\n\n  /**\n   * Удаляет мебель, 3D модель и связанные изображения с сервера.\n   */\n  protected async deleteFurnitureCard() {\n    const JWT = this.cookieService.getJwt();\n    if (!JWT) return;\n\n    const operations = [\n      () => this.furnitureModelService.DELETEfurnitureModel(JWT, this.idPage),\n      () => this.serverImageControl.DELETEproject(JWT, this.idPage),\n      () => this.furnitureCardService.DELETEfurnitureCard(JWT, this.idPage)\n    ];\n\nfor (const op of operations) {\n  try {\n    await op();\n  } catch (error) {\n  }\n}\n\n    this.router.navigateByUrl('/account');\n  }\n\n  /**\n   * Создаёт новую мебель:\n   * - проверяет валидность,\n   * - создаёт карточку,\n   * - загружает изображения по цветам,\n   * - загружает 3D модель,\n   * - показывает уведомление и перенаправляет пользователя.\n   */\n  protected async createFurnitureCard() {\n    const JWT = this.cookieService.getJwt();\n    if (!this.checkValid('create') || !JWT) return;\n    try {\n      const FURNITURE_DATA = this.createFurnitureComponent.furnitureData;\n      const FURNITURE_ID = (await this.furnitureCardService.POSTcreateFurnitureCard(FURNITURE_DATA, JWT)).furnitureData._id;\n\n\n      FURNITURE_DATA.colors.forEach(async (colorData) => {\n        const imagesBlobArray = await this.transformUrlArrayToBlob(colorData.imagesData.images);\n        const imagesData: imageSliderClientData = {\n          images: imagesBlobArray,\n          idMainImage: colorData.imagesData.idMainImage\n        };\n        await this.serverImageControl.POSTuploadProjectImages(colorData.color, imagesData, JWT, FURNITURE_ID);\n      });\n\n\n      const FURNITURE_MODEL_BLOB = this.createFurnitureComponent.furnitureModelInput.files![0];\n      this.furnitureModelService.POSTuploadFurnitureModel(FURNITURE_MODEL_BLOB, JWT, FURNITURE_ID, 'create');\n\n      this.notification.setSuccess('Мебель добавлена', 5000);\n      this.router.navigateByUrl('/account');\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  /**\n   * Обновляет данные мебели:\n   * - проверяет валидность,\n   * - обновляет карточку мебели,\n   * - обновляет изображения,\n   * - при необходимости загружает новую 3D модель,\n   * - показывает уведомление об успешном обновлении.\n   */\n  protected async updateFurnitureCard() {\n    const JWT = this.cookieService.getJwt();\n    if (!this.checkValid('update') || !JWT) return;\n    try {\n      const FURNITURE_DATA = this.createFurnitureComponent.furnitureData;\n      await this.furnitureCardService.PUTupdateFurnitureCard(FURNITURE_DATA, this.idPage, JWT);\n      this.notification.setSuccess('Карточка обновлена', 2500);\n\n      let changeImagesCounter = 0\n      FURNITURE_DATA.colors.forEach(async (colorData) => {\n        if (colorData.imagesData.images.length === 0) return;\n        const IMAGES_BLOB_ARRAY = await this.transformUrlArrayToBlob(colorData.imagesData.images);\n        const IMAGES_DATA: imageSliderClientData = {\n          images: IMAGES_BLOB_ARRAY,\n          idMainImage: colorData.imagesData.idMainImage\n        };\n        await this.serverImageControl.POSTuploadProjectImages(colorData.color, IMAGES_DATA, JWT, this.idPage);\n        changeImagesCounter++;\n      });\n      if(changeImagesCounter > 0)this.notification.setSuccess('Изображения обновлены', 2500);\n\n      const FURNITURE_MODEL_BLOB = this.createFurnitureComponent.furnitureModelInput.files!;\n      if (FURNITURE_MODEL_BLOB[0]) {\n        this.furnitureModelService.POSTuploadFurnitureModel(FURNITURE_MODEL_BLOB[0], JWT, this.idPage, 'update');\n      }\n\n      \n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  /**\n   * Проверяет валидность данных мебели.\n   * @param typeRequest - тип операции ('create' или 'update').\n   * @param action - если true, то при ошибке вызываются уведомления и открываются необходимые модули.\n   * @returns true, если данные валидны, иначе false.\n   */\n  protected checkValid(typeRequest: 'update' | 'create'): boolean {\n    const { colors, shops, proportions, name } = this.furnitureData;\n    const FURNITURE_MODEL_BLOB = this.createFurnitureComponent.furnitureModelInput.files![0];\n\n    if (colors.length == 0) {\n      this.createFurnitureComponent.openColorModule();\n      return false;\n    }\n    if (name.length == 0) {\n      const nameInput = this.createFurnitureComponentRef.nativeElement.querySelector(\n        '.furnitureTitle'\n      ) as HTMLInputElement;\n\n      if (nameInput) {\n        nameInput.focus();\n      }\n      this.notification.setError('Заполните название мебели', 5000);\n      return false;\n    }\n    if (!proportions.height || !proportions.width || !proportions.length) {\n      this.createFurnitureComponent.openAdditional();\n      this.notification.setError('Заполните параметры', 5000);\n      return false;\n    }\n    if (!FURNITURE_MODEL_BLOB && typeRequest === 'create') {\n      const uploadInput = this.createFurnitureComponentRef.nativeElement.querySelector(\n        '.furnitureModelInput'\n      ) as HTMLInputElement;\n\n      if (uploadInput) {\n        uploadInput.click();\n      }\n      this.notification.setError('Загрузите 3D модель', 5000);\n      return false;\n    }\n    if (shops.length == 0) {\n      this.createFurnitureComponent.openShopsModule();\n      this.notification.setError('Добавьте магазины', 5000);\n      return false;\n    }\n    for (let colorData of colors) {\n      if (colorData.imagesData.images.length == 0 && typeRequest === 'create') {\n        const uploadInput = this.createFurnitureComponentRef.nativeElement.querySelector(\n          '.uploadImagesInput'\n        ) as HTMLInputElement;\n\n        if (uploadInput) {\n          uploadInput.click();\n        }\n        this.notification.setError('Загрузите изображения', 5000);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Очищает данные мебели в компоненте.\n   */\n  protected clearFurnitureCard() {\n    if (this.createFurnitureComponent) this.createFurnitureComponent.currentColorId = undefined;\n    this.furnitureData = {\n      name: '',\n      description: '',\n      colors: [],\n      shops: [],\n      additionalData: {},\n      proportions: {\n        width: null,\n        height: null,\n        length: null\n      }\n    };\n  }\n\n  /**\n   * Возвращает цвет, который планируется удалить (для расчётов и логирования).\n   * @returns цвет (строка) текущего выделенного цвета или undefined.\n   */\n  protected deleteColorCalculate(): string | undefined {\n    if (!this.createFurnitureComponent || this.createFurnitureComponent.currentColorId === undefined) return undefined;\n    return this.createFurnitureComponent.furnitureData.colors[this.createFurnitureComponent.currentColorId].color;\n  }\n\n  /**\n   * Удаляет текущий цвет, если цветов больше одного.\n   * Если цветов один — показывает ошибку.\n   */\n  protected deleteColor() {\n    if (this.createFurnitureComponent.furnitureData.colors.length \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/colorClientData.html":{"url":"interfaces/colorClientData.html","title":"interface - colorClientData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  colorClientData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/furniture-card-control.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Данные цвета на клиенте, включая слайдер изображений\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            color\n                                        \n                                \n                                \n                                        \n                                            imagesData\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        color:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Цвет мебели\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        imagesData\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        imagesData:         imageSliderClientData\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         imageSliderClientData\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Данные для слайдера изображений\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { imageSliderClientData, imageSliderFromServerData } from '../components/image-slider/image-slider.component';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные магазина с ценой и URL\n * @interface shopData\n */\nexport interface shopData {\n  /** Цена мебели */\n  cost: number;\n  /** URL магазина или товара */\n  url: string;\n}\n\n/**\n * Пропорции мебели (ширина, длина, высота)\n * @interface furnitureProportions\n */\nexport interface furnitureProportions {\n  /** Ширина мебели (или null, если не задана) */\n  width: number | null;\n  /** Длина мебели (или null, если не задана) */\n  length: number | null;\n  /** Высота мебели (или null, если не задана) */\n  height: number | null;\n}\n\n/**\n * Данные цвета на клиенте, включая слайдер изображений\n * @interface colorClientData\n */\nexport interface colorClientData {\n  /** Цвет мебели */\n  color: string;\n  /** Данные для слайдера изображений */\n  imagesData: imageSliderClientData;\n}\n\n/**\n * Данные цвета с сервера, включая слайдер изображений\n * @interface colorFromServerData\n */\nexport interface colorFromServerData {\n  /** Цвет мебели */\n  color: string;\n  /** Данные для слайдера изображений */\n  imagesData: imageSliderFromServerData;\n}\n\n/**\n * Дополнительные данные мебели с динамическими ключами\n * @interface additionalData\n */\nexport interface additionalData {\n  /** Категория мебели (опционально) */\n  category?: string;\n  /** Другие динамические свойства */\n  [key: string]: string | undefined;\n}\n\n/**\n * Базовые данные мебели, общие для клиента и сервера\n * @interface furnitureBaseData\n */\ninterface furnitureBaseData {\n  /** Название мебели */\n  name: string;\n  /** Описание мебели */\n  description: string;\n  /** Пропорции мебели */\n  proportions: furnitureProportions;\n  /** Список магазинов с ценами и URL */\n  shops: shopData[];\n  /** Дополнительные данные */\n  additionalData: additionalData;\n}\n\n/**\n * Данные мебели на клиенте с цветами\n * @interface furnitureClientData\n * @extends furnitureBaseData\n */\nexport interface furnitureClientData extends furnitureBaseData {\n  /** Список цветов с данными для клиента */\n  colors: colorClientData[];\n}\n\n/**\n * Данные мебели с сервера с цветами\n * @interface furnitureFromServerData\n * @extends furnitureBaseData\n */\nexport interface furnitureFromServerData extends furnitureBaseData {\n  /** Список цветов с данными с сервера */\n  colors: colorFromServerData[];\n}\n\n/**\n * Сервис для управления карточками мебели\n * @class FurnitureCardControlService\n * @injectable\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class FurnitureCardControlService {\n\n  /** Базовый URL для запросов к API мебели */\n  private baseServiceUrl = baseUrl + 'furniture/card';\n\n  /**\n   * Конструктор сервиса\n   * @param httpModule HTTP клиент для запросов\n   */\n  constructor(private httpModule: HttpClient) { }\n\n  /**\n   * Получение карточки мебели по ID и опциональному JWT токену\n   * @param furnitureCardId - ID карточки мебели\n   * @param [jwt] - JWT токен пользователя (опционально)\n   * @returns Promise с объектом, содержащим данные карточки и флаг совпадения автора\n   * @throws Ошибка при некорректной структуре ответа или при ошибках запроса\n   */\n  async GETfurnitureCard(\n    furnitureCardId: string,\n    jwt?: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams().set('furnitureCardId', furnitureCardId);\n\n    if (jwt !== undefined) {\n      HTTP_PARAMS = HTTP_PARAMS.set('jwt', jwt);\n    }\n\n    try {\n      const response = await firstValueFrom(\n        this.httpModule.get(this.baseServiceUrl, { params: HTTP_PARAMS })\n      ) as {\n        furnitureCard: furnitureFromServerData;\n        authorMatched: boolean;\n      };\n\n      if (!response?.furnitureCard) {\n        throw new Error('Invalid response structure: furnitureCard missing');\n      }\n\n      const transformedFurnitureCard = {\n        ...response.furnitureCard,\n        colors: response.furnitureCard.colors.map(colorData => ({\n          color: colorData.color,\n          imagesData: {\n            idMainImage: colorData.imagesData.idMainImage,\n            images: colorData.imagesData.images.map(url => baseUrl + url)\n          }\n        }))\n      };\n\n      return {\n        furnitureCard: transformedFurnitureCard,\n        authorMatched: response.authorMatched\n      };\n\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Создание новой карточки мебели\n   * @param furnitureData - Данные новой карточки мебели\n   * @param jwt - JWT токен пользователя\n   * @returns Promise с данными созданной карточки, включая её ID\n   */\n  POSTcreateFurnitureCard(\n    furnitureData: furnitureFromServerData,\n    jwt: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams().set('jwt', jwt);\n    return firstValueFrom(\n      this.httpModule.post(this.baseServiceUrl, furnitureData, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n\n  /**\n   * Обновление существующей карточки мебели\n   * @param furnitureCardUpdateData - Обновленные данные карточки мебели\n   * @param furnitureCardId - ID карточки мебели для обновления\n   * @param jwt - JWT токен пользователя\n   * @returns Promise с сообщением результата обновления\n   */\n  PUTupdateFurnitureCard(\n    furnitureCardUpdateData: furnitureFromServerData,\n    furnitureCardId: string,\n    jwt: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId);\n    return firstValueFrom(\n      this.httpModule.put(this.baseServiceUrl, furnitureCardUpdateData, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n\n  /**\n   * Удаление карточки мебели по ID и JWT токену\n   * @param jwt - JWT токен пользователя\n   * @param furnitureCardId - ID карточки мебели для удаления\n   * @returns Promise с сообщением результата удаления\n   */\n  DELETEfurnitureCard(jwt: string, furnitureCardId: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId);\n    return firstValueFrom(\n      this.httpModule.delete(this.baseServiceUrl, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/colorFromServerData.html":{"url":"interfaces/colorFromServerData.html","title":"interface - colorFromServerData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  colorFromServerData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/furniture-card-control.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Данные цвета с сервера, включая слайдер изображений\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            color\n                                        \n                                \n                                \n                                        \n                                            imagesData\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        color:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Цвет мебели\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        imagesData\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        imagesData:         imageSliderFromServerData\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         imageSliderFromServerData\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Данные для слайдера изображений\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { imageSliderClientData, imageSliderFromServerData } from '../components/image-slider/image-slider.component';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные магазина с ценой и URL\n * @interface shopData\n */\nexport interface shopData {\n  /** Цена мебели */\n  cost: number;\n  /** URL магазина или товара */\n  url: string;\n}\n\n/**\n * Пропорции мебели (ширина, длина, высота)\n * @interface furnitureProportions\n */\nexport interface furnitureProportions {\n  /** Ширина мебели (или null, если не задана) */\n  width: number | null;\n  /** Длина мебели (или null, если не задана) */\n  length: number | null;\n  /** Высота мебели (или null, если не задана) */\n  height: number | null;\n}\n\n/**\n * Данные цвета на клиенте, включая слайдер изображений\n * @interface colorClientData\n */\nexport interface colorClientData {\n  /** Цвет мебели */\n  color: string;\n  /** Данные для слайдера изображений */\n  imagesData: imageSliderClientData;\n}\n\n/**\n * Данные цвета с сервера, включая слайдер изображений\n * @interface colorFromServerData\n */\nexport interface colorFromServerData {\n  /** Цвет мебели */\n  color: string;\n  /** Данные для слайдера изображений */\n  imagesData: imageSliderFromServerData;\n}\n\n/**\n * Дополнительные данные мебели с динамическими ключами\n * @interface additionalData\n */\nexport interface additionalData {\n  /** Категория мебели (опционально) */\n  category?: string;\n  /** Другие динамические свойства */\n  [key: string]: string | undefined;\n}\n\n/**\n * Базовые данные мебели, общие для клиента и сервера\n * @interface furnitureBaseData\n */\ninterface furnitureBaseData {\n  /** Название мебели */\n  name: string;\n  /** Описание мебели */\n  description: string;\n  /** Пропорции мебели */\n  proportions: furnitureProportions;\n  /** Список магазинов с ценами и URL */\n  shops: shopData[];\n  /** Дополнительные данные */\n  additionalData: additionalData;\n}\n\n/**\n * Данные мебели на клиенте с цветами\n * @interface furnitureClientData\n * @extends furnitureBaseData\n */\nexport interface furnitureClientData extends furnitureBaseData {\n  /** Список цветов с данными для клиента */\n  colors: colorClientData[];\n}\n\n/**\n * Данные мебели с сервера с цветами\n * @interface furnitureFromServerData\n * @extends furnitureBaseData\n */\nexport interface furnitureFromServerData extends furnitureBaseData {\n  /** Список цветов с данными с сервера */\n  colors: colorFromServerData[];\n}\n\n/**\n * Сервис для управления карточками мебели\n * @class FurnitureCardControlService\n * @injectable\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class FurnitureCardControlService {\n\n  /** Базовый URL для запросов к API мебели */\n  private baseServiceUrl = baseUrl + 'furniture/card';\n\n  /**\n   * Конструктор сервиса\n   * @param httpModule HTTP клиент для запросов\n   */\n  constructor(private httpModule: HttpClient) { }\n\n  /**\n   * Получение карточки мебели по ID и опциональному JWT токену\n   * @param furnitureCardId - ID карточки мебели\n   * @param [jwt] - JWT токен пользователя (опционально)\n   * @returns Promise с объектом, содержащим данные карточки и флаг совпадения автора\n   * @throws Ошибка при некорректной структуре ответа или при ошибках запроса\n   */\n  async GETfurnitureCard(\n    furnitureCardId: string,\n    jwt?: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams().set('furnitureCardId', furnitureCardId);\n\n    if (jwt !== undefined) {\n      HTTP_PARAMS = HTTP_PARAMS.set('jwt', jwt);\n    }\n\n    try {\n      const response = await firstValueFrom(\n        this.httpModule.get(this.baseServiceUrl, { params: HTTP_PARAMS })\n      ) as {\n        furnitureCard: furnitureFromServerData;\n        authorMatched: boolean;\n      };\n\n      if (!response?.furnitureCard) {\n        throw new Error('Invalid response structure: furnitureCard missing');\n      }\n\n      const transformedFurnitureCard = {\n        ...response.furnitureCard,\n        colors: response.furnitureCard.colors.map(colorData => ({\n          color: colorData.color,\n          imagesData: {\n            idMainImage: colorData.imagesData.idMainImage,\n            images: colorData.imagesData.images.map(url => baseUrl + url)\n          }\n        }))\n      };\n\n      return {\n        furnitureCard: transformedFurnitureCard,\n        authorMatched: response.authorMatched\n      };\n\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Создание новой карточки мебели\n   * @param furnitureData - Данные новой карточки мебели\n   * @param jwt - JWT токен пользователя\n   * @returns Promise с данными созданной карточки, включая её ID\n   */\n  POSTcreateFurnitureCard(\n    furnitureData: furnitureFromServerData,\n    jwt: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams().set('jwt', jwt);\n    return firstValueFrom(\n      this.httpModule.post(this.baseServiceUrl, furnitureData, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n\n  /**\n   * Обновление существующей карточки мебели\n   * @param furnitureCardUpdateData - Обновленные данные карточки мебели\n   * @param furnitureCardId - ID карточки мебели для обновления\n   * @param jwt - JWT токен пользователя\n   * @returns Promise с сообщением результата обновления\n   */\n  PUTupdateFurnitureCard(\n    furnitureCardUpdateData: furnitureFromServerData,\n    furnitureCardId: string,\n    jwt: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId);\n    return firstValueFrom(\n      this.httpModule.put(this.baseServiceUrl, furnitureCardUpdateData, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n\n  /**\n   * Удаление карточки мебели по ID и JWT токену\n   * @param jwt - JWT токен пользователя\n   * @param furnitureCardId - ID карточки мебели для удаления\n   * @returns Promise с сообщением результата удаления\n   */\n  DELETEfurnitureCard(jwt: string, furnitureCardId: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId);\n    return firstValueFrom(\n      this.httpModule.delete(this.baseServiceUrl, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.component.ts\n            \n            component\n            AppComponent\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/app.config.server.ts\n            \n            variable\n            config\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app.config.server.ts\n            \n            variable\n            serverConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app.config.ts\n            \n            variable\n            appConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/account-page/account-page.component.ts\n            \n            component\n            AccountPageComponent\n            \n                94 %\n                (16/17)\n            \n        \n        \n            \n                \n                src/components/account-page/account-page.component.ts\n            \n            interface\n            editForm\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/components/create-furnitre/create-furniture.component.ts\n            \n            component\n            CreateFurnitureComponent\n            \n                97 %\n                (36/37)\n            \n        \n        \n            \n                \n                src/components/create-furniture-page/create-furniture-page.component.ts\n            \n            component\n            CreateFurniturePageComponent\n            \n                84 %\n                (16/19)\n            \n        \n        \n            \n                \n                src/components/create-furniture-page/create-furniture-page.component.ts\n            \n            interface\n            clientProportions\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/components/finder/finder.component.ts\n            \n            component\n            FinderComponent\n            \n                93 %\n                (15/16)\n            \n        \n        \n            \n                \n                src/components/finder/finder.component.ts\n            \n            interface\n            foundFurniture\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/components/image-slider/image-slider.component.ts\n            \n            component\n            ImageSliderComponent\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/components/image-slider/image-slider.component.ts\n            \n            interface\n            imageSliderClientData\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/components/image-slider/image-slider.component.ts\n            \n            interface\n            imageSliderFromServerData\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/components/login-page/login-page.component.ts\n            \n            component\n            LoginPageComponent\n            \n                96 %\n                (26/27)\n            \n        \n        \n            \n                \n                src/components/main-page/main-page.component.ts\n            \n            component\n            MainPageComponent\n            \n                92 %\n                (13/14)\n            \n        \n        \n            \n                \n                src/components/navigation-panel/navigation-panel.component.ts\n            \n            component\n            NavigationPanelComponent\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/components/notification/notification.component.ts\n            \n            component\n            NotificationComponent\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/components/plan-house-page/plan-house-page.component.ts\n            \n            component\n            PlanHousePageComponent\n            \n                91 %\n                (21/23)\n            \n        \n        \n            \n                \n                src/components/plan-house/plan-house.component.ts\n            \n            component\n            PlanHouseComponent\n            \n                43 %\n                (32/74)\n            \n        \n        \n            \n                \n                src/components/plan-house/plan-house.component.ts\n            \n            interface\n            roomSpanSettings\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                        src/components/scene/loaders/index.ts\n            \n            function\n            loadModel\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/components/scene/loaders/loaders/fbx.loader.ts\n            \n            function\n            loadFBXModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/components/scene/loaders/loaders/gltf-glb.loader.ts\n            \n            function\n            loadGLTFModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/components/scene/loaders/loaders/obj.loader.ts\n            \n            function\n            loadOBJModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/scene/scene.component.ts\n            \n            component\n            SceneComponent\n            \n                78 %\n                (39/50)\n            \n        \n        \n            \n                \n                src/components/scene/scene.component.ts\n            \n            interface\n            modelInterface\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/components/scene/scene.component.ts\n            \n            interface\n            objectLoadInterface\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/components/scene/scene.component.ts\n            \n            interface\n            objectSceneInterface\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/components/scene/scene.component.ts\n            \n            interface\n            roomData\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/components/shop-page/shop-page.component.ts\n            \n            component\n            ShopPageComponent\n            \n                95 %\n                (38/40)\n            \n        \n        \n            \n                \n                src/components/upload-overlay/upload-overlay.component.ts\n            \n            component\n            UploadOverlayComponent\n            \n                71 %\n                (10/14)\n            \n        \n        \n            \n                \n                src/components/view-furniture/view-furniture.component.ts\n            \n            component\n            ViewFurnitureComponent\n            \n                44 %\n                (4/9)\n            \n        \n        \n            \n                \n                src/directives/auto-height.directive.ts\n            \n            directive\n            AutoHeightDirective\n            \n                66 %\n                (4/6)\n            \n        \n        \n            \n                \n                src/interceptors/http-error.interceptor.ts\n            \n            interceptor\n            HttpErrorInterceptor\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                        src/main.server.ts\n            \n            variable\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/pipes/cost-format.pipe.ts\n            \n            pipe\n            CostFormatPipe\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/services/account-cookie.service.ts\n            \n            injectable\n            AccountCookieService\n            \n                81 %\n                (9/11)\n            \n        \n        \n            \n                \n                src/services/account.service.ts\n            \n            injectable\n            AccountService\n            \n                77 %\n                (7/9)\n            \n        \n        \n            \n                \n                src/services/account.service.ts\n            \n            interface\n            accountFullData\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/services/account.service.ts\n            \n            interface\n            changeAccountDataEmail\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/services/account.service.ts\n            \n            interface\n            changeSecondaryData\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/services/account.service.ts\n            \n            interface\n            createEmailAccountData\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/services/account.service.ts\n            \n            interface\n            furnitureAccountData\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                        src/services/account.service.ts\n            \n            function\n            isEmailAccount\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/services/account.service.ts\n            \n            type alias\n            accountType\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/services/account.service.ts\n            \n            type alias\n            changeAccountData\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/services/account.service.ts\n            \n            type alias\n            createAccountData\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/services/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                71 %\n                (5/7)\n            \n        \n        \n            \n                \n                src/services/auth.service.ts\n            \n            interface\n            emailAuthData\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/services/auth.service.ts\n            \n            interface\n            googleAuthData\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                        src/services/auth.service.ts\n            \n            type alias\n            authData\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/services/category.service.ts\n            \n            injectable\n            CategoryService\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                src/services/category.service.ts\n            \n            interface\n            baseFilter\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/services/category.service.ts\n            \n            interface\n            categoryData\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/services/category.service.ts\n            \n            interface\n            option\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/services/category.service.ts\n            \n            interface\n            rangeFilter\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/services/category.service.ts\n            \n            interface\n            selectFilter\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                        src/services/category.service.ts\n            \n            type alias\n            filter\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/services/client-image-control.service.ts\n            \n            injectable\n            ClientImageControlService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/services/finder.service.ts\n            \n            injectable\n            FinderService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/services/furniture-card-control.service.ts\n            \n            injectable\n            FurnitureCardControlService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/services/furniture-card-control.service.ts\n            \n            interface\n            additionalData\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/services/furniture-card-control.service.ts\n            \n            interface\n            colorClientData\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/services/furniture-card-control.service.ts\n            \n            interface\n            colorFromServerData\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/services/furniture-card-control.service.ts\n            \n            interface\n            furnitureBaseData\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/services/furniture-card-control.service.ts\n            \n            interface\n            furnitureClientData\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/services/furniture-card-control.service.ts\n            \n            interface\n            furnitureFromServerData\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/services/furniture-card-control.service.ts\n            \n            interface\n            furnitureProportions\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/services/furniture-card-control.service.ts\n            \n            interface\n            shopData\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/services/furniture-model-control.service.ts\n            \n            injectable\n            FurnitureModelControlService\n            \n                66 %\n                (4/6)\n            \n        \n        \n            \n                \n                        src/services/index.ts\n            \n            variable\n            baseClientUrl\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/services/index.ts\n            \n            variable\n            baseUrl\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/services/notification.service.ts\n            \n            injectable\n            NotificationService\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/services/project.service.ts\n            \n            injectable\n            ProjectService\n            \n                87 %\n                (7/8)\n            \n        \n        \n            \n                \n                src/services/project.service.ts\n            \n            interface\n            projectInformation\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/services/project.service.ts\n            \n            interface\n            projectServerInformation\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/services/project.service.ts\n            \n            interface\n            roomData\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/services/report.service.ts\n            \n            injectable\n            ReportService\n            \n                87 %\n                (7/8)\n            \n        \n        \n            \n                \n                src/services/report.service.ts\n            \n            interface\n            reportResponse\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/services/server-image-control.service.ts\n            \n            injectable\n            ServerImageControlService\n            \n                70 %\n                (7/10)\n            \n        \n        \n            \n                \n                src/services/shop.service.ts\n            \n            injectable\n            ShopService\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/services/shop.service.ts\n            \n            interface\n            clientFilters\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/services/shop.service.ts\n            \n            interface\n            furnitureShopData\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/services/shop.service.ts\n            \n            interface\n            optionRangeQueryData\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/services/shop.service.ts\n            \n            interface\n            optionSelectQueryData\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/services/shop.service.ts\n            \n            interface\n            queryData\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/services/upload.service.ts\n            \n            injectable\n            UploadService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/services/upload.service.ts\n            \n            interface\n            MyXhrUploadOptions\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/services/upload.service.ts\n            \n            interface\n            UploadEntry\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/services/upload.service.ts\n            \n            type alias\n            uploadStatus\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/services/upload.service.ts\n            \n            type alias\n            uploadType\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/usable/reusable-functions.used.ts\n            \n            function\n            checkDesktop\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/createEmailAccountData.html":{"url":"interfaces/createEmailAccountData.html","title":"interface - createEmailAccountData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  createEmailAccountData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/account.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Данные для создания аккаунта с email\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            accountType\n                                        \n                                \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            nickname\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accountType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accountType:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                            \n                                \n                                    Тип аккаунта (email)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Email\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nickname\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nickname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Никнейм\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Пароль\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { projectInformation, projectServerInformation } from './project.service';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { AccountCookieService } from './account-cookie.service';\nimport { baseUrl } from '.';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные для изменения аккаунта с email\n */\nexport interface changeAccountDataEmail {\n  /** JWT токен */\n  jwt: string;\n  /** Тип аккаунта (email) */\n  accountType: 'email';\n  /** Пароль пользователя */\n  password: string;\n}\n\n/**\n * Полные данные аккаунта пользователя\n */\nexport interface accountFullData {\n  /** URL аватара */\n  avatarUrl: string;\n  /** Никнейм пользователя */\n  nickname: string;\n  /** Email пользователя */\n  email: string;\n  /** Массив проектов пользователя */\n  projects: projectInformation[];\n  /** Массив мебели, связанной с аккаунтом */\n  furnitures: furnitureAccountData[];\n  /** Пароль пользователя (необязательный) */\n  password?: string;\n}\n\n/**\n * Данные для изменения вторичных данных аккаунта\n */\nexport interface changeSecondaryData {\n  /** JWT токен */\n  jwt: string;\n  /** Новый никнейм */\n  nickname: string;\n}\n\n/**\n * Данные по мебели, связанной с аккаунтом\n */\nexport interface furnitureAccountData {\n  /** Идентификатор мебели */\n  _id: string;\n  /** Название мебели */\n  name: string;\n  /** URL превью изображения мебели */\n  previewUrl: string;\n}\n\n/** Тип аккаунта */\nexport type accountType = 'google' | 'email';\n\n/** Тип данных для изменения аккаунта (на данный момент только email) */\nexport type changeAccountData = changeAccountDataEmail;\n\n/**\n * Данные для создания аккаунта с email\n */\ninterface createEmailAccountData {\n  /** Email */\n  email: string;\n  /** Пароль */\n  password: string;\n  /** Никнейм */\n  nickname: string;\n  /** Тип аккаунта (email) */\n  accountType: 'email';\n}\n\n/** Тип данных для создания аккаунта */\nexport type createAccountData = createEmailAccountData;\n\n/**\n * Функция-помощник для проверки, что аккаунт с типом email\n * @param account Объект аккаунта\n * @returns true, если аккаунт с типом email\n */\nexport function isEmailAccount(account: { accountType: accountType }): account is changeAccountDataEmail {\n  return account.accountType === 'email';\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccountService {\n  /** Базовый URL для аккаунт-сервисов */\n  private baseServiceUrl = baseUrl + 'account';\n\n  constructor(\n    private httpModule: HttpClient,\n    private accountCookieService: AccountCookieService\n  ) { }\n\n  /**\n   * Создание нового пользователя\n   * @param createAccountData Основная информация о пользователе (никнейм, email, пароль)\n   * @returns Promise с сообщением об успешном создании пользователя\n   */\n  POSTcreateAccount(createAccountData: createAccountData) {\n    let HTTP_PARAMS = new HttpParams()\n      .set('accountType', createAccountData.accountType)\n      .set('nickname', createAccountData.nickname);\n\n    if (isEmailAccount(createAccountData)) {\n      HTTP_PARAMS = HTTP_PARAMS\n        .set('email', createAccountData.email)\n        .set('password', createAccountData.password);\n    }\n\n    return firstValueFrom(this.httpModule.post(this.baseServiceUrl, HTTP_PARAMS)) as Promise;\n  }\n\n  /**\n   * Удаление JWT токена пользователя\n   * @param jwt JWT токен\n   * @returns Promise с сообщением об успешном удалении токена\n   */\n  DELETEaccountJwt(jwt: string) {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt);\n    return firstValueFrom(this.httpModule.delete(this.baseServiceUrl + '/jwt/delete', { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Обновление вторичных данных аккаунта (например, никнейм)\n   * @param changeData Данные для изменения\n   * @returns Promise с сообщением об успешном обновлении\n   */\n  PUTupdateSecondaryAccountData(changeData: changeSecondaryData) {\n    const HTTP_PARAMS = new HttpParams({\n      fromObject: {\n        nickname: changeData.nickname,\n        jwt: changeData.jwt\n      }\n    });\n    return firstValueFrom(this.httpModule.put(this.baseServiceUrl, null, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Удаление аккаунта пользователя\n   * @param jwt JWT токен\n   * @returns Promise с сообщением об успешном удалении пользователя\n   */\n  DELETEaccount(jwt: string) {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt);\n    return firstValueFrom(this.httpModule.delete(this.baseServiceUrl, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Получение полной информации об аккаунте пользователя\n   * @param jwt JWT токен\n   * @returns Promise с данными аккаунта (включая проекты и мебель)\n   */\n  async GETaccount(jwt: string) {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt);\n    try {\n      let { accountData } = await firstValueFrom(this.httpModule.get(this.baseServiceUrl, { params: HTTP_PARAMS })) as { accountData: accountFullData & { projects: projectServerInformation[] } };\n      accountData.furnitures = accountData.furnitures.map(furnitureData => {\n        return {\n          ...furnitureData,\n          previewUrl: baseUrl + furnitureData.previewUrl\n        };\n      });\n      return { accountData: accountData };\n    } catch (error) {\n      console.error('Error in GETfurnitureCard:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Проверка наличия JWT токена в куках\n   * @returns true, если JWT токен найден, иначе false\n   */\n  checkJwt(): boolean {\n    return this.accountCookieService.getJwt() ? true : false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^19.2.9\n        \n            @angular/common : ^19.2.9\n        \n            @angular/core : ^19.2.9\n        \n            @angular/forms : ^19.2.9\n        \n            @angular/platform-browser : ^19.2.9\n        \n            @angular/router : ^19.2.9\n        \n            @angular/service-worker : ^19.2.9\n        \n            @taiga-ui/cdk : ^4.36.0\n        \n            @taiga-ui/core : ^4.36.0\n        \n            @taiga-ui/event-plugins : ^4.0.2\n        \n            @taiga-ui/kit : ^4.37.0\n        \n            @taiga-ui/legacy : ^4.37.0\n        \n            @uppy/angular : ^0.8.0\n        \n            @uppy/xhr-upload : ^4.3.3\n        \n            compressorjs : ^1.2.1\n        \n            html2canvas : ^1.4.1\n        \n            html2pdf.js : ^0.10.3\n        \n            idb : ^8.0.3\n        \n            jspdf : ^3.0.1\n        \n            lodash : ^4.17.21\n        \n            ngx-clipboard : ^16.0.0\n        \n            ngx-cookie-service : ^19.1.2\n        \n            ngx-spinner : ^19.0.0\n        \n            puppeteer : ^24.8.2\n        \n            rxjs : ~7.8.2\n        \n            three : ^0.176.0\n        \n            workbox-core : ^7.3.0\n        \n            workbox-routing : ^7.3.0\n        \n            workbox-strategies : ^7.3.0\n        \n            zone.js : ~0.15.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/editForm.html":{"url":"interfaces/editForm.html","title":"interface - editForm","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  editForm\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/account-page/account-page.component.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс для формы редактирования аккаунта\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            nickname\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            password\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        nickname\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nickname:     FormControl\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     FormControl\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Контрол для редактирования никнейма\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:     FormControl\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     FormControl\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Контрол для редактирования пароля (необязательный)\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { NavigationPanelComponent } from '../navigation-panel/navigation-panel.component';\nimport { CommonModule, NgFor, NgIf } from '@angular/common';\nimport { accountFullData, AccountService, accountType } from '../../services/account.service';\nimport { FormGroup, ReactiveFormsModule, FormControl, Validators, AbstractControl } from '@angular/forms';\nimport { Router, RouterLink } from '@angular/router';\nimport { AccountCookieService } from '../../services/account-cookie.service';\nimport { ServerImageControlService } from '../../services/server-image-control.service';\nimport { ClientImageControlService } from '../../services/client-image-control.service';\nimport { AuthService } from '../../services/auth.service';\nimport { NotificationService } from '../../services/notification.service';\n/**\n * Интерфейс для формы редактирования аккаунта\n */\ninterface editForm {\n  /** Контрол для редактирования никнейма */\n  nickname: FormControl;\n  /** Контрол для редактирования пароля (необязательный) */\n  password?: FormControl;\n}\n\n/**\n * Компонент страницы аккаунта пользователя\n */\n@Component({\n  selector: 'app-account-page',\n  standalone: true,\n  imports: [NavigationPanelComponent, NgFor, NgIf, ReactiveFormsModule, CommonModule, RouterLink],\n  templateUrl: './account-page.component.html',\n  styleUrls: ['./account-page.component.scss']\n})\nexport class AccountPageComponent implements OnInit {\n  /**\n   * Данные аккаунта пользователя\n   */\n  protected accountData?: accountFullData;\n\n  /**\n   * Флаг открытия формы редактирования\n   */\n  protected isEditFormOpen = false;\n\n  /**\n   * Группа контролов формы редактирования\n   */\n  protected editForm!: FormGroup;\n\n  constructor(\n    private accountService: AccountService,\n    private router: Router,\n    private accountCookieService: AccountCookieService,\n    private imageServerControlService: ServerImageControlService,\n    private imageClientControlService: ClientImageControlService,\n    private authService: AuthService,\n    private notification: NotificationService\n  ) { }\n\n  /**\n   * Инициализация компонента\n   * Проверяет авторизацию и загружает данные пользователя,\n   * инициализирует форму редактирования\n   */\n  ngOnInit(): void {\n    this.checkAuthAndLoadData();\n    this.initEditForm();\n  }\n\n  /**\n   * Обновляет вторичные данные аккаунта (например, никнейм)\n   * @param jwt JWT токен пользователя\n   */\n  private async updateSecondaryAccountData(jwt: string) {\n    if (!this.accountData) return;\n\n    const CHANGE_DATA = {\n      jwt: jwt,\n      nickname: this.editForm.value.nickname!\n    };\n\n    try {\n      await this.accountService.PUTupdateSecondaryAccountData(CHANGE_DATA);\n      this.accountData.nickname = this.editForm.value.nickname!;\n      this.notification.setSuccess('Данные обновлены', 5000);\n    } catch (error) {\n      this.notification.setError('Ошибка обновления никнейма', 5000);\n      console.error(error);\n      throw error;\n    }\n  }\n\n  /**\n   * Сохраняет изменения данных аккаунта\n   */\n  protected async saveChanges() {\n    if (!this.accountData || !this.editForm.valid) {\n      this.notification.setError('Некорректные данные формы', 5000);\n      return;\n    }\n\n    const JWT = this.accountCookieService.getJwt();\n    const ACCOUNT_TYPE = this.accountCookieService.getUserType() as accountType;\n    if (!JWT || !ACCOUNT_TYPE) {\n      this.notification.setError('Ошибка аутентификации', 5000);\n      return;\n    }\n\n    try {\n      await this.updateSecondaryAccountData(JWT);\n      await this.updateBaseDataIfNeeded(JWT, ACCOUNT_TYPE);\n      this.closeEditForm();\n      this.notification.setSuccess('Данные обновлены', 5000);\n    } catch (error) {\n      this.notification.setError('Ошибка сохранения данных', 5000);\n      console.error(error);\n    }\n  }\n\n  /**\n   * Обновляет основные данные аккаунта, если это необходимо\n   * @param jwt JWT токен пользователя\n   * @param accountType Тип аккаунта ('email' или 'google')\n   */\n  private async updateBaseDataIfNeeded(jwt: string, accountType: accountType) {\n    if (this.accountData?.password === undefined || !this.editForm.value.password || accountType === 'google') return;\n\n    const CHANGE_DATA = {\n      jwt: jwt,\n      accountType: accountType,\n      password: this.editForm.value.password\n    };\n\n    try {\n      await this.authService.PUTupdateBaseData(CHANGE_DATA);\n      this.accountData.password = this.editForm.value.password;\n    } catch (error) {\n      this.notification.setError('Ошибка обновления пароля', 5000);\n      console.error(error);\n      throw error;\n    }\n  }\n\n  /**\n   * Загружает данные пользователя с сервера по JWT\n   * @param jwt JWT токен пользователя\n   */\n  private async loadUserData(jwt: string) {\n    try {\n      const ACCOUNT_DATA = (await this.accountService.GETaccount(jwt)).accountData;\n      this.accountData = {\n        email: ACCOUNT_DATA.email,\n        nickname: ACCOUNT_DATA.nickname,\n        projects: ACCOUNT_DATA.projects,\n        avatarUrl: this.imageServerControlService.GETaccountAvatar(jwt),\n        furnitures: ACCOUNT_DATA.furnitures\n      };\n\n      if (ACCOUNT_DATA.password !== undefined) {\n        this.accountData.password = ACCOUNT_DATA.password;\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  /**\n   * Обработка загрузки аватара пользователя\n   * @param event Событие выбора файла\n   */\n  protected async uploadAvatar(event: Event) {\n    const JWT = this.accountCookieService.getJwt();\n    if (!JWT || !this.accountData) {\n      return;\n    }\n\n    const TARGET = event.target as HTMLInputElement;\n    const FILE = TARGET.files?.[0];\n    if (!FILE) {\n      this.notification.setError('Файл не выбран', 5000);\n      return;\n    }\n\n    try {\n      const COMPRESSED_IMAGE = await this.imageClientControlService.compressImage(FILE);\n      if (!COMPRESSED_IMAGE) {\n        this.notification.setError('Ошибка сжатия изображения', 5000);\n        return;\n      }\n\n      await this.imageServerControlService.POSTuploadUserAvatar(COMPRESSED_IMAGE, JWT);\n      this.accountData.avatarUrl = URL.createObjectURL(COMPRESSED_IMAGE);\n      this.notification.setSuccess('Аватар обновлен', 5000);\n    } catch (error) {\n      this.notification.setError('Ошибка загрузки аватара', 5000);\n      console.error(error);\n    }\n  }\n\n  /**\n   * Проверяет авторизацию пользователя и загружает данные аккаунта\n   */\n  private checkAuthAndLoadData() {\n    const JWT = this.accountCookieService.getJwt();\n    if (!JWT) {\n      this.router.navigateByUrl('/login');\n      return;\n    }\n    this.loadUserData(JWT);\n  }\n\n  /**\n   * Инициализирует форму редактирования с валидаторами\n   */\n  private initEditForm() {\n    this.editForm = new FormGroup({\n      nickname: new FormControl(this.accountData?.nickname, [\n        Validators.required,\n        Validators.minLength(3),\n        Validators.maxLength(30)\n      ])\n    });\n\n    if (this.accountCookieService.getUserType() === 'email') {\n      this.editForm.addControl('password', new FormControl(this.accountData?.password, [\n        Validators.required,\n        Validators.minLength(6)\n      ]));\n    }\n  }\n\n  /**\n   * Открывает форму редактирования\n   */\n  protected openEditForm() {\n    if (!this.accountData) {\n      this.notification.setError('Данные пользователя не загружены', 5000);\n      return;\n    }\n    this.isEditFormOpen = true;\n  }\n\n  /**\n   * Закрывает форму редактирования и сбрасывает изменения\n   */\n  protected closeEditForm() {\n    this.isEditFormOpen = false;\n    if (this.accountData) {\n      // Важно: здесь не происходит обновления значений, а скорее попытка сравнить (исправить можно)\n      this.accountData.nickname != this.editForm.value.nickname;\n      if (this.accountData.password) {\n        this.accountData.password != this.editForm.value.password;\n      }\n    }\n    this.editForm.reset();\n  }\n\n  /**\n   * Открывает страницу проекта по id\n   * @param projectId ID проекта\n   */\n  protected openProject(projectId: number) {\n    this.router.navigateByUrl('/plan/' + projectId);\n  }\n\n  /**\n   * Выход из аккаунта:\n   * удаляет JWT и тип аккаунта из куков, вызывает удаление JWT на сервере,\n   * и перенаправляет на главную страницу\n   */\n  protected logout() {\n    const JWT = this.accountCookieService.getJwt();\n    if (JWT) this.accountService.DELETEaccountJwt(JWT);\n    this.accountCookieService.deleteJwt();\n    this.accountCookieService.deleteAccountType();\n    this.router.navigateByUrl('/');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/emailAuthData.html":{"url":"interfaces/emailAuthData.html","title":"interface - emailAuthData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  emailAuthData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Данные для аутентификации через email\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            accountType\n                                        \n                                \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accountType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accountType:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                            \n                                \n                                    Тип аккаунта - 'email'\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Email пользователя\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Пароль пользователя\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { accountType, changeAccountDataEmail, changeAccountData } from './account.service';\nimport { baseUrl } from '.';\nimport { isEmailAccount } from './account.service';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные для аутентификации через email\n */\nexport interface emailAuthData {\n  /** Email пользователя */\n  email: string;\n  /** Пароль пользователя */\n  password: string;\n  /** Тип аккаунта - 'email' */\n  accountType: 'email';\n}\n\n/**\n * Данные для аутентификации через Google\n */\nexport interface googleAuthData {\n  /** Тип аккаунта - 'google' */\n  accountType: 'google';\n}\n\n/**\n * Объединённый тип данных для аутентификации\n */\nexport type authData = googleAuthData | emailAuthData;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  /** Базовый URL для auth-роутов */\n  private baseServiceUrl = baseUrl + 'auth/';\n\n  constructor(\n    private httpModule: HttpClient\n  ) { }\n\n  /**\n   * Создание длинного JWT токена\n   * @param authData Данные для входа (email+пароль или google)\n   * @returns Promise с JWT токеном\n   */\n  POSTcreateLongJWT(authData: authData) {\n    let HTTP_PARAMS = new HttpParams()\n      .set('accountType', authData.accountType);\n\n    if (isEmailAccount(authData)) {\n      HTTP_PARAMS = HTTP_PARAMS\n        .set('email', authData.email)\n        .set('password', authData.password);\n    }\n\n    return firstValueFrom(this.httpModule.post(this.baseServiceUrl + 'jwt/long', HTTP_PARAMS)) as Promise;\n  }\n\n  /**\n   * Создание короткого (временного) JWT токена\n   * @param email Email пользователя\n   * @returns Promise с временным JWT токеном\n   */\n  POSTcreateShortJWT(email: string) {\n    let HTTP_PARAMS = new HttpParams()\n      .set('email', email);\n\n    return firstValueFrom(this.httpModule.post(this.baseServiceUrl + 'jwt/temporary',null, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Обновление базовой информации о пользователе\n   * @param changeData Новые данные для обновления аккаунта\n   * @returns Promise с сообщением об успехе обновления\n   */\n  PUTupdateBaseData(changeData: changeAccountData) {\n    const paramObject: any = {\n      accountType: changeData.accountType,\n      jwt: changeData.jwt\n    };\n\n    if (isEmailAccount(changeData)) {\n      paramObject.password = changeData.password;\n    }\n\n    const HTTP_PARAMS = new HttpParams({ fromObject: paramObject });\n    return firstValueFrom(this.httpModule.put(this.baseServiceUrl + 'account', changeData)) as Promise;\n  }\n\n  /**\n   * Запрос кода сброса пароля по email\n   * @param email Email пользователя\n   * @returns Promise с кодом для сброса пароля\n   */\n  GETrequestPasswordCode(email: string) {\n    let HTTP_PARAMS = new HttpParams()\n      .set('email', email);\n\n    return firstValueFrom(this.httpModule.get(this.baseServiceUrl + 'account/code', { params: HTTP_PARAMS })) as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/foundFurniture.html":{"url":"interfaces/foundFurniture.html","title":"interface - foundFurniture","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  foundFurniture\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/finder/finder.component.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс, описывающий найденную мебель.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            category\n                                        \n                                \n                                \n                                        \n                                            colorRequest\n                                        \n                                \n                                \n                                        \n                                            cost\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        category\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        category:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Категория мебели\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        colorRequest\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        colorRequest:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Цвет, указанный в запросе\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cost\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cost:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Цена мебели\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Уникальный идентификатор мебели\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Название мебели\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { NgClass, NgFor, NgIf } from '@angular/common';\nimport { AfterViewInit, Component, ElementRef, Renderer2 } from '@angular/core';\nimport { FinderService } from '../../services/finder.service';\nimport { ServerImageControlService } from '../../services/server-image-control.service';\nimport { ActivatedRoute, RouterLink } from '@angular/router';\nimport { checkDesktop } from '../../usable/reusable-functions.used';\nimport { CostFormatPipe } from '../../pipes/cost-format.pipe';\n\n/**\n * Интерфейс, описывающий найденную мебель.\n */\ninterface foundFurniture {\n  /** Название мебели */\n  name: string;\n  /** Цена мебели */\n  cost: number;\n  /** Цвет, указанный в запросе */\n  colorRequest: string;\n  /** Уникальный идентификатор мебели */\n  id: string;\n  /** Категория мебели */\n  category: string;\n}\n\n/**\n * Компонент поиска мебели.\n * Позволяет искать мебель по названию и отображать результаты.\n */\n@Component({\n  selector: 'app-finder',\n  standalone: true,\n  imports: [NgClass, NgFor, NgIf, RouterLink, CostFormatPipe, RouterLink],\n  templateUrl: './finder.component.html',\n  styleUrl: './finder.component.scss'\n})\nexport class FinderComponent implements AfterViewInit {\n  /**\n   * Ссылка на HTML-элемент с результатами поиска (список вариантов).\n   */\n  private variantsSpan!: HTMLSpanElement;\n\n  /**\n   * Ссылка на HTML-элемент текстового поля ввода.\n   */\n  private inputElement!: HTMLInputElement;\n\n  /**\n   * Массив найденных объектов мебели.\n   */\n  protected foundFurniture?: foundFurniture[];\n\n  /**\n   * Таймер для реализации дебаунса ввода.\n   */\n  private debounceTimer: any = null;\n\n  constructor(\n    private finderService: FinderService,\n    private elementRef: ElementRef,\n    private renderer: Renderer2,\n    private imageService: ServerImageControlService,\n    private route: ActivatedRoute\n  ) { }\n\n  /**\n   * Инициализация после рендера компонента:\n   * Получение необходимых DOM-элементов для управления поиском.\n   */\n  ngAfterViewInit(): void {\n    this.variantsSpan = this.elementRef.nativeElement.querySelector('.variantsSpan') as HTMLSpanElement;\n    this.inputElement = this.elementRef.nativeElement.querySelector('.finderInput') as HTMLInputElement;\n  }\n\n  /**\n   * Выполняет поиск мебели на сервере по заданной строке.\n   * @param findString Строка для поиска мебели\n   */\n  private async findFurnitures(findString: string) {\n    const RECEIVED_DATA = await this.finderService.GETfindFurnitures(findString) as foundFurniture[];\n    this.openFoundResultsList();\n\n    if (RECEIVED_DATA.length > 0) {\n      this.closeFoundResultsList();\n      setTimeout(() => {\n        this.foundFurniture = RECEIVED_DATA;\n        this.openFoundResultsList();\n      }, 400);\n    } else {\n      // Если результатов нет, очищаем массив foundFurniture\n      this.foundFurniture !== undefined ? this.foundFurniture.length = 0 : this.foundFurniture = [];\n    }\n  }\n\n  /**\n   * Открывает список найденных результатов (добавляет CSS класс).\n   */\n  private openFoundResultsList() {\n    if (!this.variantsSpan) return;\n    this.renderer.addClass(this.variantsSpan, 'variantsSpanOpen');\n  }\n\n  /**\n   * Закрывает список найденных результатов (удаляет CSS класс).\n   */\n  private closeFoundResultsList() {\n    if (!this.variantsSpan) return;\n    this.renderer.removeClass(this.variantsSpan, 'variantsSpanOpen');\n  }\n\n  /**\n   * Утилитная функция проверки, запущено ли приложение на десктопе.\n   */\n  protected checkDesktop = checkDesktop;\n\n  /**\n   * Очищает поле ввода и скрывает список результатов.\n   */\n  protected clearInput() {\n    this.inputElement.value = '';\n    this.inputProcess();\n    this.closeFoundResultsList();\n  }\n\n  /**\n   * Проверяет, находится ли пользователь на странице магазина.\n   * Если да, устанавливает в сервисе имя мебели.\n   * @param name Имя мебели для поиска\n   * @returns true если на странице магазина, иначе false\n   */\n  private checkShopPage(name: string): boolean {\n    let CURRENT_ROUTE = this.route.root;\n    while (CURRENT_ROUTE.firstChild) {\n      CURRENT_ROUTE = CURRENT_ROUTE.firstChild;\n    }\n    const pageName = CURRENT_ROUTE.snapshot.data['pageName'];\n    if (pageName === 'shop') {\n      this.finderService.setFurnitureName(name);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Обрабатывает ввод пользователя с задержкой (debounce).\n   * Запускает поиск, если введена строка.\n   */\n  protected inputProcess() {\n    const VALUE = this.inputElement.value;\n    clearTimeout(this.debounceTimer);\n    this.debounceTimer = setTimeout(() => {\n      if (VALUE.length === 0) {\n        if (this.checkShopPage(VALUE)) this.closeFoundResultsList();\n        return;\n      }\n      if (this.checkShopPage(VALUE)) return;\n\n      this.findFurnitures(VALUE);\n    }, 300);\n  }\n\n  /**\n   * Возвращает URL главного изображения мебели по id и цвету.\n   * @param idFurniture Идентификатор мебели\n   * @param color Цвет мебели\n   * @returns URL изображения\n   */\n  protected getImage(idFurniture: string, color: string): string {\n    return this.imageService.GETmainImage(idFurniture, color);\n  }\n\n  /**\n   * Формирует URL для перехода на страницу мебели.\n   * @param idFurniture Идентификатор мебели\n   * @param category Категория мебели\n   * @returns URL для маршрутизации\n   */\n  protected getUrl(idFurniture: string, category: string): string {\n    return `/shop/${category ?? 'all'}/${idFurniture}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            checkDesktop   (src/.../reusable-functions.used.ts)\n                        \n                        \n                            isEmailAccount   (src/.../account.service.ts)\n                        \n                        \n                            loadFBXModel   (src/.../fbx.loader.ts)\n                        \n                        \n                            loadGLTFModel   (src/.../gltf-glb.loader.ts)\n                        \n                        \n                            loadModel   (src/.../index.ts)\n                        \n                        \n                            loadOBJModel   (src/.../obj.loader.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/usable/reusable-functions.used.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        checkDesktop\n                        \n                    \n                \n            \n            \n                \ncheckDesktop()\n                \n            \n\n\n\n\n            \n                \n                        Проверяет, является ли устройство десктопом или нет\n\n\n                \n            \n        \n    \n    src/services/account.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isEmailAccount\n                        \n                    \n                \n            \n            \n                \nisEmailAccount(account)\n                \n            \n\n\n\n\n            \n                \n                        Функция-помощник для проверки, что аккаунт с типом email\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                account\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Объект аккаунта\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         changeAccountDataEmail\n\n                        \n                            \n                                true, если аккаунт с типом email\n\n                            \n                \n            \n        \n    \n    src/components/scene/loaders/loaders/fbx.loader.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        loadFBXModel\n                        \n                    \n                \n            \n            \n                \nloadFBXModel(url: string, manager?: LoadingManager)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                manager\n                                            \n                                                        LoadingManager\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/components/scene/loaders/loaders/gltf-glb.loader.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        loadGLTFModel\n                        \n                    \n                \n            \n            \n                \nloadGLTFModel(url: string, manager?: LoadingManager)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                manager\n                                            \n                                                        LoadingManager\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/components/scene/loaders/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        loadModel\n                        \n                    \n                \n            \n            \n                \nloadModel(blob: Blob, manager?: LoadingManager)\n                \n            \n\n\n\n\n            \n                \n                        Загружает 3D-модель из Blob-объекта, определяя её формат по MIME-типу.\nПоддерживаются форматы: glTF/glb, FBX, OBJ.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                blob\n                                            \n                                                        Blob\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nФайл модели в виде Blob.\n\n\n                                            \n                                        \n                                        \n                                                manager\n                                            \n                                                        LoadingManager\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nНеобязательный менеджер загрузки для отслеживания прогресса.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Загруженная 3D-модель как объект Three.js.\n\n                            \n                \n            \n        \n    \n    src/components/scene/loaders/loaders/obj.loader.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        loadOBJModel\n                        \n                    \n                \n            \n            \n                \nloadOBJModel(url: string, manager?: LoadingManager)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                manager\n                                            \n                                                        LoadingManager\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/furnitureAccountData.html":{"url":"interfaces/furnitureAccountData.html","title":"interface - furnitureAccountData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  furnitureAccountData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/account.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Данные по мебели, связанной с аккаунтом\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            _id\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            previewUrl\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        _id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        _id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Идентификатор мебели\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Название мебели\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        previewUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        previewUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    URL превью изображения мебели\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { projectInformation, projectServerInformation } from './project.service';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { AccountCookieService } from './account-cookie.service';\nimport { baseUrl } from '.';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные для изменения аккаунта с email\n */\nexport interface changeAccountDataEmail {\n  /** JWT токен */\n  jwt: string;\n  /** Тип аккаунта (email) */\n  accountType: 'email';\n  /** Пароль пользователя */\n  password: string;\n}\n\n/**\n * Полные данные аккаунта пользователя\n */\nexport interface accountFullData {\n  /** URL аватара */\n  avatarUrl: string;\n  /** Никнейм пользователя */\n  nickname: string;\n  /** Email пользователя */\n  email: string;\n  /** Массив проектов пользователя */\n  projects: projectInformation[];\n  /** Массив мебели, связанной с аккаунтом */\n  furnitures: furnitureAccountData[];\n  /** Пароль пользователя (необязательный) */\n  password?: string;\n}\n\n/**\n * Данные для изменения вторичных данных аккаунта\n */\nexport interface changeSecondaryData {\n  /** JWT токен */\n  jwt: string;\n  /** Новый никнейм */\n  nickname: string;\n}\n\n/**\n * Данные по мебели, связанной с аккаунтом\n */\nexport interface furnitureAccountData {\n  /** Идентификатор мебели */\n  _id: string;\n  /** Название мебели */\n  name: string;\n  /** URL превью изображения мебели */\n  previewUrl: string;\n}\n\n/** Тип аккаунта */\nexport type accountType = 'google' | 'email';\n\n/** Тип данных для изменения аккаунта (на данный момент только email) */\nexport type changeAccountData = changeAccountDataEmail;\n\n/**\n * Данные для создания аккаунта с email\n */\ninterface createEmailAccountData {\n  /** Email */\n  email: string;\n  /** Пароль */\n  password: string;\n  /** Никнейм */\n  nickname: string;\n  /** Тип аккаунта (email) */\n  accountType: 'email';\n}\n\n/** Тип данных для создания аккаунта */\nexport type createAccountData = createEmailAccountData;\n\n/**\n * Функция-помощник для проверки, что аккаунт с типом email\n * @param account Объект аккаунта\n * @returns true, если аккаунт с типом email\n */\nexport function isEmailAccount(account: { accountType: accountType }): account is changeAccountDataEmail {\n  return account.accountType === 'email';\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccountService {\n  /** Базовый URL для аккаунт-сервисов */\n  private baseServiceUrl = baseUrl + 'account';\n\n  constructor(\n    private httpModule: HttpClient,\n    private accountCookieService: AccountCookieService\n  ) { }\n\n  /**\n   * Создание нового пользователя\n   * @param createAccountData Основная информация о пользователе (никнейм, email, пароль)\n   * @returns Promise с сообщением об успешном создании пользователя\n   */\n  POSTcreateAccount(createAccountData: createAccountData) {\n    let HTTP_PARAMS = new HttpParams()\n      .set('accountType', createAccountData.accountType)\n      .set('nickname', createAccountData.nickname);\n\n    if (isEmailAccount(createAccountData)) {\n      HTTP_PARAMS = HTTP_PARAMS\n        .set('email', createAccountData.email)\n        .set('password', createAccountData.password);\n    }\n\n    return firstValueFrom(this.httpModule.post(this.baseServiceUrl, HTTP_PARAMS)) as Promise;\n  }\n\n  /**\n   * Удаление JWT токена пользователя\n   * @param jwt JWT токен\n   * @returns Promise с сообщением об успешном удалении токена\n   */\n  DELETEaccountJwt(jwt: string) {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt);\n    return firstValueFrom(this.httpModule.delete(this.baseServiceUrl + '/jwt/delete', { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Обновление вторичных данных аккаунта (например, никнейм)\n   * @param changeData Данные для изменения\n   * @returns Promise с сообщением об успешном обновлении\n   */\n  PUTupdateSecondaryAccountData(changeData: changeSecondaryData) {\n    const HTTP_PARAMS = new HttpParams({\n      fromObject: {\n        nickname: changeData.nickname,\n        jwt: changeData.jwt\n      }\n    });\n    return firstValueFrom(this.httpModule.put(this.baseServiceUrl, null, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Удаление аккаунта пользователя\n   * @param jwt JWT токен\n   * @returns Promise с сообщением об успешном удалении пользователя\n   */\n  DELETEaccount(jwt: string) {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt);\n    return firstValueFrom(this.httpModule.delete(this.baseServiceUrl, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Получение полной информации об аккаунте пользователя\n   * @param jwt JWT токен\n   * @returns Promise с данными аккаунта (включая проекты и мебель)\n   */\n  async GETaccount(jwt: string) {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt);\n    try {\n      let { accountData } = await firstValueFrom(this.httpModule.get(this.baseServiceUrl, { params: HTTP_PARAMS })) as { accountData: accountFullData & { projects: projectServerInformation[] } };\n      accountData.furnitures = accountData.furnitures.map(furnitureData => {\n        return {\n          ...furnitureData,\n          previewUrl: baseUrl + furnitureData.previewUrl\n        };\n      });\n      return { accountData: accountData };\n    } catch (error) {\n      console.error('Error in GETfurnitureCard:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Проверка наличия JWT токена в куках\n   * @returns true, если JWT токен найден, иначе false\n   */\n  checkJwt(): boolean {\n    return this.accountCookieService.getJwt() ? true : false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/furnitureBaseData.html":{"url":"interfaces/furnitureBaseData.html","title":"interface - furnitureBaseData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  furnitureBaseData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/furniture-card-control.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Базовые данные мебели, общие для клиента и сервера\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            additionalData\n                                        \n                                \n                                \n                                        \n                                            description\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            proportions\n                                        \n                                \n                                \n                                        \n                                            shops\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        additionalData\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        additionalData:         additionalData\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         additionalData\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Дополнительные данные\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Описание мебели\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Название мебели\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        proportions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        proportions:         furnitureProportions\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         furnitureProportions\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Пропорции мебели\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        shops\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        shops:         shopData[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         shopData[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Список магазинов с ценами и URL\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { imageSliderClientData, imageSliderFromServerData } from '../components/image-slider/image-slider.component';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные магазина с ценой и URL\n * @interface shopData\n */\nexport interface shopData {\n  /** Цена мебели */\n  cost: number;\n  /** URL магазина или товара */\n  url: string;\n}\n\n/**\n * Пропорции мебели (ширина, длина, высота)\n * @interface furnitureProportions\n */\nexport interface furnitureProportions {\n  /** Ширина мебели (или null, если не задана) */\n  width: number | null;\n  /** Длина мебели (или null, если не задана) */\n  length: number | null;\n  /** Высота мебели (или null, если не задана) */\n  height: number | null;\n}\n\n/**\n * Данные цвета на клиенте, включая слайдер изображений\n * @interface colorClientData\n */\nexport interface colorClientData {\n  /** Цвет мебели */\n  color: string;\n  /** Данные для слайдера изображений */\n  imagesData: imageSliderClientData;\n}\n\n/**\n * Данные цвета с сервера, включая слайдер изображений\n * @interface colorFromServerData\n */\nexport interface colorFromServerData {\n  /** Цвет мебели */\n  color: string;\n  /** Данные для слайдера изображений */\n  imagesData: imageSliderFromServerData;\n}\n\n/**\n * Дополнительные данные мебели с динамическими ключами\n * @interface additionalData\n */\nexport interface additionalData {\n  /** Категория мебели (опционально) */\n  category?: string;\n  /** Другие динамические свойства */\n  [key: string]: string | undefined;\n}\n\n/**\n * Базовые данные мебели, общие для клиента и сервера\n * @interface furnitureBaseData\n */\ninterface furnitureBaseData {\n  /** Название мебели */\n  name: string;\n  /** Описание мебели */\n  description: string;\n  /** Пропорции мебели */\n  proportions: furnitureProportions;\n  /** Список магазинов с ценами и URL */\n  shops: shopData[];\n  /** Дополнительные данные */\n  additionalData: additionalData;\n}\n\n/**\n * Данные мебели на клиенте с цветами\n * @interface furnitureClientData\n * @extends furnitureBaseData\n */\nexport interface furnitureClientData extends furnitureBaseData {\n  /** Список цветов с данными для клиента */\n  colors: colorClientData[];\n}\n\n/**\n * Данные мебели с сервера с цветами\n * @interface furnitureFromServerData\n * @extends furnitureBaseData\n */\nexport interface furnitureFromServerData extends furnitureBaseData {\n  /** Список цветов с данными с сервера */\n  colors: colorFromServerData[];\n}\n\n/**\n * Сервис для управления карточками мебели\n * @class FurnitureCardControlService\n * @injectable\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class FurnitureCardControlService {\n\n  /** Базовый URL для запросов к API мебели */\n  private baseServiceUrl = baseUrl + 'furniture/card';\n\n  /**\n   * Конструктор сервиса\n   * @param httpModule HTTP клиент для запросов\n   */\n  constructor(private httpModule: HttpClient) { }\n\n  /**\n   * Получение карточки мебели по ID и опциональному JWT токену\n   * @param furnitureCardId - ID карточки мебели\n   * @param [jwt] - JWT токен пользователя (опционально)\n   * @returns Promise с объектом, содержащим данные карточки и флаг совпадения автора\n   * @throws Ошибка при некорректной структуре ответа или при ошибках запроса\n   */\n  async GETfurnitureCard(\n    furnitureCardId: string,\n    jwt?: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams().set('furnitureCardId', furnitureCardId);\n\n    if (jwt !== undefined) {\n      HTTP_PARAMS = HTTP_PARAMS.set('jwt', jwt);\n    }\n\n    try {\n      const response = await firstValueFrom(\n        this.httpModule.get(this.baseServiceUrl, { params: HTTP_PARAMS })\n      ) as {\n        furnitureCard: furnitureFromServerData;\n        authorMatched: boolean;\n      };\n\n      if (!response?.furnitureCard) {\n        throw new Error('Invalid response structure: furnitureCard missing');\n      }\n\n      const transformedFurnitureCard = {\n        ...response.furnitureCard,\n        colors: response.furnitureCard.colors.map(colorData => ({\n          color: colorData.color,\n          imagesData: {\n            idMainImage: colorData.imagesData.idMainImage,\n            images: colorData.imagesData.images.map(url => baseUrl + url)\n          }\n        }))\n      };\n\n      return {\n        furnitureCard: transformedFurnitureCard,\n        authorMatched: response.authorMatched\n      };\n\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Создание новой карточки мебели\n   * @param furnitureData - Данные новой карточки мебели\n   * @param jwt - JWT токен пользователя\n   * @returns Promise с данными созданной карточки, включая её ID\n   */\n  POSTcreateFurnitureCard(\n    furnitureData: furnitureFromServerData,\n    jwt: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams().set('jwt', jwt);\n    return firstValueFrom(\n      this.httpModule.post(this.baseServiceUrl, furnitureData, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n\n  /**\n   * Обновление существующей карточки мебели\n   * @param furnitureCardUpdateData - Обновленные данные карточки мебели\n   * @param furnitureCardId - ID карточки мебели для обновления\n   * @param jwt - JWT токен пользователя\n   * @returns Promise с сообщением результата обновления\n   */\n  PUTupdateFurnitureCard(\n    furnitureCardUpdateData: furnitureFromServerData,\n    furnitureCardId: string,\n    jwt: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId);\n    return firstValueFrom(\n      this.httpModule.put(this.baseServiceUrl, furnitureCardUpdateData, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n\n  /**\n   * Удаление карточки мебели по ID и JWT токену\n   * @param jwt - JWT токен пользователя\n   * @param furnitureCardId - ID карточки мебели для удаления\n   * @returns Promise с сообщением результата удаления\n   */\n  DELETEfurnitureCard(jwt: string, furnitureCardId: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId);\n    return firstValueFrom(\n      this.httpModule.delete(this.baseServiceUrl, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/furnitureClientData.html":{"url":"interfaces/furnitureClientData.html","title":"interface - furnitureClientData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  furnitureClientData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/furniture-card-control.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Данные мебели на клиенте с цветами\n\n            \n\n            \n                Extends\n            \n            \n                            furnitureBaseData\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            colors\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        colors\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        colors:         colorClientData[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         colorClientData[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Список цветов с данными для клиента\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { imageSliderClientData, imageSliderFromServerData } from '../components/image-slider/image-slider.component';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные магазина с ценой и URL\n * @interface shopData\n */\nexport interface shopData {\n  /** Цена мебели */\n  cost: number;\n  /** URL магазина или товара */\n  url: string;\n}\n\n/**\n * Пропорции мебели (ширина, длина, высота)\n * @interface furnitureProportions\n */\nexport interface furnitureProportions {\n  /** Ширина мебели (или null, если не задана) */\n  width: number | null;\n  /** Длина мебели (или null, если не задана) */\n  length: number | null;\n  /** Высота мебели (или null, если не задана) */\n  height: number | null;\n}\n\n/**\n * Данные цвета на клиенте, включая слайдер изображений\n * @interface colorClientData\n */\nexport interface colorClientData {\n  /** Цвет мебели */\n  color: string;\n  /** Данные для слайдера изображений */\n  imagesData: imageSliderClientData;\n}\n\n/**\n * Данные цвета с сервера, включая слайдер изображений\n * @interface colorFromServerData\n */\nexport interface colorFromServerData {\n  /** Цвет мебели */\n  color: string;\n  /** Данные для слайдера изображений */\n  imagesData: imageSliderFromServerData;\n}\n\n/**\n * Дополнительные данные мебели с динамическими ключами\n * @interface additionalData\n */\nexport interface additionalData {\n  /** Категория мебели (опционально) */\n  category?: string;\n  /** Другие динамические свойства */\n  [key: string]: string | undefined;\n}\n\n/**\n * Базовые данные мебели, общие для клиента и сервера\n * @interface furnitureBaseData\n */\ninterface furnitureBaseData {\n  /** Название мебели */\n  name: string;\n  /** Описание мебели */\n  description: string;\n  /** Пропорции мебели */\n  proportions: furnitureProportions;\n  /** Список магазинов с ценами и URL */\n  shops: shopData[];\n  /** Дополнительные данные */\n  additionalData: additionalData;\n}\n\n/**\n * Данные мебели на клиенте с цветами\n * @interface furnitureClientData\n * @extends furnitureBaseData\n */\nexport interface furnitureClientData extends furnitureBaseData {\n  /** Список цветов с данными для клиента */\n  colors: colorClientData[];\n}\n\n/**\n * Данные мебели с сервера с цветами\n * @interface furnitureFromServerData\n * @extends furnitureBaseData\n */\nexport interface furnitureFromServerData extends furnitureBaseData {\n  /** Список цветов с данными с сервера */\n  colors: colorFromServerData[];\n}\n\n/**\n * Сервис для управления карточками мебели\n * @class FurnitureCardControlService\n * @injectable\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class FurnitureCardControlService {\n\n  /** Базовый URL для запросов к API мебели */\n  private baseServiceUrl = baseUrl + 'furniture/card';\n\n  /**\n   * Конструктор сервиса\n   * @param httpModule HTTP клиент для запросов\n   */\n  constructor(private httpModule: HttpClient) { }\n\n  /**\n   * Получение карточки мебели по ID и опциональному JWT токену\n   * @param furnitureCardId - ID карточки мебели\n   * @param [jwt] - JWT токен пользователя (опционально)\n   * @returns Promise с объектом, содержащим данные карточки и флаг совпадения автора\n   * @throws Ошибка при некорректной структуре ответа или при ошибках запроса\n   */\n  async GETfurnitureCard(\n    furnitureCardId: string,\n    jwt?: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams().set('furnitureCardId', furnitureCardId);\n\n    if (jwt !== undefined) {\n      HTTP_PARAMS = HTTP_PARAMS.set('jwt', jwt);\n    }\n\n    try {\n      const response = await firstValueFrom(\n        this.httpModule.get(this.baseServiceUrl, { params: HTTP_PARAMS })\n      ) as {\n        furnitureCard: furnitureFromServerData;\n        authorMatched: boolean;\n      };\n\n      if (!response?.furnitureCard) {\n        throw new Error('Invalid response structure: furnitureCard missing');\n      }\n\n      const transformedFurnitureCard = {\n        ...response.furnitureCard,\n        colors: response.furnitureCard.colors.map(colorData => ({\n          color: colorData.color,\n          imagesData: {\n            idMainImage: colorData.imagesData.idMainImage,\n            images: colorData.imagesData.images.map(url => baseUrl + url)\n          }\n        }))\n      };\n\n      return {\n        furnitureCard: transformedFurnitureCard,\n        authorMatched: response.authorMatched\n      };\n\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Создание новой карточки мебели\n   * @param furnitureData - Данные новой карточки мебели\n   * @param jwt - JWT токен пользователя\n   * @returns Promise с данными созданной карточки, включая её ID\n   */\n  POSTcreateFurnitureCard(\n    furnitureData: furnitureFromServerData,\n    jwt: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams().set('jwt', jwt);\n    return firstValueFrom(\n      this.httpModule.post(this.baseServiceUrl, furnitureData, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n\n  /**\n   * Обновление существующей карточки мебели\n   * @param furnitureCardUpdateData - Обновленные данные карточки мебели\n   * @param furnitureCardId - ID карточки мебели для обновления\n   * @param jwt - JWT токен пользователя\n   * @returns Promise с сообщением результата обновления\n   */\n  PUTupdateFurnitureCard(\n    furnitureCardUpdateData: furnitureFromServerData,\n    furnitureCardId: string,\n    jwt: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId);\n    return firstValueFrom(\n      this.httpModule.put(this.baseServiceUrl, furnitureCardUpdateData, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n\n  /**\n   * Удаление карточки мебели по ID и JWT токену\n   * @param jwt - JWT токен пользователя\n   * @param furnitureCardId - ID карточки мебели для удаления\n   * @returns Promise с сообщением результата удаления\n   */\n  DELETEfurnitureCard(jwt: string, furnitureCardId: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId);\n    return firstValueFrom(\n      this.httpModule.delete(this.baseServiceUrl, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/furnitureFromServerData.html":{"url":"interfaces/furnitureFromServerData.html","title":"interface - furnitureFromServerData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  furnitureFromServerData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/furniture-card-control.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Данные мебели с сервера с цветами\n\n            \n\n            \n                Extends\n            \n            \n                            furnitureBaseData\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            colors\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        colors\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        colors:         colorFromServerData[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         colorFromServerData[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Список цветов с данными с сервера\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { imageSliderClientData, imageSliderFromServerData } from '../components/image-slider/image-slider.component';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные магазина с ценой и URL\n * @interface shopData\n */\nexport interface shopData {\n  /** Цена мебели */\n  cost: number;\n  /** URL магазина или товара */\n  url: string;\n}\n\n/**\n * Пропорции мебели (ширина, длина, высота)\n * @interface furnitureProportions\n */\nexport interface furnitureProportions {\n  /** Ширина мебели (или null, если не задана) */\n  width: number | null;\n  /** Длина мебели (или null, если не задана) */\n  length: number | null;\n  /** Высота мебели (или null, если не задана) */\n  height: number | null;\n}\n\n/**\n * Данные цвета на клиенте, включая слайдер изображений\n * @interface colorClientData\n */\nexport interface colorClientData {\n  /** Цвет мебели */\n  color: string;\n  /** Данные для слайдера изображений */\n  imagesData: imageSliderClientData;\n}\n\n/**\n * Данные цвета с сервера, включая слайдер изображений\n * @interface colorFromServerData\n */\nexport interface colorFromServerData {\n  /** Цвет мебели */\n  color: string;\n  /** Данные для слайдера изображений */\n  imagesData: imageSliderFromServerData;\n}\n\n/**\n * Дополнительные данные мебели с динамическими ключами\n * @interface additionalData\n */\nexport interface additionalData {\n  /** Категория мебели (опционально) */\n  category?: string;\n  /** Другие динамические свойства */\n  [key: string]: string | undefined;\n}\n\n/**\n * Базовые данные мебели, общие для клиента и сервера\n * @interface furnitureBaseData\n */\ninterface furnitureBaseData {\n  /** Название мебели */\n  name: string;\n  /** Описание мебели */\n  description: string;\n  /** Пропорции мебели */\n  proportions: furnitureProportions;\n  /** Список магазинов с ценами и URL */\n  shops: shopData[];\n  /** Дополнительные данные */\n  additionalData: additionalData;\n}\n\n/**\n * Данные мебели на клиенте с цветами\n * @interface furnitureClientData\n * @extends furnitureBaseData\n */\nexport interface furnitureClientData extends furnitureBaseData {\n  /** Список цветов с данными для клиента */\n  colors: colorClientData[];\n}\n\n/**\n * Данные мебели с сервера с цветами\n * @interface furnitureFromServerData\n * @extends furnitureBaseData\n */\nexport interface furnitureFromServerData extends furnitureBaseData {\n  /** Список цветов с данными с сервера */\n  colors: colorFromServerData[];\n}\n\n/**\n * Сервис для управления карточками мебели\n * @class FurnitureCardControlService\n * @injectable\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class FurnitureCardControlService {\n\n  /** Базовый URL для запросов к API мебели */\n  private baseServiceUrl = baseUrl + 'furniture/card';\n\n  /**\n   * Конструктор сервиса\n   * @param httpModule HTTP клиент для запросов\n   */\n  constructor(private httpModule: HttpClient) { }\n\n  /**\n   * Получение карточки мебели по ID и опциональному JWT токену\n   * @param furnitureCardId - ID карточки мебели\n   * @param [jwt] - JWT токен пользователя (опционально)\n   * @returns Promise с объектом, содержащим данные карточки и флаг совпадения автора\n   * @throws Ошибка при некорректной структуре ответа или при ошибках запроса\n   */\n  async GETfurnitureCard(\n    furnitureCardId: string,\n    jwt?: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams().set('furnitureCardId', furnitureCardId);\n\n    if (jwt !== undefined) {\n      HTTP_PARAMS = HTTP_PARAMS.set('jwt', jwt);\n    }\n\n    try {\n      const response = await firstValueFrom(\n        this.httpModule.get(this.baseServiceUrl, { params: HTTP_PARAMS })\n      ) as {\n        furnitureCard: furnitureFromServerData;\n        authorMatched: boolean;\n      };\n\n      if (!response?.furnitureCard) {\n        throw new Error('Invalid response structure: furnitureCard missing');\n      }\n\n      const transformedFurnitureCard = {\n        ...response.furnitureCard,\n        colors: response.furnitureCard.colors.map(colorData => ({\n          color: colorData.color,\n          imagesData: {\n            idMainImage: colorData.imagesData.idMainImage,\n            images: colorData.imagesData.images.map(url => baseUrl + url)\n          }\n        }))\n      };\n\n      return {\n        furnitureCard: transformedFurnitureCard,\n        authorMatched: response.authorMatched\n      };\n\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Создание новой карточки мебели\n   * @param furnitureData - Данные новой карточки мебели\n   * @param jwt - JWT токен пользователя\n   * @returns Promise с данными созданной карточки, включая её ID\n   */\n  POSTcreateFurnitureCard(\n    furnitureData: furnitureFromServerData,\n    jwt: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams().set('jwt', jwt);\n    return firstValueFrom(\n      this.httpModule.post(this.baseServiceUrl, furnitureData, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n\n  /**\n   * Обновление существующей карточки мебели\n   * @param furnitureCardUpdateData - Обновленные данные карточки мебели\n   * @param furnitureCardId - ID карточки мебели для обновления\n   * @param jwt - JWT токен пользователя\n   * @returns Promise с сообщением результата обновления\n   */\n  PUTupdateFurnitureCard(\n    furnitureCardUpdateData: furnitureFromServerData,\n    furnitureCardId: string,\n    jwt: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId);\n    return firstValueFrom(\n      this.httpModule.put(this.baseServiceUrl, furnitureCardUpdateData, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n\n  /**\n   * Удаление карточки мебели по ID и JWT токену\n   * @param jwt - JWT токен пользователя\n   * @param furnitureCardId - ID карточки мебели для удаления\n   * @returns Promise с сообщением результата удаления\n   */\n  DELETEfurnitureCard(jwt: string, furnitureCardId: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId);\n    return firstValueFrom(\n      this.httpModule.delete(this.baseServiceUrl, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/furnitureProportions.html":{"url":"interfaces/furnitureProportions.html","title":"interface - furnitureProportions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  furnitureProportions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/furniture-card-control.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Пропорции мебели (ширина, длина, высота)\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            height\n                                        \n                                \n                                \n                                        \n                                            length\n                                        \n                                \n                                \n                                        \n                                            width\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        height:     number | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | null\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Высота мебели (или null, если не задана)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        length\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        length:     number | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | null\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Длина мебели (или null, если не задана)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        width:     number | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | null\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Ширина мебели (или null, если не задана)\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { imageSliderClientData, imageSliderFromServerData } from '../components/image-slider/image-slider.component';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные магазина с ценой и URL\n * @interface shopData\n */\nexport interface shopData {\n  /** Цена мебели */\n  cost: number;\n  /** URL магазина или товара */\n  url: string;\n}\n\n/**\n * Пропорции мебели (ширина, длина, высота)\n * @interface furnitureProportions\n */\nexport interface furnitureProportions {\n  /** Ширина мебели (или null, если не задана) */\n  width: number | null;\n  /** Длина мебели (или null, если не задана) */\n  length: number | null;\n  /** Высота мебели (или null, если не задана) */\n  height: number | null;\n}\n\n/**\n * Данные цвета на клиенте, включая слайдер изображений\n * @interface colorClientData\n */\nexport interface colorClientData {\n  /** Цвет мебели */\n  color: string;\n  /** Данные для слайдера изображений */\n  imagesData: imageSliderClientData;\n}\n\n/**\n * Данные цвета с сервера, включая слайдер изображений\n * @interface colorFromServerData\n */\nexport interface colorFromServerData {\n  /** Цвет мебели */\n  color: string;\n  /** Данные для слайдера изображений */\n  imagesData: imageSliderFromServerData;\n}\n\n/**\n * Дополнительные данные мебели с динамическими ключами\n * @interface additionalData\n */\nexport interface additionalData {\n  /** Категория мебели (опционально) */\n  category?: string;\n  /** Другие динамические свойства */\n  [key: string]: string | undefined;\n}\n\n/**\n * Базовые данные мебели, общие для клиента и сервера\n * @interface furnitureBaseData\n */\ninterface furnitureBaseData {\n  /** Название мебели */\n  name: string;\n  /** Описание мебели */\n  description: string;\n  /** Пропорции мебели */\n  proportions: furnitureProportions;\n  /** Список магазинов с ценами и URL */\n  shops: shopData[];\n  /** Дополнительные данные */\n  additionalData: additionalData;\n}\n\n/**\n * Данные мебели на клиенте с цветами\n * @interface furnitureClientData\n * @extends furnitureBaseData\n */\nexport interface furnitureClientData extends furnitureBaseData {\n  /** Список цветов с данными для клиента */\n  colors: colorClientData[];\n}\n\n/**\n * Данные мебели с сервера с цветами\n * @interface furnitureFromServerData\n * @extends furnitureBaseData\n */\nexport interface furnitureFromServerData extends furnitureBaseData {\n  /** Список цветов с данными с сервера */\n  colors: colorFromServerData[];\n}\n\n/**\n * Сервис для управления карточками мебели\n * @class FurnitureCardControlService\n * @injectable\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class FurnitureCardControlService {\n\n  /** Базовый URL для запросов к API мебели */\n  private baseServiceUrl = baseUrl + 'furniture/card';\n\n  /**\n   * Конструктор сервиса\n   * @param httpModule HTTP клиент для запросов\n   */\n  constructor(private httpModule: HttpClient) { }\n\n  /**\n   * Получение карточки мебели по ID и опциональному JWT токену\n   * @param furnitureCardId - ID карточки мебели\n   * @param [jwt] - JWT токен пользователя (опционально)\n   * @returns Promise с объектом, содержащим данные карточки и флаг совпадения автора\n   * @throws Ошибка при некорректной структуре ответа или при ошибках запроса\n   */\n  async GETfurnitureCard(\n    furnitureCardId: string,\n    jwt?: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams().set('furnitureCardId', furnitureCardId);\n\n    if (jwt !== undefined) {\n      HTTP_PARAMS = HTTP_PARAMS.set('jwt', jwt);\n    }\n\n    try {\n      const response = await firstValueFrom(\n        this.httpModule.get(this.baseServiceUrl, { params: HTTP_PARAMS })\n      ) as {\n        furnitureCard: furnitureFromServerData;\n        authorMatched: boolean;\n      };\n\n      if (!response?.furnitureCard) {\n        throw new Error('Invalid response structure: furnitureCard missing');\n      }\n\n      const transformedFurnitureCard = {\n        ...response.furnitureCard,\n        colors: response.furnitureCard.colors.map(colorData => ({\n          color: colorData.color,\n          imagesData: {\n            idMainImage: colorData.imagesData.idMainImage,\n            images: colorData.imagesData.images.map(url => baseUrl + url)\n          }\n        }))\n      };\n\n      return {\n        furnitureCard: transformedFurnitureCard,\n        authorMatched: response.authorMatched\n      };\n\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Создание новой карточки мебели\n   * @param furnitureData - Данные новой карточки мебели\n   * @param jwt - JWT токен пользователя\n   * @returns Promise с данными созданной карточки, включая её ID\n   */\n  POSTcreateFurnitureCard(\n    furnitureData: furnitureFromServerData,\n    jwt: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams().set('jwt', jwt);\n    return firstValueFrom(\n      this.httpModule.post(this.baseServiceUrl, furnitureData, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n\n  /**\n   * Обновление существующей карточки мебели\n   * @param furnitureCardUpdateData - Обновленные данные карточки мебели\n   * @param furnitureCardId - ID карточки мебели для обновления\n   * @param jwt - JWT токен пользователя\n   * @returns Promise с сообщением результата обновления\n   */\n  PUTupdateFurnitureCard(\n    furnitureCardUpdateData: furnitureFromServerData,\n    furnitureCardId: string,\n    jwt: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId);\n    return firstValueFrom(\n      this.httpModule.put(this.baseServiceUrl, furnitureCardUpdateData, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n\n  /**\n   * Удаление карточки мебели по ID и JWT токену\n   * @param jwt - JWT токен пользователя\n   * @param furnitureCardId - ID карточки мебели для удаления\n   * @returns Promise с сообщением результата удаления\n   */\n  DELETEfurnitureCard(jwt: string, furnitureCardId: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId);\n    return firstValueFrom(\n      this.httpModule.delete(this.baseServiceUrl, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/furnitureShopData.html":{"url":"interfaces/furnitureShopData.html","title":"interface - furnitureShopData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  furnitureShopData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/shop.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс данных о мебели, получаемых из магазина.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            colors\n                                        \n                                \n                                \n                                        \n                                            cost\n                                        \n                                \n                                \n                                        \n                                            furnitureCardId\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            previewUrl\n                                        \n                                \n                                \n                                        \n                                            proportions\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        colors\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        colors:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Массив цветов мебели\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cost\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cost:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Стоимость мебели\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        furnitureCardId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        furnitureCardId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Id мебели\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Название\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        previewUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        previewUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Неполный Url превью (вначало надо вставить baseUrl сервера)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        proportions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        proportions:         modelInterface\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         modelInterface\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Габариты мебели\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { firstValueFrom } from 'rxjs';\nimport { modelInterface } from '../components/scene/scene.component';\n\n/**\n * Интерфейс объекта фильтров, отправляемых на сервер.\n*/\nexport interface queryData {\n  /** Любое ключ:значение */\n  [key: string]: optionSelectQueryData | optionRangeQueryData;\n}\n\n/**\n * Фильтр типа \"выбор из списка\".\n */\ninterface optionSelectQueryData {\n  /** Тип фильтра */\n  type: 'select';\n  /** Выбранные значения */\n  value: string[];\n}\n\n/**\n * Фильтр типа \"диапазон значений\".\n*/\ninterface optionRangeQueryData {\n  /** Тип фильтра */\n  type: 'range';\n  /** Минимум в диапазоне */\n  min: number;\n  /** Максимум в диапазоне */\n  max: number;\n}\n\n/**\n * Интерфейс данных о мебели, получаемых из магазина.\n */\nexport interface furnitureShopData {\n  /** Название */\n  name: string;\n  /** Стоимость мебели */\n  cost: number;\n  /** Неполный Url превью (вначало надо вставить baseUrl сервера) */\n  previewUrl: string;\n  /** Id мебели */\n  furnitureCardId: string;\n  /** Массив цветов мебели */\n  colors: string[];\n  /** Габариты мебели */\n  proportions: modelInterface;\n}\n\n/**\n * Интерфейс клиентских фильтров, значения которых формируются на основе ответа от сервера.\n */\nexport interface clientFilters {\n  /** Цвета мебели */\n  colors: string[];\n  /** Минимальная стоимость */\n  minCost: number;\n  /** Максимальная стоимость */\n  maxCost: number;\n}\n\n/**\n * Сервис для получения данных о мебели из магазина, с учетом фильтрации и пагинации.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ShopService {\n  /** Базовый URL сервиса */\n  private baseServiceUrl = baseUrl + 'shop';\n\n  /** Активный AbortController для отмены предыдущих запросов */\n  private abortController: AbortController | null = null;\n\n  constructor(private httpModule: HttpClient) { }\n\n  /**\n   * Выполняет GET-запрос на получение данных по категории мебели.\n   * Поддерживает фильтрацию и стартовую позицию для пагинации.\n   * При повторном вызове отменяет предыдущий запрос.\n   *\n   * @param categoryName - Название категории мебели.\n   * @param startRange - Начальный индекс (offset) выборки.\n   * @param queryData - Объект фильтров (опционально).\n   *\n   * @returns Промис с объектом, содержащим:\n   * - `resultsArray`: массив карточек мебели с обновлёнными URL превью\n   * - `resultsClientFiltersData`: агрегированные данные фильтров для клиента\n   *\n   * @throws {Error} В случае сетевой ошибки или отмены запроса.\n   */\n  async GETgetCategoryData(categoryName: string, startRange: number, queryData?: queryData) {\n    if (this.abortController) {\n      this.abortController.abort();\n    }\n\n    this.abortController = new AbortController();\n\n    try {\n      let requestUrl = `${this.baseServiceUrl}?category=${categoryName}&startRange=${startRange}`;\n\n      if (queryData && Object.keys(queryData).length > 0) {\n        const params = new URLSearchParams();\n        params.append('filters', JSON.stringify(queryData));\n        requestUrl += `&${new URLSearchParams(params).toString()}`;\n      }\n\n      const response = await fetch(\n        requestUrl,\n        { signal: this.abortController.signal }\n      );\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Ошибка: ${response.status} — ${errorText}`);\n      }\n\n      const RESPONSE = await response.json() as { resultsArray: furnitureShopData[] };\n      const RESULTS_ARRAY = RESPONSE.resultsArray;\n\n      const UPDATED_RESULTS = RESULTS_ARRAY.map(furniture => ({\n        ...furniture,\n        previewUrl: baseUrl + furniture.previewUrl\n      }));\n\n      return {\n        resultsArray: UPDATED_RESULTS,\n        resultsClientFiltersData: this.getFindOptionsByResult(UPDATED_RESULTS)\n      };\n\n    } catch (error: any) {\n      if (error.name === 'AbortError') {\n      } else {\n        console.error('Ошибка запроса:', error);\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Формирует объект фильтров на основе полученных данных о мебели.\n   *\n   * @param resultsArray - Массив карточек мебели\n   * @returns Объект клиентских фильтров (цвета, минимальная и максимальная цена)\n   */\n  private getFindOptionsByResult(resultsArray: furnitureShopData[]) {\n    let filtersObject: clientFilters = {\n      colors: [],\n      minCost: Infinity,\n      maxCost: -Infinity\n    };\n\n    resultsArray.forEach(furnitureData => {\n      if (furnitureData.cost  filtersObject.maxCost) filtersObject.maxCost = furnitureData.cost;\n\n      filtersObject.colors.push(...furnitureData.colors);\n    });\n\n    filtersObject.minCost = filtersObject.minCost!== Infinity ? filtersObject.minCost : 0;\n    filtersObject.maxCost = filtersObject.maxCost!== -Infinity ? filtersObject.maxCost : 0;\n\n    filtersObject.colors = [...new Set(filtersObject.colors)];\n    return filtersObject;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/googleAuthData.html":{"url":"interfaces/googleAuthData.html","title":"interface - googleAuthData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  googleAuthData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Данные для аутентификации через Google\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            accountType\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accountType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accountType:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                            \n                                \n                                    Тип аккаунта - 'google'\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { accountType, changeAccountDataEmail, changeAccountData } from './account.service';\nimport { baseUrl } from '.';\nimport { isEmailAccount } from './account.service';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные для аутентификации через email\n */\nexport interface emailAuthData {\n  /** Email пользователя */\n  email: string;\n  /** Пароль пользователя */\n  password: string;\n  /** Тип аккаунта - 'email' */\n  accountType: 'email';\n}\n\n/**\n * Данные для аутентификации через Google\n */\nexport interface googleAuthData {\n  /** Тип аккаунта - 'google' */\n  accountType: 'google';\n}\n\n/**\n * Объединённый тип данных для аутентификации\n */\nexport type authData = googleAuthData | emailAuthData;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  /** Базовый URL для auth-роутов */\n  private baseServiceUrl = baseUrl + 'auth/';\n\n  constructor(\n    private httpModule: HttpClient\n  ) { }\n\n  /**\n   * Создание длинного JWT токена\n   * @param authData Данные для входа (email+пароль или google)\n   * @returns Promise с JWT токеном\n   */\n  POSTcreateLongJWT(authData: authData) {\n    let HTTP_PARAMS = new HttpParams()\n      .set('accountType', authData.accountType);\n\n    if (isEmailAccount(authData)) {\n      HTTP_PARAMS = HTTP_PARAMS\n        .set('email', authData.email)\n        .set('password', authData.password);\n    }\n\n    return firstValueFrom(this.httpModule.post(this.baseServiceUrl + 'jwt/long', HTTP_PARAMS)) as Promise;\n  }\n\n  /**\n   * Создание короткого (временного) JWT токена\n   * @param email Email пользователя\n   * @returns Promise с временным JWT токеном\n   */\n  POSTcreateShortJWT(email: string) {\n    let HTTP_PARAMS = new HttpParams()\n      .set('email', email);\n\n    return firstValueFrom(this.httpModule.post(this.baseServiceUrl + 'jwt/temporary',null, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Обновление базовой информации о пользователе\n   * @param changeData Новые данные для обновления аккаунта\n   * @returns Promise с сообщением об успехе обновления\n   */\n  PUTupdateBaseData(changeData: changeAccountData) {\n    const paramObject: any = {\n      accountType: changeData.accountType,\n      jwt: changeData.jwt\n    };\n\n    if (isEmailAccount(changeData)) {\n      paramObject.password = changeData.password;\n    }\n\n    const HTTP_PARAMS = new HttpParams({ fromObject: paramObject });\n    return firstValueFrom(this.httpModule.put(this.baseServiceUrl + 'account', changeData)) as Promise;\n  }\n\n  /**\n   * Запрос кода сброса пароля по email\n   * @param email Email пользователя\n   * @returns Promise с кодом для сброса пароля\n   */\n  GETrequestPasswordCode(email: string) {\n    let HTTP_PARAMS = new HttpParams()\n      .set('email', email);\n\n    return firstValueFrom(this.httpModule.get(this.baseServiceUrl + 'account/code', { params: HTTP_PARAMS })) as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/imageSliderClientData.html":{"url":"interfaces/imageSliderClientData.html","title":"interface - imageSliderClientData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  imageSliderClientData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/image-slider/image-slider.component.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс данных для слайдера с клиентскими изображениями в формате Blob.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            idMainImage\n                                        \n                                \n                                \n                                        \n                                            images\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        idMainImage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        idMainImage:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Индекс главного (выбранного) изображения\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        images\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        images:     Blob[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Blob[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Массив изображений в формате Blob\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Component, HostListener, Input, OnInit } from '@angular/core';\nimport { NgIf, NgFor } from '@angular/common';\nimport { TuiCarousel } from '@taiga-ui/kit';\n\n/**\n * Интерфейс данных для слайдера с клиентскими изображениями в формате Blob.\n */\nexport interface imageSliderClientData {\n  /** Массив изображений в формате Blob */\n  images: Blob[];\n  /** Индекс главного (выбранного) изображения */\n  idMainImage: number;\n}\n\n/**\n * Интерфейс данных для слайдера с изображениями с сервера в виде URL-строк.\n */\nexport interface imageSliderFromServerData {\n  /** Массив URL-строк изображений */\n  images: string[];\n  /** Индекс главного (выбранного) изображения */\n  idMainImage: number;\n}\n\n/**\n * Компонент слайдера изображений.\n * Отображает изображения с возможностью выбора главного изображения.\n */\n@Component({\n  selector: 'app-image-slider',\n  standalone: true,\n  imports: [NgIf, NgFor, TuiCarousel],\n  templateUrl: './image-slider.component.html',\n  styleUrl: './image-slider.component.scss'\n})\nexport class ImageSliderComponent implements OnInit {\n  /**\n   * Текущий индекс выбранного слайда (используется для локального отслеживания).\n   */\n  protected index: number = 0;\n\n  /**\n   * Флаг, указывающий, находится ли текущее отображение в мобильном виде (ширина \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/imageSliderFromServerData.html":{"url":"interfaces/imageSliderFromServerData.html","title":"interface - imageSliderFromServerData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  imageSliderFromServerData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/image-slider/image-slider.component.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс данных для слайдера с изображениями с сервера в виде URL-строк.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            idMainImage\n                                        \n                                \n                                \n                                        \n                                            images\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        idMainImage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        idMainImage:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Индекс главного (выбранного) изображения\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        images\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        images:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Массив URL-строк изображений\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Component, HostListener, Input, OnInit } from '@angular/core';\nimport { NgIf, NgFor } from '@angular/common';\nimport { TuiCarousel } from '@taiga-ui/kit';\n\n/**\n * Интерфейс данных для слайдера с клиентскими изображениями в формате Blob.\n */\nexport interface imageSliderClientData {\n  /** Массив изображений в формате Blob */\n  images: Blob[];\n  /** Индекс главного (выбранного) изображения */\n  idMainImage: number;\n}\n\n/**\n * Интерфейс данных для слайдера с изображениями с сервера в виде URL-строк.\n */\nexport interface imageSliderFromServerData {\n  /** Массив URL-строк изображений */\n  images: string[];\n  /** Индекс главного (выбранного) изображения */\n  idMainImage: number;\n}\n\n/**\n * Компонент слайдера изображений.\n * Отображает изображения с возможностью выбора главного изображения.\n */\n@Component({\n  selector: 'app-image-slider',\n  standalone: true,\n  imports: [NgIf, NgFor, TuiCarousel],\n  templateUrl: './image-slider.component.html',\n  styleUrl: './image-slider.component.scss'\n})\nexport class ImageSliderComponent implements OnInit {\n  /**\n   * Текущий индекс выбранного слайда (используется для локального отслеживания).\n   */\n  protected index: number = 0;\n\n  /**\n   * Флаг, указывающий, находится ли текущее отображение в мобильном виде (ширина \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    16 Components\n                \n            \n        \n        \n            \n                \n                    \n                    1 Directive\n                \n            \n        \n        \n            \n                \n                    \n                    14 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    1 Pipe\n                \n            \n        \n        \n            \n                \n                    \n                    41 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/modelInterface.html":{"url":"interfaces/modelInterface.html","title":"interface - modelInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  modelInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/scene/scene.component.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс для описания размеров модели.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            height\n                                        \n                                \n                                \n                                        \n                                            length\n                                        \n                                \n                                \n                                        \n                                            width\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        height:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Высота модели\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        length\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        length:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Длина модели\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        width:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Ширина модели\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Component, AfterViewInit, ElementRef, HostListener, Input, SimpleChanges, Output, EventEmitter, OnChanges, OnDestroy, Renderer2 } from '@angular/core';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { ProjectService, roomData as roomDataPlan } from '../../services/project.service';\nimport { loadModel } from './loaders';\nimport { FurnitureModelControlService } from '../../services/furniture-model-control.service';\nimport { AccountCookieService } from '../../services/account-cookie.service';\nimport { FurnitureCardControlService } from '../../services/furniture-card-control.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { NotificationService } from '../../services/notification.service';\nimport { Location, NgIf } from '@angular/common';\nimport { PlanHouseComponent } from '../plan-house/plan-house.component';\n\n/**\n * Интерфейс для описания размеров модели.\n */\nexport interface modelInterface {\n  /** Ширина модели */\n  width: number;\n  /** Высота модели */\n  height: number;\n  /** Длина модели */\n  length: number;\n}\n\n/**\n * Интерфейс для описания объекта сцены.\n */\nexport interface objectSceneInterface {\n  /** ID объекта */\n  objectId: string;\n  /** Расстояние по оси X в метрах */\n  xMetersDistance: number;\n  /** Расстояние по оси Z в метрах */\n  zMetersDistance: number;\n  /** Угол поворота по оси Y */\n  yRotate: number;\n}\n\n/**\n * Интерфейс для описания данных загрузки объекта.\n */\ninterface objectLoadInterface {\n  /** Расстояние по оси X */\n  xDistance: number;\n  /** Расстояние по оси Z */\n  zDistance: number;\n  /** Угол поворота по оси Y */\n  yRotate: number;\n}\n\n/**\n * Интерфейс для описания данных комнаты.\n */\ninterface roomData extends modelInterface {\n  /** Массив объектов в комнате */\n  objects: objectSceneInterface[];\n}\n\n@Component({\n  selector: 'app-scene',\n  standalone: true,\n  imports: [NgIf],\n  templateUrl: './scene.component.html',\n  styleUrls: ['./scene.component.scss']\n})\nexport class SceneComponent implements AfterViewInit, OnChanges {\n  constructor(\n    private elementRef: ElementRef,\n    private furnitureModelService: FurnitureModelControlService,\n    private furnitureCardService: FurnitureCardControlService,\n    private accountCookieService: AccountCookieService,\n    private projectService: ProjectService,\n    private route: ActivatedRoute,\n    private notification: NotificationService,\n    private location: Location,\n    private planHouseComponent: PlanHouseComponent,\n    private router: Router\n  ) { }\n\n\n  @Input()\n  /** Данные комнаты */\n  roomData!: roomDataPlan | undefined;\n\n  @Output()\n  /** Событие для сохранения объектов */\n  saveObjectsEmitter = new EventEmitter();\n\n  /** Рендерер Three.js */\n  private renderer!: THREE.WebGLRenderer;\n\n  /** Камера Three.js */\n  private camera!: THREE.PerspectiveCamera;\n\n  /** Сцена Three.js */\n  private scene!: THREE.Scene;\n\n  /** Контроллеры OrbitControls */\n  private controls!: OrbitControls;\n\n  /** ID текущего кадра анимации */\n  private animationFrameId: number | null = null;\n\n  /** Соотношение размеров холста */\n  private canvasRatioOfWindow = 1.5;\n\n  /** Пропорции комнаты */\n  private roomProportions!: modelInterface;\n\n  /** Луч для определения пересечений */\n  private raycaster = new THREE.Raycaster();\n\n  /** Координаты мыши */\n  private mouse = new THREE.Vector2();\n\n  /** Прямоугольная сетка комнаты */\n  private rectangleMesh!: THREE.Mesh;\n\n  /** Прямоугольная сетка комнаты */\n  private abortConroller: AbortController = new AbortController();\n\n  /** Целевой объект для взаимодействия */\n  protected targetobject: THREE.Object3D | undefined = undefined;\n\n  /** Отображается ли loader */\n  protected isShowLoader: boolean = false\n\n  /** Были ли изменения roomData */\n  public hasBeenChanged: boolean = false\n\n\n  ngAfterViewInit(): void {\n    this.initThreeJs();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.roomData = changes['roomData'].currentValue as roomDataPlan\n\n    if (!this.roomData || this.scene === undefined) return\n    if (changes['roomData'].previousValue !== undefined) { this.clearRoom() }\n\n    this.camera.position.set(0, 5, 0)\n    this.camera.rotation.set(THREE.MathUtils.degToRad(-90), 0, 0)\n    this.roomProportions = this.roomData.roomProportions\n    this.createRoom();\n    this.rectangleMesh.rotation.x = THREE.MathUtils.degToRad(-90)\n\n    if (this.getObjectSize(this.rectangleMesh).width === 0) return\n    if (!this.planHouseComponent.sceneOpenToggle) {\n      this.hasBeenChanged = true\n      return\n    }\n\n    this.loadRoom()\n\n    const FURNITURE_ID = this.route.snapshot.params['furnitureCardId']\n    if (!FURNITURE_ID || changes['roomData'].previousValue) return\n\n    this.fixPath()\n\n    this.addModel(FURNITURE_ID, true, this.abortConroller)\n  }\n\n  private async loadFurnitureModel(fileModel: Blob, furnitureSize: modelInterface, furnitureCardId: string, saveRoom: boolean, moveData?: objectLoadInterface) {\n    try {\n      const LOAD_OBJECT = await loadModel(fileModel)\n      if (LOAD_OBJECT instanceof Error) {\n        this.notification.setError('Модель не поддерживается', 5000)\n        return\n      }\n      if (moveData) { this.addObjectToScene(LOAD_OBJECT, furnitureSize, furnitureCardId, moveData) } else { this.addObjectToScene(LOAD_OBJECT, furnitureSize, furnitureCardId) }\n      if (saveRoom) { \n        this.saveRoom();\n        this.closeLoader()\n      }\n    } catch (error) {\n    }\n  }\n  private async addModel(furnitureCardId: string, saveRoom: boolean, controller: AbortController, moveData?: objectLoadInterface) {\n    const JWT = this.accountCookieService.getJwt()\n    if (!JWT) return\n    try {\n      if (saveRoom) this.showLoader()\n      const PROPORTIONS = (await this.furnitureCardService.GETfurnitureCard(furnitureCardId)).furnitureCard.proportions as modelInterface\n      const MODEL = await this.furnitureModelService.GETfurnitureModel(JWT, furnitureCardId, controller)\n      await this.loadFurnitureModel(MODEL, PROPORTIONS, furnitureCardId, saveRoom, moveData)\n    } catch (error) {\n      this.notification.setError('Ошибка загрузки модели', 5000)\n      console.log(error)\n    }\n  }\n\n  private fixPath() {\n    const NEW_URL = this.location.path().split('/').slice(0, -1).join('/')\n    this.location.replaceState(NEW_URL)\n  }\n  /**\n   * Инициализация Three.js сцены.\n   */\n  private initThreeJs(): void {\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const HEMISPHERE_LIGHT = new THREE.HemisphereLight(0xaaaaaa, 0x000000, 2);\n    this.scene.add(HEMISPHERE_LIGHT);\n    this.renderer = new THREE.WebGLRenderer({ antialias: true, alpha: false });\n    const CANVAS_CONTAINER = this.elementRef.nativeElement.querySelector('#canvasContainer');\n    this.camera.position.z = 5;\n    this.renderer.setSize(window.innerWidth / this.canvasRatioOfWindow, window.innerHeight / this.canvasRatioOfWindow);\n    CANVAS_CONTAINER.appendChild(this.renderer.domElement);\n    this.animationFrameId = requestAnimationFrame(() => this.animate());\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  /**\n   * Анимация сцены.\n   */\n  private animate(): void {\n    this.animationFrameId = requestAnimationFrame(() => this.animate());\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  /**\n   * Создает геометрию прямоугольника с закругленными углами.\n   * @param width Ширина прямоугольника.\n   * @param height Высота прямоугольника.\n   * @param radius Радиус закругления.\n   * @param segments Количество сегментов.\n   * @returns Геометрия прямоугольника.\n   */\n  private createRoundedRectangleGeometry(width: number, height: number, radius: number, segments: number): THREE.BufferGeometry {\n    const SHAPE = new THREE.Shape();\n    SHAPE.moveTo(-width / 2 + radius, -height / 2);\n    SHAPE.lineTo(width / 2 - radius, -height / 2);\n    SHAPE.quadraticCurveTo(width / 2, -height / 2, width / 2, -height / 2 + radius);\n    SHAPE.lineTo(width / 2, height / 2 - radius);\n    SHAPE.quadraticCurveTo(width / 2, height / 2, width / 2 - radius, height / 2);\n    SHAPE.lineTo(-width / 2 + radius, height / 2);\n    SHAPE.quadraticCurveTo(-width / 2, height / 2, -width / 2, height / 2 - radius);\n    SHAPE.lineTo(-width / 2, -height / 2 + radius);\n    SHAPE.quadraticCurveTo(-width / 2, -height / 2, -width / 2 + radius, -height / 2);\n\n    const geometry = new THREE.ShapeGeometry(SHAPE, segments);\n\n    return geometry;\n  }\n\n  /**\n   * Создает комнату на сцене.\n   */\n  private createRoom(): void {\n    if (!this.roomData) return\n    const ROOM_PROPORTIONS = this.roomData.roomProportions\n    const RADIUS = 0.1\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n    this.controls.enableDamping = true;\n    this.controls.dampingFactor = 0.15;\n    this.controls.enableZoom = true;\n    this.controls.minDistance = 1;\n    this.controls.maxDistance = 10;\n    const paddingPolarAngle = 5;\n    this.controls.maxPolarAngle = THREE.MathUtils.degToRad(90 - paddingPolarAngle);\n    this.createRoomShape(ROOM_PROPORTIONS.width, ROOM_PROPORTIONS.length, RADIUS);\n    this.rectangleMesh.name = 'roomFloorBase';\n    this.rectangleMesh\n  }\n\n  /**\n   * Рассчитывает данные для сохранения объекта.\n   * @param object Объект сцены.\n   * @returns Данные для сохранения объекта.\n   */\n  private calculateObjectSaveData(object: THREE.Object3D): objectSceneInterface {\n    const FLOOR_SIZE = this.getObjectSize(this.rectangleMesh)\n    const OBJECT_POSITION = object.position\n    const objectSaveData: objectSceneInterface = {\n      objectId: (object.userData as any).id,\n      xMetersDistance: OBJECT_POSITION.x / FLOOR_SIZE.width * this.roomProportions.width,\n      zMetersDistance: OBJECT_POSITION.z / FLOOR_SIZE.length * this.roomProportions.length,\n      yRotate: object.rotation.y\n    }\n    return objectSaveData\n  }\n\n  /**\n   * Рассчитывает данные для перемещения объекта.\n   * @param objectSaveData Данные сохраненного объекта.\n   * @returns Данные для перемещения объекта.\n   */\n  private calculateMoveObjectData(objectSaveData: objectSceneInterface): objectLoadInterface {\n    const FLOOR_SIZE = this.getObjectSize(this.rectangleMesh)\n    return {\n      xDistance: objectSaveData.xMetersDistance * FLOOR_SIZE.width / this.roomProportions.width,\n      zDistance: objectSaveData.zMetersDistance * FLOOR_SIZE.length / this.roomProportions.length,\n      yRotate: objectSaveData.yRotate\n    }\n  }\n\n  /**\n   * Создает форму комнаты.\n   * @param widthRatio Соотношение ширины.\n   * @param heightRatio Соотношение высоты.\n   * @param radius Радиус закругления.\n   */\n  private createRoomShape(widthRatio: number, heightRatio: number, radius: number): void {\n    const CAMERA_FRUSTUM_BOUNDS = this.calculateFrustumBounds();\n    const SHAPE_RATIO = widthRatio / heightRatio;\n    let width: number, height: number;\n\n    if (SHAPE_RATIO  {\n    const JWT = this.accountCookieService.getJwt()\n    if (!JWT || !this.roomData) return\n    const roomData: roomData = {\n      objects: this.roomData.objects,\n      ...this.roomData.roomProportions\n    }\n\n    this.showLoader()\n    for (const object of roomData.objects) {\n      await this.addModel(object.objectId, false, this.abortConroller, this.calculateMoveObjectData(object));\n    }\n    this.closeLoader()\n    this.hasBeenChanged = false\n  }\n\n  private showLoader() {\n    this.isShowLoader = true\n  }\n  private closeLoader() {\n    this.isShowLoader = false\n  }\n  /**\n   * Очищает комнату от объектов.\n   */\n  private clearRoom(): void {\n    for (let i = this.scene.children.length - 1; i >= 0; i--) {\n      const OBJECT = this.scene.children[i];\n      if (OBJECT.type !== 'Scene' && OBJECT.type !== 'HemisphereLight') {\n        this.scene.remove(OBJECT);\n      }\n    }\n  }\n\n  /**\n   * Обрабатывает изменение размера окна.\n   * @param event Событие изменения размера.\n   */\n  @HostListener('window:resize', ['$event'])\n  private onResize(event: Event): void {\n    this.renderer.setSize(window.innerWidth / this.canvasRatioOfWindow, window.innerHeight / this.canvasRatioOfWindow);\n    this.camera.aspect = window.innerWidth / window.innerHeight;\n    this.camera.updateProjectionMatrix();\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  /**\n   * Обрабатывает клик мыши.\n   * @param event Событие клика.\n   */\n  @HostListener('click', ['$event'])\n  private onMouseClick(event: MouseEvent): void {\n    if (this.targetobject) {\n      this.targetobject = undefined;\n      return;\n    }\n    const RECT = (event.target as HTMLCanvasElement).getBoundingClientRect();\n    const X = (event.clientX - RECT.left) / RECT.width * 2 - 1;\n    const Y = -(event.clientY - RECT.top) / RECT.height * 2 + 1;\n\n    this.mouse.x = X;\n    this.mouse.y = Y;\n    this.raycaster.setFromCamera(this.mouse, this.camera);\n\n    const INTERSECTIONS = this.raycaster.intersectObjects(this.scene.children);\n\n    const FOUND_INTERSECTION = INTERSECTIONS.find(intersect => {\n      return intersect.object.name !== 'roomFloorBase' && intersect.object.type !== 'Scene' && intersect.object.type !== 'HemisphereLight'\n    })?.object\n    if (!FOUND_INTERSECTION) return\n    this.targetobject = FOUND_INTERSECTION.parent ? FOUND_INTERSECTION.parent : FOUND_INTERSECTION\n  }\n\n  /**\n   * Поворачивает целевой объект.\n   * @param event Событие нажатия клавиши.\n   */\n  @HostListener('window:keydown', ['$event'])\n  private rotateTargetObject(event: KeyboardEvent): void {\n    if (!this.targetobject) return\n    let rotateAngle = -0.05\n\n    switch (event.key) {\n      case 'q':\n      case 'й':\n        this.targetobject.rotation.y -= rotateAngle\n        break\n      case 'e':\n      case 'у':\n        this.targetobject.rotation.y += rotateAngle\n    }\n  }\n\n  /**\n   * Обрабатывает перемещение мыши.\n   * @param event Событие перемещения мыши.\n   */\n  @HostListener('mousemove', ['$event'])\n  private onMousemove(event: MouseEvent): void {\n    if (!this.targetobject) return;\n\n    const RECT = (event.target as HTMLCanvasElement).getBoundingClientRect();\n    const X = (event.clientX - RECT.left) / RECT.width * 2 - 1;\n    const Y = -(event.clientY - RECT.top) / RECT.height * 2 + 1;\n\n    this.mouse.x = X;\n    this.mouse.y = Y;\n    this.raycaster.setFromCamera(this.mouse, this.camera);\n\n    const INTERSECTIONS = this.raycaster.intersectObject(this.rectangleMesh);\n    if (INTERSECTIONS.length === 0) return;\n\n    const INTERSECTIONS_X = INTERSECTIONS[0].point.x;\n    const INTERSECTION_Z = INTERSECTIONS[0].point.z;\n    const RECTANGLE_MESH_SIZE = this.getObjectSize(this.rectangleMesh);\n    const objectSize = this.getObjectSize(this.targetobject);\n\n    const minX = -RECTANGLE_MESH_SIZE.width / 2 + objectSize.width / 2;\n    const maxX = RECTANGLE_MESH_SIZE.width / 2 - objectSize.width / 2;\n\n    let newXObjectPosition = INTERSECTIONS_X;\n    if (newXObjectPosition  maxX) {\n      newXObjectPosition = maxX;\n    }\n\n    const MIN_Z = -RECTANGLE_MESH_SIZE.length / 2 + objectSize.length / 2;\n    const MAX_Z = RECTANGLE_MESH_SIZE.length / 2 - objectSize.length / 2;\n\n    let newZObjectPosition = INTERSECTION_Z;\n    if (newZObjectPosition  MAX_Z) {\n      newZObjectPosition = MAX_Z;\n    }\n\n    this.targetobject.position.set(newXObjectPosition, 0, newZObjectPosition);\n  }\n\n  /**\n   * Генерирует отчет по комнате.\n   */\n  protected abortLoadRoom() {\n    this.abortConroller.abort()\n    this.abortConroller = new AbortController()\n\n    this.planHouseComponent.sceneOpenToggle = false\n    this.planHouseComponent.closeViewRoom()\n\n    const PLAN_ID = this.route.snapshot.params['planId']\n    this.router.navigateByUrl('/plan/' + PLAN_ID)\n  }\n\n  /**\n   * Генерирует отчет по комнате.\n   */\n  protected async getReport(): Promise {\n    const JWT = this.accountCookieService.getJwt()\n    if (!JWT || !this.roomData?._id) return\n\n    const oldCameraPosition = this.camera.position.clone();\n    const oldCameraRotation = this.camera.rotation.clone();\n\n    this.camera.position.set(0, 7, 0)\n    this.camera.rotation.set(THREE.MathUtils.degToRad(-90), 0, 0)\n    this.renderer.render(this.scene, this.camera);\n    const imageDataURL = this.renderer.domElement.toDataURL('image/png')\n    const imageDataResponse = await fetch(imageDataURL)\n\n    this.camera.position.copy(oldCameraPosition);\n    this.camera.rotation.copy(oldCameraRotation);\n\n    if (!imageDataResponse.ok) {\n      this.notification.setError('Ошибка при рендере', 5000)\n    }\n    const imageDataBlob = await imageDataResponse.blob()\n\n    this.projectService.GETgetReportOfRoom(JWT, this.roomData?._id, imageDataBlob)\n  }\n\n  /**\n   * Удаляет выбранную модель.\n   */\n  protected deleteModel(): void {\n    if (!this.targetobject) return\n    this.scene.remove(this.targetobject)\n    this.saveRoom()\n  }\n\n  /**\n   * Сохраняет текущее состояние комнаты.\n   */\n  public saveRoom(): void {\n    if (!this.roomData) return\n    const OBJECTS_SCENE_ARRAY = this.scene.children.filter(object => {\n      if (\n        object.name !== 'roomFloorBase' &&\n        object.type !== 'Scene' &&\n        object.type !== 'HemisphereLight'\n      ) {\n        return true;\n      }\n      return false;\n    })\n      .map(object => {\n        return this.calculateObjectSaveData(object)\n      })\n    const ROOM_OBJECTS_DATA = OBJECTS_SCENE_ARRAY\n    this.roomData.objects = OBJECTS_SCENE_ARRAY\n    this.saveObjectsEmitter.emit(ROOM_OBJECTS_DATA)\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/objectLoadInterface.html":{"url":"interfaces/objectLoadInterface.html","title":"interface - objectLoadInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  objectLoadInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/scene/scene.component.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс для описания данных загрузки объекта.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            xDistance\n                                        \n                                \n                                \n                                        \n                                            yRotate\n                                        \n                                \n                                \n                                        \n                                            zDistance\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        xDistance\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        xDistance:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Расстояние по оси X\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        yRotate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        yRotate:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Угол поворота по оси Y\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        zDistance\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        zDistance:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Расстояние по оси Z\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Component, AfterViewInit, ElementRef, HostListener, Input, SimpleChanges, Output, EventEmitter, OnChanges, OnDestroy, Renderer2 } from '@angular/core';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { ProjectService, roomData as roomDataPlan } from '../../services/project.service';\nimport { loadModel } from './loaders';\nimport { FurnitureModelControlService } from '../../services/furniture-model-control.service';\nimport { AccountCookieService } from '../../services/account-cookie.service';\nimport { FurnitureCardControlService } from '../../services/furniture-card-control.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { NotificationService } from '../../services/notification.service';\nimport { Location, NgIf } from '@angular/common';\nimport { PlanHouseComponent } from '../plan-house/plan-house.component';\n\n/**\n * Интерфейс для описания размеров модели.\n */\nexport interface modelInterface {\n  /** Ширина модели */\n  width: number;\n  /** Высота модели */\n  height: number;\n  /** Длина модели */\n  length: number;\n}\n\n/**\n * Интерфейс для описания объекта сцены.\n */\nexport interface objectSceneInterface {\n  /** ID объекта */\n  objectId: string;\n  /** Расстояние по оси X в метрах */\n  xMetersDistance: number;\n  /** Расстояние по оси Z в метрах */\n  zMetersDistance: number;\n  /** Угол поворота по оси Y */\n  yRotate: number;\n}\n\n/**\n * Интерфейс для описания данных загрузки объекта.\n */\ninterface objectLoadInterface {\n  /** Расстояние по оси X */\n  xDistance: number;\n  /** Расстояние по оси Z */\n  zDistance: number;\n  /** Угол поворота по оси Y */\n  yRotate: number;\n}\n\n/**\n * Интерфейс для описания данных комнаты.\n */\ninterface roomData extends modelInterface {\n  /** Массив объектов в комнате */\n  objects: objectSceneInterface[];\n}\n\n@Component({\n  selector: 'app-scene',\n  standalone: true,\n  imports: [NgIf],\n  templateUrl: './scene.component.html',\n  styleUrls: ['./scene.component.scss']\n})\nexport class SceneComponent implements AfterViewInit, OnChanges {\n  constructor(\n    private elementRef: ElementRef,\n    private furnitureModelService: FurnitureModelControlService,\n    private furnitureCardService: FurnitureCardControlService,\n    private accountCookieService: AccountCookieService,\n    private projectService: ProjectService,\n    private route: ActivatedRoute,\n    private notification: NotificationService,\n    private location: Location,\n    private planHouseComponent: PlanHouseComponent,\n    private router: Router\n  ) { }\n\n\n  @Input()\n  /** Данные комнаты */\n  roomData!: roomDataPlan | undefined;\n\n  @Output()\n  /** Событие для сохранения объектов */\n  saveObjectsEmitter = new EventEmitter();\n\n  /** Рендерер Three.js */\n  private renderer!: THREE.WebGLRenderer;\n\n  /** Камера Three.js */\n  private camera!: THREE.PerspectiveCamera;\n\n  /** Сцена Three.js */\n  private scene!: THREE.Scene;\n\n  /** Контроллеры OrbitControls */\n  private controls!: OrbitControls;\n\n  /** ID текущего кадра анимации */\n  private animationFrameId: number | null = null;\n\n  /** Соотношение размеров холста */\n  private canvasRatioOfWindow = 1.5;\n\n  /** Пропорции комнаты */\n  private roomProportions!: modelInterface;\n\n  /** Луч для определения пересечений */\n  private raycaster = new THREE.Raycaster();\n\n  /** Координаты мыши */\n  private mouse = new THREE.Vector2();\n\n  /** Прямоугольная сетка комнаты */\n  private rectangleMesh!: THREE.Mesh;\n\n  /** Прямоугольная сетка комнаты */\n  private abortConroller: AbortController = new AbortController();\n\n  /** Целевой объект для взаимодействия */\n  protected targetobject: THREE.Object3D | undefined = undefined;\n\n  /** Отображается ли loader */\n  protected isShowLoader: boolean = false\n\n  /** Были ли изменения roomData */\n  public hasBeenChanged: boolean = false\n\n\n  ngAfterViewInit(): void {\n    this.initThreeJs();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.roomData = changes['roomData'].currentValue as roomDataPlan\n\n    if (!this.roomData || this.scene === undefined) return\n    if (changes['roomData'].previousValue !== undefined) { this.clearRoom() }\n\n    this.camera.position.set(0, 5, 0)\n    this.camera.rotation.set(THREE.MathUtils.degToRad(-90), 0, 0)\n    this.roomProportions = this.roomData.roomProportions\n    this.createRoom();\n    this.rectangleMesh.rotation.x = THREE.MathUtils.degToRad(-90)\n\n    if (this.getObjectSize(this.rectangleMesh).width === 0) return\n    if (!this.planHouseComponent.sceneOpenToggle) {\n      this.hasBeenChanged = true\n      return\n    }\n\n    this.loadRoom()\n\n    const FURNITURE_ID = this.route.snapshot.params['furnitureCardId']\n    if (!FURNITURE_ID || changes['roomData'].previousValue) return\n\n    this.fixPath()\n\n    this.addModel(FURNITURE_ID, true, this.abortConroller)\n  }\n\n  private async loadFurnitureModel(fileModel: Blob, furnitureSize: modelInterface, furnitureCardId: string, saveRoom: boolean, moveData?: objectLoadInterface) {\n    try {\n      const LOAD_OBJECT = await loadModel(fileModel)\n      if (LOAD_OBJECT instanceof Error) {\n        this.notification.setError('Модель не поддерживается', 5000)\n        return\n      }\n      if (moveData) { this.addObjectToScene(LOAD_OBJECT, furnitureSize, furnitureCardId, moveData) } else { this.addObjectToScene(LOAD_OBJECT, furnitureSize, furnitureCardId) }\n      if (saveRoom) { \n        this.saveRoom();\n        this.closeLoader()\n      }\n    } catch (error) {\n    }\n  }\n  private async addModel(furnitureCardId: string, saveRoom: boolean, controller: AbortController, moveData?: objectLoadInterface) {\n    const JWT = this.accountCookieService.getJwt()\n    if (!JWT) return\n    try {\n      if (saveRoom) this.showLoader()\n      const PROPORTIONS = (await this.furnitureCardService.GETfurnitureCard(furnitureCardId)).furnitureCard.proportions as modelInterface\n      const MODEL = await this.furnitureModelService.GETfurnitureModel(JWT, furnitureCardId, controller)\n      await this.loadFurnitureModel(MODEL, PROPORTIONS, furnitureCardId, saveRoom, moveData)\n    } catch (error) {\n      this.notification.setError('Ошибка загрузки модели', 5000)\n      console.log(error)\n    }\n  }\n\n  private fixPath() {\n    const NEW_URL = this.location.path().split('/').slice(0, -1).join('/')\n    this.location.replaceState(NEW_URL)\n  }\n  /**\n   * Инициализация Three.js сцены.\n   */\n  private initThreeJs(): void {\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const HEMISPHERE_LIGHT = new THREE.HemisphereLight(0xaaaaaa, 0x000000, 2);\n    this.scene.add(HEMISPHERE_LIGHT);\n    this.renderer = new THREE.WebGLRenderer({ antialias: true, alpha: false });\n    const CANVAS_CONTAINER = this.elementRef.nativeElement.querySelector('#canvasContainer');\n    this.camera.position.z = 5;\n    this.renderer.setSize(window.innerWidth / this.canvasRatioOfWindow, window.innerHeight / this.canvasRatioOfWindow);\n    CANVAS_CONTAINER.appendChild(this.renderer.domElement);\n    this.animationFrameId = requestAnimationFrame(() => this.animate());\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  /**\n   * Анимация сцены.\n   */\n  private animate(): void {\n    this.animationFrameId = requestAnimationFrame(() => this.animate());\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  /**\n   * Создает геометрию прямоугольника с закругленными углами.\n   * @param width Ширина прямоугольника.\n   * @param height Высота прямоугольника.\n   * @param radius Радиус закругления.\n   * @param segments Количество сегментов.\n   * @returns Геометрия прямоугольника.\n   */\n  private createRoundedRectangleGeometry(width: number, height: number, radius: number, segments: number): THREE.BufferGeometry {\n    const SHAPE = new THREE.Shape();\n    SHAPE.moveTo(-width / 2 + radius, -height / 2);\n    SHAPE.lineTo(width / 2 - radius, -height / 2);\n    SHAPE.quadraticCurveTo(width / 2, -height / 2, width / 2, -height / 2 + radius);\n    SHAPE.lineTo(width / 2, height / 2 - radius);\n    SHAPE.quadraticCurveTo(width / 2, height / 2, width / 2 - radius, height / 2);\n    SHAPE.lineTo(-width / 2 + radius, height / 2);\n    SHAPE.quadraticCurveTo(-width / 2, height / 2, -width / 2, height / 2 - radius);\n    SHAPE.lineTo(-width / 2, -height / 2 + radius);\n    SHAPE.quadraticCurveTo(-width / 2, -height / 2, -width / 2 + radius, -height / 2);\n\n    const geometry = new THREE.ShapeGeometry(SHAPE, segments);\n\n    return geometry;\n  }\n\n  /**\n   * Создает комнату на сцене.\n   */\n  private createRoom(): void {\n    if (!this.roomData) return\n    const ROOM_PROPORTIONS = this.roomData.roomProportions\n    const RADIUS = 0.1\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n    this.controls.enableDamping = true;\n    this.controls.dampingFactor = 0.15;\n    this.controls.enableZoom = true;\n    this.controls.minDistance = 1;\n    this.controls.maxDistance = 10;\n    const paddingPolarAngle = 5;\n    this.controls.maxPolarAngle = THREE.MathUtils.degToRad(90 - paddingPolarAngle);\n    this.createRoomShape(ROOM_PROPORTIONS.width, ROOM_PROPORTIONS.length, RADIUS);\n    this.rectangleMesh.name = 'roomFloorBase';\n    this.rectangleMesh\n  }\n\n  /**\n   * Рассчитывает данные для сохранения объекта.\n   * @param object Объект сцены.\n   * @returns Данные для сохранения объекта.\n   */\n  private calculateObjectSaveData(object: THREE.Object3D): objectSceneInterface {\n    const FLOOR_SIZE = this.getObjectSize(this.rectangleMesh)\n    const OBJECT_POSITION = object.position\n    const objectSaveData: objectSceneInterface = {\n      objectId: (object.userData as any).id,\n      xMetersDistance: OBJECT_POSITION.x / FLOOR_SIZE.width * this.roomProportions.width,\n      zMetersDistance: OBJECT_POSITION.z / FLOOR_SIZE.length * this.roomProportions.length,\n      yRotate: object.rotation.y\n    }\n    return objectSaveData\n  }\n\n  /**\n   * Рассчитывает данные для перемещения объекта.\n   * @param objectSaveData Данные сохраненного объекта.\n   * @returns Данные для перемещения объекта.\n   */\n  private calculateMoveObjectData(objectSaveData: objectSceneInterface): objectLoadInterface {\n    const FLOOR_SIZE = this.getObjectSize(this.rectangleMesh)\n    return {\n      xDistance: objectSaveData.xMetersDistance * FLOOR_SIZE.width / this.roomProportions.width,\n      zDistance: objectSaveData.zMetersDistance * FLOOR_SIZE.length / this.roomProportions.length,\n      yRotate: objectSaveData.yRotate\n    }\n  }\n\n  /**\n   * Создает форму комнаты.\n   * @param widthRatio Соотношение ширины.\n   * @param heightRatio Соотношение высоты.\n   * @param radius Радиус закругления.\n   */\n  private createRoomShape(widthRatio: number, heightRatio: number, radius: number): void {\n    const CAMERA_FRUSTUM_BOUNDS = this.calculateFrustumBounds();\n    const SHAPE_RATIO = widthRatio / heightRatio;\n    let width: number, height: number;\n\n    if (SHAPE_RATIO  {\n    const JWT = this.accountCookieService.getJwt()\n    if (!JWT || !this.roomData) return\n    const roomData: roomData = {\n      objects: this.roomData.objects,\n      ...this.roomData.roomProportions\n    }\n\n    this.showLoader()\n    for (const object of roomData.objects) {\n      await this.addModel(object.objectId, false, this.abortConroller, this.calculateMoveObjectData(object));\n    }\n    this.closeLoader()\n    this.hasBeenChanged = false\n  }\n\n  private showLoader() {\n    this.isShowLoader = true\n  }\n  private closeLoader() {\n    this.isShowLoader = false\n  }\n  /**\n   * Очищает комнату от объектов.\n   */\n  private clearRoom(): void {\n    for (let i = this.scene.children.length - 1; i >= 0; i--) {\n      const OBJECT = this.scene.children[i];\n      if (OBJECT.type !== 'Scene' && OBJECT.type !== 'HemisphereLight') {\n        this.scene.remove(OBJECT);\n      }\n    }\n  }\n\n  /**\n   * Обрабатывает изменение размера окна.\n   * @param event Событие изменения размера.\n   */\n  @HostListener('window:resize', ['$event'])\n  private onResize(event: Event): void {\n    this.renderer.setSize(window.innerWidth / this.canvasRatioOfWindow, window.innerHeight / this.canvasRatioOfWindow);\n    this.camera.aspect = window.innerWidth / window.innerHeight;\n    this.camera.updateProjectionMatrix();\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  /**\n   * Обрабатывает клик мыши.\n   * @param event Событие клика.\n   */\n  @HostListener('click', ['$event'])\n  private onMouseClick(event: MouseEvent): void {\n    if (this.targetobject) {\n      this.targetobject = undefined;\n      return;\n    }\n    const RECT = (event.target as HTMLCanvasElement).getBoundingClientRect();\n    const X = (event.clientX - RECT.left) / RECT.width * 2 - 1;\n    const Y = -(event.clientY - RECT.top) / RECT.height * 2 + 1;\n\n    this.mouse.x = X;\n    this.mouse.y = Y;\n    this.raycaster.setFromCamera(this.mouse, this.camera);\n\n    const INTERSECTIONS = this.raycaster.intersectObjects(this.scene.children);\n\n    const FOUND_INTERSECTION = INTERSECTIONS.find(intersect => {\n      return intersect.object.name !== 'roomFloorBase' && intersect.object.type !== 'Scene' && intersect.object.type !== 'HemisphereLight'\n    })?.object\n    if (!FOUND_INTERSECTION) return\n    this.targetobject = FOUND_INTERSECTION.parent ? FOUND_INTERSECTION.parent : FOUND_INTERSECTION\n  }\n\n  /**\n   * Поворачивает целевой объект.\n   * @param event Событие нажатия клавиши.\n   */\n  @HostListener('window:keydown', ['$event'])\n  private rotateTargetObject(event: KeyboardEvent): void {\n    if (!this.targetobject) return\n    let rotateAngle = -0.05\n\n    switch (event.key) {\n      case 'q':\n      case 'й':\n        this.targetobject.rotation.y -= rotateAngle\n        break\n      case 'e':\n      case 'у':\n        this.targetobject.rotation.y += rotateAngle\n    }\n  }\n\n  /**\n   * Обрабатывает перемещение мыши.\n   * @param event Событие перемещения мыши.\n   */\n  @HostListener('mousemove', ['$event'])\n  private onMousemove(event: MouseEvent): void {\n    if (!this.targetobject) return;\n\n    const RECT = (event.target as HTMLCanvasElement).getBoundingClientRect();\n    const X = (event.clientX - RECT.left) / RECT.width * 2 - 1;\n    const Y = -(event.clientY - RECT.top) / RECT.height * 2 + 1;\n\n    this.mouse.x = X;\n    this.mouse.y = Y;\n    this.raycaster.setFromCamera(this.mouse, this.camera);\n\n    const INTERSECTIONS = this.raycaster.intersectObject(this.rectangleMesh);\n    if (INTERSECTIONS.length === 0) return;\n\n    const INTERSECTIONS_X = INTERSECTIONS[0].point.x;\n    const INTERSECTION_Z = INTERSECTIONS[0].point.z;\n    const RECTANGLE_MESH_SIZE = this.getObjectSize(this.rectangleMesh);\n    const objectSize = this.getObjectSize(this.targetobject);\n\n    const minX = -RECTANGLE_MESH_SIZE.width / 2 + objectSize.width / 2;\n    const maxX = RECTANGLE_MESH_SIZE.width / 2 - objectSize.width / 2;\n\n    let newXObjectPosition = INTERSECTIONS_X;\n    if (newXObjectPosition  maxX) {\n      newXObjectPosition = maxX;\n    }\n\n    const MIN_Z = -RECTANGLE_MESH_SIZE.length / 2 + objectSize.length / 2;\n    const MAX_Z = RECTANGLE_MESH_SIZE.length / 2 - objectSize.length / 2;\n\n    let newZObjectPosition = INTERSECTION_Z;\n    if (newZObjectPosition  MAX_Z) {\n      newZObjectPosition = MAX_Z;\n    }\n\n    this.targetobject.position.set(newXObjectPosition, 0, newZObjectPosition);\n  }\n\n  /**\n   * Генерирует отчет по комнате.\n   */\n  protected abortLoadRoom() {\n    this.abortConroller.abort()\n    this.abortConroller = new AbortController()\n\n    this.planHouseComponent.sceneOpenToggle = false\n    this.planHouseComponent.closeViewRoom()\n\n    const PLAN_ID = this.route.snapshot.params['planId']\n    this.router.navigateByUrl('/plan/' + PLAN_ID)\n  }\n\n  /**\n   * Генерирует отчет по комнате.\n   */\n  protected async getReport(): Promise {\n    const JWT = this.accountCookieService.getJwt()\n    if (!JWT || !this.roomData?._id) return\n\n    const oldCameraPosition = this.camera.position.clone();\n    const oldCameraRotation = this.camera.rotation.clone();\n\n    this.camera.position.set(0, 7, 0)\n    this.camera.rotation.set(THREE.MathUtils.degToRad(-90), 0, 0)\n    this.renderer.render(this.scene, this.camera);\n    const imageDataURL = this.renderer.domElement.toDataURL('image/png')\n    const imageDataResponse = await fetch(imageDataURL)\n\n    this.camera.position.copy(oldCameraPosition);\n    this.camera.rotation.copy(oldCameraRotation);\n\n    if (!imageDataResponse.ok) {\n      this.notification.setError('Ошибка при рендере', 5000)\n    }\n    const imageDataBlob = await imageDataResponse.blob()\n\n    this.projectService.GETgetReportOfRoom(JWT, this.roomData?._id, imageDataBlob)\n  }\n\n  /**\n   * Удаляет выбранную модель.\n   */\n  protected deleteModel(): void {\n    if (!this.targetobject) return\n    this.scene.remove(this.targetobject)\n    this.saveRoom()\n  }\n\n  /**\n   * Сохраняет текущее состояние комнаты.\n   */\n  public saveRoom(): void {\n    if (!this.roomData) return\n    const OBJECTS_SCENE_ARRAY = this.scene.children.filter(object => {\n      if (\n        object.name !== 'roomFloorBase' &&\n        object.type !== 'Scene' &&\n        object.type !== 'HemisphereLight'\n      ) {\n        return true;\n      }\n      return false;\n    })\n      .map(object => {\n        return this.calculateObjectSaveData(object)\n      })\n    const ROOM_OBJECTS_DATA = OBJECTS_SCENE_ARRAY\n    this.roomData.objects = OBJECTS_SCENE_ARRAY\n    this.saveObjectsEmitter.emit(ROOM_OBJECTS_DATA)\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/objectSceneInterface.html":{"url":"interfaces/objectSceneInterface.html","title":"interface - objectSceneInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  objectSceneInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/scene/scene.component.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс для описания объекта сцены.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            objectId\n                                        \n                                \n                                \n                                        \n                                            xMetersDistance\n                                        \n                                \n                                \n                                        \n                                            yRotate\n                                        \n                                \n                                \n                                        \n                                            zMetersDistance\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        objectId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        objectId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    ID объекта\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        xMetersDistance\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        xMetersDistance:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Расстояние по оси X в метрах\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        yRotate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        yRotate:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Угол поворота по оси Y\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        zMetersDistance\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        zMetersDistance:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Расстояние по оси Z в метрах\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Component, AfterViewInit, ElementRef, HostListener, Input, SimpleChanges, Output, EventEmitter, OnChanges, OnDestroy, Renderer2 } from '@angular/core';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { ProjectService, roomData as roomDataPlan } from '../../services/project.service';\nimport { loadModel } from './loaders';\nimport { FurnitureModelControlService } from '../../services/furniture-model-control.service';\nimport { AccountCookieService } from '../../services/account-cookie.service';\nimport { FurnitureCardControlService } from '../../services/furniture-card-control.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { NotificationService } from '../../services/notification.service';\nimport { Location, NgIf } from '@angular/common';\nimport { PlanHouseComponent } from '../plan-house/plan-house.component';\n\n/**\n * Интерфейс для описания размеров модели.\n */\nexport interface modelInterface {\n  /** Ширина модели */\n  width: number;\n  /** Высота модели */\n  height: number;\n  /** Длина модели */\n  length: number;\n}\n\n/**\n * Интерфейс для описания объекта сцены.\n */\nexport interface objectSceneInterface {\n  /** ID объекта */\n  objectId: string;\n  /** Расстояние по оси X в метрах */\n  xMetersDistance: number;\n  /** Расстояние по оси Z в метрах */\n  zMetersDistance: number;\n  /** Угол поворота по оси Y */\n  yRotate: number;\n}\n\n/**\n * Интерфейс для описания данных загрузки объекта.\n */\ninterface objectLoadInterface {\n  /** Расстояние по оси X */\n  xDistance: number;\n  /** Расстояние по оси Z */\n  zDistance: number;\n  /** Угол поворота по оси Y */\n  yRotate: number;\n}\n\n/**\n * Интерфейс для описания данных комнаты.\n */\ninterface roomData extends modelInterface {\n  /** Массив объектов в комнате */\n  objects: objectSceneInterface[];\n}\n\n@Component({\n  selector: 'app-scene',\n  standalone: true,\n  imports: [NgIf],\n  templateUrl: './scene.component.html',\n  styleUrls: ['./scene.component.scss']\n})\nexport class SceneComponent implements AfterViewInit, OnChanges {\n  constructor(\n    private elementRef: ElementRef,\n    private furnitureModelService: FurnitureModelControlService,\n    private furnitureCardService: FurnitureCardControlService,\n    private accountCookieService: AccountCookieService,\n    private projectService: ProjectService,\n    private route: ActivatedRoute,\n    private notification: NotificationService,\n    private location: Location,\n    private planHouseComponent: PlanHouseComponent,\n    private router: Router\n  ) { }\n\n\n  @Input()\n  /** Данные комнаты */\n  roomData!: roomDataPlan | undefined;\n\n  @Output()\n  /** Событие для сохранения объектов */\n  saveObjectsEmitter = new EventEmitter();\n\n  /** Рендерер Three.js */\n  private renderer!: THREE.WebGLRenderer;\n\n  /** Камера Three.js */\n  private camera!: THREE.PerspectiveCamera;\n\n  /** Сцена Three.js */\n  private scene!: THREE.Scene;\n\n  /** Контроллеры OrbitControls */\n  private controls!: OrbitControls;\n\n  /** ID текущего кадра анимации */\n  private animationFrameId: number | null = null;\n\n  /** Соотношение размеров холста */\n  private canvasRatioOfWindow = 1.5;\n\n  /** Пропорции комнаты */\n  private roomProportions!: modelInterface;\n\n  /** Луч для определения пересечений */\n  private raycaster = new THREE.Raycaster();\n\n  /** Координаты мыши */\n  private mouse = new THREE.Vector2();\n\n  /** Прямоугольная сетка комнаты */\n  private rectangleMesh!: THREE.Mesh;\n\n  /** Прямоугольная сетка комнаты */\n  private abortConroller: AbortController = new AbortController();\n\n  /** Целевой объект для взаимодействия */\n  protected targetobject: THREE.Object3D | undefined = undefined;\n\n  /** Отображается ли loader */\n  protected isShowLoader: boolean = false\n\n  /** Были ли изменения roomData */\n  public hasBeenChanged: boolean = false\n\n\n  ngAfterViewInit(): void {\n    this.initThreeJs();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.roomData = changes['roomData'].currentValue as roomDataPlan\n\n    if (!this.roomData || this.scene === undefined) return\n    if (changes['roomData'].previousValue !== undefined) { this.clearRoom() }\n\n    this.camera.position.set(0, 5, 0)\n    this.camera.rotation.set(THREE.MathUtils.degToRad(-90), 0, 0)\n    this.roomProportions = this.roomData.roomProportions\n    this.createRoom();\n    this.rectangleMesh.rotation.x = THREE.MathUtils.degToRad(-90)\n\n    if (this.getObjectSize(this.rectangleMesh).width === 0) return\n    if (!this.planHouseComponent.sceneOpenToggle) {\n      this.hasBeenChanged = true\n      return\n    }\n\n    this.loadRoom()\n\n    const FURNITURE_ID = this.route.snapshot.params['furnitureCardId']\n    if (!FURNITURE_ID || changes['roomData'].previousValue) return\n\n    this.fixPath()\n\n    this.addModel(FURNITURE_ID, true, this.abortConroller)\n  }\n\n  private async loadFurnitureModel(fileModel: Blob, furnitureSize: modelInterface, furnitureCardId: string, saveRoom: boolean, moveData?: objectLoadInterface) {\n    try {\n      const LOAD_OBJECT = await loadModel(fileModel)\n      if (LOAD_OBJECT instanceof Error) {\n        this.notification.setError('Модель не поддерживается', 5000)\n        return\n      }\n      if (moveData) { this.addObjectToScene(LOAD_OBJECT, furnitureSize, furnitureCardId, moveData) } else { this.addObjectToScene(LOAD_OBJECT, furnitureSize, furnitureCardId) }\n      if (saveRoom) { \n        this.saveRoom();\n        this.closeLoader()\n      }\n    } catch (error) {\n    }\n  }\n  private async addModel(furnitureCardId: string, saveRoom: boolean, controller: AbortController, moveData?: objectLoadInterface) {\n    const JWT = this.accountCookieService.getJwt()\n    if (!JWT) return\n    try {\n      if (saveRoom) this.showLoader()\n      const PROPORTIONS = (await this.furnitureCardService.GETfurnitureCard(furnitureCardId)).furnitureCard.proportions as modelInterface\n      const MODEL = await this.furnitureModelService.GETfurnitureModel(JWT, furnitureCardId, controller)\n      await this.loadFurnitureModel(MODEL, PROPORTIONS, furnitureCardId, saveRoom, moveData)\n    } catch (error) {\n      this.notification.setError('Ошибка загрузки модели', 5000)\n      console.log(error)\n    }\n  }\n\n  private fixPath() {\n    const NEW_URL = this.location.path().split('/').slice(0, -1).join('/')\n    this.location.replaceState(NEW_URL)\n  }\n  /**\n   * Инициализация Three.js сцены.\n   */\n  private initThreeJs(): void {\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const HEMISPHERE_LIGHT = new THREE.HemisphereLight(0xaaaaaa, 0x000000, 2);\n    this.scene.add(HEMISPHERE_LIGHT);\n    this.renderer = new THREE.WebGLRenderer({ antialias: true, alpha: false });\n    const CANVAS_CONTAINER = this.elementRef.nativeElement.querySelector('#canvasContainer');\n    this.camera.position.z = 5;\n    this.renderer.setSize(window.innerWidth / this.canvasRatioOfWindow, window.innerHeight / this.canvasRatioOfWindow);\n    CANVAS_CONTAINER.appendChild(this.renderer.domElement);\n    this.animationFrameId = requestAnimationFrame(() => this.animate());\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  /**\n   * Анимация сцены.\n   */\n  private animate(): void {\n    this.animationFrameId = requestAnimationFrame(() => this.animate());\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  /**\n   * Создает геометрию прямоугольника с закругленными углами.\n   * @param width Ширина прямоугольника.\n   * @param height Высота прямоугольника.\n   * @param radius Радиус закругления.\n   * @param segments Количество сегментов.\n   * @returns Геометрия прямоугольника.\n   */\n  private createRoundedRectangleGeometry(width: number, height: number, radius: number, segments: number): THREE.BufferGeometry {\n    const SHAPE = new THREE.Shape();\n    SHAPE.moveTo(-width / 2 + radius, -height / 2);\n    SHAPE.lineTo(width / 2 - radius, -height / 2);\n    SHAPE.quadraticCurveTo(width / 2, -height / 2, width / 2, -height / 2 + radius);\n    SHAPE.lineTo(width / 2, height / 2 - radius);\n    SHAPE.quadraticCurveTo(width / 2, height / 2, width / 2 - radius, height / 2);\n    SHAPE.lineTo(-width / 2 + radius, height / 2);\n    SHAPE.quadraticCurveTo(-width / 2, height / 2, -width / 2, height / 2 - radius);\n    SHAPE.lineTo(-width / 2, -height / 2 + radius);\n    SHAPE.quadraticCurveTo(-width / 2, -height / 2, -width / 2 + radius, -height / 2);\n\n    const geometry = new THREE.ShapeGeometry(SHAPE, segments);\n\n    return geometry;\n  }\n\n  /**\n   * Создает комнату на сцене.\n   */\n  private createRoom(): void {\n    if (!this.roomData) return\n    const ROOM_PROPORTIONS = this.roomData.roomProportions\n    const RADIUS = 0.1\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n    this.controls.enableDamping = true;\n    this.controls.dampingFactor = 0.15;\n    this.controls.enableZoom = true;\n    this.controls.minDistance = 1;\n    this.controls.maxDistance = 10;\n    const paddingPolarAngle = 5;\n    this.controls.maxPolarAngle = THREE.MathUtils.degToRad(90 - paddingPolarAngle);\n    this.createRoomShape(ROOM_PROPORTIONS.width, ROOM_PROPORTIONS.length, RADIUS);\n    this.rectangleMesh.name = 'roomFloorBase';\n    this.rectangleMesh\n  }\n\n  /**\n   * Рассчитывает данные для сохранения объекта.\n   * @param object Объект сцены.\n   * @returns Данные для сохранения объекта.\n   */\n  private calculateObjectSaveData(object: THREE.Object3D): objectSceneInterface {\n    const FLOOR_SIZE = this.getObjectSize(this.rectangleMesh)\n    const OBJECT_POSITION = object.position\n    const objectSaveData: objectSceneInterface = {\n      objectId: (object.userData as any).id,\n      xMetersDistance: OBJECT_POSITION.x / FLOOR_SIZE.width * this.roomProportions.width,\n      zMetersDistance: OBJECT_POSITION.z / FLOOR_SIZE.length * this.roomProportions.length,\n      yRotate: object.rotation.y\n    }\n    return objectSaveData\n  }\n\n  /**\n   * Рассчитывает данные для перемещения объекта.\n   * @param objectSaveData Данные сохраненного объекта.\n   * @returns Данные для перемещения объекта.\n   */\n  private calculateMoveObjectData(objectSaveData: objectSceneInterface): objectLoadInterface {\n    const FLOOR_SIZE = this.getObjectSize(this.rectangleMesh)\n    return {\n      xDistance: objectSaveData.xMetersDistance * FLOOR_SIZE.width / this.roomProportions.width,\n      zDistance: objectSaveData.zMetersDistance * FLOOR_SIZE.length / this.roomProportions.length,\n      yRotate: objectSaveData.yRotate\n    }\n  }\n\n  /**\n   * Создает форму комнаты.\n   * @param widthRatio Соотношение ширины.\n   * @param heightRatio Соотношение высоты.\n   * @param radius Радиус закругления.\n   */\n  private createRoomShape(widthRatio: number, heightRatio: number, radius: number): void {\n    const CAMERA_FRUSTUM_BOUNDS = this.calculateFrustumBounds();\n    const SHAPE_RATIO = widthRatio / heightRatio;\n    let width: number, height: number;\n\n    if (SHAPE_RATIO  {\n    const JWT = this.accountCookieService.getJwt()\n    if (!JWT || !this.roomData) return\n    const roomData: roomData = {\n      objects: this.roomData.objects,\n      ...this.roomData.roomProportions\n    }\n\n    this.showLoader()\n    for (const object of roomData.objects) {\n      await this.addModel(object.objectId, false, this.abortConroller, this.calculateMoveObjectData(object));\n    }\n    this.closeLoader()\n    this.hasBeenChanged = false\n  }\n\n  private showLoader() {\n    this.isShowLoader = true\n  }\n  private closeLoader() {\n    this.isShowLoader = false\n  }\n  /**\n   * Очищает комнату от объектов.\n   */\n  private clearRoom(): void {\n    for (let i = this.scene.children.length - 1; i >= 0; i--) {\n      const OBJECT = this.scene.children[i];\n      if (OBJECT.type !== 'Scene' && OBJECT.type !== 'HemisphereLight') {\n        this.scene.remove(OBJECT);\n      }\n    }\n  }\n\n  /**\n   * Обрабатывает изменение размера окна.\n   * @param event Событие изменения размера.\n   */\n  @HostListener('window:resize', ['$event'])\n  private onResize(event: Event): void {\n    this.renderer.setSize(window.innerWidth / this.canvasRatioOfWindow, window.innerHeight / this.canvasRatioOfWindow);\n    this.camera.aspect = window.innerWidth / window.innerHeight;\n    this.camera.updateProjectionMatrix();\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  /**\n   * Обрабатывает клик мыши.\n   * @param event Событие клика.\n   */\n  @HostListener('click', ['$event'])\n  private onMouseClick(event: MouseEvent): void {\n    if (this.targetobject) {\n      this.targetobject = undefined;\n      return;\n    }\n    const RECT = (event.target as HTMLCanvasElement).getBoundingClientRect();\n    const X = (event.clientX - RECT.left) / RECT.width * 2 - 1;\n    const Y = -(event.clientY - RECT.top) / RECT.height * 2 + 1;\n\n    this.mouse.x = X;\n    this.mouse.y = Y;\n    this.raycaster.setFromCamera(this.mouse, this.camera);\n\n    const INTERSECTIONS = this.raycaster.intersectObjects(this.scene.children);\n\n    const FOUND_INTERSECTION = INTERSECTIONS.find(intersect => {\n      return intersect.object.name !== 'roomFloorBase' && intersect.object.type !== 'Scene' && intersect.object.type !== 'HemisphereLight'\n    })?.object\n    if (!FOUND_INTERSECTION) return\n    this.targetobject = FOUND_INTERSECTION.parent ? FOUND_INTERSECTION.parent : FOUND_INTERSECTION\n  }\n\n  /**\n   * Поворачивает целевой объект.\n   * @param event Событие нажатия клавиши.\n   */\n  @HostListener('window:keydown', ['$event'])\n  private rotateTargetObject(event: KeyboardEvent): void {\n    if (!this.targetobject) return\n    let rotateAngle = -0.05\n\n    switch (event.key) {\n      case 'q':\n      case 'й':\n        this.targetobject.rotation.y -= rotateAngle\n        break\n      case 'e':\n      case 'у':\n        this.targetobject.rotation.y += rotateAngle\n    }\n  }\n\n  /**\n   * Обрабатывает перемещение мыши.\n   * @param event Событие перемещения мыши.\n   */\n  @HostListener('mousemove', ['$event'])\n  private onMousemove(event: MouseEvent): void {\n    if (!this.targetobject) return;\n\n    const RECT = (event.target as HTMLCanvasElement).getBoundingClientRect();\n    const X = (event.clientX - RECT.left) / RECT.width * 2 - 1;\n    const Y = -(event.clientY - RECT.top) / RECT.height * 2 + 1;\n\n    this.mouse.x = X;\n    this.mouse.y = Y;\n    this.raycaster.setFromCamera(this.mouse, this.camera);\n\n    const INTERSECTIONS = this.raycaster.intersectObject(this.rectangleMesh);\n    if (INTERSECTIONS.length === 0) return;\n\n    const INTERSECTIONS_X = INTERSECTIONS[0].point.x;\n    const INTERSECTION_Z = INTERSECTIONS[0].point.z;\n    const RECTANGLE_MESH_SIZE = this.getObjectSize(this.rectangleMesh);\n    const objectSize = this.getObjectSize(this.targetobject);\n\n    const minX = -RECTANGLE_MESH_SIZE.width / 2 + objectSize.width / 2;\n    const maxX = RECTANGLE_MESH_SIZE.width / 2 - objectSize.width / 2;\n\n    let newXObjectPosition = INTERSECTIONS_X;\n    if (newXObjectPosition  maxX) {\n      newXObjectPosition = maxX;\n    }\n\n    const MIN_Z = -RECTANGLE_MESH_SIZE.length / 2 + objectSize.length / 2;\n    const MAX_Z = RECTANGLE_MESH_SIZE.length / 2 - objectSize.length / 2;\n\n    let newZObjectPosition = INTERSECTION_Z;\n    if (newZObjectPosition  MAX_Z) {\n      newZObjectPosition = MAX_Z;\n    }\n\n    this.targetobject.position.set(newXObjectPosition, 0, newZObjectPosition);\n  }\n\n  /**\n   * Генерирует отчет по комнате.\n   */\n  protected abortLoadRoom() {\n    this.abortConroller.abort()\n    this.abortConroller = new AbortController()\n\n    this.planHouseComponent.sceneOpenToggle = false\n    this.planHouseComponent.closeViewRoom()\n\n    const PLAN_ID = this.route.snapshot.params['planId']\n    this.router.navigateByUrl('/plan/' + PLAN_ID)\n  }\n\n  /**\n   * Генерирует отчет по комнате.\n   */\n  protected async getReport(): Promise {\n    const JWT = this.accountCookieService.getJwt()\n    if (!JWT || !this.roomData?._id) return\n\n    const oldCameraPosition = this.camera.position.clone();\n    const oldCameraRotation = this.camera.rotation.clone();\n\n    this.camera.position.set(0, 7, 0)\n    this.camera.rotation.set(THREE.MathUtils.degToRad(-90), 0, 0)\n    this.renderer.render(this.scene, this.camera);\n    const imageDataURL = this.renderer.domElement.toDataURL('image/png')\n    const imageDataResponse = await fetch(imageDataURL)\n\n    this.camera.position.copy(oldCameraPosition);\n    this.camera.rotation.copy(oldCameraRotation);\n\n    if (!imageDataResponse.ok) {\n      this.notification.setError('Ошибка при рендере', 5000)\n    }\n    const imageDataBlob = await imageDataResponse.blob()\n\n    this.projectService.GETgetReportOfRoom(JWT, this.roomData?._id, imageDataBlob)\n  }\n\n  /**\n   * Удаляет выбранную модель.\n   */\n  protected deleteModel(): void {\n    if (!this.targetobject) return\n    this.scene.remove(this.targetobject)\n    this.saveRoom()\n  }\n\n  /**\n   * Сохраняет текущее состояние комнаты.\n   */\n  public saveRoom(): void {\n    if (!this.roomData) return\n    const OBJECTS_SCENE_ARRAY = this.scene.children.filter(object => {\n      if (\n        object.name !== 'roomFloorBase' &&\n        object.type !== 'Scene' &&\n        object.type !== 'HemisphereLight'\n      ) {\n        return true;\n      }\n      return false;\n    })\n      .map(object => {\n        return this.calculateObjectSaveData(object)\n      })\n    const ROOM_OBJECTS_DATA = OBJECTS_SCENE_ARRAY\n    this.roomData.objects = OBJECTS_SCENE_ARRAY\n    this.saveObjectsEmitter.emit(ROOM_OBJECTS_DATA)\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/option.html":{"url":"interfaces/option.html","title":"interface - option","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  option\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/category.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Опция для select-фильтра\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            queryValue\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Название опции\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        queryValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        queryValue:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Значение опции для запроса\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные категории\n */\nexport interface categoryData {\n  /** Название категории */\n  name: string;\n  /** Перевод категории в единственном числе */\n  translateOne: string;\n  /** Перевод категории во множественном числе */\n  translateMany: string;\n  /** Массив фильтров категории */\n  filters: filter[];\n}\n\n/**\n * Базовый фильтр\n */\ninterface baseFilter {\n  /** Имя фильтра */\n  name: string;\n  /** Поле, по которому фильтр */\n  field: string;\n}\n\n/**\n * Опция для select-фильтра\n */\nexport interface option {\n  /** Название опции */\n  name: string;\n  /** Значение опции для запроса */\n  queryValue: string;\n}\n\n/**\n * Фильтр типа select\n */\ninterface selectFilter extends baseFilter {\n  /** Тип фильтра */\n  type: 'select';\n  /** Варианты выбора */\n  options: option[];\n}\n\n/**\n * Фильтр типа range\n */\ninterface rangeFilter extends baseFilter {\n  /** Тип фильтра */\n  type: 'range';\n  /** Минимальное значение */\n  minValue: number;\n  /** Максимальное значение */\n  maxValue: number;\n}\n\n/**\n * Тип фильтра: select или range\n */\nexport type filter = rangeFilter | selectFilter;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CategoryService {\n  /** Базовый URL для работы с категориями */\n  private baseServiceUrl = baseUrl + 'category';\n\n  constructor(\n    private httpModule: HttpClient\n  ) { }\n\n  /**\n   * Получение всех категорий\n   * @returns Promise с массивом категорий\n   */\n  GETgetAllCategories() {\n    return firstValueFrom(this.httpModule.get(this.baseServiceUrl)) as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/optionRangeQueryData.html":{"url":"interfaces/optionRangeQueryData.html","title":"interface - optionRangeQueryData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  optionRangeQueryData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/shop.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Фильтр типа \"диапазон значений\".\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            max\n                                        \n                                \n                                \n                                        \n                                            min\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        max\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        max:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Максимум в диапазоне\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        min\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        min:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Минимум в диапазоне\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                            \n                                \n                                    Тип фильтра\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { firstValueFrom } from 'rxjs';\nimport { modelInterface } from '../components/scene/scene.component';\n\n/**\n * Интерфейс объекта фильтров, отправляемых на сервер.\n*/\nexport interface queryData {\n  /** Любое ключ:значение */\n  [key: string]: optionSelectQueryData | optionRangeQueryData;\n}\n\n/**\n * Фильтр типа \"выбор из списка\".\n */\ninterface optionSelectQueryData {\n  /** Тип фильтра */\n  type: 'select';\n  /** Выбранные значения */\n  value: string[];\n}\n\n/**\n * Фильтр типа \"диапазон значений\".\n*/\ninterface optionRangeQueryData {\n  /** Тип фильтра */\n  type: 'range';\n  /** Минимум в диапазоне */\n  min: number;\n  /** Максимум в диапазоне */\n  max: number;\n}\n\n/**\n * Интерфейс данных о мебели, получаемых из магазина.\n */\nexport interface furnitureShopData {\n  /** Название */\n  name: string;\n  /** Стоимость мебели */\n  cost: number;\n  /** Неполный Url превью (вначало надо вставить baseUrl сервера) */\n  previewUrl: string;\n  /** Id мебели */\n  furnitureCardId: string;\n  /** Массив цветов мебели */\n  colors: string[];\n  /** Габариты мебели */\n  proportions: modelInterface;\n}\n\n/**\n * Интерфейс клиентских фильтров, значения которых формируются на основе ответа от сервера.\n */\nexport interface clientFilters {\n  /** Цвета мебели */\n  colors: string[];\n  /** Минимальная стоимость */\n  minCost: number;\n  /** Максимальная стоимость */\n  maxCost: number;\n}\n\n/**\n * Сервис для получения данных о мебели из магазина, с учетом фильтрации и пагинации.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ShopService {\n  /** Базовый URL сервиса */\n  private baseServiceUrl = baseUrl + 'shop';\n\n  /** Активный AbortController для отмены предыдущих запросов */\n  private abortController: AbortController | null = null;\n\n  constructor(private httpModule: HttpClient) { }\n\n  /**\n   * Выполняет GET-запрос на получение данных по категории мебели.\n   * Поддерживает фильтрацию и стартовую позицию для пагинации.\n   * При повторном вызове отменяет предыдущий запрос.\n   *\n   * @param categoryName - Название категории мебели.\n   * @param startRange - Начальный индекс (offset) выборки.\n   * @param queryData - Объект фильтров (опционально).\n   *\n   * @returns Промис с объектом, содержащим:\n   * - `resultsArray`: массив карточек мебели с обновлёнными URL превью\n   * - `resultsClientFiltersData`: агрегированные данные фильтров для клиента\n   *\n   * @throws {Error} В случае сетевой ошибки или отмены запроса.\n   */\n  async GETgetCategoryData(categoryName: string, startRange: number, queryData?: queryData) {\n    if (this.abortController) {\n      this.abortController.abort();\n    }\n\n    this.abortController = new AbortController();\n\n    try {\n      let requestUrl = `${this.baseServiceUrl}?category=${categoryName}&startRange=${startRange}`;\n\n      if (queryData && Object.keys(queryData).length > 0) {\n        const params = new URLSearchParams();\n        params.append('filters', JSON.stringify(queryData));\n        requestUrl += `&${new URLSearchParams(params).toString()}`;\n      }\n\n      const response = await fetch(\n        requestUrl,\n        { signal: this.abortController.signal }\n      );\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Ошибка: ${response.status} — ${errorText}`);\n      }\n\n      const RESPONSE = await response.json() as { resultsArray: furnitureShopData[] };\n      const RESULTS_ARRAY = RESPONSE.resultsArray;\n\n      const UPDATED_RESULTS = RESULTS_ARRAY.map(furniture => ({\n        ...furniture,\n        previewUrl: baseUrl + furniture.previewUrl\n      }));\n\n      return {\n        resultsArray: UPDATED_RESULTS,\n        resultsClientFiltersData: this.getFindOptionsByResult(UPDATED_RESULTS)\n      };\n\n    } catch (error: any) {\n      if (error.name === 'AbortError') {\n      } else {\n        console.error('Ошибка запроса:', error);\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Формирует объект фильтров на основе полученных данных о мебели.\n   *\n   * @param resultsArray - Массив карточек мебели\n   * @returns Объект клиентских фильтров (цвета, минимальная и максимальная цена)\n   */\n  private getFindOptionsByResult(resultsArray: furnitureShopData[]) {\n    let filtersObject: clientFilters = {\n      colors: [],\n      minCost: Infinity,\n      maxCost: -Infinity\n    };\n\n    resultsArray.forEach(furnitureData => {\n      if (furnitureData.cost  filtersObject.maxCost) filtersObject.maxCost = furnitureData.cost;\n\n      filtersObject.colors.push(...furnitureData.colors);\n    });\n\n    filtersObject.minCost = filtersObject.minCost!== Infinity ? filtersObject.minCost : 0;\n    filtersObject.maxCost = filtersObject.maxCost!== -Infinity ? filtersObject.maxCost : 0;\n\n    filtersObject.colors = [...new Set(filtersObject.colors)];\n    return filtersObject;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/optionSelectQueryData.html":{"url":"interfaces/optionSelectQueryData.html","title":"interface - optionSelectQueryData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  optionSelectQueryData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/shop.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Фильтр типа \"выбор из списка\".\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            type\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                            \n                                \n                                    Тип фильтра\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Выбранные значения\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { firstValueFrom } from 'rxjs';\nimport { modelInterface } from '../components/scene/scene.component';\n\n/**\n * Интерфейс объекта фильтров, отправляемых на сервер.\n*/\nexport interface queryData {\n  /** Любое ключ:значение */\n  [key: string]: optionSelectQueryData | optionRangeQueryData;\n}\n\n/**\n * Фильтр типа \"выбор из списка\".\n */\ninterface optionSelectQueryData {\n  /** Тип фильтра */\n  type: 'select';\n  /** Выбранные значения */\n  value: string[];\n}\n\n/**\n * Фильтр типа \"диапазон значений\".\n*/\ninterface optionRangeQueryData {\n  /** Тип фильтра */\n  type: 'range';\n  /** Минимум в диапазоне */\n  min: number;\n  /** Максимум в диапазоне */\n  max: number;\n}\n\n/**\n * Интерфейс данных о мебели, получаемых из магазина.\n */\nexport interface furnitureShopData {\n  /** Название */\n  name: string;\n  /** Стоимость мебели */\n  cost: number;\n  /** Неполный Url превью (вначало надо вставить baseUrl сервера) */\n  previewUrl: string;\n  /** Id мебели */\n  furnitureCardId: string;\n  /** Массив цветов мебели */\n  colors: string[];\n  /** Габариты мебели */\n  proportions: modelInterface;\n}\n\n/**\n * Интерфейс клиентских фильтров, значения которых формируются на основе ответа от сервера.\n */\nexport interface clientFilters {\n  /** Цвета мебели */\n  colors: string[];\n  /** Минимальная стоимость */\n  minCost: number;\n  /** Максимальная стоимость */\n  maxCost: number;\n}\n\n/**\n * Сервис для получения данных о мебели из магазина, с учетом фильтрации и пагинации.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ShopService {\n  /** Базовый URL сервиса */\n  private baseServiceUrl = baseUrl + 'shop';\n\n  /** Активный AbortController для отмены предыдущих запросов */\n  private abortController: AbortController | null = null;\n\n  constructor(private httpModule: HttpClient) { }\n\n  /**\n   * Выполняет GET-запрос на получение данных по категории мебели.\n   * Поддерживает фильтрацию и стартовую позицию для пагинации.\n   * При повторном вызове отменяет предыдущий запрос.\n   *\n   * @param categoryName - Название категории мебели.\n   * @param startRange - Начальный индекс (offset) выборки.\n   * @param queryData - Объект фильтров (опционально).\n   *\n   * @returns Промис с объектом, содержащим:\n   * - `resultsArray`: массив карточек мебели с обновлёнными URL превью\n   * - `resultsClientFiltersData`: агрегированные данные фильтров для клиента\n   *\n   * @throws {Error} В случае сетевой ошибки или отмены запроса.\n   */\n  async GETgetCategoryData(categoryName: string, startRange: number, queryData?: queryData) {\n    if (this.abortController) {\n      this.abortController.abort();\n    }\n\n    this.abortController = new AbortController();\n\n    try {\n      let requestUrl = `${this.baseServiceUrl}?category=${categoryName}&startRange=${startRange}`;\n\n      if (queryData && Object.keys(queryData).length > 0) {\n        const params = new URLSearchParams();\n        params.append('filters', JSON.stringify(queryData));\n        requestUrl += `&${new URLSearchParams(params).toString()}`;\n      }\n\n      const response = await fetch(\n        requestUrl,\n        { signal: this.abortController.signal }\n      );\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Ошибка: ${response.status} — ${errorText}`);\n      }\n\n      const RESPONSE = await response.json() as { resultsArray: furnitureShopData[] };\n      const RESULTS_ARRAY = RESPONSE.resultsArray;\n\n      const UPDATED_RESULTS = RESULTS_ARRAY.map(furniture => ({\n        ...furniture,\n        previewUrl: baseUrl + furniture.previewUrl\n      }));\n\n      return {\n        resultsArray: UPDATED_RESULTS,\n        resultsClientFiltersData: this.getFindOptionsByResult(UPDATED_RESULTS)\n      };\n\n    } catch (error: any) {\n      if (error.name === 'AbortError') {\n      } else {\n        console.error('Ошибка запроса:', error);\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Формирует объект фильтров на основе полученных данных о мебели.\n   *\n   * @param resultsArray - Массив карточек мебели\n   * @returns Объект клиентских фильтров (цвета, минимальная и максимальная цена)\n   */\n  private getFindOptionsByResult(resultsArray: furnitureShopData[]) {\n    let filtersObject: clientFilters = {\n      colors: [],\n      minCost: Infinity,\n      maxCost: -Infinity\n    };\n\n    resultsArray.forEach(furnitureData => {\n      if (furnitureData.cost  filtersObject.maxCost) filtersObject.maxCost = furnitureData.cost;\n\n      filtersObject.colors.push(...furnitureData.colors);\n    });\n\n    filtersObject.minCost = filtersObject.minCost!== Infinity ? filtersObject.minCost : 0;\n    filtersObject.maxCost = filtersObject.maxCost!== -Infinity ? filtersObject.maxCost : 0;\n\n    filtersObject.colors = [...new Set(filtersObject.colors)];\n    return filtersObject;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/projectInformation.html":{"url":"interfaces/projectInformation.html","title":"interface - projectInformation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  projectInformation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/project.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс информации о проекте\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            rooms\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Название проекта\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rooms\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rooms:     roomData[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     roomData[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Список комнат в проекте\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { baseUrl } from '.';\nimport { modelInterface, objectSceneInterface } from '../components/scene/scene.component';\nimport { firstValueFrom } from 'rxjs';\nimport { reportResponse } from './report.service';\nimport { ReportService } from './report.service';\n\n/**\n * Интерфейс описания комнаты\n */\nexport interface roomData {\n  /** Название комнаты */\n  name: string;\n  /** Сетка размещения (например, '1 / 2 / 3 / 4') */\n  gridArea: string;\n  /** Пропорции комнаты (ширина, высота, глубина) */\n  roomProportions: modelInterface;\n  /** Список объектов, размещённых в комнате */\n  objects: objectSceneInterface[];\n  /** (Необязательно) ID комнаты */\n  _id?: string;\n}\n\n/**\n * Интерфейс информации о проекте\n */\nexport interface projectInformation {\n  /** Название проекта */\n  name: string;\n  /** Список комнат в проекте */\n  rooms: roomData[];\n}\n\n/**\n * Интерфейс информации о проекте, получаемой с сервера\n */\nexport interface projectServerInformation extends projectInformation {\n  /** ID проекта */\n  _id: string;\n  /** ID автора проекта */\n  authorId: string;\n}\n\n/**\n * Сервис для управления проектами: создание, удаление, получение, обновление и генерация отчетов\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProjectService {\n  /** Базовый URL для API запросов к проектам */\n  private baseServiceUrl = baseUrl + 'project';\n\n  constructor(\n    private httpModule: HttpClient,\n    private reportService: ReportService\n  ) {}\n\n  /**\n   * Создание нового проекта\n   * @param jwt JWT токен для авторизации\n   * @param name Название проекта\n   * @returns Промис с объектом, содержащим данные проекта\n   */\n  POSTcreateProject(jwt: string, name: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('name', name);\n    return firstValueFrom(this.httpModule.post(this.baseServiceUrl, HTTP_PARAMS)) as Promise;\n  }\n\n  /**\n   * Удаление проекта\n   * @param jwt JWT токен для авторизации\n   * @param projectId ID проекта, который нужно удалить\n   * @returns Промис с сообщением об удалении\n   */\n  DELETEdeleteProject(jwt: string, projectId: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('projectId', projectId);\n    return firstValueFrom(this.httpModule.delete(this.baseServiceUrl, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Получение проекта по ID\n   * @param jwt JWT токен для авторизации\n   * @param projectId ID проекта, который нужно получить\n   * @returns Промис с данными проекта\n   */\n  GETgetProject(jwt: string, projectId: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('projectId', projectId);\n    return firstValueFrom(this.httpModule.get(this.baseServiceUrl, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Обновление данных проекта\n   * @param jwt JWT токен для авторизации\n   * @param projectId ID проекта, который нужно обновить\n   * @param projectInformation Новые данные проекта\n   * @returns Промис с сообщением об успешном обновлении\n   */\n  PUTupdateProject(jwt: string, projectId: string, projectInformation: projectInformation): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('projectId', projectId);\n    return firstValueFrom(this.httpModule.put(this.baseServiceUrl, projectInformation, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Получение отчета о комнате и генерация PDF отчета\n   * @param jwt JWT токен для авторизации\n   * @param roomId ID комнаты, по которой нужно получить отчет\n   * @param renderImage Изображение рендера комнаты в формате Blob\n   * @returns Промис, завершающийся после создания отчета\n   */\n  async GETgetReportOfRoom(jwt: string, roomId: string, renderImage: Blob): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('roomId', roomId);\n\n    const RESPONSE = await firstValueFrom(this.httpModule.get(this.baseServiceUrl + '/room', { params: HTTP_PARAMS })) as reportResponse;\n\n    RESPONSE.furnitures = RESPONSE.furnitures.map(furnitureData => {\n      furnitureData.previewUrl = baseUrl + furnitureData.previewUrl;\n      return furnitureData;\n    });\n\n    this.reportService.createReport(RESPONSE, renderImage);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/projectServerInformation.html":{"url":"interfaces/projectServerInformation.html","title":"interface - projectServerInformation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  projectServerInformation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/project.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс информации о проекте, получаемой с сервера\n\n            \n\n            \n                Extends\n            \n            \n                            projectInformation\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            _id\n                                        \n                                \n                                \n                                        \n                                            authorId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        _id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        _id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    ID проекта\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        authorId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        authorId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    ID автора проекта\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { baseUrl } from '.';\nimport { modelInterface, objectSceneInterface } from '../components/scene/scene.component';\nimport { firstValueFrom } from 'rxjs';\nimport { reportResponse } from './report.service';\nimport { ReportService } from './report.service';\n\n/**\n * Интерфейс описания комнаты\n */\nexport interface roomData {\n  /** Название комнаты */\n  name: string;\n  /** Сетка размещения (например, '1 / 2 / 3 / 4') */\n  gridArea: string;\n  /** Пропорции комнаты (ширина, высота, глубина) */\n  roomProportions: modelInterface;\n  /** Список объектов, размещённых в комнате */\n  objects: objectSceneInterface[];\n  /** (Необязательно) ID комнаты */\n  _id?: string;\n}\n\n/**\n * Интерфейс информации о проекте\n */\nexport interface projectInformation {\n  /** Название проекта */\n  name: string;\n  /** Список комнат в проекте */\n  rooms: roomData[];\n}\n\n/**\n * Интерфейс информации о проекте, получаемой с сервера\n */\nexport interface projectServerInformation extends projectInformation {\n  /** ID проекта */\n  _id: string;\n  /** ID автора проекта */\n  authorId: string;\n}\n\n/**\n * Сервис для управления проектами: создание, удаление, получение, обновление и генерация отчетов\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProjectService {\n  /** Базовый URL для API запросов к проектам */\n  private baseServiceUrl = baseUrl + 'project';\n\n  constructor(\n    private httpModule: HttpClient,\n    private reportService: ReportService\n  ) {}\n\n  /**\n   * Создание нового проекта\n   * @param jwt JWT токен для авторизации\n   * @param name Название проекта\n   * @returns Промис с объектом, содержащим данные проекта\n   */\n  POSTcreateProject(jwt: string, name: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('name', name);\n    return firstValueFrom(this.httpModule.post(this.baseServiceUrl, HTTP_PARAMS)) as Promise;\n  }\n\n  /**\n   * Удаление проекта\n   * @param jwt JWT токен для авторизации\n   * @param projectId ID проекта, который нужно удалить\n   * @returns Промис с сообщением об удалении\n   */\n  DELETEdeleteProject(jwt: string, projectId: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('projectId', projectId);\n    return firstValueFrom(this.httpModule.delete(this.baseServiceUrl, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Получение проекта по ID\n   * @param jwt JWT токен для авторизации\n   * @param projectId ID проекта, который нужно получить\n   * @returns Промис с данными проекта\n   */\n  GETgetProject(jwt: string, projectId: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('projectId', projectId);\n    return firstValueFrom(this.httpModule.get(this.baseServiceUrl, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Обновление данных проекта\n   * @param jwt JWT токен для авторизации\n   * @param projectId ID проекта, который нужно обновить\n   * @param projectInformation Новые данные проекта\n   * @returns Промис с сообщением об успешном обновлении\n   */\n  PUTupdateProject(jwt: string, projectId: string, projectInformation: projectInformation): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('projectId', projectId);\n    return firstValueFrom(this.httpModule.put(this.baseServiceUrl, projectInformation, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Получение отчета о комнате и генерация PDF отчета\n   * @param jwt JWT токен для авторизации\n   * @param roomId ID комнаты, по которой нужно получить отчет\n   * @param renderImage Изображение рендера комнаты в формате Blob\n   * @returns Промис, завершающийся после создания отчета\n   */\n  async GETgetReportOfRoom(jwt: string, roomId: string, renderImage: Blob): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('roomId', roomId);\n\n    const RESPONSE = await firstValueFrom(this.httpModule.get(this.baseServiceUrl + '/room', { params: HTTP_PARAMS })) as reportResponse;\n\n    RESPONSE.furnitures = RESPONSE.furnitures.map(furnitureData => {\n      furnitureData.previewUrl = baseUrl + furnitureData.previewUrl;\n      return furnitureData;\n    });\n\n    this.reportService.createReport(RESPONSE, renderImage);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/queryData.html":{"url":"interfaces/queryData.html","title":"interface - queryData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  queryData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/shop.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс объекта фильтров, отправляемых на сервер.\n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    optionSelectQueryData | optionRangeQueryData\n\n                    \n                \n                        \n                            \n                                Defined in src/services/shop.service.ts:10\n                            \n                        \n                \n                    \n                        Любое ключ:значение\n\n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { firstValueFrom } from 'rxjs';\nimport { modelInterface } from '../components/scene/scene.component';\n\n/**\n * Интерфейс объекта фильтров, отправляемых на сервер.\n*/\nexport interface queryData {\n  /** Любое ключ:значение */\n  [key: string]: optionSelectQueryData | optionRangeQueryData;\n}\n\n/**\n * Фильтр типа \"выбор из списка\".\n */\ninterface optionSelectQueryData {\n  /** Тип фильтра */\n  type: 'select';\n  /** Выбранные значения */\n  value: string[];\n}\n\n/**\n * Фильтр типа \"диапазон значений\".\n*/\ninterface optionRangeQueryData {\n  /** Тип фильтра */\n  type: 'range';\n  /** Минимум в диапазоне */\n  min: number;\n  /** Максимум в диапазоне */\n  max: number;\n}\n\n/**\n * Интерфейс данных о мебели, получаемых из магазина.\n */\nexport interface furnitureShopData {\n  /** Название */\n  name: string;\n  /** Стоимость мебели */\n  cost: number;\n  /** Неполный Url превью (вначало надо вставить baseUrl сервера) */\n  previewUrl: string;\n  /** Id мебели */\n  furnitureCardId: string;\n  /** Массив цветов мебели */\n  colors: string[];\n  /** Габариты мебели */\n  proportions: modelInterface;\n}\n\n/**\n * Интерфейс клиентских фильтров, значения которых формируются на основе ответа от сервера.\n */\nexport interface clientFilters {\n  /** Цвета мебели */\n  colors: string[];\n  /** Минимальная стоимость */\n  minCost: number;\n  /** Максимальная стоимость */\n  maxCost: number;\n}\n\n/**\n * Сервис для получения данных о мебели из магазина, с учетом фильтрации и пагинации.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ShopService {\n  /** Базовый URL сервиса */\n  private baseServiceUrl = baseUrl + 'shop';\n\n  /** Активный AbortController для отмены предыдущих запросов */\n  private abortController: AbortController | null = null;\n\n  constructor(private httpModule: HttpClient) { }\n\n  /**\n   * Выполняет GET-запрос на получение данных по категории мебели.\n   * Поддерживает фильтрацию и стартовую позицию для пагинации.\n   * При повторном вызове отменяет предыдущий запрос.\n   *\n   * @param categoryName - Название категории мебели.\n   * @param startRange - Начальный индекс (offset) выборки.\n   * @param queryData - Объект фильтров (опционально).\n   *\n   * @returns Промис с объектом, содержащим:\n   * - `resultsArray`: массив карточек мебели с обновлёнными URL превью\n   * - `resultsClientFiltersData`: агрегированные данные фильтров для клиента\n   *\n   * @throws {Error} В случае сетевой ошибки или отмены запроса.\n   */\n  async GETgetCategoryData(categoryName: string, startRange: number, queryData?: queryData) {\n    if (this.abortController) {\n      this.abortController.abort();\n    }\n\n    this.abortController = new AbortController();\n\n    try {\n      let requestUrl = `${this.baseServiceUrl}?category=${categoryName}&startRange=${startRange}`;\n\n      if (queryData && Object.keys(queryData).length > 0) {\n        const params = new URLSearchParams();\n        params.append('filters', JSON.stringify(queryData));\n        requestUrl += `&${new URLSearchParams(params).toString()}`;\n      }\n\n      const response = await fetch(\n        requestUrl,\n        { signal: this.abortController.signal }\n      );\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Ошибка: ${response.status} — ${errorText}`);\n      }\n\n      const RESPONSE = await response.json() as { resultsArray: furnitureShopData[] };\n      const RESULTS_ARRAY = RESPONSE.resultsArray;\n\n      const UPDATED_RESULTS = RESULTS_ARRAY.map(furniture => ({\n        ...furniture,\n        previewUrl: baseUrl + furniture.previewUrl\n      }));\n\n      return {\n        resultsArray: UPDATED_RESULTS,\n        resultsClientFiltersData: this.getFindOptionsByResult(UPDATED_RESULTS)\n      };\n\n    } catch (error: any) {\n      if (error.name === 'AbortError') {\n      } else {\n        console.error('Ошибка запроса:', error);\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Формирует объект фильтров на основе полученных данных о мебели.\n   *\n   * @param resultsArray - Массив карточек мебели\n   * @returns Объект клиентских фильтров (цвета, минимальная и максимальная цена)\n   */\n  private getFindOptionsByResult(resultsArray: furnitureShopData[]) {\n    let filtersObject: clientFilters = {\n      colors: [],\n      minCost: Infinity,\n      maxCost: -Infinity\n    };\n\n    resultsArray.forEach(furnitureData => {\n      if (furnitureData.cost  filtersObject.maxCost) filtersObject.maxCost = furnitureData.cost;\n\n      filtersObject.colors.push(...furnitureData.colors);\n    });\n\n    filtersObject.minCost = filtersObject.minCost!== Infinity ? filtersObject.minCost : 0;\n    filtersObject.maxCost = filtersObject.maxCost!== -Infinity ? filtersObject.maxCost : 0;\n\n    filtersObject.colors = [...new Set(filtersObject.colors)];\n    return filtersObject;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/rangeFilter.html":{"url":"interfaces/rangeFilter.html","title":"interface - rangeFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  rangeFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/category.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Фильтр типа range\n\n            \n\n            \n                Extends\n            \n            \n                            baseFilter\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            maxValue\n                                        \n                                \n                                \n                                        \n                                            minValue\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        maxValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        maxValue:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Максимальное значение\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        minValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        minValue:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Минимальное значение\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                            \n                                \n                                    Тип фильтра\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные категории\n */\nexport interface categoryData {\n  /** Название категории */\n  name: string;\n  /** Перевод категории в единственном числе */\n  translateOne: string;\n  /** Перевод категории во множественном числе */\n  translateMany: string;\n  /** Массив фильтров категории */\n  filters: filter[];\n}\n\n/**\n * Базовый фильтр\n */\ninterface baseFilter {\n  /** Имя фильтра */\n  name: string;\n  /** Поле, по которому фильтр */\n  field: string;\n}\n\n/**\n * Опция для select-фильтра\n */\nexport interface option {\n  /** Название опции */\n  name: string;\n  /** Значение опции для запроса */\n  queryValue: string;\n}\n\n/**\n * Фильтр типа select\n */\ninterface selectFilter extends baseFilter {\n  /** Тип фильтра */\n  type: 'select';\n  /** Варианты выбора */\n  options: option[];\n}\n\n/**\n * Фильтр типа range\n */\ninterface rangeFilter extends baseFilter {\n  /** Тип фильтра */\n  type: 'range';\n  /** Минимальное значение */\n  minValue: number;\n  /** Максимальное значение */\n  maxValue: number;\n}\n\n/**\n * Тип фильтра: select или range\n */\nexport type filter = rangeFilter | selectFilter;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CategoryService {\n  /** Базовый URL для работы с категориями */\n  private baseServiceUrl = baseUrl + 'category';\n\n  constructor(\n    private httpModule: HttpClient\n  ) { }\n\n  /**\n   * Получение всех категорий\n   * @returns Promise с массивом категорий\n   */\n  GETgetAllCategories() {\n    return firstValueFrom(this.httpModule.get(this.baseServiceUrl)) as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/reportResponse.html":{"url":"interfaces/reportResponse.html","title":"interface - reportResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  reportResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/report.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            furnitures\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            proportions\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        furnitures\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        furnitures:     literal type[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        proportions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        proportions:         modelInterface\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         modelInterface\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { baseClientUrl } from '.';\nimport { modelInterface } from '../components/scene/scene.component';\nimport { shopData } from './furniture-card-control.service';\n\nexport interface reportResponse {\n    name: string;\n    proportions: modelInterface,\n    furnitures: {\n        name: string;\n        furnitureCardId: string;\n        previewUrl: string;\n        proportions: modelInterface;\n        shops: shopData[];\n        category: string;\n    }[]\n}\n\n/**\n * Сервис для генерации HTML-отчёта по комнате и мебели.\n * Открывает отчет в новой вкладке и скачивает его.\n *\n * @export\n * @class ReportService\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class ReportService {\n    constructor() { }\n\n    /**\n     * Инициирует создание HTML-отчета.\n     *\n     * @param {reportResponse} roomData - Данные комнаты и мебели\n     * @param {Blob} renderImage - Изображение визуализации комнаты\n     * @memberof ReportService\n     */\n    createReport(roomData: reportResponse, renderImage: Blob): void {\n        this.createReportHTML(roomData, renderImage);\n    }\n\n    /**\n     * Создаёт HTML-страницу отчета и открывает её.\n     *\n     * @private\n     * @param {reportResponse} roomData - Данные комнаты\n     * @param {Blob} renderImage - Рендер комнаты\n     * @memberof ReportService\n     */\n    private createReportHTML(roomData: reportResponse, renderImage: Blob): void {\n        const reader = new FileReader();\n\n        reader.onload = () => {\n            const imageUrl = reader.result as string;\n            const htmlContent = this.generateHtmlContent(roomData, imageUrl);\n            this.openHtmlInNewTab(roomData.name, htmlContent);\n        };\n\n        reader.readAsDataURL(renderImage);\n    }\n\n    /**\n     * Генерирует HTML-содержимое отчета.\n     *\n     * @private\n     * @param {reportResponse} roomData - Данные комнаты и мебели\n     * @param {string} renderUrl - URL рендер-изображения\n     * @returns {string} HTML-контент отчета\n     * @memberof ReportService\n     */\n    private generateHtmlContent(roomData: reportResponse, renderUrl: string): string {\n        return `\n      \n\n\n\n    \n    \n    Отчет по комнате ${roomData.name}\n    \n        @font-face {\n            font-family: 'Calypso';\n            src: url('${baseClientUrl}assets/fonts/Calypso.ttf') format('truetype');\n        }\n\n        @font-face {\n            font-family: 'Courier New';\n            src: url('${baseClientUrl}assets/fonts/Courier New.ttf') format('truetype');\n        }\n\n        body {\n            margin: 0;\n            padding: 40px;\n            background-color: black;\n            color: #DAD7CD;\n            font-family: 'Courier New', monospace;\n            line-height: 1.6;\n            display: flex;\n            flex-direction: column;\n        }\n\n        .title {\n            font-family: 'Calypso', 'Courier New', monospace;\n            text-align: center;\n            font-size: 3rem;\n            margin-bottom: 40px;\n            color: #A3B18A;\n            text-transform: uppercase;\n            letter-spacing: 2px;\n        }\n\n        .renderTitle {\n            font-family: 'Courier New', 'Courier New', monospace;\n            font-weight: 400;\n            font-size: 1.5rem;\n            margin: 30px 0 15px;\n            color: #A3B18A;\n            border-bottom: 2px solid #A3B18A;\n            padding-bottom: 8px;\n            width:fit-content;\n            align-self: center;\n        }\n\n        .furnituresSpanTitle {\n            font-family: 'Calypso', 'Courier New', monospace;\n            font-size: 2rem;\n            margin: 40px 0 20px;\n            color: #A3B18A;\n            display: block;\n            text-align: center;\n        }\n\n        .furniture {\n            display: flex;\n            flex-direction: column;\n            border-radius: 15px;\n            padding: 25px;\n            margin-bottom: 30px;\n            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);\n            transition: transform 0.3s ease;\n        }\n\n        .furnitureTitle {\n            font-family: 'Courier New', monospace;\n            font-weight: 400;\n            margin: 0 auto 15px;\n            font-size: 1.3rem;\n            color: #DAD7CD;\n        }\n\n        .furnitureImage {\n            margin: 0 auto;\n            max-width: 100%;\n            border-radius: 10px;\n            margin-bottom: 20px;\n        }\n\n        .furnitureFooter {\n            display: flex;\n            gap: 30px;\n            flex-direction: row;\n            justify-content: center;\n            flex-wrap: wrap;\n        }\n\n        .paramsTitle,\n        .shopsTitle {\n            font-family: 'Calypso', 'Courier New', monospace;\n            font-size: 1.2rem;\n            color: #A3B18A;\n            margin-bottom: 15px;\n        }\n\n        .paramsSpan {\n            width: fit-content;\n        }\n\n        .paramsList {\n            list-style-type: none;\n            padding: 0;\n            margin: 0;\n        }\n\n        .paramsItem {\n            margin-bottom: 8px;\n            position: relative;\n            padding-left: 20px;\n        }\n\n\n        a {\n            display: inline-block;\n            background-color: white;\n            color: black;\n            text-decoration: none;\n            border-radius: 10px;\n            transition: all 0.3s ease;\n            border: 2px solid transparent;\n            width:250px;\n            max-width: 250px;\n            text-align: center;\n            font-family: 'Courier New', monospace;\n            font-weight: 400;\n            font-size: 0.8rem;\n            height:40px;\n            align-content:center;\n            box-sizing:border-box;\n        }\n\n        a:hover {\n            background-color: transparent;\n            color: white;\n            border-color: white;\n        }\n\n        img {\n            width: 100%;\n            max-height: 500px;\n            object-fit: contain;\n            border-radius: 10px;\n            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);\n            margin-bottom: 30px;\n        }\n\n        .openLink {\n            width:250px;\n            max-width: 250px;\n            margin: 0 auto;\n            margin-top: 20px;\n        }\n        .furnitureLink{\n            background-color: #A3B18A;\n            color:white;\n            &:hover{\n                background-color: #344E41;\n                border: 2px solid #344E41;\n            }\n        }\n\n        @media (max-width: 768px) {\n            .furnitureFooter {\n                flex-direction: column;\n                align-items: center;\n                gap: 20px;\n                width: 100%;\n            }\n\n            .paramsSpan,\n            .shopsSpan {\n                width: 90%;\n            }\n\n            .openLink,.shopLink {\n                width: 100%;\n            }\n\n            .title {\n                font-size: 2rem;\n            }\n\n            body {\n                padding: 20px;\n            }\n            .paramsItem{\n                padding-left:0;\n            }\n                \n        }\n    \n\nОтчет по комнате${roomData.name}\nВид сверху\n\n\nДобавленная мебель\n${roomData.furnitures.map(furniture => `\n    \n    ${furniture.name}\n    \n    \n    \n     Параметры \n    \n     Ширина: ${furniture.proportions.width}cм \n     Высота: ${furniture.proportions.height}cм \n     Длина: ${furniture.proportions.length}cм \n    \n    \n    \n    ${furniture.shops.map(shopData => `\n         Магазины \n        \n      \n      ${this.costPipe(shopData.cost)}\n      \n      \n      `).join('')\n            }\n    \n    \n     Посмотреть мебель \n    \n    `).join('')}\nПосмотреть проект\n\n\n    `;\n    }\n\n    /**\n     * Форматирует цену с разделителями тысяч.\n     *\n     * @private\n     * @param {number} cost - Стоимость\n     * @returns {string} Отформатированная строка с ценой\n     * @memberof ReportService\n     */\n    private costPipe(cost: number): string {\n        return cost.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.');\n    }\n\n    /**\n     * Открывает HTML-контент в новой вкладке и запускает загрузку.\n     *\n     * @private\n     * @param {string} roomName - Название комнаты (используется для имени файла)\n     * @param {string} htmlContent - Содержимое HTML\n     * @memberof ReportService\n     */\n    private openHtmlInNewTab(roomName: string, htmlContent: string): void {\n        const blob = new Blob([htmlContent], { type: 'text/html' });\n        const url = URL.createObjectURL(blob);\n        window.open(url, '_blank');\n        this.downloadHtml(roomName, url);\n    }\n\n    /**\n     * Загружает HTML-файл отчета.\n     *\n     * @private\n     * @param {string} roomName - Название комнаты (для имени файла)\n     * @param {string} htmlUrl - URL HTML-файла\n     * @memberof ReportService\n     */\n    private downloadHtml(roomName: string, htmlUrl: string): void {\n        const downloadButton = document.createElement('a');\n        downloadButton.href = htmlUrl;\n        downloadButton.download = `${roomName}-report.html`;\n        downloadButton.click();\n        URL.revokeObjectURL(htmlUrl);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/roomData.html":{"url":"interfaces/roomData.html","title":"interface - roomData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  roomData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/project.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс описания комнаты\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            _id\n                                        \n                                \n                                \n                                        \n                                            gridArea\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            objects\n                                        \n                                \n                                \n                                        \n                                            roomProportions\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        _id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        _id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    (Необязательно) ID комнаты\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        gridArea\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        gridArea:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Сетка размещения (например, '1 / 2 / 3 / 4')\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Название комнаты\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        objects\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        objects:         objectSceneInterface[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         objectSceneInterface[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Список объектов, размещённых в комнате\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        roomProportions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        roomProportions:         modelInterface\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         modelInterface\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Пропорции комнаты (ширина, высота, глубина)\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { baseUrl } from '.';\nimport { modelInterface, objectSceneInterface } from '../components/scene/scene.component';\nimport { firstValueFrom } from 'rxjs';\nimport { reportResponse } from './report.service';\nimport { ReportService } from './report.service';\n\n/**\n * Интерфейс описания комнаты\n */\nexport interface roomData {\n  /** Название комнаты */\n  name: string;\n  /** Сетка размещения (например, '1 / 2 / 3 / 4') */\n  gridArea: string;\n  /** Пропорции комнаты (ширина, высота, глубина) */\n  roomProportions: modelInterface;\n  /** Список объектов, размещённых в комнате */\n  objects: objectSceneInterface[];\n  /** (Необязательно) ID комнаты */\n  _id?: string;\n}\n\n/**\n * Интерфейс информации о проекте\n */\nexport interface projectInformation {\n  /** Название проекта */\n  name: string;\n  /** Список комнат в проекте */\n  rooms: roomData[];\n}\n\n/**\n * Интерфейс информации о проекте, получаемой с сервера\n */\nexport interface projectServerInformation extends projectInformation {\n  /** ID проекта */\n  _id: string;\n  /** ID автора проекта */\n  authorId: string;\n}\n\n/**\n * Сервис для управления проектами: создание, удаление, получение, обновление и генерация отчетов\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProjectService {\n  /** Базовый URL для API запросов к проектам */\n  private baseServiceUrl = baseUrl + 'project';\n\n  constructor(\n    private httpModule: HttpClient,\n    private reportService: ReportService\n  ) {}\n\n  /**\n   * Создание нового проекта\n   * @param jwt JWT токен для авторизации\n   * @param name Название проекта\n   * @returns Промис с объектом, содержащим данные проекта\n   */\n  POSTcreateProject(jwt: string, name: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('name', name);\n    return firstValueFrom(this.httpModule.post(this.baseServiceUrl, HTTP_PARAMS)) as Promise;\n  }\n\n  /**\n   * Удаление проекта\n   * @param jwt JWT токен для авторизации\n   * @param projectId ID проекта, который нужно удалить\n   * @returns Промис с сообщением об удалении\n   */\n  DELETEdeleteProject(jwt: string, projectId: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('projectId', projectId);\n    return firstValueFrom(this.httpModule.delete(this.baseServiceUrl, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Получение проекта по ID\n   * @param jwt JWT токен для авторизации\n   * @param projectId ID проекта, который нужно получить\n   * @returns Промис с данными проекта\n   */\n  GETgetProject(jwt: string, projectId: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('projectId', projectId);\n    return firstValueFrom(this.httpModule.get(this.baseServiceUrl, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Обновление данных проекта\n   * @param jwt JWT токен для авторизации\n   * @param projectId ID проекта, который нужно обновить\n   * @param projectInformation Новые данные проекта\n   * @returns Промис с сообщением об успешном обновлении\n   */\n  PUTupdateProject(jwt: string, projectId: string, projectInformation: projectInformation): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('projectId', projectId);\n    return firstValueFrom(this.httpModule.put(this.baseServiceUrl, projectInformation, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Получение отчета о комнате и генерация PDF отчета\n   * @param jwt JWT токен для авторизации\n   * @param roomId ID комнаты, по которой нужно получить отчет\n   * @param renderImage Изображение рендера комнаты в формате Blob\n   * @returns Промис, завершающийся после создания отчета\n   */\n  async GETgetReportOfRoom(jwt: string, roomId: string, renderImage: Blob): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('roomId', roomId);\n\n    const RESPONSE = await firstValueFrom(this.httpModule.get(this.baseServiceUrl + '/room', { params: HTTP_PARAMS })) as reportResponse;\n\n    RESPONSE.furnitures = RESPONSE.furnitures.map(furnitureData => {\n      furnitureData.previewUrl = baseUrl + furnitureData.previewUrl;\n      return furnitureData;\n    });\n\n    this.reportService.createReport(RESPONSE, renderImage);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/roomData-1.html":{"url":"interfaces/roomData-1.html","title":"interface - roomData-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  roomData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/scene/scene.component.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс для описания данных комнаты.\n\n            \n\n            \n                Extends\n            \n            \n                            modelInterface\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            objects\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        objects\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        objects:         objectSceneInterface[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         objectSceneInterface[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Массив объектов в комнате\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Component, AfterViewInit, ElementRef, HostListener, Input, SimpleChanges, Output, EventEmitter, OnChanges, OnDestroy, Renderer2 } from '@angular/core';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { ProjectService, roomData as roomDataPlan } from '../../services/project.service';\nimport { loadModel } from './loaders';\nimport { FurnitureModelControlService } from '../../services/furniture-model-control.service';\nimport { AccountCookieService } from '../../services/account-cookie.service';\nimport { FurnitureCardControlService } from '../../services/furniture-card-control.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { NotificationService } from '../../services/notification.service';\nimport { Location, NgIf } from '@angular/common';\nimport { PlanHouseComponent } from '../plan-house/plan-house.component';\n\n/**\n * Интерфейс для описания размеров модели.\n */\nexport interface modelInterface {\n  /** Ширина модели */\n  width: number;\n  /** Высота модели */\n  height: number;\n  /** Длина модели */\n  length: number;\n}\n\n/**\n * Интерфейс для описания объекта сцены.\n */\nexport interface objectSceneInterface {\n  /** ID объекта */\n  objectId: string;\n  /** Расстояние по оси X в метрах */\n  xMetersDistance: number;\n  /** Расстояние по оси Z в метрах */\n  zMetersDistance: number;\n  /** Угол поворота по оси Y */\n  yRotate: number;\n}\n\n/**\n * Интерфейс для описания данных загрузки объекта.\n */\ninterface objectLoadInterface {\n  /** Расстояние по оси X */\n  xDistance: number;\n  /** Расстояние по оси Z */\n  zDistance: number;\n  /** Угол поворота по оси Y */\n  yRotate: number;\n}\n\n/**\n * Интерфейс для описания данных комнаты.\n */\ninterface roomData extends modelInterface {\n  /** Массив объектов в комнате */\n  objects: objectSceneInterface[];\n}\n\n@Component({\n  selector: 'app-scene',\n  standalone: true,\n  imports: [NgIf],\n  templateUrl: './scene.component.html',\n  styleUrls: ['./scene.component.scss']\n})\nexport class SceneComponent implements AfterViewInit, OnChanges {\n  constructor(\n    private elementRef: ElementRef,\n    private furnitureModelService: FurnitureModelControlService,\n    private furnitureCardService: FurnitureCardControlService,\n    private accountCookieService: AccountCookieService,\n    private projectService: ProjectService,\n    private route: ActivatedRoute,\n    private notification: NotificationService,\n    private location: Location,\n    private planHouseComponent: PlanHouseComponent,\n    private router: Router\n  ) { }\n\n\n  @Input()\n  /** Данные комнаты */\n  roomData!: roomDataPlan | undefined;\n\n  @Output()\n  /** Событие для сохранения объектов */\n  saveObjectsEmitter = new EventEmitter();\n\n  /** Рендерер Three.js */\n  private renderer!: THREE.WebGLRenderer;\n\n  /** Камера Three.js */\n  private camera!: THREE.PerspectiveCamera;\n\n  /** Сцена Three.js */\n  private scene!: THREE.Scene;\n\n  /** Контроллеры OrbitControls */\n  private controls!: OrbitControls;\n\n  /** ID текущего кадра анимации */\n  private animationFrameId: number | null = null;\n\n  /** Соотношение размеров холста */\n  private canvasRatioOfWindow = 1.5;\n\n  /** Пропорции комнаты */\n  private roomProportions!: modelInterface;\n\n  /** Луч для определения пересечений */\n  private raycaster = new THREE.Raycaster();\n\n  /** Координаты мыши */\n  private mouse = new THREE.Vector2();\n\n  /** Прямоугольная сетка комнаты */\n  private rectangleMesh!: THREE.Mesh;\n\n  /** Прямоугольная сетка комнаты */\n  private abortConroller: AbortController = new AbortController();\n\n  /** Целевой объект для взаимодействия */\n  protected targetobject: THREE.Object3D | undefined = undefined;\n\n  /** Отображается ли loader */\n  protected isShowLoader: boolean = false\n\n  /** Были ли изменения roomData */\n  public hasBeenChanged: boolean = false\n\n\n  ngAfterViewInit(): void {\n    this.initThreeJs();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.roomData = changes['roomData'].currentValue as roomDataPlan\n\n    if (!this.roomData || this.scene === undefined) return\n    if (changes['roomData'].previousValue !== undefined) { this.clearRoom() }\n\n    this.camera.position.set(0, 5, 0)\n    this.camera.rotation.set(THREE.MathUtils.degToRad(-90), 0, 0)\n    this.roomProportions = this.roomData.roomProportions\n    this.createRoom();\n    this.rectangleMesh.rotation.x = THREE.MathUtils.degToRad(-90)\n\n    if (this.getObjectSize(this.rectangleMesh).width === 0) return\n    if (!this.planHouseComponent.sceneOpenToggle) {\n      this.hasBeenChanged = true\n      return\n    }\n\n    this.loadRoom()\n\n    const FURNITURE_ID = this.route.snapshot.params['furnitureCardId']\n    if (!FURNITURE_ID || changes['roomData'].previousValue) return\n\n    this.fixPath()\n\n    this.addModel(FURNITURE_ID, true, this.abortConroller)\n  }\n\n  private async loadFurnitureModel(fileModel: Blob, furnitureSize: modelInterface, furnitureCardId: string, saveRoom: boolean, moveData?: objectLoadInterface) {\n    try {\n      const LOAD_OBJECT = await loadModel(fileModel)\n      if (LOAD_OBJECT instanceof Error) {\n        this.notification.setError('Модель не поддерживается', 5000)\n        return\n      }\n      if (moveData) { this.addObjectToScene(LOAD_OBJECT, furnitureSize, furnitureCardId, moveData) } else { this.addObjectToScene(LOAD_OBJECT, furnitureSize, furnitureCardId) }\n      if (saveRoom) { \n        this.saveRoom();\n        this.closeLoader()\n      }\n    } catch (error) {\n    }\n  }\n  private async addModel(furnitureCardId: string, saveRoom: boolean, controller: AbortController, moveData?: objectLoadInterface) {\n    const JWT = this.accountCookieService.getJwt()\n    if (!JWT) return\n    try {\n      if (saveRoom) this.showLoader()\n      const PROPORTIONS = (await this.furnitureCardService.GETfurnitureCard(furnitureCardId)).furnitureCard.proportions as modelInterface\n      const MODEL = await this.furnitureModelService.GETfurnitureModel(JWT, furnitureCardId, controller)\n      await this.loadFurnitureModel(MODEL, PROPORTIONS, furnitureCardId, saveRoom, moveData)\n    } catch (error) {\n      this.notification.setError('Ошибка загрузки модели', 5000)\n      console.log(error)\n    }\n  }\n\n  private fixPath() {\n    const NEW_URL = this.location.path().split('/').slice(0, -1).join('/')\n    this.location.replaceState(NEW_URL)\n  }\n  /**\n   * Инициализация Three.js сцены.\n   */\n  private initThreeJs(): void {\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const HEMISPHERE_LIGHT = new THREE.HemisphereLight(0xaaaaaa, 0x000000, 2);\n    this.scene.add(HEMISPHERE_LIGHT);\n    this.renderer = new THREE.WebGLRenderer({ antialias: true, alpha: false });\n    const CANVAS_CONTAINER = this.elementRef.nativeElement.querySelector('#canvasContainer');\n    this.camera.position.z = 5;\n    this.renderer.setSize(window.innerWidth / this.canvasRatioOfWindow, window.innerHeight / this.canvasRatioOfWindow);\n    CANVAS_CONTAINER.appendChild(this.renderer.domElement);\n    this.animationFrameId = requestAnimationFrame(() => this.animate());\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  /**\n   * Анимация сцены.\n   */\n  private animate(): void {\n    this.animationFrameId = requestAnimationFrame(() => this.animate());\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  /**\n   * Создает геометрию прямоугольника с закругленными углами.\n   * @param width Ширина прямоугольника.\n   * @param height Высота прямоугольника.\n   * @param radius Радиус закругления.\n   * @param segments Количество сегментов.\n   * @returns Геометрия прямоугольника.\n   */\n  private createRoundedRectangleGeometry(width: number, height: number, radius: number, segments: number): THREE.BufferGeometry {\n    const SHAPE = new THREE.Shape();\n    SHAPE.moveTo(-width / 2 + radius, -height / 2);\n    SHAPE.lineTo(width / 2 - radius, -height / 2);\n    SHAPE.quadraticCurveTo(width / 2, -height / 2, width / 2, -height / 2 + radius);\n    SHAPE.lineTo(width / 2, height / 2 - radius);\n    SHAPE.quadraticCurveTo(width / 2, height / 2, width / 2 - radius, height / 2);\n    SHAPE.lineTo(-width / 2 + radius, height / 2);\n    SHAPE.quadraticCurveTo(-width / 2, height / 2, -width / 2, height / 2 - radius);\n    SHAPE.lineTo(-width / 2, -height / 2 + radius);\n    SHAPE.quadraticCurveTo(-width / 2, -height / 2, -width / 2 + radius, -height / 2);\n\n    const geometry = new THREE.ShapeGeometry(SHAPE, segments);\n\n    return geometry;\n  }\n\n  /**\n   * Создает комнату на сцене.\n   */\n  private createRoom(): void {\n    if (!this.roomData) return\n    const ROOM_PROPORTIONS = this.roomData.roomProportions\n    const RADIUS = 0.1\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n    this.controls.enableDamping = true;\n    this.controls.dampingFactor = 0.15;\n    this.controls.enableZoom = true;\n    this.controls.minDistance = 1;\n    this.controls.maxDistance = 10;\n    const paddingPolarAngle = 5;\n    this.controls.maxPolarAngle = THREE.MathUtils.degToRad(90 - paddingPolarAngle);\n    this.createRoomShape(ROOM_PROPORTIONS.width, ROOM_PROPORTIONS.length, RADIUS);\n    this.rectangleMesh.name = 'roomFloorBase';\n    this.rectangleMesh\n  }\n\n  /**\n   * Рассчитывает данные для сохранения объекта.\n   * @param object Объект сцены.\n   * @returns Данные для сохранения объекта.\n   */\n  private calculateObjectSaveData(object: THREE.Object3D): objectSceneInterface {\n    const FLOOR_SIZE = this.getObjectSize(this.rectangleMesh)\n    const OBJECT_POSITION = object.position\n    const objectSaveData: objectSceneInterface = {\n      objectId: (object.userData as any).id,\n      xMetersDistance: OBJECT_POSITION.x / FLOOR_SIZE.width * this.roomProportions.width,\n      zMetersDistance: OBJECT_POSITION.z / FLOOR_SIZE.length * this.roomProportions.length,\n      yRotate: object.rotation.y\n    }\n    return objectSaveData\n  }\n\n  /**\n   * Рассчитывает данные для перемещения объекта.\n   * @param objectSaveData Данные сохраненного объекта.\n   * @returns Данные для перемещения объекта.\n   */\n  private calculateMoveObjectData(objectSaveData: objectSceneInterface): objectLoadInterface {\n    const FLOOR_SIZE = this.getObjectSize(this.rectangleMesh)\n    return {\n      xDistance: objectSaveData.xMetersDistance * FLOOR_SIZE.width / this.roomProportions.width,\n      zDistance: objectSaveData.zMetersDistance * FLOOR_SIZE.length / this.roomProportions.length,\n      yRotate: objectSaveData.yRotate\n    }\n  }\n\n  /**\n   * Создает форму комнаты.\n   * @param widthRatio Соотношение ширины.\n   * @param heightRatio Соотношение высоты.\n   * @param radius Радиус закругления.\n   */\n  private createRoomShape(widthRatio: number, heightRatio: number, radius: number): void {\n    const CAMERA_FRUSTUM_BOUNDS = this.calculateFrustumBounds();\n    const SHAPE_RATIO = widthRatio / heightRatio;\n    let width: number, height: number;\n\n    if (SHAPE_RATIO  {\n    const JWT = this.accountCookieService.getJwt()\n    if (!JWT || !this.roomData) return\n    const roomData: roomData = {\n      objects: this.roomData.objects,\n      ...this.roomData.roomProportions\n    }\n\n    this.showLoader()\n    for (const object of roomData.objects) {\n      await this.addModel(object.objectId, false, this.abortConroller, this.calculateMoveObjectData(object));\n    }\n    this.closeLoader()\n    this.hasBeenChanged = false\n  }\n\n  private showLoader() {\n    this.isShowLoader = true\n  }\n  private closeLoader() {\n    this.isShowLoader = false\n  }\n  /**\n   * Очищает комнату от объектов.\n   */\n  private clearRoom(): void {\n    for (let i = this.scene.children.length - 1; i >= 0; i--) {\n      const OBJECT = this.scene.children[i];\n      if (OBJECT.type !== 'Scene' && OBJECT.type !== 'HemisphereLight') {\n        this.scene.remove(OBJECT);\n      }\n    }\n  }\n\n  /**\n   * Обрабатывает изменение размера окна.\n   * @param event Событие изменения размера.\n   */\n  @HostListener('window:resize', ['$event'])\n  private onResize(event: Event): void {\n    this.renderer.setSize(window.innerWidth / this.canvasRatioOfWindow, window.innerHeight / this.canvasRatioOfWindow);\n    this.camera.aspect = window.innerWidth / window.innerHeight;\n    this.camera.updateProjectionMatrix();\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  /**\n   * Обрабатывает клик мыши.\n   * @param event Событие клика.\n   */\n  @HostListener('click', ['$event'])\n  private onMouseClick(event: MouseEvent): void {\n    if (this.targetobject) {\n      this.targetobject = undefined;\n      return;\n    }\n    const RECT = (event.target as HTMLCanvasElement).getBoundingClientRect();\n    const X = (event.clientX - RECT.left) / RECT.width * 2 - 1;\n    const Y = -(event.clientY - RECT.top) / RECT.height * 2 + 1;\n\n    this.mouse.x = X;\n    this.mouse.y = Y;\n    this.raycaster.setFromCamera(this.mouse, this.camera);\n\n    const INTERSECTIONS = this.raycaster.intersectObjects(this.scene.children);\n\n    const FOUND_INTERSECTION = INTERSECTIONS.find(intersect => {\n      return intersect.object.name !== 'roomFloorBase' && intersect.object.type !== 'Scene' && intersect.object.type !== 'HemisphereLight'\n    })?.object\n    if (!FOUND_INTERSECTION) return\n    this.targetobject = FOUND_INTERSECTION.parent ? FOUND_INTERSECTION.parent : FOUND_INTERSECTION\n  }\n\n  /**\n   * Поворачивает целевой объект.\n   * @param event Событие нажатия клавиши.\n   */\n  @HostListener('window:keydown', ['$event'])\n  private rotateTargetObject(event: KeyboardEvent): void {\n    if (!this.targetobject) return\n    let rotateAngle = -0.05\n\n    switch (event.key) {\n      case 'q':\n      case 'й':\n        this.targetobject.rotation.y -= rotateAngle\n        break\n      case 'e':\n      case 'у':\n        this.targetobject.rotation.y += rotateAngle\n    }\n  }\n\n  /**\n   * Обрабатывает перемещение мыши.\n   * @param event Событие перемещения мыши.\n   */\n  @HostListener('mousemove', ['$event'])\n  private onMousemove(event: MouseEvent): void {\n    if (!this.targetobject) return;\n\n    const RECT = (event.target as HTMLCanvasElement).getBoundingClientRect();\n    const X = (event.clientX - RECT.left) / RECT.width * 2 - 1;\n    const Y = -(event.clientY - RECT.top) / RECT.height * 2 + 1;\n\n    this.mouse.x = X;\n    this.mouse.y = Y;\n    this.raycaster.setFromCamera(this.mouse, this.camera);\n\n    const INTERSECTIONS = this.raycaster.intersectObject(this.rectangleMesh);\n    if (INTERSECTIONS.length === 0) return;\n\n    const INTERSECTIONS_X = INTERSECTIONS[0].point.x;\n    const INTERSECTION_Z = INTERSECTIONS[0].point.z;\n    const RECTANGLE_MESH_SIZE = this.getObjectSize(this.rectangleMesh);\n    const objectSize = this.getObjectSize(this.targetobject);\n\n    const minX = -RECTANGLE_MESH_SIZE.width / 2 + objectSize.width / 2;\n    const maxX = RECTANGLE_MESH_SIZE.width / 2 - objectSize.width / 2;\n\n    let newXObjectPosition = INTERSECTIONS_X;\n    if (newXObjectPosition  maxX) {\n      newXObjectPosition = maxX;\n    }\n\n    const MIN_Z = -RECTANGLE_MESH_SIZE.length / 2 + objectSize.length / 2;\n    const MAX_Z = RECTANGLE_MESH_SIZE.length / 2 - objectSize.length / 2;\n\n    let newZObjectPosition = INTERSECTION_Z;\n    if (newZObjectPosition  MAX_Z) {\n      newZObjectPosition = MAX_Z;\n    }\n\n    this.targetobject.position.set(newXObjectPosition, 0, newZObjectPosition);\n  }\n\n  /**\n   * Генерирует отчет по комнате.\n   */\n  protected abortLoadRoom() {\n    this.abortConroller.abort()\n    this.abortConroller = new AbortController()\n\n    this.planHouseComponent.sceneOpenToggle = false\n    this.planHouseComponent.closeViewRoom()\n\n    const PLAN_ID = this.route.snapshot.params['planId']\n    this.router.navigateByUrl('/plan/' + PLAN_ID)\n  }\n\n  /**\n   * Генерирует отчет по комнате.\n   */\n  protected async getReport(): Promise {\n    const JWT = this.accountCookieService.getJwt()\n    if (!JWT || !this.roomData?._id) return\n\n    const oldCameraPosition = this.camera.position.clone();\n    const oldCameraRotation = this.camera.rotation.clone();\n\n    this.camera.position.set(0, 7, 0)\n    this.camera.rotation.set(THREE.MathUtils.degToRad(-90), 0, 0)\n    this.renderer.render(this.scene, this.camera);\n    const imageDataURL = this.renderer.domElement.toDataURL('image/png')\n    const imageDataResponse = await fetch(imageDataURL)\n\n    this.camera.position.copy(oldCameraPosition);\n    this.camera.rotation.copy(oldCameraRotation);\n\n    if (!imageDataResponse.ok) {\n      this.notification.setError('Ошибка при рендере', 5000)\n    }\n    const imageDataBlob = await imageDataResponse.blob()\n\n    this.projectService.GETgetReportOfRoom(JWT, this.roomData?._id, imageDataBlob)\n  }\n\n  /**\n   * Удаляет выбранную модель.\n   */\n  protected deleteModel(): void {\n    if (!this.targetobject) return\n    this.scene.remove(this.targetobject)\n    this.saveRoom()\n  }\n\n  /**\n   * Сохраняет текущее состояние комнаты.\n   */\n  public saveRoom(): void {\n    if (!this.roomData) return\n    const OBJECTS_SCENE_ARRAY = this.scene.children.filter(object => {\n      if (\n        object.name !== 'roomFloorBase' &&\n        object.type !== 'Scene' &&\n        object.type !== 'HemisphereLight'\n      ) {\n        return true;\n      }\n      return false;\n    })\n      .map(object => {\n        return this.calculateObjectSaveData(object)\n      })\n    const ROOM_OBJECTS_DATA = OBJECTS_SCENE_ARRAY\n    this.roomData.objects = OBJECTS_SCENE_ARRAY\n    this.saveObjectsEmitter.emit(ROOM_OBJECTS_DATA)\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/roomSpanSettings.html":{"url":"interfaces/roomSpanSettings.html","title":"interface - roomSpanSettings","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  roomSpanSettings\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/plan-house/plan-house.component.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс для настроек сетки комнаты.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            endX\n                                        \n                                \n                                \n                                        \n                                            endY\n                                        \n                                \n                                \n                                        \n                                            gap\n                                        \n                                \n                                \n                                        \n                                            startX\n                                        \n                                \n                                \n                                        \n                                            startY\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        endX\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        endX:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Конечная координата X\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        endY\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        endY:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Конечная координата Y\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        gap\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        gap:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Расстояние между элементами\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        startX\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        startX:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Начальная координата X\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        startY\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        startY:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Начальная координата Y\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { AfterViewInit, Component, Input, Renderer2, ElementRef, HostListener, EventEmitter, Output, ViewChild, OnInit, TemplateRef, ChangeDetectorRef } from '@angular/core';\nimport { modelInterface, SceneComponent } from '../scene/scene.component';\nimport { Location, NgFor, NgIf, NgTemplateOutlet } from '@angular/common';\nimport { FormGroup, FormControl, ReactiveFormsModule, Validators, ValidatorFn, AbstractControl, ValidationErrors } from '@angular/forms';\nimport { throttle } from 'lodash';\nimport { objectSceneInterface } from '../scene/scene.component'\nimport { categoryData, CategoryService } from '../../services/category.service';\nimport { NotificationService } from '../../services/notification.service';\nimport { AccountCookieService } from '../../services/account-cookie.service';\nimport { roomData } from '../../services/project.service';\n\n/**\n * Интерфейс для настроек сетки комнаты.\n */\ninterface roomSpanSettings {\n  /** Начальная координата X */\n  startX: number;\n  /** Начальная координата Y */\n  startY: number;\n  /** Конечная координата X */\n  endX: number;\n  /** Конечная координата Y */\n  endY: number;\n  /** Расстояние между элементами */\n  gap: number;\n}\n\n@Component({\n  selector: 'app-plan-house',\n  standalone: true,\n  imports: [NgTemplateOutlet, NgFor, ReactiveFormsModule, NgIf, SceneComponent],\n  templateUrl: './plan-house.component.html',\n  styleUrls: ['./plan-house.component.scss']\n})\nexport class PlanHouseComponent implements AfterViewInit, OnInit {\n  constructor(\n    private renderer: Renderer2,\n    private elementRef: ElementRef,\n    private categoryService: CategoryService,\n    private location: Location,\n    private notification: NotificationService,\n    private cdr: ChangeDetectorRef,\n    private accountCookieService: AccountCookieService\n  ) { }\n\n  /** Предыдущее значение grid-area для комнаты */\n  private previousGridArea!: string;\n\n  /** HTML-элемент для отображения комнаты */\n  private roomSpan!: HTMLSpanElement;\n\n  /** Настройки сетки комнаты */\n  private roomSpanSettings!: roomSpanSettings;\n\n  /** Флаг для отслеживания состояния перетаскивания */\n  private isDragging = false;\n\n  /** Флаг для отслеживания одиночного клика */\n  private isClick = false;\n\n  /** Таймер для обработки кликов */\n  private clickTimer: any;\n\n  /** Флаг для отслеживания двойного клика */\n  private isDoubleClick = false;\n\n  /** Кнопка для переключения модуля */\n  private toggleModuleButton!: HTMLButtonElement;\n\n  /** HTML-форма для ввода данных комнаты */\n  private formElement!: HTMLFormElement;\n\n  /** Старый размер комнаты при просмотре */\n  private oldSizeViewRoom: {\n    height: number;\n    width: number;\n  } | undefined = undefined;\n\n  /** Последний план дома */\n  protected lastPlanHouse: roomData | undefined = undefined;\n\n  /** Массив категорий */\n  protected categoryArray: categoryData[] = [];\n\n  /** Флаг для включения руководства */\n  protected isGuideIncluded: boolean = false;\n\n  /** Флаг для отображения руководства */\n  protected isGuideVisible: boolean = true;\n\n  /** Текущая комната для просмотра */\n  public currentViewRoom: undefined | number = undefined;\n\n  /** Флаг для переключения сцены */\n  public sceneOpenToggle: boolean = false;\n\n  /** ID текущей выбранной комнаты */\n  public currentIdClickedRoom: number | undefined = undefined;\n\n  /** Шаблон для руководства */\n  public guideTemplate!: TemplateRef;\n\n  @Input()\n  /** План дома */\n  planHouse!: roomData[];\n\n  @ViewChild('scene')\n  /** Компонент сцены */\n  sceneComponent!: SceneComponent;\n\n  @Output()\n  /** Событие инициализации */\n  initialized = new EventEmitter();\n\n  @Output()\n  /** Событие для передачи плана дома */\n  planHouseEmitter = new EventEmitter();\n\n  @Output()\n  /** Событие для сохранения */\n  callSaveEmitter = new EventEmitter();\n\n  @ViewChild('roomsGuideTemplate1', { static: true })\n  /** Шаблон руководства для комнат (1) */\n  roomsGuideTemplate1!: TemplateRef;\n\n  @ViewChild('roomsGuideTemplate2', { static: true })\n  /** Шаблон руководства для комнат (2) */\n  roomsGuideTemplate2!: TemplateRef;\n\n  @ViewChild('roomGuideTemplate', { static: true })\n  /** Шаблон руководства для комнаты */\n  roomGuideTemplate!: TemplateRef;\n\n  ngOnInit(): void {\n    this.checkGuideInclude();\n    this.initCategories();\n  }\n\n  ngAfterViewInit(): void {\n    const PARENT_ELEMENT = this.elementRef.nativeElement.parentElement;\n    if (PARENT_ELEMENT.classList.contains('projectPreviewSpan')) this.isGuideIncluded = false;\n\n    this.guideTemplate = this.roomsGuideTemplate1;\n    this.cdr.detectChanges();\n    this.roomSpan = this.elementRef.nativeElement.querySelector('.roomSpan') as HTMLSpanElement;\n    this.calculateRoomSpanSettings();\n    this.formElement = this.elementRef.nativeElement.querySelector('form') as HTMLFormElement;\n    this.toggleModuleButton = this.elementRef.nativeElement.querySelector('.addModuleBtn');\n    this.initialized.emit();\n  }\n\n  /**\n   * Инициализация категорий.\n   */\n  private async initCategories() {\n    this.categoryArray = (await this.categoryService.GETgetAllCategories()).categoryArray;\n  }\n\n  /**\n   * Отображение руководства.\n   */\n  private showGuide() {\n    this.isGuideVisible = true;\n  }\n\n  /**\n   * Проверка включения руководства.\n   */\n  private checkGuideInclude() {\n    this.isGuideIncluded = this.accountCookieService.getGuideRule() === 'false' ? false : true;\n    this.isGuideVisible = this.isGuideIncluded;\n  }\n\n  /**\n   * Эмитирует текущее состояние плана дома.\n   */\n  private emitPlanHouse() {\n    this.planHouseEmitter.emit(this.planHouse);\n  }\n\n  /**\n   * Сохраняет текущий план дома.\n   */\n  private saveHouse() {\n    this.callSaveEmitter.emit();\n  }\n\n  /**\n   * Находит свободное место для комнаты.\n   * @param roomProportions Пропорции комнаты.\n   * @returns Строка grid-area или false, если места нет.\n   */\n  private findFreeSpace(roomProportions: modelInterface): string | false {\n    const GRID_SIZE = 10;\n    const GRID_OCCUPIED: boolean[][] = Array.from({ length: GRID_SIZE }, () => Array(GRID_SIZE).fill(false));\n\n    this.planHouse.forEach(room => {\n      const [startRow, startColumn, endRow, endColumn] = room.gridArea.split('/').map(Number);\n\n      for (let row = startRow - 1; row  otherStartRow &&\n        startColumn  otherStartColumn\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n  /**\n   * Рассчитывает область сетки для объекта.\n   * @param objectX Координата X объекта.\n   * @param objectY Координата Y объекта.\n   * @returns Строка grid-area или undefined.\n   */\n  private calculateGridArea(objectX: number, objectY: number): string | undefined {\n    if (this.currentIdClickedRoom === undefined) return;\n    const ROOM_PROPORTIONS = this.planHouse[this.currentIdClickedRoom].roomProportions;\n    const RELATIVE_X = objectX - this.roomSpanSettings.startX;\n    const RELATIVE_Y = objectY - this.roomSpanSettings.startY - document.documentElement.scrollTop\n    const SIDE_AREA = (this.roomSpanSettings.endX - this.roomSpanSettings.startX) / 10 + this.roomSpanSettings.gap;\n    const START_COLUMN = Math.floor(RELATIVE_X / SIDE_AREA) + 1;\n    const START_ROW = Math.floor(RELATIVE_Y / SIDE_AREA) + 1;\n\n    const END_COLUMN = START_COLUMN + Math.round(ROOM_PROPORTIONS.width) - 1;\n    const END_ROW = START_ROW + Math.round(ROOM_PROPORTIONS.length) - 1;\n\n    if (END_COLUMN > 10 || END_ROW > 10) {\n      return undefined;\n    }\n\n    return `${START_ROW} / ${START_COLUMN} / ${END_ROW + 1} / ${END_COLUMN + 1}`;\n  }\n  /**\n   * Сбрасывает позицию комнаты.\n   * @param clientX Координата X.\n   * @param clientY Координата Y.\n   */\n  private resetRoomPosition(clientX: number, clientY: number) {\n    const TARGET_ELEMENT = this.roomSpan.querySelector(`[data-index=\"${this.currentIdClickedRoom}\"]`) as HTMLDivElement;\n    if (TARGET_ELEMENT) {\n      const GRID_AREA = this.calculateGridArea(clientX, clientY);\n\n      if (GRID_AREA && !this.isAreaOccupied(GRID_AREA, this.currentIdClickedRoom!)) {\n        this.renderer.setStyle(TARGET_ELEMENT, 'grid-area', GRID_AREA);\n        this.planHouse[this.currentIdClickedRoom!].gridArea = GRID_AREA;\n      } else {\n        this.renderer.setStyle(TARGET_ELEMENT, 'grid-area', this.previousGridArea);\n      }\n\n      this.renderer.removeStyle(TARGET_ELEMENT, 'background-color');\n      this.renderer.removeStyle(TARGET_ELEMENT, 'z-index');\n\n      this.currentIdClickedRoom = undefined;\n    }\n  }\n  @HostListener('document:mouseleave', ['$event'])\n  private onMouseLeave(event: MouseEvent) {\n    if (this.isDragging && this.currentIdClickedRoom !== undefined) {\n      this.onMouseUp(event);\n    }\n  }\n  @HostListener('document:touchend', ['$event'])\n  @HostListener('document:keyup.Enter', ['$event'])\n  @HostListener('document:mouseup', ['$event'])\n  private onMouseUp(event: MouseEvent | KeyboardEvent | TouchEvent) {\n    if (this.sceneOpenToggle === true) return\n    if (this.currentViewRoom !== undefined) return\n    if (this.isDragging && this.currentIdClickedRoom !== undefined) {\n      this.isDragging = false;\n      if (event instanceof MouseEvent) {\n\n        this.resetRoomPosition(event.clientX, event.clientY);\n      }\n      if (typeof TouchEvent !== 'undefined' && event instanceof TouchEvent) {\n        const touch = event.changedTouches[0];\n        this.resetRoomPosition(touch.clientX, touch.clientY);\n      }\n      const DRAGGED_ELEMENT = this.elementRef.nativeElement.querySelector('[style*=\"cursor: grabbing\"]');\n      if (DRAGGED_ELEMENT) {\n        this.renderer.removeStyle(DRAGGED_ELEMENT, 'cursor');\n        this.renderer.removeStyle(DRAGGED_ELEMENT, 'background-color')\n      }\n      this.currentIdClickedRoom = undefined\n      this.emitPlanHouse()\n    }\n    this.clickTimer = setTimeout(() => {\n      if (this.isClick && !this.isDragging) {\n        if (this.currentIdClickedRoom == undefined) return\n        this.toggleOpenRoomModule(this.currentIdClickedRoom)\n      }\n      this.isClick = false\n      this.isDoubleClick = false\n      this.isDragging = false\n      clearTimeout(this.clickTimer)\n    }, 250)\n\n  }\n  /**\n   * Обрабатывает событие перемещения мыши.\n   * @param event Событие мыши или касания.\n   */\n  @HostListener('document:mousemove', ['$event'])\n  @HostListener('document:touchmove', ['$event'])\n  private onMouseMove(event: MouseEvent | TouchEvent) {\n    event.preventDefault();\n    if (this.isDragging && this.currentIdClickedRoom !== undefined) {\n      const TARGET_ELEMENT = this.roomSpan.querySelector(`[data-index=\"${this.currentIdClickedRoom}\"]`) as HTMLDivElement;\n      if (!TARGET_ELEMENT) return;\n      const gridArea = event instanceof MouseEvent ? this.calculateGridArea(event.clientX, event.clientY) : this.calculateGridArea(event.changedTouches[0].clientX, event.changedTouches[0].clientY)\n      this.renderer.setStyle(TARGET_ELEMENT, 'z-index', '4');\n      if (gridArea) {\n        this.renderer.setStyle(TARGET_ELEMENT, 'grid-area', gridArea);\n\n        const isOccupied = this.isAreaOccupied(gridArea, this.currentIdClickedRoom);\n\n        if (isOccupied) {\n          this.renderer.setStyle(TARGET_ELEMENT, 'background-color', '#F18DC4');\n        } else {\n          this.renderer.setStyle(TARGET_ELEMENT, 'background-color', '#A3B18A');\n        }\n      }\n    }\n  }\n  @HostListener('document:keydown.ArrowUp', ['$event'])\n  @HostListener('document:keydown.ArrowDown', ['$event'])\n  @HostListener('document:keydown.ArrowRight', ['$event'])\n  @HostListener('document:keydown.ArrowLeft', ['$event'])\n  private moveRoom(event: KeyboardEvent) {\n    if (this.currentIdClickedRoom === undefined || !this.isDragging) return\n    const MOVE_ROOM_ELEMENT = this.elementRef.nativeElement.querySelector(`[data-index=\"${this.currentIdClickedRoom}\"]`) as HTMLDivElement;\n    let [startRow, startColumn, endRow, endColumn] = this.planHouse[this.currentIdClickedRoom].gridArea.split('/').map(Number);\n    switch (event.key) {\n      case 'ArrowUp':\n        startRow -= 1\n        endRow -= 1\n        break\n      case 'ArrowDown':\n        startRow += 1\n        endRow += 1\n        break\n      case 'ArrowRight':\n        startColumn += 1\n        endColumn += 1\n        break\n      case 'ArrowLeft':\n        startColumn -= 1\n        endColumn -= 1\n        break\n    }\n    if (startRow  11 || endColumn > 11) return\n    const NEW_GRID_AREA = `${startRow} / ${startColumn} / ${endRow} / ${endColumn}`\n    if (this.isAreaOccupied(NEW_GRID_AREA, this.currentIdClickedRoom)) return\n    this.renderer.setStyle(MOVE_ROOM_ELEMENT, 'grid-area', NEW_GRID_AREA)\n    this.planHouse[this.currentIdClickedRoom].gridArea = NEW_GRID_AREA\n  }\n  @HostListener('document:contextmenu', ['$event'])\n  private onContextMenu(event: MouseEvent): void {\n    event.preventDefault();\n  }\n  @HostListener('window:scroll')\n  private onScroll = throttle(() => {\n    if (this.currentIdClickedRoom === undefined) return\n    this.calculateRoomSpanSettings()\n  }, 100)\n  @HostListener('document:keydown.Escape')\n  private escapeDraggingMode() {\n    const DRAGGED_ELEMENT = this.elementRef.nativeElement.querySelector('[style*=\"cursor: grabbing\"]');\n    if (this.currentIdClickedRoom !== undefined && this.isAreaOccupied(DRAGGED_ELEMENT.style.gridArea, this.currentIdClickedRoom)) return\n    this.isDragging = false\n    this.currentIdClickedRoom = undefined\n    if (DRAGGED_ELEMENT) {\n      this.renderer.removeStyle(DRAGGED_ELEMENT, 'background-color')\n      this.renderer.removeStyle(DRAGGED_ELEMENT, 'cursor');\n    }\n  }\n  protected clickRoom(event: Event, indexRoom: number) {\n    if (this.currentViewRoom !== undefined) return;\n    this.currentIdClickedRoom = indexRoom;\n\n    const EVENT_TARGET = event.target as HTMLDivElement;\n    this.previousGridArea = window.getComputedStyle(EVENT_TARGET).getPropertyValue('grid-area');\n\n    if (this.isClick && !this.isDragging) {\n      this.isDoubleClick = true;\n      this.isClick = false;\n      this.openViewRoom(this.currentIdClickedRoom);\n    } else {\n      this.isClick = true;\n    }\n\n    setTimeout(() => {\n      if (this.isDoubleClick || !this.isClick) return;\n      this.calculateRoomSpanSettings()\n      this.renderer.setStyle(EVENT_TARGET, 'cursor', 'grabbing');\n      this.isDragging = true;\n      this.renderer.setStyle(EVENT_TARGET, 'background-color', '#A3B18A');\n      this.currentIdClickedRoom = indexRoom;\n      this.isClick = false;\n    }, 350);\n  }\n\n  protected closeGuide() {\n    this.accountCookieService.setGuideRule()\n    this.isGuideVisible = false;\n    if (this.guideTemplate == this.roomsGuideTemplate1) {\n      this.guideTemplate = this.roomsGuideTemplate2\n      this.showGuide()\n    }\n  }\n  protected turnoffGuides(turnoff: boolean) {\n    if (turnoff) {\n      this.accountCookieService.setGuideRule()\n      if (this.sceneOpenToggle === true && this.currentViewRoom !== undefined) {\n        this.guideTemplate = this.roomGuideTemplate\n      } else {\n        this.guideTemplate = this.roomsGuideTemplate1\n      }\n    } else {\n      this.accountCookieService.deleteGuideRule()\n    }\n    this.checkGuideInclude()\n  }\n  protected updateRoomObjects(objects: objectSceneInterface[]) {\n    if (this.currentViewRoom === undefined) return\n    this.planHouse[this.currentViewRoom].objects = objects\n    this.emitPlanHouse()\n    this.saveHouse()\n  }\n  protected openScene() {\n    if (this.isGuideIncluded) {\n      this.guideTemplate = this.roomGuideTemplate\n      this.showGuide()\n    }\n    const NEW_URL = this.location.path() + '/' + this.currentViewRoom\n    this.location.replaceState(NEW_URL)\n    this.sceneOpenToggle = true\n\n    if (this.sceneComponent.hasBeenChanged) this.sceneComponent.loadRoom()\n  }\n  protected closeScene() {\n    const NEW_URL = this.location.path().split('/').slice(0, -1).join('/')\n    this.location.replaceState(NEW_URL)\n    this.sceneComponent.saveRoom()\n    this.sceneOpenToggle = false\n  }\n  protected updateRoom() {\n    if (this.currentIdClickedRoom === undefined || !this.roomForm.value.name) return\n    if (this.roomForm.value.name === this.planHouse[this.currentIdClickedRoom].name) {\n      this.toggleOpenRoomModule()\n      return\n    }\n    this.planHouse[this.currentIdClickedRoom].name = this.roomForm.value.name\n\n    this.roomForm.patchValue({\n      width: null,\n      height: null,\n      length: null,\n      name: ''\n    });\n\n    this.emitPlanHouse()\n    this.toggleOpenRoomModule()\n    this.saveHouse()\n  }\n  protected addRoom() {\n    const { width, length, height, name } = this.roomForm.value\n    this.toggleOpenRoomModule()\n    const NEW_ROOM: roomData = {\n      name: name!,\n      roomProportions: {\n        width: +width!,\n        height: +height!,\n        length: +length!\n      },\n      objects: [],\n      gridArea: ''\n    }\n    const GRID_AREA = this.findFreeSpace(NEW_ROOM.roomProportions)\n    if (!GRID_AREA) {\n      return\n    }\n    NEW_ROOM.gridArea = GRID_AREA\n    this.planHouse = [...this.planHouse, NEW_ROOM]\n    this.emitPlanHouse()\n    this.saveHouse()\n  }\n\n  protected deleteRoom() {\n    if (this.currentIdClickedRoom !== undefined) {\n      this.planHouse.splice(this.currentIdClickedRoom, 1);\n      this.currentIdClickedRoom = undefined;\n      this.toggleOpenRoomModule()\n      this.emitPlanHouse()\n      this.saveHouse()\n      this.toggleControls(true)\n    }\n  }\n  protected toggleControls(enable: boolean): void {\n    if (enable) {\n      this.roomForm.get('width')?.enable();\n      this.roomForm.get('height')?.enable();\n      this.roomForm.get('length')?.enable();\n    } else {\n      this.roomForm.get('width')?.disable();\n      this.roomForm.get('height')?.disable();\n      this.roomForm.get('length')?.disable();\n    }\n  }\n  protected toggleOpenRoomModule(indexRoom?: number) {\n    if (!this.toggleModuleButton) return;\n    if (indexRoom !== undefined) {\n      const { width, height, length } = this.planHouse[indexRoom].roomProportions;\n      this.roomForm.patchValue({\n        width: width,\n        height: height,\n        length: length,\n        name: this.planHouse[indexRoom].name\n      });\n      this.toggleControls(false)\n      this.formElement.classList.add('openAddModule');\n      this.renderer.setStyle(this.toggleModuleButton, 'rotate', '135deg');\n      return;\n    }\n    if (this.formElement.classList.contains('openAddModule')) {\n      this.formElement.classList.remove('openAddModule');\n      this.renderer.setStyle(this.toggleModuleButton, 'rotate', '0deg');\n      this.currentIdClickedRoom = undefined\n      this.roomForm.patchValue({\n        width: null,\n        height: null,\n        length: null,\n        name: ''\n      });\n      this.toggleControls(true)\n    } else {\n      this.formElement.classList.add('openAddModule');\n      this.renderer.setStyle(this.toggleModuleButton, 'rotate', '135deg');\n    }\n  }\n  public closeViewRoom() {\n    const ROOM_ELEMENT = this.roomSpan.querySelector(`[data-index=\"${this.currentViewRoom}\"]`) as HTMLDivElement;\n    if (!ROOM_ELEMENT || !this.oldSizeViewRoom) return;\n    this.currentViewRoom = undefined;\n    this.currentIdClickedRoom = undefined\n    this.renderer.setStyle(ROOM_ELEMENT, 'width', this.oldSizeViewRoom.width + 'px')\n    this.renderer.setStyle(ROOM_ELEMENT, 'height', this.oldSizeViewRoom.height + 'px')\n    this.renderer.removeStyle(ROOM_ELEMENT, 'border');\n    this.renderer.removeClass(ROOM_ELEMENT, 'roomView');\n\n    this.renderer.setStyle(this.roomSpan, 'display', 'grid');\n\n    setTimeout(() => {\n      this.renderer.removeStyle(ROOM_ELEMENT, 'width');\n      this.renderer.removeStyle(ROOM_ELEMENT, 'height');\n    }, 768);\n  }\n  public openViewRoom(indexRoom: number) {\n    this.formElement.classList.remove('openAddModule');\n    this.currentViewRoom = indexRoom\n    this.lastPlanHouse = this.planHouse[indexRoom]\n    const ROOM_ELEMENT = this.roomSpan.querySelector(`[data-index=\"${indexRoom}\"]`) as HTMLDivElement\n    const { width: roomWidth, height: roomHeight } = ROOM_ELEMENT.getBoundingClientRect()\n    const { width: spanWidth, height: spanHeight } = this.roomSpan.getBoundingClientRect()\n    this.oldSizeViewRoom = {\n      height: roomHeight,\n      width: roomWidth\n    }\n\n    this.renderer.setStyle(ROOM_ELEMENT, 'width', roomWidth + 'px')\n    this.renderer.setStyle(ROOM_ELEMENT, 'height', roomHeight + 'px')\n\n    setTimeout(() => {\n      const COEFF_PROPORTIONS = roomWidth > roomHeight ? spanWidth / 2 / roomWidth : spanHeight / 2 / roomHeight\n\n      this.renderer.setStyle(ROOM_ELEMENT, 'width', roomWidth * COEFF_PROPORTIONS + 'px')\n      this.renderer.setStyle(ROOM_ELEMENT, 'height', roomHeight * COEFF_PROPORTIONS + 'px')\n      this.renderer.setStyle(ROOM_ELEMENT, 'border', 'white 3px dashed')\n\n      this.renderer.addClass(ROOM_ELEMENT, 'roomView')\n      this.renderer.setStyle(this.roomSpan, 'display', 'flex')\n    }, 0)\n  }\n  /**\n   * Форма для ввода данных комнаты.\n   */\n  protected roomForm = new FormGroup({\n    width: new FormControl(null, [\n      Validators.required,\n      Validators.min(0.1),\n      Validators.max(10),\n      Validators.pattern(/^\\d*\\.?\\d+$/)\n    ]),\n    height: new FormControl(null, [\n      Validators.required,\n      Validators.min(0.1),\n      Validators.max(10),\n      Validators.pattern(/^\\d*\\.?\\d+$/)\n    ]),\n    length: new FormControl(null, [\n      Validators.required,\n      Validators.min(0.1),\n      Validators.max(10),\n      Validators.pattern(/^\\d*\\.?\\d+$/)\n    ]),\n    name: new FormControl('', [\n      Validators.required,\n      Validators.maxLength(20)\n    ]),\n  });\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/selectFilter.html":{"url":"interfaces/selectFilter.html","title":"interface - selectFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  selectFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/category.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Фильтр типа select\n\n            \n\n            \n                Extends\n            \n            \n                            baseFilter\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            options\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        options\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        options:         option[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         option[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Варианты выбора\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                            \n                                \n                                    Тип фильтра\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные категории\n */\nexport interface categoryData {\n  /** Название категории */\n  name: string;\n  /** Перевод категории в единственном числе */\n  translateOne: string;\n  /** Перевод категории во множественном числе */\n  translateMany: string;\n  /** Массив фильтров категории */\n  filters: filter[];\n}\n\n/**\n * Базовый фильтр\n */\ninterface baseFilter {\n  /** Имя фильтра */\n  name: string;\n  /** Поле, по которому фильтр */\n  field: string;\n}\n\n/**\n * Опция для select-фильтра\n */\nexport interface option {\n  /** Название опции */\n  name: string;\n  /** Значение опции для запроса */\n  queryValue: string;\n}\n\n/**\n * Фильтр типа select\n */\ninterface selectFilter extends baseFilter {\n  /** Тип фильтра */\n  type: 'select';\n  /** Варианты выбора */\n  options: option[];\n}\n\n/**\n * Фильтр типа range\n */\ninterface rangeFilter extends baseFilter {\n  /** Тип фильтра */\n  type: 'range';\n  /** Минимальное значение */\n  minValue: number;\n  /** Максимальное значение */\n  maxValue: number;\n}\n\n/**\n * Тип фильтра: select или range\n */\nexport type filter = rangeFilter | selectFilter;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CategoryService {\n  /** Базовый URL для работы с категориями */\n  private baseServiceUrl = baseUrl + 'category';\n\n  constructor(\n    private httpModule: HttpClient\n  ) { }\n\n  /**\n   * Получение всех категорий\n   * @returns Promise с массивом категорий\n   */\n  GETgetAllCategories() {\n    return firstValueFrom(this.httpModule.get(this.baseServiceUrl)) as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/shopData.html":{"url":"interfaces/shopData.html","title":"interface - shopData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  shopData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/furniture-card-control.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Данные магазина с ценой и URL\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            cost\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cost\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cost:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Цена мебели\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    URL магазина или товара\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { imageSliderClientData, imageSliderFromServerData } from '../components/image-slider/image-slider.component';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные магазина с ценой и URL\n * @interface shopData\n */\nexport interface shopData {\n  /** Цена мебели */\n  cost: number;\n  /** URL магазина или товара */\n  url: string;\n}\n\n/**\n * Пропорции мебели (ширина, длина, высота)\n * @interface furnitureProportions\n */\nexport interface furnitureProportions {\n  /** Ширина мебели (или null, если не задана) */\n  width: number | null;\n  /** Длина мебели (или null, если не задана) */\n  length: number | null;\n  /** Высота мебели (или null, если не задана) */\n  height: number | null;\n}\n\n/**\n * Данные цвета на клиенте, включая слайдер изображений\n * @interface colorClientData\n */\nexport interface colorClientData {\n  /** Цвет мебели */\n  color: string;\n  /** Данные для слайдера изображений */\n  imagesData: imageSliderClientData;\n}\n\n/**\n * Данные цвета с сервера, включая слайдер изображений\n * @interface colorFromServerData\n */\nexport interface colorFromServerData {\n  /** Цвет мебели */\n  color: string;\n  /** Данные для слайдера изображений */\n  imagesData: imageSliderFromServerData;\n}\n\n/**\n * Дополнительные данные мебели с динамическими ключами\n * @interface additionalData\n */\nexport interface additionalData {\n  /** Категория мебели (опционально) */\n  category?: string;\n  /** Другие динамические свойства */\n  [key: string]: string | undefined;\n}\n\n/**\n * Базовые данные мебели, общие для клиента и сервера\n * @interface furnitureBaseData\n */\ninterface furnitureBaseData {\n  /** Название мебели */\n  name: string;\n  /** Описание мебели */\n  description: string;\n  /** Пропорции мебели */\n  proportions: furnitureProportions;\n  /** Список магазинов с ценами и URL */\n  shops: shopData[];\n  /** Дополнительные данные */\n  additionalData: additionalData;\n}\n\n/**\n * Данные мебели на клиенте с цветами\n * @interface furnitureClientData\n * @extends furnitureBaseData\n */\nexport interface furnitureClientData extends furnitureBaseData {\n  /** Список цветов с данными для клиента */\n  colors: colorClientData[];\n}\n\n/**\n * Данные мебели с сервера с цветами\n * @interface furnitureFromServerData\n * @extends furnitureBaseData\n */\nexport interface furnitureFromServerData extends furnitureBaseData {\n  /** Список цветов с данными с сервера */\n  colors: colorFromServerData[];\n}\n\n/**\n * Сервис для управления карточками мебели\n * @class FurnitureCardControlService\n * @injectable\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class FurnitureCardControlService {\n\n  /** Базовый URL для запросов к API мебели */\n  private baseServiceUrl = baseUrl + 'furniture/card';\n\n  /**\n   * Конструктор сервиса\n   * @param httpModule HTTP клиент для запросов\n   */\n  constructor(private httpModule: HttpClient) { }\n\n  /**\n   * Получение карточки мебели по ID и опциональному JWT токену\n   * @param furnitureCardId - ID карточки мебели\n   * @param [jwt] - JWT токен пользователя (опционально)\n   * @returns Promise с объектом, содержащим данные карточки и флаг совпадения автора\n   * @throws Ошибка при некорректной структуре ответа или при ошибках запроса\n   */\n  async GETfurnitureCard(\n    furnitureCardId: string,\n    jwt?: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams().set('furnitureCardId', furnitureCardId);\n\n    if (jwt !== undefined) {\n      HTTP_PARAMS = HTTP_PARAMS.set('jwt', jwt);\n    }\n\n    try {\n      const response = await firstValueFrom(\n        this.httpModule.get(this.baseServiceUrl, { params: HTTP_PARAMS })\n      ) as {\n        furnitureCard: furnitureFromServerData;\n        authorMatched: boolean;\n      };\n\n      if (!response?.furnitureCard) {\n        throw new Error('Invalid response structure: furnitureCard missing');\n      }\n\n      const transformedFurnitureCard = {\n        ...response.furnitureCard,\n        colors: response.furnitureCard.colors.map(colorData => ({\n          color: colorData.color,\n          imagesData: {\n            idMainImage: colorData.imagesData.idMainImage,\n            images: colorData.imagesData.images.map(url => baseUrl + url)\n          }\n        }))\n      };\n\n      return {\n        furnitureCard: transformedFurnitureCard,\n        authorMatched: response.authorMatched\n      };\n\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Создание новой карточки мебели\n   * @param furnitureData - Данные новой карточки мебели\n   * @param jwt - JWT токен пользователя\n   * @returns Promise с данными созданной карточки, включая её ID\n   */\n  POSTcreateFurnitureCard(\n    furnitureData: furnitureFromServerData,\n    jwt: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams().set('jwt', jwt);\n    return firstValueFrom(\n      this.httpModule.post(this.baseServiceUrl, furnitureData, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n\n  /**\n   * Обновление существующей карточки мебели\n   * @param furnitureCardUpdateData - Обновленные данные карточки мебели\n   * @param furnitureCardId - ID карточки мебели для обновления\n   * @param jwt - JWT токен пользователя\n   * @returns Promise с сообщением результата обновления\n   */\n  PUTupdateFurnitureCard(\n    furnitureCardUpdateData: furnitureFromServerData,\n    furnitureCardId: string,\n    jwt: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId);\n    return firstValueFrom(\n      this.httpModule.put(this.baseServiceUrl, furnitureCardUpdateData, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n\n  /**\n   * Удаление карточки мебели по ID и JWT токену\n   * @param jwt - JWT токен пользователя\n   * @param furnitureCardId - ID карточки мебели для удаления\n   * @returns Promise с сообщением результата удаления\n   */\n  DELETEfurnitureCard(jwt: string, furnitureCardId: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId);\n    return firstValueFrom(\n      this.httpModule.delete(this.baseServiceUrl, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            accountType   (src/.../account.service.ts)\n                        \n                        \n                            authData   (src/.../auth.service.ts)\n                        \n                        \n                            changeAccountData   (src/.../account.service.ts)\n                        \n                        \n                            createAccountData   (src/.../account.service.ts)\n                        \n                        \n                            filter   (src/.../category.service.ts)\n                        \n                        \n                            uploadStatus   (src/.../upload.service.ts)\n                        \n                        \n                            uploadType   (src/.../upload.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/services/account.service.ts\n    \n    \n        \n            \n                \n                    \n                    accountType\n                \n            \n            \n                \n                    Тип аккаунта\n\n                \n            \n            \n                \n                        \"google\" | \"email\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    changeAccountData\n                \n            \n            \n                \n                    Тип данных для изменения аккаунта (на данный момент только email)\n\n                \n            \n            \n                \n                            changeAccountDataEmail\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    createAccountData\n                \n            \n            \n                \n                    Тип данных для создания аккаунта\n\n                \n            \n            \n                \n                            createEmailAccountData\n\n                \n            \n        \n    \n    src/services/auth.service.ts\n    \n    \n        \n            \n                \n                    \n                    authData\n                \n            \n            \n                \n                    Объединённый тип данных для аутентификации\n\n                \n            \n            \n                \n                        googleAuthData | emailAuthData\n\n                \n            \n        \n    \n    src/services/category.service.ts\n    \n    \n        \n            \n                \n                    \n                    filter\n                \n            \n            \n                \n                    Тип фильтра: select или range\n\n                \n            \n            \n                \n                        rangeFilter | selectFilter\n\n                \n            \n        \n    \n    src/services/upload.service.ts\n    \n    \n        \n            \n                \n                    \n                    uploadStatus\n                \n            \n            \n                \n                        \"uploading\" | \"success\" | \"error\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    uploadType\n                \n            \n            \n                \n                        \"create\" | \"update\"\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            appConfig   (src/.../app.config.ts)\n                        \n                        \n                            baseClientUrl   (src/.../index.ts)\n                        \n                        \n                            baseUrl   (src/.../index.ts)\n                        \n                        \n                            bootstrap   (src/.../main.server.ts)\n                        \n                        \n                            config   (src/.../app.config.server.ts)\n                        \n                        \n                            serverConfig   (src/.../app.config.server.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        appConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ApplicationConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n  providers: [\n    provideRouter(routes),\n    provideClientHydration(),\n    provideAnimations(),\n    provideHttpClient(withInterceptorsFromDi()),\n    provideEventPlugins(),\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: HttpErrorInterceptor,\n      multi: true\n    }\n  ]\n\n}\n                    \n                \n\n\n        \n    \n\n    src/services/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        baseClientUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'https://housequality.site/'\n                    \n                \n\n            \n                \n                    Базовый URL клиента (фронтенда), по которому доступно Angular-приложение.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : baseClientUrl + 'api/'\n                    \n                \n\n            \n                \n                    Базовый URL для API-запросов к серверу.\nФормируется как базовый URL клиента + 'api/'.\n\n                \n            \n\n        \n    \n\n    src/main.server.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => bootstrapApplication(AppComponent, config)\n                    \n                \n\n\n        \n    \n\n    src/app.config.server.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Default value : mergeApplicationConfig(appConfig, serverConfig)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serverConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ApplicationConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n  providers: []\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
