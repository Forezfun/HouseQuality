var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/injectables/AccountCookieService.html",[0,0.228,1,1.206]],["body/injectables/AccountCookieService.html",[0,0.322,1,1.699,2,1.701,3,0.124,4,0.124,5,0.109,6,6.87,7,3.636,8,0.094,9,1.527,10,6.831,11,6.831,12,6.831,13,6.831,14,6.831,15,6.831,16,6.831,17,5.638,18,5.638,19,0.692,20,4.178,21,5.299,22,1.906,23,4.178,24,1.668,25,0.014,26,0.391,27,0.12,28,1.398,29,4.178,30,0.389,31,2.062,32,4.178,33,4.178,34,1.477,35,4.178,36,6.831,37,4.178,38,0.28,39,4.178,40,3.02,41,3.153,42,4.178,43,5.638,44,7.133,45,7.349,46,7.133,47,4.178,48,0.299,49,5.638,50,3.321,51,4.178,52,0.19,53,0.109,54,3.279,55,3.279,56,3.636,57,3.013,58,0.558,59,0.535,60,0.124,61,0.124,62,0.221,63,0.621,64,0.716,65,7.349,66,0.716,67,6.831,68,6.381,69,4.577,70,4.178,71,3.334,72,4.178,73,6.381,74,6.381,75,6.381,76,6.381,77,4.178,78,4.178,79,1.305,80,0.418,81,4.178,82,4.178,83,4.178,84,4.178,85,4.178,86,4.178,87,0.009,88,0.009]],["title/injectables/AccountService.html",[0,0.228,89,1.931]],["body/injectables/AccountService.html",[0,0.279,1,2.14,2,1.389,3,0.101,4,0.101,5,0.089,8,0.076,9,1.326,19,0.601,22,1.77,24,1.803,25,0.014,26,0.435,27,0.139,28,1.51,30,0.379,34,1.494,38,0.302,40,3.512,41,1.575,48,0.351,50,2.929,52,0.205,53,0.089,58,0.456,59,0.437,60,0.22,61,0.101,62,0.351,63,0.671,64,0.702,66,0.743,79,1.789,80,0.476,87,0.008,88,0.008,89,2.364,90,1.813,91,0.22,92,0.934,93,3.927,94,4.896,95,4.896,96,0.934,97,4.896,98,4.896,99,4.896,100,1.813,101,1.143,102,4.896,103,0.894,104,3.412,105,1.151,106,1.37,107,3.073,108,3.412,109,1.353,110,3.073,111,3.412,112,3.073,113,3.412,114,2.97,115,3.073,116,3.858,117,3.412,118,3.073,119,3.501,120,3.412,121,2.601,122,1.066,123,0.831,124,0.944,125,1.926,126,0.702,127,2.26,128,2.165,129,2.142,130,2.005,131,0.601,132,1.147,133,0.623,134,0.456,135,0.286,136,2.532,137,2.897,138,2.477,139,2.018,140,3.7,141,2.74,142,1.813,143,2.74,144,1.726,145,2.076,146,1.647,147,2.601,148,1.909,149,2.018,150,2.142,151,2.233,152,1.813,153,2.142,154,2.142,155,2.142,156,2.142,157,1.813,158,2.142,159,1.813,160,2.142,161,1.447,162,1.855,163,2.364,164,2.142,165,1.471,166,1.813,167,2.142,168,1.813,169,1.508,170,0.696,171,0.802,172,3.501,173,0.557,174,1.105,175,2.142,176,2.142,177,1.066,178,1.726,179,0.802,180,1.008,181,1.389,182,1.389,183,1.028,184,1.389]],["title/components/AppComponent.html",[185,0.908,186,1.847]],["body/components/AppComponent.html",[1,1.936,3,0.152,4,0.152,5,0.133,8,0.114,22,1.244,25,0.014,26,0.431,27,0.096,38,0.19,52,0.247,53,0.133,59,0.823,60,0.152,61,0.152,87,0.011,88,0.011,89,3.102,91,0.289,106,1.407,122,1.595,123,1.244,125,1.485,132,1.716,185,1.596,186,3.406,187,3.102,188,2.583,189,2.465,190,2.583,191,4.443,192,2.357,193,4.443,194,3.108,195,3.406,196,3.799,197,2.966,198,2.966,199,2.75,200,2.75,201,2.007,202,3.25,203,3.414,204,4.033,205,3.019,206,2.707,207,2.803,208,2.081,209,2.159,210,6.425,211,3.246,212,2.159,213,6.425,214,5.518,215,5.592,216,5.106,217,2.165,218,2.257,219,5.106,220,2.713,221,3.019,222,5.106,223,4.007,224,4.443,225,2.465,226,3.205,227,2.081,228,2.75,229,3.019,230,3.595,231,1.539,232,2.713,233,5.106,234,4.007,235,5.106,236,5.106,237,5.106,238,4.007,239,5.106,240,5.106,241,5.106,242,2.583,243,2.615,244,3.25,245,2.165,246,3.733,247,2.583,248,2.357,249,3.927,250,2.583,251,2.357,252,2.615,253,2.583,254,2.257,255,1.936,256,2.257,257,2.583,258,2.165,259,2.583,260,2.465,261,2.583,262,2.357,263,2.583,264,2.165,265,2.357,266,2.583,267,2.583,268,2.615,269,2.583,270,2.357,271,2.357,272,2.583,273,2.465,274,1.921,275,2.078,276,2.583,277,2.357,278,2.583,279,2.465,280,2.465,281,2.583]],["title/injectables/AuthService.html",[0,0.228,196,2.366]],["body/injectables/AuthService.html",[0,0.329,2,1.758,3,0.128,4,0.128,5,0.112,8,0.097,9,1.561,19,0.707,22,1.808,24,1.886,25,0.014,26,0.442,27,0.14,28,1.58,30,0.377,34,1.424,38,0.286,40,3.638,41,3.33,48,0.367,50,3.06,52,0.22,53,0.112,57,4.156,58,0.577,59,0.553,60,0.206,61,0.128,62,0.367,63,0.673,64,0.647,66,0.777,80,0.453,87,0.01,88,0.01,91,0.259,92,1.058,100,2.294,101,1.265,103,1.053,109,1.382,121,3.447,122,1.349,123,1.052,124,0.979,125,1.256,126,0.647,130,2.097,131,0.76,133,0.789,134,0.577,135,0.249,136,1.909,137,2.185,146,3.342,151,2.266,152,2.294,157,3.447,159,2.294,161,2.444,165,1.355,166,2.294,168,2.294,169,1.909,174,1.399,196,3.408,282,2.894,283,5.764,284,5.764,285,5.764,286,5.764,287,5.764,288,4.524,289,4.318,290,4.524,291,4.972,292,4.318,293,4.524,294,4.318,295,4.524,296,4.318,297,5.433,298,2.894,299,3.618,300,3.618,301,3.389,302,3.389,303,3.389,304,3.389,305,3.389,306,3.389,307,4.524,308,3.389,309,3.389,310,3.389,311,3.389,312,3.389]],["title/directives/AutoHeightDirective.html",[194,1.769,245,1.696]],["body/directives/AutoHeightDirective.html",[3,0.152,4,0.152,5,0.133,8,0.115,9,1.745,19,0.864,22,1.855,24,1.341,25,0.014,26,0.314,27,0.121,28,1.123,30,0.315,31,1.977,48,0.272,52,0.191,53,0.133,60,0.152,61,0.152,62,0.373,63,0.499,64,0.575,79,2.013,80,0.336,87,0.011,88,0.011,91,0.29,105,1.515,106,1.619,122,2.013,123,1.569,192,2.367,194,2.848,206,2.087,208,2.087,245,2.731,279,2.476,280,3.111,313,6.763,314,4.463,315,2.087,316,3.401,317,7.045,318,3.739,319,6.443,320,5.056,321,7.045,322,6.443,323,5.128,324,3.852,325,6.443,326,3.852,327,5.128,328,7.39,329,6.432,330,6.131,331,6.443,332,5.128,333,2.267,334,2.476,335,5.128,336,4.024,337,5.128,338,5.128,339,5.128,340,3.032,341,5.128,342,6.443,343,4.024,344,5.128,345,4.463]],["title/injectables/CategoryService.html",[0,0.228,346,2.126]],["body/injectables/CategoryService.html",[0,0.363,2,2.048,3,0.149,4,0.149,5,0.131,8,0.113,9,1.724,19,0.781,22,1.701,24,1.316,25,0.014,26,0.449,27,0.138,28,1.102,30,0.312,38,0.292,52,0.218,53,0.131,58,0.672,59,0.644,60,0.218,61,0.149,62,0.389,80,0.329,87,0.011,88,0.011,91,0.286,92,1.139,100,2.674,101,1.341,103,1.163,109,1.244,122,1.572,123,1.226,124,1.054,126,0.714,131,0.886,133,0.919,134,0.672,135,0.327,174,1.63,346,3.383,347,2.816,348,4.607,349,6.367,350,5.032,351,2.22,352,2.674,353,3.158,354,3.158,355,3.158,356,3.562,357,3.908,358,3.158,359,3.245,360,3.562,361,3.158,362,3.383,363,1.919,364,3.158,365,3.088,366,3.383,367,3.158,368,0.923,369,3.158]],["title/injectables/ClientImageControlService.html",[0,0.228,370,2.885]],["body/injectables/ClientImageControlService.html",[0,0.419,2,2.291,3,0.167,4,0.167,5,0.207,8,0.126,9,1.848,22,1.371,24,1.471,25,0.014,26,0.345,27,0.106,28,1.233,30,0.334,48,0.362,52,0.203,53,0.146,58,0.752,59,0.721,60,0.167,61,0.203,63,0.547,66,0.766,80,0.368,87,0.011,88,0.011,109,1.294,180,1.201,227,2.473,370,5.295,371,5.939,372,2.488,373,6.824,374,6.824,375,5.628,376,6.824,377,2.727,378,5.628,379,4.898,380,5.628,381,5.628,382,5.628,383,5.628,384,5.628,385,3.533,386,5.628,387,5.628,388,3.328,389,5.628,390,5.628]],["title/pipes/CostFormatPipe.html",[391,2.885,392,2.511]],["body/pipes/CostFormatPipe.html",[3,0.175,4,0.175,5,0.154,9,1.6,22,1.439,24,1.545,25,0.014,26,0.459,27,0.111,28,1.294,30,0.344,38,0.262,48,0.313,52,0.175,53,0.154,60,0.175,61,0.175,63,0.575,80,0.387,87,0.012,88,0.012,123,1.712,192,2.728,315,1.914,368,1.087,391,5.066,392,4.41,393,5.909,394,6.115,395,5.142,396,5.514,397,4.637,398,7.026,399,5.909,400,7.026,401,7.026,402,5.909]],["title/components/CreateFurniturePageComponent.html",[185,0.908,254,1.769]],["body/components/CreateFurniturePageComponent.html",[1,1.547,3,0.069,4,0.069,5,0.06,8,0.052,9,0.988,19,0.447,21,3.258,22,1.831,24,1.342,25,0.014,26,0.424,27,0.121,28,1.124,30,0.358,31,1.568,34,1.407,38,0.253,48,0.329,52,0.209,53,0.06,60,0.069,61,0.069,62,0.408,63,0.499,64,0.872,66,0.723,79,2.073,80,0.488,87,0.006,88,0.006,91,0.164,96,1.194,105,0.857,106,1.301,109,0.947,122,1.139,123,0.888,125,0.671,126,0.576,132,0.776,134,0.308,135,0.1,170,1.437,171,1.207,173,1.131,177,1.412,179,1.207,180,0.903,185,1.026,186,1.066,187,1.761,188,1.168,189,1.115,190,1.168,192,1.066,194,1.021,195,1.066,197,2.369,199,0.903,200,0.903,201,1.603,202,2.597,206,2.452,207,2.525,208,1.181,209,1.225,211,1.066,212,1.225,217,0.979,225,1.115,226,1.449,227,1.464,228,1.767,230,2.04,231,0.696,232,1.227,242,1.168,243,1.839,244,1.845,245,0.979,246,2.597,247,1.168,248,1.066,249,3.005,250,1.168,251,3.063,252,3.035,253,1.168,254,2.269,255,2.464,256,1.021,257,1.168,258,0.979,259,1.168,260,1.115,261,1.168,262,1.066,263,1.168,264,2.176,265,1.683,266,1.168,267,1.168,268,1.484,269,1.168,270,1.066,271,1.066,272,1.168,273,1.115,274,0.869,275,0.94,276,1.168,277,1.066,278,1.168,279,1.115,280,1.115,281,1.168,315,1.181,316,2.182,318,2.597,333,2.471,368,0.744,377,2.169,403,5.94,404,5.94,405,1.449,406,2.836,407,2.443,408,1.576,409,2.443,410,1.612,411,2.443,412,3.933,413,2.76,414,4.863,415,3.933,416,3.646,417,4.467,418,4.467,419,4.467,420,4.467,421,4.028,422,4.519,423,4.467,424,3.173,425,3.646,426,4.467,427,2.309,428,2.727,429,2.286,430,3.028,431,3.304,432,2.836,433,1.839,434,1.859,435,2.309,436,1.937,437,3.173,438,3.728,439,2.309,440,4.467,441,2.309,442,2.309,443,4.484,444,2.309,445,2.309,446,1.929,447,2.309,448,2.309,449,1.222,450,2.309,451,2.309,452,2.862,453,2.309,454,3.173,455,2.309,456,3.173,457,2.309,458,2.443,459,4.467,460,2.309,461,3.173,462,2.01,463,2.102,464,2.269,465,1.998,466,1.625,467,1.859,468,1.859,469,2.008,470,2.309,471,2.309,472,4.863,473,2.309,474,1.812,475,2.01,476,1.665,477,1.365,478,1.547,479,1.665,480,1.812,481,1.546,482,0.776,483,1.066,484,1.7,485,0.869,486,1.021,487,2.629,488,4.467,489,1.665,490,2.01,491,1.812,492,5.61,493,2.01,494,2.01,495,1.812,496,2.01,497,1.06,498,2.01,499,1.115,500,3.173,501,3.547,502,1.115,503,3.933,504,1.874,505,3.547,506,4.467,507,2.01,508,2.01,509,2.01,510,2.01,511,2.01,512,3.173,513,2.01,514,1.547,515,1.547,516,3.173,517,3.173,518,2.01,519,3.173,520,3.173,521,2.836,522,2.01,523,2.01,524,3.173,525,3.933,526,3.173,527,3.173,528,1.612,529,1.546,530,1.546,531,1.761,532,3.173,533,4.467,534,3.173,535,2.01,536,2.156,537,3.156,538,2.01,539,2.01,540,2.443,541,3.173,542,3.173,543,3.173,544,2.01,545,2.01,546,2.01,547,2.01,548,2.01,549,2.01,550,2.01,551,2.01,552,2.01,553,3.173,554,3.933,555,1.665,556,3.028,557,2.01,558,3.305,559,1.812,560,1.812,561,1.812,562,2.01,563,4.467,564,2.01,565,3.173,566,2.01,567,2.01,568,2.01,569,3.173,570,2.01,571,2.01]],["title/components/FinderComponent.html",[185,0.908,256,1.769]],["body/components/FinderComponent.html",[3,0.09,4,0.09,5,0.078,8,0.068,9,1.212,19,0.549,22,1.877,24,1.648,25,0.014,26,0.453,27,0.135,28,1.497,30,0.367,31,1.853,38,0.301,48,0.334,52,0.203,53,0.078,60,0.09,61,0.09,62,0.428,63,0.642,64,0.599,79,1.667,80,0.46,87,0.007,88,0.007,91,0.201,96,0.87,105,1.052,106,1.381,122,1.398,123,1.3,125,0.877,126,0.788,135,0.13,170,0.912,173,0.492,185,1.211,186,1.393,187,2.161,188,1.526,189,2.576,190,1.526,192,1.393,194,1.334,195,1.393,197,2.725,199,1.18,200,1.18,204,4.145,206,2.555,207,2.637,208,1.45,209,1.504,211,1.393,212,1.504,217,1.279,226,1.894,227,1.45,228,1.18,234,2.368,242,1.526,243,2.688,244,2.264,245,1.279,246,2.986,247,1.526,248,1.393,249,3.341,250,1.526,251,1.393,252,1.822,253,1.526,254,1.334,255,1.349,256,2.609,257,1.526,258,1.279,259,1.526,260,1.457,261,1.526,262,1.393,263,1.526,264,1.279,265,1.393,266,1.526,267,1.526,268,1.822,269,1.526,270,1.393,271,1.393,272,1.526,273,1.457,274,1.684,275,1.228,276,1.526,277,1.393,278,1.526,279,1.457,280,1.457,281,1.526,315,1.45,333,3.022,351,2.198,368,0.437,392,3.349,396,3.512,408,1.86,410,1.979,413,2.737,428,3.136,436,2.835,446,0.877,449,1.011,482,1.014,504,1.608,556,3.575,572,2.368,573,2.835,574,3.895,575,3.575,576,2.699,577,4.224,578,3.895,579,3.895,580,4.145,581,4.643,582,5.063,583,4.643,584,4.643,585,4.475,586,5.137,587,5.137,588,4.475,589,4.475,590,4.475,591,5.137,592,3.136,593,5.137,594,3.017,595,2.985,596,3.303,597,4.643,598,4.475,599,3.895,600,3.017,601,3.017,602,3.017,603,5.137,604,3.895,605,3.017,606,3.895,607,3.895,608,2.566,609,3.017,610,5.137,611,3.895,612,3.017,613,3.017,614,3.895,615,3.017,616,3.017,617,3.017,618,3.017,619,3.017,620,3.575,621,3.017,622,2.175,623,2.175,624,2.368,625,2.368,626,1.052,627,2.625,628,4.643,629,2.625,630,2.625,631,2.625,632,3.895,633,2.625,634,3.895,635,2.625,636,4.643,637,2.809,638,4.643,639,2.175,640,2.625,641,2.625,642,3.895,643,2.625,644,3.895,645,2.625,646,3.895,647,2.625,648,3.895,649,3.895,650,2.625,651,2.625,652,2.625,653,2.625,654,2.625,655,3.895,656,2.625,657,2.625,658,2.625,659,2.625,660,2.625,661,4.475,662,4.475]],["title/injectables/FinderService.html",[0,0.228,204,2.511]],["body/injectables/FinderService.html",[0,0.393,2,1.989,3,0.145,4,0.145,5,0.127,8,0.109,9,1.693,19,0.599,22,1.87,24,1.801,25,0.014,26,0.46,27,0.13,28,1.509,30,0.337,31,1.754,38,0.286,48,0.385,52,0.216,53,0.127,58,0.653,59,0.626,60,0.145,61,0.186,62,0.407,63,0.67,66,0.701,71,3.695,80,0.32,87,0.01,88,0.01,91,0.281,92,1.124,100,2.597,101,1.326,103,1.259,109,1.231,122,2.152,123,1.678,124,1.04,126,0.701,131,0.86,133,0.893,134,0.653,174,1.583,204,4.324,663,4.253,664,6.889,665,6.889,666,6.249,667,6.249,668,6.249,669,3.017,670,6.249,671,4.887,672,6.889,673,6.249,674,4.887,675,6.249,676,4.887,677,6.249,678,4.905,679,5.029,680,4.887,681,1.838,682,4.887]],["title/injectables/FurnitureCardControlService.html",[0,0.228,201,1.25]],["body/injectables/FurnitureCardControlService.html",[0,0.316,2,1.306,3,0.095,4,0.095,5,0.084,8,0.072,9,1.269,19,0.394,22,1.645,24,1.69,25,0.014,26,0.413,27,0.122,28,1.416,30,0.35,34,1.501,38,0.305,48,0.369,52,0.192,53,0.084,58,0.429,59,0.411,60,0.212,61,0.139,62,0.293,63,0.72,64,0.62,66,0.725,80,0.398,87,0.008,88,0.008,91,0.211,92,0.902,96,0.902,100,1.705,101,1.111,103,1.01,105,0.755,109,1.348,122,1.003,123,0.782,124,0.918,126,0.802,130,1.608,131,0.565,133,1.181,134,0.429,135,0.338,151,2.119,162,1.517,165,1.43,170,1.376,171,0.755,173,0.524,177,1.899,179,0.755,180,0.973,181,1.306,182,2.475,183,1.411,201,1.728,231,2.101,351,1.119,363,1.832,368,0.882,372,1.419,421,3.676,446,1.362,449,1.439,463,2.081,464,1.419,465,2.688,466,0.933,467,1.162,468,1.162,469,1.255,481,3.09,484,1.762,485,1.207,486,1.419,497,1.362,499,1.549,502,1.549,528,2.445,529,1.361,530,1.361,531,1.549,608,2.251,626,1.119,669,2.261,681,1.207,683,3.366,684,2.939,685,2.939,686,4.684,687,2.489,688,2.02,689,3.209,690,3.209,691,3.209,692,2.519,693,3.209,694,3.209,695,3.209,696,3.209,697,3.231,698,2.489,699,1.906,700,1.986,701,1.624,702,2.445,703,2.553,704,2.67,705,2.67,706,1.306,707,3.26,708,2.261,709,1.306,710,1.705,711,1.705,712,1.705,713,2.939,714,2.489,715,1.705,716,1.705,717,1.705,718,1.705,719,2.489,720,1.705,721,1.705,722,1.705,723,1.624,724,1.705,725,2.261,726,1.705,727,1.624]],["title/injectables/FurnitureModelControlService.html",[0,0.228,202,2.024]],["body/injectables/FurnitureModelControlService.html",[0,0.337,2,1.827,3,0.133,4,0.133,5,0.183,8,0.101,9,1.601,19,0.725,22,1.78,24,1.838,25,0.014,26,0.43,27,0.132,28,1.539,30,0.358,31,1.259,34,1.501,38,0.31,48,0.35,52,0.217,53,0.117,58,0.6,59,0.575,60,0.133,61,0.133,62,0.387,63,0.744,64,0.663,66,0.742,80,0.433,87,0.01,88,0.01,91,0.266,92,1.079,100,2.385,101,1.284,103,1.08,109,1.296,122,1.402,123,1.093,124,0.998,126,0.742,130,1.719,131,0.79,133,1.08,134,0.6,151,1.719,162,1.454,165,1.055,180,0.79,183,1.352,202,2.991,232,3.985,372,1.984,377,2.306,443,5.409,449,1.502,683,3.622,688,2.133,699,2.407,725,2.167,727,2.27,728,5.913,729,5.913,730,5.913,731,4.522,732,5.913,733,5.913,734,4.488,735,5.913,736,4.431,737,3.193,738,4.488,739,5.913,740,4.872,741,4.488,742,5.913,743,4.264,744,4.488,745,4.488,746,4.488,747,4.488,748,4.488,749,4.488,750,2.654,751,4.488,752,4.488,753,4.488,754,4.488,755,4.488]],["title/interceptors/HttpErrorInterceptor.html",[756,3.482,757,2.885]],["body/interceptors/HttpErrorInterceptor.html",[0,0.382,3,0.162,4,0.162,5,0.142,8,0.122,9,1.812,19,0.821,22,1.63,24,1.749,25,0.014,26,0.41,27,0.126,28,1.465,30,0.327,48,0.354,52,0.23,53,0.142,60,0.162,61,0.162,62,0.289,63,0.704,80,0.438,87,0.011,88,0.011,131,0.959,134,0.728,180,0.959,315,1.765,433,2.947,434,2.806,483,2.515,537,2.894,669,3.95,678,6.082,757,4.823,758,5.448,759,6.3,760,4.741,761,6.689,762,5.448,763,5.448,764,6.689,765,7.55,766,7.55,767,7.55,768,5.448,769,6.689,770,5.448,771,6.689,772,6.689,773,6.689,774,5.448,775,5.448,776,5.448,777,5.448,778,5.448]],["title/components/ImageSliderComponent.html",[185,0.908,258,1.696]],["body/components/ImageSliderComponent.html",[3,0.122,4,0.122,5,0.107,8,0.159,9,1.508,22,1.878,24,1.072,25,0.014,26,0.415,27,0.133,28,0.898,30,0.332,31,1.773,38,0.153,48,0.295,52,0.188,53,0.107,60,0.188,61,0.122,62,0.295,79,1.739,87,0.009,88,0.009,91,0.25,105,1.309,106,1.219,122,1.974,123,1.54,125,1.192,126,0.709,135,0.24,185,1.434,186,1.893,187,2.688,188,2.074,189,1.98,190,2.074,192,1.893,194,1.813,195,1.893,199,1.604,200,1.604,206,2.651,207,2.742,208,1.803,209,1.87,211,1.893,212,1.87,227,2.422,242,2.074,243,2.266,244,2.816,245,1.738,246,3.429,247,2.074,248,1.893,249,3.697,250,2.074,251,1.893,252,2.266,253,2.074,254,1.813,255,1.677,256,1.813,257,2.074,258,2.874,259,2.074,260,1.98,261,2.074,262,1.893,263,2.074,264,1.738,265,1.893,266,2.074,267,2.074,268,2.266,269,2.074,270,1.893,271,1.893,272,2.074,273,1.98,274,1.543,275,1.669,276,2.074,277,1.893,278,2.074,279,1.98,280,1.98,281,2.074,315,1.803,316,3.051,318,3.197,320,4.369,324,2.074,326,2.816,334,1.98,368,1.084,377,2.204,408,2.204,410,2.461,413,2.689,458,2.748,482,1.378,484,1.543,485,2.933,504,1.677,528,2.461,529,2.36,530,2.679,576,3.197,700,2.36,779,5.622,780,2.957,781,4.369,782,4.96,783,4.369,784,4.369,785,5.32,786,5.566,787,4.96,788,6.32,789,5.566,790,4.369,791,4.96,792,4.1,793,4.1,794,3.218,795,5.566,796,4.1,797,4.1,798,2.425,799,4.1,800,3.73,801,1.543,802,4.1,803,4.1,804,4.1,805,2.957,806,2.957,807,5.566]],["title/components/MainPageComponent.html",[185,0.908,262,1.847]],["body/components/MainPageComponent.html",[3,0.101,4,0.101,5,0.089,8,0.076,9,1.327,19,0.601,22,1.887,24,1.498,25,0.014,26,0.422,27,0.118,28,1.255,30,0.348,31,2.039,38,0.182,48,0.303,52,0.216,53,0.089,60,0.101,61,0.101,62,0.351,63,0.332,79,1.53,87,0.008,88,0.008,91,0.22,105,1.152,106,1.073,122,1.955,123,1.525,125,0.993,185,1.3,186,1.576,187,2.365,188,1.727,189,1.648,190,1.727,192,1.576,194,1.509,195,1.576,199,2.448,200,1.335,206,2.597,207,2.682,208,1.587,209,1.646,211,1.576,212,1.646,215,6.002,217,1.447,220,1.814,221,2.019,227,1.106,242,1.727,243,1.994,244,2.478,245,1.447,246,3.166,247,1.727,248,1.576,249,3.489,250,1.727,251,2.889,252,3.056,253,1.727,254,1.509,255,1.886,256,1.509,257,1.727,258,1.447,259,1.727,260,1.648,261,1.727,262,2.889,263,3.594,264,2.653,265,2.261,266,1.727,267,1.727,268,2.547,269,1.727,270,1.576,271,2.261,272,1.727,273,1.648,274,2.155,275,1.39,276,1.727,277,2.889,278,3.489,279,1.648,280,1.648,281,1.727,315,1.587,318,3.166,326,3.352,333,3.049,334,1.648,405,2.143,407,3.282,408,1.998,409,3.282,410,2.165,411,3.282,413,2.806,431,3.774,458,2.288,462,2.971,477,2.019,478,2.288,479,2.462,480,3.844,482,1.147,573,3.043,575,3.838,577,3.838,592,3.325,785,5.704,787,4.912,790,3.844,791,4.496,794,2.68,798,2.896,801,1.284,808,6.794,809,6.794,810,6.897,811,5.728,812,6.897,813,5.728,814,4.898,815,5.728,816,5.728,817,2.971,818,3.414,819,4.898,820,4.898,821,3.414,822,3.414,823,3.414,824,3.414,825,3.414,826,4.898,827,3.844,828,3.414,829,3.414,830,3.414,831,3.414,832,3.414,833,3.414,834,3.414,835,2.68,836,3.414,837,3.414,838,3.414,839,3.414,840,3.414,841,3.414,842,3.414,843,3.414,844,2.68,845,2.971,846,2.971,847,2.143,848,3.282,849,4.898,850,4.898]],["title/interfaces/MyXhrUploadOptions.html",[135,0.173,851,2.681]],["body/interfaces/MyXhrUploadOptions.html",[0,0.336,1,1.988,3,0.133,4,0.133,5,0.214,8,0.1,19,0.548,25,0.014,26,0.485,27,0.144,28,1.641,34,1.332,38,0.307,52,0.233,53,0.116,58,0.597,59,0.572,60,0.196,61,0.133,62,0.411,64,0.901,66,0.74,80,0.478,87,0.01,88,0.01,91,0.265,92,0.729,96,0.729,105,1.552,106,1.291,124,0.89,125,1.299,132,1.501,134,0.597,135,0.254,148,3.299,170,1.202,173,0.729,180,1.319,184,1.818,197,2.722,201,1.842,227,1.447,228,2.306,231,1.346,252,2.4,255,1.346,275,1.818,368,0.855,385,4.142,429,2.26,430,2.994,433,1.818,434,2.135,438,2.804,446,2.178,449,1.251,497,1.919,514,2.994,515,2.994,536,2.642,540,2.994,679,3.951,688,1.725,731,2.642,740,4.578,743,3.221,801,1.681,851,4.422,852,0.674,853,2.994,854,5.725,855,5.725,856,5.259,857,5.725,858,5.507,859,3.507,860,3.507,861,3.221,862,3.507,863,3.507,864,4.422,865,4.251,866,2.804,867,5.725,868,5.179,869,4.627,870,2.374,871,3.507,872,3.507,873,3.507,874,3.507,875,3.507,876,3.507,877,5.179,878,5.179,879,5.179,880,4.758,881,5.179,882,5.179,883,3.507,884,3.221,885,3.486,886,3.507,887,3.507,888,4.627,889,3.507,890,3.507,891,3.507,892,3.507,893,3.507,894,3.507,895,3.507,896,3.507,897,3.507,898,5.507,899,3.507,900,4.627,901,3.507,902,3.507,903,3.507,904,3.507,905,4.627,906,3.507,907,3.507,908,3.221,909,3.507,910,3.507,911,4.627,912,4.627,913,3.507,914,3.507,915,3.507,916,3.507,917,3.507]],["title/components/NavigationPanelComponent.html",[185,0.908,264,1.696]],["body/components/NavigationPanelComponent.html",[3,0.13,4,0.13,5,0.114,8,0.098,9,1.572,22,1.813,24,1.141,25,0.014,26,0.426,28,0.955,30,0.319,31,1.83,48,0.307,52,0.206,53,0.114,60,0.13,61,0.13,62,0.345,63,0.424,79,2.171,87,0.01,88,0.01,91,0.261,106,1.271,122,1.813,123,1.414,125,1.268,185,1.48,186,2.014,187,2.802,188,2.207,189,2.106,190,2.207,192,2.014,194,1.929,195,2.014,199,1.706,200,1.706,206,2.668,207,2.76,208,1.88,209,1.95,211,2.014,212,1.95,217,1.85,227,1.413,242,2.207,243,2.362,244,2.936,245,1.85,246,3.516,247,2.207,248,2.014,249,3.765,250,2.207,251,2.014,252,2.362,253,2.207,254,1.929,255,1.749,256,3.073,257,2.207,258,1.85,259,2.207,260,2.106,261,2.207,262,2.014,263,2.207,264,2.947,265,3.506,266,2.207,267,2.207,268,2.362,269,2.207,270,2.014,271,2.014,272,2.207,273,2.106,274,1.641,275,1.776,276,2.207,277,2.014,278,2.207,279,2.106,280,2.106,281,2.207,315,1.88,316,3.494,318,3.516,326,3.661,334,2.106,408,2.274,410,2.566,413,2.69,458,2.923,477,4.491,482,1.466,577,4.37,785,5.84,787,5.455,790,4.555,791,5.118,794,3.424,798,3.432,845,3.797,846,3.797,847,2.738,918,6.609,919,3.797,920,5.803,921,5.803,922,5.803,923,6.521,924,6.521,925,5.803,926,4.363,927,4.363,928,4.363,929,4.363,930,4.363,931,5.803]],["title/components/NotificationComponent.html",[185,0.908,195,1.847]],["body/components/NotificationComponent.html",[1,2.116,3,0.133,4,0.133,5,0.117,8,0.1,9,1.599,19,0.724,21,4.763,22,1.826,24,1.171,25,0.014,26,0.43,27,0.124,28,0.981,30,0.323,31,2.103,34,1.079,38,0.261,48,0.237,52,0.209,53,0.117,55,4.634,60,0.133,61,0.133,62,0.313,87,0.01,88,0.01,91,0.266,106,1.293,125,1.302,132,1.505,185,1.499,186,2.067,187,2.851,188,2.265,189,2.162,190,2.265,192,2.067,194,1.98,195,3.242,199,1.751,200,1.751,206,2.675,207,2.768,208,1.913,209,1.984,211,2.067,212,1.984,225,2.162,227,1.451,242,2.265,243,2.403,244,2.987,245,1.898,246,3.553,247,2.265,248,2.067,249,3.792,250,2.265,251,2.067,252,2.403,253,2.265,254,1.98,255,1.779,256,1.98,257,2.265,258,1.898,259,2.265,260,2.162,261,2.265,262,2.067,263,2.265,264,1.898,265,2.067,266,2.265,267,2.265,268,2.403,269,2.265,270,2.067,271,2.067,272,2.265,273,2.162,274,1.685,275,1.823,276,2.265,277,2.067,278,2.265,279,2.162,280,2.162,281,2.265,315,1.913,316,3.189,318,3.553,408,2.304,410,2.61,413,2.803,433,2.403,434,2.869,482,1.505,483,2.067,575,4.426,932,3.897,933,5.904,934,5.904,935,7.299,936,6.606,937,6.112,938,7.023,939,4.478,940,4.478,941,4.478,942,4.478,943,4.478,944,4.478,945,4.478,946,4.478,947,4.478,948,5.138,949,4.478,950,4.478,951,4.478,952,4.478,953,4.478,954,4.478,955,5.904]],["title/injectables/NotificationService.html",[0,0.228,434,1.449]],["body/injectables/NotificationService.html",[0,0.338,2,1.835,3,0.134,4,0.134,5,0.117,8,0.101,9,1.606,22,1.865,24,1.551,25,0.014,26,0.363,27,0.112,28,1.299,30,0.324,31,2.107,38,0.28,48,0.351,52,0.176,53,0.117,58,0.602,59,0.577,60,0.134,61,0.134,62,0.416,63,0.685,66,0.79,87,0.01,88,0.01,91,0.267,122,2.2,123,1.715,134,0.602,180,1.166,368,1.089,385,4.16,434,2.147,637,3.723,678,5.527,679,5.267,948,6.128,956,3.924,957,6.628,958,6.628,959,7.042,960,5.931,961,5.931,962,4.508,963,5.931,964,7.933,965,4.508,966,5.931,967,4.508,968,5.931,969,4.508,970,4.508,971,5.931,972,4.508,973,4.508,974,4.508,975,5.931,976,4.508,977,4.508,978,4.508]],["title/components/PlanHousePageComponent.html",[185,0.908,270,1.847]],["body/components/PlanHousePageComponent.html",[1,1.946,3,0.076,4,0.076,5,0.066,8,0.057,9,1.069,19,0.484,22,1.904,24,1.532,25,0.014,26,0.436,27,0.129,28,1.284,30,0.358,31,1.997,34,1.352,38,0.179,48,0.287,52,0.211,53,0.066,60,0.076,61,0.076,62,0.417,63,0.527,64,0.821,66,0.608,79,1.233,80,0.473,87,0.007,88,0.007,89,2.991,91,0.177,96,1.179,106,1.188,122,1.694,123,1.321,125,0.743,126,0.695,128,1.744,132,0.858,138,1.996,141,1.429,170,0.521,171,1.134,172,2.698,173,0.885,179,1.134,180,0.848,184,2.207,185,1.094,186,1.179,187,1.905,188,1.292,189,2.83,190,1.292,192,1.179,194,1.129,195,1.179,198,2.981,199,2.423,200,0.999,205,3.819,206,2.493,207,2.57,208,1.278,209,1.326,211,1.179,212,1.326,217,1.083,220,1.357,221,1.511,223,2.005,225,1.233,227,0.828,229,1.511,242,1.292,243,1.606,244,1.996,245,1.083,246,2.743,247,1.292,248,1.179,249,3.134,250,1.292,251,1.179,252,1.606,253,1.292,254,1.129,255,1.189,256,1.129,257,1.292,258,1.083,259,1.292,260,1.233,261,1.292,262,1.179,263,1.292,264,2.299,265,1.822,266,1.292,267,1.292,268,2.786,269,1.292,270,2.503,271,3.827,272,1.292,273,1.233,274,0.961,275,1.04,276,1.292,277,1.179,278,2.439,279,1.233,280,1.233,281,1.292,315,1.278,316,2.328,318,2.743,333,2.397,368,0.993,405,1.603,407,2.644,408,2.044,409,2.644,410,1.744,411,2.644,413,2.847,424,3.434,428,2.881,431,3.431,433,1.962,434,1.963,436,2.561,446,2.101,452,3.097,458,1.712,476,1.842,477,1.511,478,1.712,482,0.858,483,1.179,489,1.842,491,2.005,495,2.005,504,1.189,536,2.851,537,2.561,573,2.561,575,3.23,576,2.439,580,3.888,592,2.881,595,2.698,596,3.034,620,2.644,622,1.842,623,1.842,637,1.603,801,0.961,827,5.069,979,6.16,980,6.83,981,4.821,982,3.476,983,4.821,984,4.821,985,4.821,986,4.821,987,4.821,988,5.422,989,5.422,990,5.422,991,3.434,992,5.422,993,5.422,994,5.422,995,3.946,996,5.422,997,3.946,998,2.555,999,4.821,1000,2.555,1001,2.555,1002,2.555,1003,3.946,1004,2.555,1005,3.946,1006,2.555,1007,6.195,1008,2.555,1009,2.555,1010,2.644,1011,2.555,1012,2.555,1013,2.555,1014,3.946,1015,2.555,1016,2.555,1017,3.946,1018,2.555,1019,3.946,1020,2.521,1021,2.555,1022,2.555,1023,2.555,1024,2.555,1025,2.555,1026,2.555,1027,2.555,1028,3.946,1029,2.555,1030,3.784,1031,3.784,1032,3.097,1033,2.555,1034,2.005,1035,1.712,1036,4.821,1037,2.555,1038,3.946,1039,3.434,1040,2.555,1041,5.422,1042,2.555,1043,2.223,1044,3.946,1045,2.555,1046,2.555,1047,2.555,1048,2.555,1049,2.555,1050,2.223,1051,2.223,1052,2.555,1053,3.633,1054,2.555,1055,2.555,1056,2.555,1057,5.422,1058,1.603,1059,3.026,1060,2.555,1061,2.555,1062,3.946,1063,2.555,1064,2.555,1065,3.946,1066,2.555,1067,5.861,1068,2.555,1069,4.821,1070,3.946,1071,3.946,1072,1.712,1073,2.555,1074,2.555,1075,2.555,1076,2.555,1077,2.555,1078,2.555,1079,2.555,1080,3.946,1081,2.555,1082,2.555,1083,2.477,1084,1.603,1085,1.603,1086,2.477,1087,2.223,1088,3.946]],["title/injectables/ProjectService.html",[0,0.228,198,1.847]],["body/injectables/ProjectService.html",[0,0.289,2,1.453,3,0.106,4,0.106,5,0.093,8,0.08,9,1.37,19,0.62,22,1.753,24,1.83,25,0.014,26,0.478,27,0.132,28,1.533,30,0.371,34,1.497,38,0.31,48,0.371,52,0.214,53,0.093,58,0.477,59,0.457,60,0.19,61,0.106,62,0.357,63,0.753,64,0.785,66,0.756,80,0.441,87,0.008,88,0.008,91,0.227,92,0.958,96,0.958,100,1.897,101,1.167,103,0.924,109,1.333,122,1.115,123,0.87,124,0.964,126,0.567,127,3.5,128,1.578,130,2.035,131,0.628,133,0.652,134,0.477,135,0.253,144,2.558,151,2.205,161,1.514,162,2.184,163,1.724,165,1.502,169,1.578,173,0.582,174,1.638,177,1.115,178,2.558,198,2.334,218,1.578,363,1.076,377,2.351,449,1.48,497,1.038,699,2.058,800,2.392,801,1.343,848,3.388,1010,4.517,1020,2.058,1072,2.392,1089,2.392,1090,5.057,1091,5.057,1092,5.057,1093,5.057,1094,5.057,1095,4.027,1096,5.057,1097,3.646,1098,5.302,1099,3.57,1100,3.646,1101,3.57,1102,3.646,1103,4.231,1104,3.57,1105,3.646,1106,3.646,1107,3.57,1108,3.646,1109,3.57,1110,1.763,1111,2.441,1112,2.83,1113,3.646,1114,1.806,1115,2.392,1116,2.392,1117,1.897,1118,1.897,1119,2.574,1120,2.574,1121,4.234,1122,2.574,1123,2.574,1124,2.574,1125,2.574,1126,2.574]],["title/injectables/ReportService.html",[0,0.228,1095,2.239]],["body/injectables/ReportService.html",[0,0.257,2,1.238,3,0.09,4,0.09,5,0.079,8,0.068,9,1.219,19,0.658,22,1.67,24,1.732,25,0.014,26,0.431,27,0.132,28,1.451,30,0.344,31,1.975,38,0.305,48,0.363,52,0.176,53,0.079,58,0.406,59,0.39,60,0.159,61,0.134,62,0.42,63,0.721,64,0.743,66,0.832,80,0.295,87,0.007,88,0.007,126,0.743,135,0.131,142,1.616,145,1.289,214,3.534,218,1.345,228,1.19,231,0.917,243,3.198,255,1.357,343,4.207,351,1.061,368,0.859,377,2.507,397,3.534,464,1.345,466,1.309,467,2.603,468,1.63,504,2.306,555,2.193,608,3.115,626,1.57,639,3.865,688,0.795,702,1.991,844,3.534,885,3.504,1020,2.696,1095,4.022,1103,4.512,1110,1.869,1112,4.245,1127,2.387,1128,4.502,1129,4.502,1130,4.502,1131,4.502,1132,4.502,1133,4.502,1134,3.042,1135,3.918,1136,3.042,1137,3.918,1138,3.042,1139,3.918,1140,3.042,1141,3.918,1142,5.505,1143,3.042,1144,5.505,1145,3.918,1146,5.157,1147,3.042,1148,3.918,1149,5.764,1150,3.042,1151,2.193,1152,5.764,1153,2.647,1154,2.647,1155,2.647,1156,2.647,1157,3.918,1158,2.647,1159,2.647,1160,2.647,1161,2.647,1162,3.918,1163,6.93,1164,3.918,1165,6.256,1166,5.157,1167,3.918,1168,2.647,1169,3.918,1170,6.256,1171,2.647,1172,2.647,1173,3.918,1174,6.661,1175,5.965,1176,4.665,1177,4.965,1178,3.918,1179,3.918,1180,5.965,1181,2.647,1182,2.647,1183,4.965,1184,5.524,1185,5.157,1186,4.665,1187,5.505,1188,5.764,1189,5.764,1190,5.965,1191,2.647,1192,6.125,1193,5.199,1194,2.647,1195,2.647,1196,2.647,1197,5.157,1198,2.647,1199,4.665,1200,2.647,1201,5.157,1202,5.157,1203,5.524,1204,4.665,1205,5.157,1206,2.647,1207,4.665,1208,2.647,1209,2.647,1210,3.918,1211,5.764,1212,3.918,1213,3.719,1214,2.647,1215,5.157,1216,3.918,1217,3.918,1218,3.918,1219,2.647,1220,3.918,1221,3.918,1222,3.918,1223,2.647,1224,2.647,1225,3.54,1226,4.665,1227,3.918,1228,3.534,1229,2.387,1230,2.647,1231,3.918,1232,2.647,1233,2.647,1234,2.647,1235,3.918,1236,3.918,1237,2.647,1238,2.647,1239,2.647,1240,3.918,1241,2.647,1242,2.647,1243,2.647,1244,2.647,1245,4.207,1246,2.647,1247,3.918,1248,3.918,1249,3.918,1250,2.647,1251,2.647,1252,2.647,1253,2.647,1254,2.647,1255,2.647,1256,2.647,1257,1.909,1258,2.647,1259,2.647,1260,2.647,1261,2.647,1262,2.647,1263,2.647,1264,2.647,1265,3.918,1266,2.647,1267,2.647,1268,2.647,1269,2.647,1270,1.909,1271,2.647,1272,2.647,1273,2.647,1274,2.647,1275,2.647,1276,2.647,1277,2.647,1278,2.647,1279,2.647,1280,3.918,1281,2.647,1282,2.647,1283,2.647,1284,2.647,1285,2.647,1286,2.647,1287,2.647,1288,2.647,1289,2.647,1290,2.647,1291,2.647,1292,2.647,1293,2.647,1294,2.647]],["title/injectables/ServerImageControlService.html",[0,0.228,197,1.847]],["body/injectables/ServerImageControlService.html",[0,0.286,2,1.434,3,0.105,4,0.105,5,0.13,8,0.079,9,1.357,19,0.432,22,1.816,24,1.916,25,0.014,26,0.449,27,0.138,28,1.605,30,0.384,34,1.504,38,0.315,48,0.38,52,0.199,53,0.092,58,0.471,59,0.451,60,0.105,61,0.105,62,0.309,63,0.772,64,0.804,66,0.804,80,0.469,87,0.008,88,0.008,91,0.225,92,0.951,100,1.872,101,1.16,103,0.915,109,1.369,122,1.101,123,0.858,124,0.88,126,0.848,130,1.95,131,0.62,133,0.644,134,0.471,151,2.199,161,1.494,162,1.888,163,2.419,165,1.577,174,1.141,197,2.313,227,2.449,275,1.434,372,1.558,377,2.214,449,1.519,484,2.523,485,1.326,486,1.558,528,2.807,608,3.248,681,1.326,688,2.111,701,1.783,723,1.783,725,3.065,856,5.025,991,4.36,1295,6.58,1296,5.01,1297,5.01,1298,5.01,1299,5.01,1300,5.01,1301,5.01,1302,5.01,1303,5.01,1304,3.524,1305,5.01,1306,3.524,1307,5.01,1308,3.524,1309,5.01,1310,3.524,1311,5.01,1312,3.524,1313,5.01,1314,3.524,1315,5.01,1316,3.524,1317,5.829,1318,5.01,1319,3.524,1320,3.524,1321,3.524,1322,3.524,1323,3.524,1324,5.829,1325,3.524,1326,3.524,1327,3.524,1328,3.524,1329,3.524]],["title/injectables/ShopService.html",[0,0.228,203,2.126]],["body/injectables/ShopService.html",[0,0.293,2,1.488,3,0.109,4,0.109,5,0.095,8,0.082,9,1.393,19,0.448,22,1.657,24,1.555,25,0.014,26,0.395,27,0.133,28,1.303,30,0.316,38,0.284,48,0.315,52,0.202,53,0.095,58,0.488,59,0.468,60,0.192,61,0.109,62,0.398,63,0.628,64,0.791,66,0.763,80,0.337,87,0.009,88,0.009,91,0.231,92,0.97,96,0.97,100,1.942,101,1.179,103,0.939,114,3.182,122,1.606,123,1.449,124,1.026,126,0.791,131,0.643,133,0.668,134,0.488,135,0.293,145,2.18,165,0.86,170,1.316,171,0.86,173,0.97,179,0.86,180,1.197,183,1.55,203,2.732,218,1.616,255,1.102,274,1.934,359,1.616,365,1.616,368,1.073,388,2.162,449,0.693,463,2.238,466,1.063,497,1.495,504,1.792,626,1.275,681,1.375,688,0.956,692,2.869,706,1.488,709,1.488,737,3.572,750,2.162,1110,1.793,1225,2.046,1330,2.162,1331,5.142,1332,5.142,1333,5.142,1334,3.228,1335,3.806,1336,3.656,1337,4.548,1338,3.328,1339,3.228,1340,4.051,1341,4.208,1342,3.656,1343,4.051,1344,3.228,1345,3.228,1346,3.656,1347,2.877,1348,2.877,1349,2.295,1350,3.228,1351,3.228,1352,3.228,1353,2.295,1354,3.734,1355,2.295,1356,2.295,1357,2.295,1358,2.295,1359,2.295,1360,2.295,1361,2.295,1362,2.295,1363,2.295,1364,3.228,1365,2.295,1366,2.295,1367,2.295,1368,2.295,1369,2.295,1370,3.228,1371,2.295,1372,2.295,1373,2.295,1374,2.295,1375,2.295,1376,3.228,1377,4.051,1378,2.295,1379,3.228,1380,4.269,1381,2.295,1382,3.734,1383,2.295,1384,2.295]],["title/interfaces/UploadEntry.html",[135,0.173,866,2.511]],["body/interfaces/UploadEntry.html",[0,0.337,1,1.993,3,0.133,4,0.133,5,0.214,8,0.101,19,0.55,25,0.014,26,0.495,27,0.144,34,1.334,38,0.307,52,0.233,53,0.117,58,0.6,59,0.575,60,0.196,61,0.133,62,0.411,64,0.902,66,0.742,80,0.478,87,0.01,88,0.01,91,0.266,92,0.732,96,0.732,105,1.055,106,1.295,124,0.892,125,1.305,132,1.508,134,0.6,135,0.255,170,1.205,173,0.732,180,1.32,184,1.827,197,2.73,201,1.847,227,1.454,228,2.313,231,1.352,252,2.407,255,1.352,275,1.827,368,1.019,385,4.151,429,2.27,430,3.007,433,1.827,434,2.141,438,2.817,446,2.181,449,1.422,497,1.923,514,3.007,515,3.007,536,2.654,540,3.007,679,3.962,688,1.729,731,2.654,740,4.585,743,3.236,801,1.688,851,3.962,852,0.677,853,3.007,854,4.641,855,4.641,856,4.264,857,4.641,858,5.517,859,3.522,860,3.522,861,3.236,862,3.522,863,3.522,864,4.895,865,4.264,866,3.711,867,6.092,868,5.887,869,4.641,870,2.385,871,3.522,872,3.522,873,3.522,874,3.522,875,3.522,876,3.522,877,5.19,878,5.19,879,5.19,880,4.768,881,5.19,882,5.19,883,3.522,884,3.236,885,3.497,886,3.522,887,3.522,888,4.641,889,3.522,890,3.522,891,3.522,892,3.522,893,3.522,894,3.522,895,3.522,896,3.522,897,3.522,898,5.517,899,3.522,900,4.641,901,3.522,902,3.522,903,3.522,904,3.522,905,4.641,906,3.522,907,3.522,908,3.236,909,3.522,910,3.522,911,4.641,912,4.641,913,3.522,914,3.522,915,3.522,916,3.522,917,3.522]],["title/components/UploadOverlayComponent.html",[185,0.908,211,1.847]],["body/components/UploadOverlayComponent.html",[3,0.145,4,0.145,5,0.127,8,0.109,9,1.693,19,0.599,22,1.87,24,1.801,25,0.014,26,0.47,27,0.137,28,1.509,30,0.306,31,1.754,38,0.286,52,0.216,53,0.127,60,0.145,61,0.145,87,0.01,88,0.01,91,0.281,106,1.07,122,1.952,123,1.522,125,1.421,185,1.564,186,2.256,187,3.017,188,2.472,189,2.359,190,2.472,192,2.256,194,2.161,195,2.256,199,1.912,200,1.912,206,2.697,207,2.792,208,1.583,209,2.1,211,3.352,212,2.1,227,1.583,238,6.124,242,2.472,243,2.544,244,3.162,245,2.072,246,3.674,247,2.472,248,2.256,249,3.883,250,2.472,251,2.256,252,2.544,253,2.472,254,2.161,255,1.883,256,2.161,257,2.472,258,2.072,259,2.472,260,2.359,261,2.472,262,2.256,263,2.472,264,2.072,265,2.256,266,2.472,267,2.472,268,2.544,269,2.472,270,2.256,271,2.256,272,2.472,273,2.359,274,1.838,275,3.176,276,2.472,277,2.256,278,2.472,279,2.359,280,2.359,281,2.472,408,1.704,410,2.763,413,2.839,449,1.185,482,1.642,576,3.485,580,4.818,622,3.524,623,3.524,731,4.718,866,3.067,870,3.32,1114,3.162,1385,6.791,1386,4.253,1387,6.249,1388,6.889,1389,6.249,1390,6.249,1391,6.889,1392,5.439,1393,6.249,1394,4.887,1395,4.887,1396,6.249,1397,4.887,1398,6.249,1399,4.887,1400,4.887,1401,6.249,1402,6.249,1403,4.887,1404,4.887,1405,4.887,1406,4.887,1407,4.887,1408,4.887,1409,6.249,1410,6.249,1411,6.249]],["title/injectables/UploadService.html",[0,0.228,731,2.366]],["body/injectables/UploadService.html",[0,0.315,1,2.246,2,1.651,3,0.12,4,0.12,5,0.214,8,0.091,9,1.496,19,0.678,22,1.874,24,1.904,25,0.014,26,0.499,27,0.146,28,1.595,30,0.346,31,1.763,34,1.362,38,0.311,52,0.228,53,0.106,58,0.542,59,0.519,60,0.187,61,0.12,62,0.429,64,0.888,66,0.757,80,0.462,87,0.009,88,0.009,91,0.249,92,1.025,96,1.025,105,0.954,106,1.21,122,1.726,123,1.346,124,0.948,125,1.179,132,1.363,134,0.542,135,0.238,170,1.281,173,0.662,180,1.282,184,1.651,197,3.115,201,2.108,227,1.314,228,2.161,231,1.222,252,2.249,255,1.222,275,1.651,368,0.978,385,3.944,429,2.795,430,4.211,433,2.558,434,2.443,438,2.546,446,2.118,449,1.279,497,1.827,514,2.718,515,2.718,536,2.398,540,2.718,679,4.211,688,1.846,731,3.267,740,4.829,743,3.984,801,1.526,851,3.702,853,2.718,854,4.336,855,4.336,856,3.984,857,4.336,858,5.851,859,3.183,860,3.183,861,2.924,862,3.183,863,3.183,864,4.731,865,3.984,866,2.546,867,5.851,868,5.541,869,4.336,870,3.339,871,4.932,872,3.183,873,3.183,874,3.183,875,3.183,876,3.183,877,4.932,878,4.932,879,4.932,880,4.531,881,4.932,882,4.932,883,3.183,884,2.924,885,3.267,886,3.183,887,4.336,888,4.336,889,3.183,890,3.183,891,3.183,892,3.183,893,3.183,894,3.183,895,4.336,896,3.183,897,3.183,898,5.296,899,3.183,900,4.336,901,3.183,902,4.336,903,3.183,904,3.183,905,4.336,906,3.183,907,3.183,908,2.924,909,4.336,910,3.183,911,4.336,912,4.336,913,4.932,914,3.183,915,4.336,916,3.183,917,3.183,1392,4.808,1412,5.525,1413,5.525,1414,5.525,1415,5.525,1416,4.056,1417,5.525,1418,4.056,1419,4.056,1420,4.056,1421,4.056,1422,4.056,1423,4.056,1424,4.056,1425,4.056]],["title/components/ViewFurnitureComponent.html",[185,0.908,277,1.847]],["body/components/ViewFurnitureComponent.html",[3,0.119,4,0.119,5,0.105,8,0.123,9,1.487,19,0.674,22,1.844,24,1.758,25,0.014,26,0.455,27,0.14,28,1.472,30,0.329,31,1.541,38,0.286,48,0.213,52,0.225,53,0.105,54,3.155,60,0.119,61,0.119,62,0.356,64,0.754,80,0.41,87,0.009,88,0.009,91,0.247,96,1.02,106,1.203,122,1.256,123,0.979,125,1.169,171,0.945,173,0.656,177,1.954,179,0.945,180,0.708,185,1.42,186,1.856,187,2.651,188,2.034,189,1.941,190,2.034,192,1.856,194,1.777,195,1.856,199,1.572,200,1.572,201,2.1,206,2.646,207,2.736,208,1.779,209,1.845,211,1.856,212,1.845,227,1.779,228,1.572,230,2.249,231,1.211,242,2.034,243,2.235,244,2.778,245,1.704,246,3.401,247,2.034,248,1.856,249,3.676,250,2.034,251,1.856,252,2.235,253,2.034,254,1.777,255,2.026,256,1.777,257,2.034,258,2.85,259,2.034,260,1.941,261,2.034,262,1.856,263,2.034,264,1.704,265,1.856,266,2.034,267,2.034,268,2.235,269,2.034,270,1.856,271,1.856,272,2.034,273,1.941,274,1.512,275,1.636,276,2.034,277,3.103,278,3.762,279,1.941,280,1.941,281,2.034,315,1.779,320,4.31,324,3.165,333,3.212,368,0.796,392,3.926,396,4.31,408,2.181,410,2.428,413,2.756,429,3.165,433,2.546,434,2.434,446,1.169,449,0.762,466,1.819,481,2.652,482,1.351,483,1.856,485,1.512,486,1.777,501,3.155,504,1.885,559,3.155,560,3.155,561,3.155,576,3.165,620,2.694,624,3.155,625,3.155,637,3.447,688,1.635,703,3.103,817,3.498,835,6.027,982,4.51,1035,2.694,1059,2.523,1426,6.683,1427,3.498,1428,4.192,1429,5.492,1430,5.492,1431,6.255,1432,5.492,1433,6.723,1434,5.492,1435,5.492,1436,7.437,1437,4.02,1438,4.02,1439,4.02,1440,5.492,1441,4.02,1442,4.02,1443,4.02,1444,5.492,1445,6.255,1446,4.02,1447,5.492,1448,5.492,1449,4.02,1450,4.02,1451,2.694,1452,3.498,1453,4.02,1454,4.02,1455,4.02,1456,5.851,1457,4.02,1458,4.02,1459,7.038,1460,4.02,1461,4.02,1462,4.02,1463,4.02,1464,6.255,1465,4.02,1466,6.255,1467,5.492,1468,4.02,1469,4.02,1470,4.02,1471,5.492,1472,5.492,1473,4.02,1474,4.02,1475,4.02,1476,4.02,1477,5.492,1478,4.02,1479,4.02,1480,5.492,1481,5.492,1482,5.492]],["title/interfaces/accountFullData.html",[135,0.173,138,2.024]],["body/interfaces/accountFullData.html",[0,0.298,1,1.813,3,0.111,4,0.111,5,0.097,8,0.084,19,0.458,25,0.014,26,0.229,27,0.142,28,1.143,30,0.357,34,1.469,38,0.306,40,3.593,41,1.724,48,0.198,50,3.03,52,0.211,53,0.097,58,0.499,59,0.478,60,0.224,61,0.111,62,0.319,63,0.691,64,0.731,66,0.769,79,1.63,80,0.487,87,0.009,88,0.009,89,1.803,90,1.984,91,0.235,92,0.609,93,2.344,96,0.609,101,0.953,103,0.682,105,0.878,106,1.318,107,2.344,109,1.281,110,2.344,112,2.344,115,2.344,116,3.367,118,2.344,119,2.92,121,1.984,124,0.908,125,1.894,126,0.731,127,3.007,128,2.307,129,2.344,130,2.065,131,0.657,132,1.255,133,0.682,134,0.499,135,0.296,136,2.66,137,3.593,138,3.044,139,3.852,140,4.311,141,3.835,142,3.461,143,3.645,144,1.889,145,2.213,146,1.803,147,2.773,148,2.089,149,2.208,150,2.344,151,2.27,152,1.984,153,2.344,154,2.344,155,2.344,156,2.344,157,1.984,158,2.344,159,1.984,160,2.344,161,1.583,162,1.949,163,2.52,164,2.344,165,1.532,166,1.984,167,2.344,168,1.984,169,1.651,170,0.761,171,0.878,172,3.645,173,0.609,174,1.21,175,2.344,176,2.344,177,1.166,178,1.889,179,0.878,180,1.059,181,1.52,182,1.52,183,1.125,184,1.52,852,0.563]],["title/interfaces/additionalData.html",[135,0.173,465,1.769]],["body/interfaces/additionalData.html",[0,0.337,3,0.107,4,0.107,5,0.094,8,0.081,22,0.879,25,0.014,26,0.221,27,0.068,28,1.116,30,0.314,34,1.468,38,0.3,48,0.27,52,0.201,53,0.094,58,0.482,59,0.462,60,0.219,61,0.151,62,0.191,63,0.739,64,0.662,66,0.759,80,0.42,87,0.008,88,0.008,91,0.229,92,0.588,96,0.588,101,0.931,103,0.931,105,0.848,109,1.302,124,0.891,126,0.81,130,1.717,131,0.635,133,1.236,134,0.482,135,0.344,151,2.18,162,1.65,165,1.509,170,1.432,171,0.848,173,0.588,177,1.845,179,0.848,180,1.039,181,1.468,182,2.073,183,1.535,201,1.591,231,1.535,351,2.237,363,1.933,368,0.93,372,1.595,446,1.717,449,1.331,463,2.221,464,1.595,465,2.992,466,1.049,467,1.306,468,1.306,469,1.411,481,2.869,484,1.916,485,1.357,486,1.595,497,1.481,499,1.742,502,1.742,528,2.61,529,1.529,530,1.529,531,1.742,608,2.403,626,1.258,669,1.742,681,1.357,683,2.459,684,1.917,685,1.917,687,1.917,688,1.96,697,3.137,698,1.917,699,1.468,700,2.159,701,1.825,702,2.61,703,2.726,704,2.851,705,2.851,706,2.073,707,3.391,708,2.459,709,1.468,710,1.917,711,1.917,712,1.917,713,3.137,714,2.706,715,1.917,716,1.917,717,1.917,718,1.917,719,2.706,720,1.917,721,1.917,722,1.917,723,1.825,724,1.917,725,2.459,726,1.917,727,1.825,852,0.544,1483,3.139,1484,3.607]],["title/interfaces/baseFilter.html",[135,0.173,357,2.239]],["body/interfaces/baseFilter.html",[0,0.368,3,0.153,4,0.153,5,0.134,8,0.115,19,0.63,25,0.014,26,0.476,27,0.143,30,0.251,38,0.304,48,0.272,52,0.22,53,0.134,58,0.686,59,0.658,60,0.22,61,0.153,62,0.342,80,0.336,87,0.011,88,0.011,91,0.29,92,0.838,101,1.178,103,0.938,109,1.093,124,0.973,126,0.576,131,0.904,133,0.938,134,0.686,135,0.329,174,1.664,346,2.729,347,2.874,348,3.224,351,1.791,352,2.729,353,3.224,354,3.224,355,3.224,356,3.609,357,4.138,358,4.641,359,3.269,360,3.609,361,3.224,362,3.427,363,1.944,364,3.224,365,3.117,366,3.427,367,3.224,368,0.935,369,3.224,852,0.775]],["title/interfaces/categoryData.html",[135,0.173,352,2.126]],["body/interfaces/categoryData.html",[0,0.364,3,0.15,4,0.15,5,0.131,8,0.113,19,0.618,25,0.014,26,0.474,27,0.148,30,0.247,38,0.306,48,0.267,52,0.218,53,0.131,58,0.673,59,0.645,60,0.218,61,0.15,62,0.337,80,0.33,87,0.011,88,0.011,91,0.287,92,0.822,101,1.164,103,0.92,109,1.08,124,0.961,126,0.565,131,0.886,133,0.92,134,0.673,135,0.327,174,1.631,346,2.676,347,2.818,348,3.161,351,1.756,352,3.384,353,4.608,354,4.608,355,4.608,356,4.108,357,3.909,358,3.161,359,3.246,360,3.564,361,3.161,362,3.384,363,1.92,364,3.161,365,3.089,366,3.384,367,3.161,368,0.924,369,3.161,852,0.76]],["title/interfaces/changeAccountDataEmail.html",[135,0.173,136,1.769]],["body/interfaces/changeAccountDataEmail.html",[0,0.303,1,1.835,3,0.113,4,0.113,5,0.099,8,0.086,19,0.468,25,0.014,26,0.234,27,0.13,30,0.359,34,1.493,38,0.304,40,3.578,41,1.763,48,0.202,50,3.306,52,0.212,53,0.099,58,0.51,59,0.489,60,0.226,61,0.113,62,0.323,63,0.695,64,0.738,66,0.775,79,1.656,80,0.49,87,0.009,88,0.009,89,1.843,90,2.029,91,0.238,92,0.623,93,2.397,96,0.623,101,0.968,103,0.698,105,0.898,106,1.333,107,2.397,109,1.287,110,2.397,112,2.397,115,2.397,116,3.407,118,2.397,119,2.966,121,2.029,124,0.919,125,1.912,126,0.683,127,2.447,128,2.343,129,2.397,130,2.079,131,0.672,132,1.283,133,0.698,134,0.51,135,0.298,136,2.908,137,3.618,138,2.682,139,2.258,140,3.889,141,2.966,142,2.029,143,2.966,144,1.932,145,2.247,146,1.843,147,2.816,148,2.137,149,2.258,150,2.397,151,2.278,152,2.029,153,2.397,154,2.397,155,2.397,156,2.397,157,2.029,158,2.397,159,2.029,160,2.397,161,1.619,162,1.972,163,2.559,164,2.397,165,1.547,166,2.029,167,2.397,168,2.029,169,1.688,170,0.778,171,0.898,172,3.68,173,0.623,174,1.237,175,2.397,176,2.397,177,1.193,178,1.932,179,0.898,180,1.072,181,1.554,182,1.554,183,1.151,184,1.554,852,0.576]],["title/interfaces/changeSecondaryData.html",[119,2.239,135,0.173]],["body/interfaces/changeSecondaryData.html",[0,0.303,1,1.839,3,0.114,4,0.114,5,0.1,8,0.086,19,0.47,25,0.014,26,0.235,27,0.13,30,0.359,34,1.493,38,0.304,40,3.551,41,1.769,48,0.203,50,3.059,52,0.213,53,0.1,58,0.512,59,0.491,60,0.226,61,0.114,62,0.323,63,0.696,64,0.739,66,0.776,79,1.66,80,0.49,87,0.009,88,0.009,89,1.851,90,2.037,91,0.239,92,0.625,93,2.406,96,0.625,101,0.971,103,0.7,105,0.901,106,1.336,107,2.406,109,1.288,110,2.406,112,2.406,115,2.406,116,3.414,118,2.406,119,3.414,121,2.037,124,0.921,125,1.916,126,0.684,127,2.453,128,2.35,129,2.406,130,2.082,131,0.675,132,1.288,133,0.7,134,0.512,135,0.299,136,2.697,137,3.087,138,2.689,139,2.267,140,4.342,141,2.974,142,2.037,143,2.974,144,1.939,145,2.253,146,1.851,147,2.824,148,2.145,149,2.267,150,2.406,151,2.28,152,2.037,153,2.406,154,2.406,155,2.406,156,2.406,157,2.037,158,2.406,159,2.037,160,2.406,161,1.625,162,1.976,163,2.566,164,2.406,165,1.549,166,2.037,167,2.406,168,2.037,169,1.695,170,0.781,171,0.901,172,3.687,173,0.625,174,1.242,175,2.406,176,2.406,177,1.197,178,1.939,179,0.901,180,1.074,181,1.56,182,1.56,183,1.155,184,1.56,852,0.578]],["title/interfaces/clientFilters.html",[135,0.173,1338,2.239]],["body/interfaces/clientFilters.html",[0,0.315,3,0.12,4,0.12,5,0.105,8,0.091,25,0.014,26,0.247,27,0.133,30,0.27,38,0.289,48,0.214,52,0.209,53,0.105,58,0.54,59,0.518,60,0.2,61,0.12,62,0.332,63,0.655,64,0.816,66,0.791,80,0.361,87,0.009,88,0.009,91,0.248,92,0.659,96,0.659,101,1.007,103,0.738,123,0.985,124,1.017,126,0.704,131,0.711,133,0.738,134,0.54,135,0.304,145,2.337,165,0.95,170,1.124,171,0.95,173,1.023,179,0.95,180,1.241,183,1.661,203,2.147,218,1.787,255,1.218,274,1.521,359,1.787,365,1.787,368,1.127,388,2.39,449,0.766,463,2.738,466,1.175,497,1.603,504,1.89,626,1.409,681,1.521,688,1.057,706,1.645,709,1.645,737,3.253,750,2.39,852,0.61,1110,1.922,1225,2.262,1330,2.39,1334,2.537,1335,3.51,1337,4.229,1338,3.51,1339,2.537,1340,3.46,1341,3.946,1343,3.46,1344,2.537,1345,2.537,1347,3.084,1348,3.084,1349,2.537,1350,4.426,1351,4.426,1352,3.46,1353,2.537,1354,3.937,1355,2.537,1356,2.537,1357,2.537,1358,2.537,1359,2.537,1360,2.537,1361,2.537,1362,2.537,1363,2.537,1364,3.46,1365,2.537,1366,2.537,1367,2.537,1368,2.537,1369,2.537,1370,3.46,1371,2.537,1372,2.537,1373,2.537,1374,2.537,1375,2.537,1376,3.46,1377,4.229,1378,2.537,1379,3.46,1380,4.426,1381,2.537,1382,3.937,1383,2.537,1384,2.537]],["title/interfaces/clientProportions.html",[135,0.173,487,2.885]],["body/interfaces/clientProportions.html",[1,1.372,3,0.092,4,0.092,5,0.08,8,0.069,19,0.379,21,2.226,25,0.014,26,0.331,27,0.102,30,0.265,31,0.866,34,1.438,38,0.222,48,0.286,52,0.224,53,0.08,60,0.092,61,0.092,62,0.399,63,0.58,64,0.904,66,0.67,79,2.208,80,0.513,87,0.008,88,0.008,91,0.205,96,1.038,105,0.726,106,1.307,109,0.917,126,0.511,132,1.037,134,0.412,135,0.133,170,1.576,171,1.404,173,1.214,177,0.964,179,1.404,180,1.051,185,1.033,197,2.102,201,1.422,202,2.303,206,1,207,1.037,208,1,209,1.037,212,1.037,217,1.309,225,1.491,226,1.938,227,1.475,228,2.115,230,2.547,231,0.93,232,1.64,243,1.257,251,2.755,252,2.937,254,1.365,255,1.918,264,1.93,265,1.425,315,1,316,2.198,318,1.562,333,2.391,368,1.046,377,2.22,403,2.423,404,2.423,405,1.938,406,2.858,407,2.069,408,1.588,409,2.069,410,1.365,411,2.069,412,2.687,413,2.516,414,2.687,415,2.687,417,2.687,418,2.687,419,2.687,420,2.687,421,2.423,423,2.687,426,2.687,428,2.419,429,1.562,430,2.069,431,2.873,432,1.938,433,1.257,434,1.648,436,1.64,437,2.687,438,3.394,440,4.707,443,4.304,446,1.851,449,1.025,452,2.423,454,2.687,456,2.687,459,3.962,461,2.687,463,2.245,464,2.391,465,2.013,466,1.736,467,2.411,468,2.411,469,2.605,472,4.707,474,2.423,475,2.687,476,2.226,477,1.826,478,2.069,479,2.226,480,2.423,481,1.93,482,1.037,483,1.425,484,2.035,485,1.161,486,1.365,487,3.899,488,5.195,489,2.226,490,2.687,491,2.423,492,6.152,493,2.687,494,2.687,495,2.423,496,2.687,497,1.324,498,2.687,499,1.491,500,3.962,501,4.245,502,1.491,503,4.707,504,2.075,505,4.245,506,5.195,507,2.687,508,2.687,509,2.687,510,2.687,511,2.687,512,3.962,513,2.687,514,2.069,515,2.069,516,3.962,517,3.962,518,2.687,519,3.962,520,3.962,521,3.394,522,2.687,523,2.687,524,3.962,525,4.707,526,3.962,527,3.962,528,2.013,529,1.93,530,1.93,531,2.198,532,3.962,533,5.195,534,3.962,535,2.687,536,2.692,537,3.538,538,2.687,539,2.687,540,3.051,541,3.962,542,3.962,543,3.962,544,2.687,545,2.687,546,2.687,547,2.687,548,2.687,549,2.687,550,2.687,551,2.687,552,2.687,553,3.962,554,4.707,555,2.226,556,3.624,557,2.687,558,3.764,559,2.423,560,2.423,561,2.423,562,2.687,563,5.195,564,2.687,565,3.962,566,2.687,567,2.687,568,2.687,569,3.962,570,2.687,571,2.687,852,0.466]],["title/interfaces/colorClientData.html",[135,0.173,704,1.931]],["body/interfaces/colorClientData.html",[0,0.337,3,0.107,4,0.107,5,0.094,8,0.081,25,0.014,26,0.221,27,0.096,30,0.314,34,1.469,38,0.298,48,0.27,52,0.201,53,0.094,58,0.483,59,0.463,60,0.219,61,0.152,62,0.192,63,0.739,64,0.663,66,0.76,80,0.42,87,0.008,88,0.008,91,0.229,92,0.59,96,0.59,101,0.932,103,0.932,105,0.85,109,1.303,124,0.892,126,0.81,130,1.719,131,0.636,133,1.237,134,0.483,135,0.344,151,2.181,162,1.653,165,1.51,170,1.433,171,0.85,173,0.59,177,1.847,179,0.85,180,1.041,181,1.472,182,2.077,183,1.538,201,1.594,231,1.09,351,1.261,363,1.935,368,0.931,372,1.599,446,1.484,449,1.332,463,2.224,464,1.599,465,2.839,466,1.051,467,1.309,468,1.309,469,1.414,481,2.871,484,2.416,485,1.36,486,1.599,497,1.484,499,1.746,502,1.746,528,3.107,529,1.533,530,1.533,531,1.746,608,2.861,626,1.261,669,1.746,681,1.36,683,1.746,684,1.921,685,1.921,687,1.921,688,1.961,697,3.141,698,1.921,699,1.472,700,2.163,701,1.829,702,2.614,703,2.729,704,3.101,705,2.855,706,1.472,707,3.394,708,2.463,709,1.472,710,1.921,711,1.921,712,1.921,713,3.141,714,2.711,715,1.921,716,1.921,717,1.921,718,1.921,719,2.711,720,1.921,721,1.921,722,1.921,723,1.829,724,1.921,725,2.463,726,1.921,727,1.829,852,0.546]],["title/interfaces/colorFromServerData.html",[135,0.173,705,1.931]],["body/interfaces/colorFromServerData.html",[0,0.337,3,0.107,4,0.107,5,0.094,8,0.081,25,0.014,26,0.221,27,0.096,30,0.314,34,1.469,38,0.298,48,0.27,52,0.201,53,0.094,58,0.483,59,0.463,60,0.219,61,0.152,62,0.192,63,0.739,64,0.663,66,0.76,80,0.42,87,0.008,88,0.008,91,0.229,92,0.59,96,0.59,101,0.932,103,0.932,105,0.85,109,1.303,124,0.892,126,0.81,130,1.719,131,0.636,133,1.237,134,0.483,135,0.344,151,2.181,162,1.653,165,1.51,170,1.433,171,0.85,173,0.59,177,1.847,179,0.85,180,1.041,181,1.472,182,2.077,183,1.538,201,1.594,231,1.09,351,1.261,363,1.935,368,0.931,372,1.599,446,1.484,449,1.332,463,2.224,464,1.599,465,2.839,466,1.051,467,1.309,468,1.309,469,1.414,481,2.871,484,1.92,485,1.36,486,1.599,497,1.484,499,1.746,502,1.746,528,3.107,529,1.533,530,1.533,531,1.746,608,2.861,626,1.261,669,1.746,681,1.36,683,1.746,684,1.921,685,1.921,687,1.921,688,1.961,697,3.141,698,1.921,699,1.472,700,2.723,701,1.829,702,2.614,703,2.729,704,2.855,705,3.101,706,1.472,707,3.394,708,2.463,709,1.472,710,1.921,711,1.921,712,1.921,713,3.141,714,2.711,715,1.921,716,1.921,717,1.921,718,1.921,719,2.711,720,1.921,721,1.921,722,1.921,723,1.829,724,1.921,725,2.463,726,1.921,727,1.829,852,0.546]],["title/coverage.html",[1485,4.764]],["body/coverage.html",[0,0.454,1,1.161,5,0.1,6,3.353,7,3.353,25,0.014,27,0.141,50,1.703,66,0.432,87,0.009,88,0.009,89,1.86,90,4.092,116,2.156,119,2.156,124,0.581,127,1.779,128,1.703,135,0.363,136,1.703,138,1.949,143,2.156,146,1.86,147,2.047,148,4.013,185,1.824,186,1.779,191,3.353,194,1.703,195,1.779,196,2.278,197,1.779,198,1.779,199,1.507,200,1.507,201,1.204,202,1.949,203,2.047,204,2.418,211,1.779,220,2.834,227,1.728,231,2.293,232,2.047,238,3.024,245,1.633,248,1.779,251,1.779,254,1.703,255,1.99,256,1.703,258,1.633,260,1.86,262,1.779,264,1.633,270,1.779,271,2.462,273,1.86,277,1.779,282,4.425,291,2.582,298,2.582,299,2.418,300,2.418,313,3.353,314,3.353,346,2.047,347,4.114,352,2.047,356,2.156,357,2.156,360,2.156,362,2.047,366,2.047,370,2.778,371,3.353,372,3.469,391,2.778,392,2.418,394,3.353,395,3.353,403,4.802,404,4.186,405,4.704,434,1.395,465,1.703,477,2.278,479,2.778,481,1.633,484,1.449,485,2.302,487,2.778,504,2.422,572,4.186,580,2.418,582,2.778,663,3.353,683,3.719,700,1.633,702,1.703,703,1.779,704,1.86,705,1.86,707,1.86,708,1.86,731,2.278,740,2.418,756,3.353,757,2.778,759,3.353,760,3.353,779,4.411,780,4.411,808,3.353,809,3.353,835,3.024,851,2.582,853,4.646,864,2.582,866,2.418,884,2.778,885,5.006,918,3.353,919,3.353,932,3.353,956,3.353,979,4.802,980,3.353,1020,2.171,1089,4.425,1095,2.156,1110,1.344,1111,1.86,1112,2.156,1127,4.186,1151,2.778,1295,3.353,1330,4.241,1335,2.156,1338,2.156,1341,2.156,1347,2.156,1348,2.156,1385,3.353,1386,3.353,1426,3.353,1427,4.642,1485,3.353,1486,3.853,1487,3.853,1488,3.853,1489,3.853,1490,4.642,1491,7.172,1492,3.353,1493,7.702,1494,3.353,1495,3.353,1496,3.353,1497,4.642,1498,4.642,1499,3.853,1500,3.853,1501,3.024,1502,7.905,1503,3.853,1504,3.853,1505,3.853,1506,3.853,1507,3.853,1508,3.853,1509,3.853,1510,3.853,1511,6.603,1512,3.853,1513,3.853,1514,3.853,1515,3.853,1516,3.853,1517,3.853,1518,3.853,1519,6.933,1520,3.853,1521,3.853,1522,3.853,1523,3.853,1524,4.642,1525,3.853,1526,3.853,1527,3.024,1528,3.353,1529,2.418,1530,7.781,1531,3.353,1532,3.353,1533,3.353,1534,3.353,1535,3.353,1536,3.353,1537,3.353,1538,4.646,1539,3.853,1540,3.853,1541,7.609,1542,2.418,1543,6.118,1544,7.172,1545,3.853,1546,3.853,1547,3.853,1548,3.853,1549,3.853,1550,3.853,1551,3.853,1552,6.118,1553,5.334,1554,3.853,1555,3.353,1556,3.353,1557,3.853,1558,3.853,1559,3.853,1560,3.853,1561,7.353,1562,3.853,1563,3.853,1564,3.853,1565,4.642,1566,3.853,1567,5.334,1568,5.334,1569,3.853,1570,3.853,1571,3.853,1572,3.853,1573,3.853,1574,3.853,1575,5.334,1576,3.353,1577,3.353,1578,3.853,1579,3.853]],["title/interfaces/createEmailAccountData.html",[135,0.173,147,2.126]],["body/interfaces/createEmailAccountData.html",[0,0.302,1,1.831,3,0.113,4,0.113,5,0.099,8,0.085,19,0.467,25,0.014,26,0.233,27,0.134,30,0.359,34,1.472,38,0.306,40,3.62,41,1.756,48,0.201,50,3.303,52,0.212,53,0.099,58,0.508,59,0.487,60,0.225,61,0.113,62,0.322,63,0.695,64,0.737,66,0.774,79,1.651,80,0.489,87,0.009,88,0.009,89,1.836,90,2.021,91,0.238,92,0.621,93,2.387,96,0.621,101,0.966,103,0.695,105,0.894,106,1.331,107,2.387,109,1.286,110,2.387,112,2.387,115,2.387,116,3.4,118,2.387,119,2.958,121,2.021,124,0.917,125,1.909,126,0.682,127,2.44,128,2.337,129,2.387,130,2.077,131,0.669,132,1.278,133,0.695,134,0.508,135,0.298,136,2.686,137,3.614,138,2.674,139,2.249,140,4.333,141,2.958,142,2.021,143,2.958,144,1.924,145,2.241,146,1.836,147,3.228,148,2.128,149,2.249,150,2.387,151,2.277,152,2.021,153,2.387,154,2.387,155,2.387,156,2.387,157,2.021,158,2.387,159,2.021,160,2.387,161,1.613,162,1.968,163,2.552,164,2.387,165,1.544,166,2.021,167,2.387,168,2.021,169,1.682,170,0.775,171,0.894,172,3.674,173,0.621,174,1.232,175,2.387,176,2.387,177,1.188,178,1.924,179,0.894,180,1.069,181,1.548,182,1.548,183,1.146,184,1.548,852,0.574]],["title/dependencies.html",[1580,2.902,1581,4.191]],["body/dependencies.html",[25,0.014,53,0.154,54,5.888,55,4.642,56,5.147,87,0.012,88,0.012,134,0.79,217,2.507,275,2.407,336,4.642,379,5.147,482,1.987,805,5.716,806,4.265,861,4.265,1035,3.963,1452,5.147,1581,5.147,1582,5.914,1583,8.125,1584,5.914,1585,5.914,1586,5.914,1587,5.914,1588,5.914,1589,7.03,1590,5.914,1591,5.914,1592,5.914,1593,5.914,1594,7.03,1595,5.914,1596,5.914,1597,5.914,1598,5.914,1599,5.914,1600,5.914,1601,5.914,1602,5.914,1603,5.914,1604,5.914,1605,5.914,1606,5.914,1607,5.914,1608,5.914,1609,5.914,1610,5.914,1611,5.914,1612,5.914,1613,5.914,1614,5.914,1615,5.914,1616,3.963,1617,5.914,1618,7.502,1619,5.914,1620,7.502,1621,5.914,1622,5.914,1623,5.914,1624,5.914]],["title/interfaces/editForm.html",[135,0.173,1501,3.14]],["body/interfaces/editForm.html",[1,1.771,3,0.106,4,0.106,5,0.153,8,0.08,19,0.439,25,0.014,27,0.095,28,1.109,31,1.004,34,1.487,38,0.219,40,2.598,41,2.337,48,0.189,50,3.252,52,0.228,53,0.093,60,0.106,61,0.106,62,0.41,63,0.681,64,0.861,66,0.659,79,1.582,80,0.49,87,0.008,88,0.008,89,2.838,91,0.228,96,1.1,106,1.109,125,1.709,132,1.202,135,0.154,137,3.413,138,2.561,139,2.115,140,4.258,141,2.001,142,1.9,171,1.586,172,2.001,173,1.175,179,1.586,180,1.267,183,1.526,184,2.601,185,1.149,196,3.476,197,2.337,206,1.159,207,1.202,208,1.159,209,1.202,212,1.202,217,1.516,223,2.807,224,3.113,225,1.727,226,2.245,227,1.64,228,1.98,248,1.651,264,2.147,265,1.651,315,1.159,316,2.445,318,1.809,326,2.561,340,2.115,368,0.519,370,3.651,405,2.245,407,2.397,408,1.766,409,2.397,411,2.397,413,2.609,431,3.123,433,1.456,434,1.833,446,1.472,449,0.96,477,2.115,478,2.397,482,1.202,483,1.651,489,2.579,505,5.294,536,3.476,537,4.116,556,2.397,558,4.424,576,2.561,577,3.393,852,0.54,937,3.113,982,3.651,1030,4.613,1031,5.652,1032,3.974,1034,2.807,1035,2.397,1050,6.095,1051,3.113,1058,2.245,1098,3.393,1497,3.113,1498,3.113,1501,4.613,1625,5.063,1626,3.113,1627,3.577,1628,2.245,1629,3.577,1630,3.577,1631,3.577,1632,3.577,1633,3.577,1634,3.577,1635,5.063,1636,5.877,1637,3.577,1638,5.063,1639,3.577,1640,3.577,1641,5.877,1642,5.063,1643,3.577,1644,3.577,1645,3.577,1646,3.577,1647,3.577,1648,6.391,1649,3.577,1650,6.391,1651,3.577,1652,3.577,1653,3.577,1654,3.577,1655,3.577,1656,3.577,1657,3.577,1658,5.063,1659,3.577,1660,3.577,1661,3.577,1662,5.063,1663,3.577,1664,3.577,1665,3.577,1666,3.577,1667,3.577,1668,3.577,1669,3.577,1670,3.577,1671,3.577,1672,3.577,1673,3.577,1674,3.577,1675,3.577,1676,3.577,1677,3.577,1678,5.063,1679,3.577,1680,3.577,1681,3.577,1682,3.577,1683,3.577,1684,3.577,1685,3.577]],["title/interfaces/emailAuthData.html",[135,0.173,299,2.511]],["body/interfaces/emailAuthData.html",[0,0.35,3,0.141,4,0.141,5,0.124,8,0.106,19,0.583,25,0.014,27,0.128,30,0.352,34,1.359,38,0.292,40,3.671,41,3.317,48,0.252,50,3.427,52,0.226,53,0.124,57,4.424,58,0.635,59,0.608,60,0.213,61,0.141,62,0.325,63,0.699,64,0.688,66,0.806,80,0.47,87,0.01,88,0.01,91,0.276,92,0.775,101,1.121,103,0.868,109,1.331,121,3.26,124,0.926,125,1.381,126,0.533,130,2.163,131,0.836,133,0.868,134,0.635,135,0.265,136,2.1,137,3.635,146,2.963,151,2.308,152,2.524,157,3.612,159,2.524,161,2.601,165,1.443,166,2.524,168,2.524,169,2.1,174,1.539,196,2.809,282,3.183,288,3.728,290,3.728,291,4.555,293,3.728,295,3.728,297,4.816,298,3.183,299,4.267,300,3.852,301,3.728,302,3.728,303,3.728,304,3.728,305,3.728,306,3.728,307,4.816,308,3.728,309,3.728,310,3.728,311,3.728,312,3.728,852,0.717]],["title/interfaces/foundFurniture.html",[135,0.173,582,2.885]],["body/interfaces/foundFurniture.html",[3,0.118,4,0.118,5,0.103,8,0.089,19,0.486,25,0.014,26,0.429,27,0.132,30,0.304,31,1.111,38,0.304,48,0.21,52,0.22,53,0.103,60,0.118,61,0.118,62,0.418,63,0.703,64,0.696,79,1.698,80,0.494,87,0.009,88,0.009,91,0.245,96,0.646,105,0.931,106,1.36,123,0.965,126,0.75,135,0.171,170,0.807,173,0.646,185,1.234,189,1.912,197,2.51,204,3.896,206,1.283,207,1.331,208,1.283,209,1.331,212,1.331,217,1.679,226,2.486,227,1.283,228,1.549,234,3.109,243,2.213,256,1.751,274,1.49,315,1.283,333,2.744,351,2.522,368,0.9,392,3.412,408,1.896,410,1.751,413,2.522,428,2.889,436,2.104,446,1.152,449,1.327,482,1.331,504,1.871,556,3.643,572,3.109,573,2.889,574,3.447,575,3.643,576,2.75,577,4.159,578,3.447,579,3.447,580,3.896,581,3.447,582,5.215,583,3.447,584,3.447,586,3.447,587,3.447,591,3.447,592,2.104,593,3.447,595,2.216,596,3.042,597,3.447,599,3.447,603,4.731,604,3.447,606,3.447,607,3.447,608,2.526,610,4.731,611,3.447,614,3.447,620,3.643,622,2.856,623,2.856,624,3.109,625,3.109,626,2.33,627,5.814,628,5.402,629,3.447,630,3.447,631,3.447,632,4.731,633,3.447,634,4.731,635,3.447,636,5.402,637,3.412,638,5.402,639,2.856,640,3.447,641,3.447,642,4.731,643,3.447,644,4.731,645,3.447,646,4.731,647,3.447,648,4.731,649,4.731,650,3.447,651,3.447,652,3.447,653,3.447,654,3.447,655,4.731,656,3.447,657,3.447,658,3.447,659,3.447,660,3.447,852,0.598]],["title/miscellaneous/functions.html",[1686,2.093,1687,4.191]],["body/miscellaneous/functions.html",[8,0.125,24,2.039,25,0.014,26,0.478,27,0.143,28,1.708,30,0.382,38,0.295,40,2.998,48,0.359,87,0.011,88,0.011,90,2.96,106,1.22,109,1.289,125,1.62,126,0.82,136,2.463,149,3.294,298,4.544,377,2.719,443,4.889,580,4.589,692,5.971,908,4.016,1528,4.848,1529,4.256,1531,4.848,1532,5.902,1533,4.848,1534,5.902,1535,5.902,1536,4.848,1537,5.902,1576,4.848,1577,5.902,1686,3.496,1687,4.848,1688,5.57,1689,4.848,1690,5.57,1691,5.57,1692,4.848,1693,5.57,1694,5.57,1695,8.102,1696,8.102,1697,5.57,1698,5.57,1699,5.57,1700,5.57,1701,5.57,1702,3.733,1703,5.57]],["title/interfaces/furnitureAccountData.html",[135,0.173,143,2.239]],["body/interfaces/furnitureAccountData.html",[0,0.302,1,1.832,3,0.113,4,0.113,5,0.099,8,0.085,19,0.467,25,0.014,26,0.402,27,0.134,30,0.359,34,1.472,38,0.306,40,3.547,41,1.757,48,0.202,50,3.051,52,0.212,53,0.099,58,0.508,59,0.487,60,0.225,61,0.113,62,0.322,63,0.695,64,0.737,66,0.774,79,1.652,80,0.489,87,0.009,88,0.009,89,1.838,90,2.022,91,0.238,92,0.621,93,2.389,96,0.621,101,0.966,103,0.695,105,0.895,106,1.331,107,2.389,109,1.286,110,2.389,112,2.389,115,2.389,116,3.401,118,2.389,119,2.959,121,2.022,124,0.917,125,1.91,126,0.737,127,2.441,128,2.338,129,2.389,130,2.077,131,0.67,132,1.279,133,0.695,134,0.508,135,0.298,136,2.687,137,3.075,138,2.676,139,2.251,140,3.884,141,2.959,142,2.022,143,3.401,144,3.323,145,2.926,146,1.838,147,2.81,148,2.13,149,2.251,150,2.389,151,2.277,152,2.022,153,2.389,154,2.389,155,2.389,156,2.389,157,2.022,158,2.389,159,2.022,160,2.389,161,1.614,162,1.969,163,2.553,164,2.389,165,1.544,166,2.022,167,2.389,168,2.022,169,1.683,170,0.776,171,0.895,172,3.675,173,0.621,174,1.233,175,2.389,176,2.389,177,1.189,178,1.925,179,0.895,180,1.07,181,1.549,182,1.549,183,1.147,184,1.549,852,0.574]],["title/interfaces/furnitureBaseData.html",[135,0.173,707,1.931]],["body/interfaces/furnitureBaseData.html",[0,0.334,3,0.105,4,0.105,5,0.092,8,0.08,25,0.014,26,0.39,27,0.127,30,0.312,34,1.466,38,0.3,48,0.356,52,0.2,53,0.092,58,0.474,59,0.455,60,0.218,61,0.15,62,0.188,63,0.737,64,0.657,66,0.755,80,0.417,87,0.008,88,0.008,91,0.227,92,0.579,96,0.579,101,0.92,103,0.92,105,0.835,109,1.299,124,0.883,126,0.824,130,1.702,131,0.625,133,1.229,134,0.474,135,0.343,151,2.172,162,1.632,165,1.498,170,1.424,171,0.835,173,0.579,177,1.829,179,0.835,180,1.03,181,1.445,182,2.05,183,1.518,201,1.574,231,1.07,351,1.238,363,1.92,368,0.924,372,1.57,446,1.465,449,1.324,463,2.202,464,2.817,465,3.302,466,1.852,467,1.286,468,1.286,469,1.389,481,2.852,484,1.895,485,1.336,486,1.57,497,1.465,499,1.714,502,1.714,528,2.588,529,1.505,530,1.505,531,1.714,608,2.383,626,1.238,669,1.714,681,1.336,683,1.714,684,1.887,685,1.887,687,1.887,688,1.953,697,3.11,698,1.887,699,1.445,700,2.136,701,1.796,702,2.974,703,3.105,704,2.826,705,2.826,706,1.445,707,3.469,708,2.432,709,1.445,710,1.887,711,1.887,712,1.887,713,3.11,714,2.676,715,1.887,716,1.887,717,1.887,718,1.887,719,2.676,720,1.887,721,1.887,722,1.887,723,1.796,724,1.887,725,2.432,726,1.887,727,1.796,852,0.536]],["title/interfaces/furnitureClientData.html",[135,0.173,708,1.931]],["body/interfaces/furnitureClientData.html",[0,0.338,3,0.108,4,0.108,5,0.094,8,0.081,25,0.014,26,0.222,27,0.068,30,0.315,34,1.47,38,0.295,48,0.271,52,0.201,53,0.094,58,0.485,59,0.465,60,0.219,61,0.152,62,0.192,63,0.74,64,0.665,66,0.761,80,0.421,87,0.008,88,0.008,91,0.23,92,0.592,96,0.592,101,0.935,103,0.935,105,0.853,109,1.304,124,0.894,126,0.811,130,1.723,131,0.639,133,1.239,134,0.485,135,0.344,151,2.183,162,1.657,165,1.513,170,1.435,171,0.853,173,0.592,177,1.851,179,0.853,180,1.043,181,1.477,182,2.082,183,1.542,201,1.598,231,1.094,351,1.266,363,2.044,368,0.933,372,1.604,446,1.487,449,1.334,463,2.647,464,1.604,465,2.844,466,1.055,467,1.314,468,1.314,469,1.419,481,2.875,484,1.924,485,1.365,486,1.604,497,1.487,499,1.752,502,1.752,528,2.619,529,1.539,530,1.539,531,1.752,608,2.411,626,1.266,669,1.752,681,1.365,683,1.752,684,1.928,685,1.928,687,1.928,688,1.963,697,3.148,698,1.928,699,1.477,700,2.169,701,1.836,702,2.619,703,2.735,704,3.275,705,2.86,706,1.477,707,3.491,708,2.86,709,1.477,710,1.928,711,1.928,712,1.928,713,3.148,714,2.718,715,1.928,716,1.928,717,1.928,718,1.928,719,2.718,720,1.928,721,1.928,722,1.928,723,1.836,724,1.928,725,2.47,726,1.928,727,1.836,852,0.548]],["title/interfaces/furnitureFromServerData.html",[135,0.173,481,1.696]],["body/interfaces/furnitureFromServerData.html",[0,0.338,3,0.108,4,0.108,5,0.094,8,0.081,25,0.014,26,0.222,27,0.068,30,0.315,34,1.47,38,0.295,48,0.271,52,0.201,53,0.094,58,0.485,59,0.465,60,0.219,61,0.152,62,0.192,63,0.74,64,0.665,66,0.761,80,0.421,87,0.008,88,0.008,91,0.23,92,0.592,96,0.592,101,0.935,103,0.935,105,0.853,109,1.304,124,0.894,126,0.811,130,1.723,131,0.639,133,1.239,134,0.485,135,0.344,151,2.183,162,1.657,165,1.513,170,1.435,171,0.853,173,0.592,177,1.851,179,0.853,180,1.043,181,1.477,182,2.082,183,1.542,201,1.598,231,1.094,351,1.266,363,2.044,368,0.933,372,1.604,446,1.487,449,1.334,463,2.647,464,1.604,465,2.844,466,1.055,467,1.314,468,1.314,469,1.419,481,2.983,484,1.924,485,1.365,486,1.604,497,1.487,499,1.752,502,1.752,528,2.619,529,1.539,530,1.539,531,1.752,608,2.411,626,1.266,669,1.752,681,1.365,683,1.752,684,1.928,685,1.928,687,1.928,688,1.963,697,3.148,698,1.928,699,1.477,700,2.169,701,1.836,702,2.619,703,2.735,704,2.86,705,3.275,706,1.477,707,3.491,708,2.47,709,1.477,710,1.928,711,1.928,712,1.928,713,3.148,714,2.718,715,1.928,716,1.928,717,1.928,718,1.928,719,2.718,720,1.928,721,1.928,722,1.928,723,1.836,724,1.928,725,2.47,726,1.928,727,1.836,852,0.548]],["title/interfaces/furnitureProportions.html",[135,0.173,703,1.847]],["body/interfaces/furnitureProportions.html",[0,0.334,3,0.105,4,0.105,5,0.092,8,0.079,25,0.014,26,0.217,27,0.11,30,0.312,34,1.465,38,0.294,48,0.267,52,0.2,53,0.092,58,0.474,59,0.454,60,0.218,61,0.149,62,0.188,63,0.736,64,0.656,66,0.754,80,0.417,87,0.008,88,0.008,91,0.226,92,0.579,96,0.579,101,0.919,103,0.919,105,0.834,109,1.298,124,0.883,126,0.806,130,1.701,131,0.624,133,1.228,134,0.474,135,0.343,151,2.171,162,1.63,165,1.497,170,1.611,171,0.834,173,0.579,177,1.828,179,0.834,180,1.03,181,1.444,182,2.049,183,1.517,201,1.572,231,1.069,351,1.237,363,1.919,368,1.098,372,1.568,446,1.463,449,1.324,463,2.201,464,1.568,465,2.815,466,1.031,467,2.306,468,2.306,469,2.491,481,2.851,484,1.893,485,1.334,486,1.568,497,1.463,499,1.712,502,1.712,528,2.586,529,1.504,530,1.504,531,1.712,608,2.381,626,1.237,669,1.712,681,1.334,683,1.712,684,1.884,685,1.884,687,1.884,688,1.952,697,3.108,698,1.884,699,1.444,700,2.134,701,1.794,702,2.586,703,2.939,704,2.825,705,2.825,706,1.444,707,3.372,708,2.43,709,1.444,710,1.884,711,1.884,712,1.884,713,3.108,714,2.674,715,1.884,716,1.884,717,1.884,718,1.884,719,2.674,720,1.884,721,1.884,722,1.884,723,1.794,724,1.884,725,2.43,726,1.884,727,1.794,852,0.535]],["title/interfaces/furnitureShopData.html",[135,0.173,1335,2.239]],["body/interfaces/furnitureShopData.html",[0,0.31,3,0.118,4,0.118,5,0.103,8,0.089,25,0.014,26,0.409,27,0.142,30,0.266,38,0.3,48,0.21,52,0.208,53,0.103,58,0.529,59,0.508,60,0.198,61,0.118,62,0.329,63,0.65,64,0.812,66,0.786,80,0.356,87,0.009,88,0.009,91,0.245,92,0.647,96,0.647,101,0.994,103,0.724,123,0.966,124,1.057,126,0.75,131,0.698,133,0.724,134,0.529,135,0.302,145,2.969,165,0.932,170,1.109,171,0.932,173,1.013,179,0.932,180,1.233,183,1.639,203,2.106,218,1.752,255,1.194,274,1.491,359,1.752,365,1.752,368,1.094,388,2.344,449,1.031,463,2.722,466,1.943,497,1.581,504,1.871,626,2.33,681,1.491,688,1.747,706,1.613,709,1.613,737,3.227,750,2.344,852,0.598,1110,2.33,1225,2.218,1330,2.344,1334,2.488,1335,3.739,1337,4.195,1338,3.043,1339,2.488,1340,3.414,1341,3.919,1343,3.414,1344,2.488,1345,2.488,1347,3.043,1348,3.043,1349,2.488,1350,3.414,1351,3.414,1352,3.414,1353,2.488,1354,3.898,1355,2.488,1356,2.488,1357,2.488,1358,2.488,1359,2.488,1360,2.488,1361,2.488,1362,2.488,1363,2.488,1364,3.414,1365,2.488,1366,2.488,1367,2.488,1368,2.488,1369,2.488,1370,3.414,1371,2.488,1372,2.488,1373,2.488,1374,2.488,1375,2.488,1376,3.414,1377,4.195,1378,2.488,1379,3.414,1380,4.396,1381,2.488,1382,3.898,1383,2.488,1384,2.488]],["title/interfaces/googleAuthData.html",[135,0.173,300,2.511]],["body/interfaces/googleAuthData.html",[0,0.353,3,0.143,4,0.143,5,0.125,8,0.108,19,0.591,25,0.014,27,0.091,30,0.354,34,1.365,38,0.269,40,3.609,41,3.53,48,0.255,50,3.439,52,0.227,53,0.125,57,4.466,58,0.644,59,0.617,60,0.215,61,0.143,62,0.328,63,0.702,64,0.695,66,0.81,80,0.473,87,0.01,88,0.01,91,0.279,92,0.786,101,1.131,103,0.88,109,1.335,121,3.291,124,0.935,125,1.401,126,0.541,130,2.173,131,0.848,133,0.88,134,0.644,135,0.267,136,2.131,137,2.438,146,2.99,151,2.314,152,2.561,157,3.637,159,2.561,161,2.626,165,1.456,166,2.561,168,2.561,169,2.131,174,1.561,196,2.85,282,3.23,288,3.783,290,3.783,291,4.586,293,3.783,295,3.783,297,4.861,298,3.23,299,3.888,300,4.296,301,3.783,302,3.783,303,3.783,304,3.783,305,3.783,306,3.783,307,4.861,308,3.783,309,3.783,310,3.783,311,3.783,312,3.783,852,0.727]],["title/interfaces/imageSliderClientData.html",[135,0.173,484,1.505]],["body/interfaces/imageSliderClientData.html",[3,0.16,4,0.16,5,0.141,8,0.149,25,0.014,27,0.125,38,0.201,48,0.286,52,0.214,53,0.141,60,0.214,61,0.16,87,0.011,88,0.011,91,0.299,106,1.183,126,0.747,135,0.287,185,1.511,206,1.75,207,1.816,208,1.75,209,1.816,212,1.816,227,2.337,258,2.291,315,1.75,316,3.213,324,2.733,334,2.609,368,1.121,377,2.782,408,2.321,410,2.389,413,1.884,482,1.816,484,2.504,485,2.033,504,1.628,529,3.278,530,3.278,576,3.367,700,2.291,779,3.896,780,3.896,781,4.241,782,5.224,783,4.241,784,4.241,805,3.896,806,3.896,852,0.815]],["title/interfaces/imageSliderFromServerData.html",[135,0.173,700,1.696]],["body/interfaces/imageSliderFromServerData.html",[3,0.16,4,0.16,5,0.14,8,0.149,25,0.014,27,0.125,38,0.268,48,0.286,52,0.214,53,0.14,60,0.214,61,0.16,87,0.011,88,0.011,91,0.299,106,1.182,126,0.844,135,0.287,185,1.51,206,1.749,207,1.814,208,1.749,209,1.814,212,1.814,227,2.336,258,2.289,315,1.749,316,3.212,324,2.731,334,2.606,368,1.121,377,2.514,408,2.32,410,2.386,413,1.882,482,1.814,484,2.031,485,2.031,504,1.627,529,3.277,530,3.277,576,3.365,700,2.82,779,3.892,780,3.892,781,4.237,782,5.221,783,4.237,784,4.237,805,3.892,806,3.892,852,0.815]],["title/index.html",[8,0.09,1704,3.482]],["body/index.html",[2,2.662,25,0.012,87,0.012,88,0.012,187,3.158,245,2.773,391,4.716,801,2.804,852,0.987,1704,5.692,1705,6.54,1706,6.54,1707,6.54]],["title/interfaces/modelInterface.html",[135,0.173,1110,1.395]],["body/interfaces/modelInterface.html",[1,1.362,3,0.069,4,0.069,5,0.06,8,0.052,19,0.283,25,0.014,27,0.085,30,0.221,31,2.007,34,1.085,38,0.168,48,0.122,52,0.209,53,0.06,60,0.134,61,0.069,62,0.428,63,0.695,64,0.922,66,0.791,69,1.548,71,1.366,79,2.014,80,0.504,87,0.006,88,0.006,91,0.164,96,0.838,105,1.207,106,1.412,109,0.618,132,0.776,135,0.221,170,0.744,171,0.858,173,1.015,179,0.858,180,0.642,184,1.84,185,0.828,198,2.087,199,1.768,200,0.904,201,1.139,202,1.845,205,2.673,206,0.748,207,0.776,208,0.748,209,0.776,212,0.776,217,0.979,220,1.227,221,1.366,225,1.115,228,1.427,229,1.366,230,2.041,231,0.696,232,1.938,268,0.94,315,0.748,324,1.845,326,3.357,333,1.998,334,1.115,340,2.157,363,0.696,368,1.132,377,0.806,406,1.45,408,1.272,413,1.949,428,1.938,429,1.169,431,2.402,432,1.45,433,0.94,434,1.321,436,1.227,446,1.727,449,0.691,466,1.061,467,2.677,468,2.758,469,2.324,482,0.776,483,1.066,504,2.048,521,2.289,537,1.938,558,2.157,573,1.938,592,1.227,595,1.293,596,1.293,688,1.461,736,2.444,737,2.479,798,1.366,801,2.235,847,2.289,852,0.349,870,2.402,1020,2.418,1053,2.444,1058,1.45,1059,1.45,1083,1.45,1084,1.45,1085,1.45,1086,1.45,1110,2.072,1111,2.699,1114,4.095,1117,1.227,1118,1.938,1213,4.596,1257,3.222,1270,2.837,1428,2.444,1451,2.444,1529,1.45,1538,1.548,1542,3.222,1616,2.444,1628,1.45,1702,3.44,1708,2.444,1709,2.444,1710,3.259,1711,1.666,1712,3.259,1713,1.666,1714,2.63,1715,3.981,1716,2.63,1717,2.444,1718,2.63,1719,3.981,1720,3.702,1721,2.63,1722,2.63,1723,4.03,1724,1.666,1725,1.666,1726,1.666,1727,2.63,1728,1.666,1729,1.666,1730,2.63,1731,1.666,1732,1.666,1733,1.666,1734,1.666,1735,1.666,1736,1.666,1737,1.666,1738,1.666,1739,1.666,1740,1.666,1741,1.666,1742,1.666,1743,2.63,1744,1.666,1745,1.666,1746,1.666,1747,1.666,1748,1.666,1749,4.03,1750,1.666,1751,2.63,1752,2.63,1753,1.666,1754,2.63,1755,3.259,1756,2.63,1757,1.666,1758,3.259,1759,1.666,1760,1.666,1761,1.666,1762,1.666,1763,2.63,1764,2.63,1765,1.666,1766,1.666,1767,1.666,1768,1.666,1769,3.259,1770,1.666,1771,3.259,1772,4.284,1773,4.03,1774,1.666,1775,1.666,1776,2.63,1777,2.63,1778,1.666,1779,2.63,1780,1.666,1781,1.666,1782,1.666,1783,3.259,1784,1.666,1785,1.666,1786,4.485,1787,1.666,1788,3.702,1789,2.63,1790,1.666,1791,1.666,1792,1.666,1793,1.666,1794,1.666,1795,1.666,1796,1.666,1797,1.666,1798,1.666,1799,1.666,1800,1.666,1801,2.63,1802,3.702,1803,1.666,1804,2.63,1805,2.63,1806,2.63,1807,3.702,1808,1.666,1809,3.259,1810,1.666,1811,1.666,1812,1.666,1813,1.666,1814,1.666,1815,2.63,1816,2.63,1817,2.63,1818,2.63,1819,2.63,1820,1.666,1821,1.666,1822,1.548,1823,1.666,1824,1.666,1825,1.666,1826,1.666,1827,1.666,1828,1.666,1829,1.666,1830,1.666,1831,1.666,1832,2.63,1833,1.666,1834,1.666,1835,1.666,1836,1.666,1837,1.666,1838,3.259,1839,1.666,1840,1.666,1841,2.63,1842,3.259,1843,1.666,1844,1.666,1845,3.259,1846,1.666,1847,1.666,1848,1.666,1849,2.63,1850,3.259,1851,1.666,1852,2.63,1853,2.63,1854,1.666,1855,1.666,1856,1.666,1857,1.666,1858,1.666,1859,2.63,1860,3.259,1861,1.666,1862,1.666,1863,1.666,1864,2.63,1865,3.259,1866,1.666,1867,2.63,1868,1.666,1869,2.63,1870,3.259,1871,1.666,1872,1.666,1873,1.666,1874,2.63,1875,1.666,1876,1.666,1877,1.666,1878,1.666,1879,2.63,1880,1.666,1881,1.666,1882,1.666,1883,1.666,1884,3.702,1885,3.259,1886,1.666,1887,1.666,1888,1.666,1889,1.666,1890,1.666,1891,1.666,1892,2.444,1893,4.284,1894,2.63,1895,2.63,1896,2.63,1897,2.63,1898,2.63,1899,2.444,1900,2.63,1901,2.63,1902,2.63,1903,2.63,1904,2.63,1905,2.63,1906,1.666,1907,3.259,1908,1.666,1909,1.666,1910,2.63,1911,2.63,1912,1.666,1913,1.666,1914,1.548,1915,3.259,1916,1.666,1917,1.548,1918,1.548,1919,3.44,1920,1.666,1921,2.63,1922,1.548,1923,1.666,1924,1.666,1925,1.548,1926,1.666,1927,1.666,1928,2.63,1929,1.666,1930,2.63,1931,1.666,1932,1.666,1933,1.666,1934,1.666,1935,1.666,1936,2.63,1937,2.63,1938,3.259,1939,3.259,1940,1.666,1941,2.63,1942,2.63,1943,3.259,1944,3.702,1945,1.666,1946,1.666,1947,1.666,1948,1.666,1949,1.666,1950,1.666,1951,2.63,1952,1.666,1953,1.666,1954,1.666,1955,1.666,1956,1.666,1957,1.666,1958,1.666,1959,1.666,1960,1.666,1961,1.666,1962,1.666,1963,2.63,1964,1.666,1965,1.666,1966,1.666,1967,1.666,1968,3.259,1969,1.666,1970,1.666,1971,1.666,1972,1.666,1973,1.666,1974,1.666]],["title/modules.html",[1975,4.764]],["body/modules.html",[25,0.012,87,0.012,88,0.012,1975,5.755]],["title/interfaces/objectLoadInterface.html",[135,0.173,1542,2.511]],["body/interfaces/objectLoadInterface.html",[1,1.359,3,0.068,4,0.068,5,0.06,8,0.052,19,0.282,25,0.014,27,0.085,30,0.221,31,2.005,34,1.084,38,0.168,48,0.122,52,0.209,53,0.06,60,0.134,61,0.068,62,0.428,63,0.695,64,0.922,66,0.79,69,1.543,71,1.362,79,2.012,80,0.504,87,0.006,88,0.006,91,0.164,96,0.836,105,1.205,106,1.411,109,0.617,132,0.774,135,0.221,170,0.742,171,0.856,173,1.014,179,0.856,180,0.64,184,1.836,185,0.826,198,2.082,199,1.764,200,0.901,201,1.137,202,1.841,205,2.667,206,0.746,207,0.774,208,0.746,209,0.774,212,0.774,217,0.976,220,1.224,221,1.362,225,1.112,228,1.423,229,1.362,230,2.036,231,0.694,232,1.933,268,0.937,315,0.746,324,1.841,326,3.354,333,1.994,334,1.112,340,2.152,363,0.694,368,1.131,377,0.803,406,1.445,408,1.269,413,1.946,428,1.933,429,1.165,431,2.397,432,1.445,433,0.937,434,1.318,436,1.224,446,1.725,449,0.69,466,1.058,467,2.587,468,2.699,469,1.764,482,0.774,483,1.063,504,2.046,521,2.284,537,1.933,558,2.152,573,1.933,592,1.224,595,1.289,596,1.289,688,1.459,736,2.438,737,2.474,798,1.362,801,2.232,847,2.284,852,0.348,870,2.397,1020,2.415,1053,2.438,1058,1.445,1059,1.445,1083,1.445,1084,1.445,1085,1.445,1086,1.445,1110,1.946,1111,2.695,1114,4.093,1117,1.224,1118,1.933,1213,4.593,1257,3.217,1270,2.831,1428,2.438,1451,2.438,1529,1.445,1538,1.543,1542,3.503,1616,2.438,1628,1.445,1702,3.434,1708,2.438,1709,2.438,1710,3.252,1711,1.66,1712,3.252,1713,1.66,1714,2.624,1715,4.163,1716,2.624,1717,3.023,1718,2.624,1719,4.163,1720,4.48,1721,4.024,1722,4.024,1723,4.024,1724,1.66,1725,1.66,1726,1.66,1727,2.624,1728,1.66,1729,1.66,1730,2.624,1731,1.66,1732,1.66,1733,1.66,1734,1.66,1735,1.66,1736,1.66,1737,1.66,1738,1.66,1739,1.66,1740,1.66,1741,1.66,1742,1.66,1743,2.624,1744,1.66,1745,1.66,1746,1.66,1747,1.66,1748,1.66,1749,4.024,1750,1.66,1751,2.624,1752,2.624,1753,1.66,1754,2.624,1755,3.252,1756,2.624,1757,1.66,1758,3.252,1759,1.66,1760,1.66,1761,1.66,1762,1.66,1763,2.624,1764,2.624,1765,1.66,1766,1.66,1767,1.66,1768,1.66,1769,3.252,1770,1.66,1771,3.252,1772,4.278,1773,4.024,1774,1.66,1775,1.66,1776,2.624,1777,2.624,1778,1.66,1779,2.624,1780,1.66,1781,1.66,1782,1.66,1783,3.252,1784,1.66,1785,1.66,1786,4.48,1787,1.66,1788,3.695,1789,2.624,1790,1.66,1791,1.66,1792,1.66,1793,1.66,1794,1.66,1795,1.66,1796,1.66,1797,1.66,1798,1.66,1799,1.66,1800,1.66,1801,2.624,1802,3.695,1803,1.66,1804,2.624,1805,2.624,1806,2.624,1807,3.695,1808,1.66,1809,3.252,1810,1.66,1811,1.66,1812,1.66,1813,1.66,1814,1.66,1815,2.624,1816,2.624,1817,2.624,1818,2.624,1819,2.624,1820,1.66,1821,1.66,1822,1.543,1823,1.66,1824,1.66,1825,1.66,1826,1.66,1827,1.66,1828,1.66,1829,1.66,1830,1.66,1831,1.66,1832,2.624,1833,1.66,1834,1.66,1835,1.66,1836,1.66,1837,1.66,1838,3.252,1839,1.66,1840,1.66,1841,2.624,1842,3.252,1843,1.66,1844,1.66,1845,3.252,1846,1.66,1847,1.66,1848,1.66,1849,2.624,1850,3.252,1851,1.66,1852,2.624,1853,2.624,1854,1.66,1855,1.66,1856,1.66,1857,1.66,1858,1.66,1859,2.624,1860,3.252,1861,1.66,1862,1.66,1863,1.66,1864,2.624,1865,3.252,1866,1.66,1867,2.624,1868,1.66,1869,2.624,1870,3.252,1871,1.66,1872,1.66,1873,1.66,1874,2.624,1875,1.66,1876,1.66,1877,1.66,1878,1.66,1879,2.624,1880,1.66,1881,1.66,1882,1.66,1883,1.66,1884,3.695,1885,3.252,1886,1.66,1887,1.66,1888,1.66,1889,1.66,1890,1.66,1891,1.66,1892,2.438,1893,4.278,1894,2.624,1895,2.624,1896,2.624,1897,2.624,1898,2.624,1899,2.438,1900,2.624,1901,2.624,1902,2.624,1903,2.624,1904,2.624,1905,2.624,1906,1.66,1907,3.252,1908,1.66,1909,1.66,1910,2.624,1911,2.624,1912,1.66,1913,1.66,1914,1.543,1915,3.252,1916,1.66,1917,1.543,1918,1.543,1919,3.434,1920,1.66,1921,2.624,1922,1.543,1923,1.66,1924,1.66,1925,1.543,1926,1.66,1927,1.66,1928,2.624,1929,1.66,1930,2.624,1931,1.66,1932,1.66,1933,1.66,1934,1.66,1935,1.66,1936,2.624,1937,2.624,1938,3.252,1939,3.252,1940,1.66,1941,2.624,1942,2.624,1943,3.252,1944,3.695,1945,1.66,1946,1.66,1947,1.66,1948,1.66,1949,1.66,1950,1.66,1951,2.624,1952,1.66,1953,1.66,1954,1.66,1955,1.66,1956,1.66,1957,1.66,1958,1.66,1959,1.66,1960,1.66,1961,1.66,1962,1.66,1963,2.624,1964,1.66,1965,1.66,1966,1.66,1967,1.66,1968,3.252,1969,1.66,1970,1.66,1971,1.66,1972,1.66,1973,1.66,1974,1.66]],["title/interfaces/objectSceneInterface.html",[135,0.173,1111,1.931]],["body/interfaces/objectSceneInterface.html",[1,1.355,3,0.068,4,0.068,5,0.06,8,0.051,19,0.281,25,0.014,27,0.096,30,0.22,31,2.003,34,1.082,38,0.207,48,0.121,52,0.209,53,0.06,60,0.134,61,0.068,62,0.428,63,0.694,64,0.922,66,0.789,69,1.536,71,1.355,79,2.009,80,0.504,87,0.006,88,0.006,91,0.163,96,0.834,105,1.202,106,1.408,109,0.614,132,0.77,135,0.221,170,0.739,171,0.852,173,1.012,179,0.852,180,0.638,184,1.83,185,0.823,198,2.076,199,1.759,200,0.897,201,1.132,202,1.834,205,2.659,206,0.743,207,0.77,208,0.743,209,0.77,212,0.77,217,0.972,220,1.218,221,1.355,225,1.107,228,1.418,229,1.355,230,2.029,231,0.691,232,1.926,268,0.933,315,0.743,324,1.834,326,3.349,333,1.988,334,1.107,340,2.144,363,0.691,368,1.131,377,0.799,406,1.439,408,1.264,413,1.942,428,1.926,429,1.16,431,2.389,432,1.439,433,0.933,434,1.313,436,1.218,446,1.722,449,0.852,466,1.054,467,2.585,468,2.696,469,1.759,482,0.77,483,1.058,504,2.043,521,2.275,537,1.926,558,2.144,573,1.926,592,1.218,595,1.283,596,1.283,688,1.456,736,2.429,737,2.468,798,1.355,801,2.227,847,2.275,852,0.346,870,2.389,1020,2.41,1053,2.429,1058,1.439,1059,1.439,1083,1.439,1084,1.439,1085,1.439,1086,1.439,1110,1.942,1111,2.859,1114,4.092,1117,1.218,1118,1.926,1213,4.588,1257,3.209,1270,2.823,1428,2.429,1451,2.429,1529,1.439,1538,1.536,1542,3.209,1616,2.429,1628,1.439,1702,3.425,1708,2.429,1709,2.429,1710,3.243,1711,1.653,1712,3.243,1713,1.653,1714,4.015,1715,4.156,1716,4.015,1717,3.013,1718,4.015,1719,4.156,1720,4.472,1721,2.614,1722,2.614,1723,4.015,1724,1.653,1725,1.653,1726,1.653,1727,2.614,1728,1.653,1729,1.653,1730,2.614,1731,1.653,1732,1.653,1733,1.653,1734,1.653,1735,1.653,1736,1.653,1737,1.653,1738,1.653,1739,1.653,1740,1.653,1741,1.653,1742,1.653,1743,2.614,1744,1.653,1745,1.653,1746,1.653,1747,1.653,1748,1.653,1749,4.015,1750,1.653,1751,2.614,1752,2.614,1753,1.653,1754,2.614,1755,3.243,1756,2.614,1757,1.653,1758,3.243,1759,1.653,1760,1.653,1761,1.653,1762,1.653,1763,2.614,1764,2.614,1765,1.653,1766,1.653,1767,1.653,1768,1.653,1769,3.243,1770,1.653,1771,3.243,1772,4.269,1773,4.015,1774,1.653,1775,1.653,1776,2.614,1777,2.614,1778,1.653,1779,2.614,1780,1.653,1781,1.653,1782,1.653,1783,3.243,1784,1.653,1785,1.653,1786,4.472,1787,1.653,1788,3.686,1789,2.614,1790,1.653,1791,1.653,1792,1.653,1793,1.653,1794,1.653,1795,1.653,1796,1.653,1797,1.653,1798,1.653,1799,1.653,1800,1.653,1801,2.614,1802,3.686,1803,1.653,1804,2.614,1805,2.614,1806,2.614,1807,3.686,1808,1.653,1809,3.243,1810,1.653,1811,1.653,1812,1.653,1813,1.653,1814,1.653,1815,2.614,1816,2.614,1817,2.614,1818,2.614,1819,2.614,1820,1.653,1821,1.653,1822,1.536,1823,1.653,1824,1.653,1825,1.653,1826,1.653,1827,1.653,1828,1.653,1829,1.653,1830,1.653,1831,1.653,1832,2.614,1833,1.653,1834,1.653,1835,1.653,1836,1.653,1837,1.653,1838,3.243,1839,1.653,1840,1.653,1841,2.614,1842,3.243,1843,1.653,1844,1.653,1845,3.243,1846,1.653,1847,1.653,1848,1.653,1849,2.614,1850,3.243,1851,1.653,1852,2.614,1853,2.614,1854,1.653,1855,1.653,1856,1.653,1857,1.653,1858,1.653,1859,2.614,1860,3.243,1861,1.653,1862,1.653,1863,1.653,1864,2.614,1865,3.243,1866,1.653,1867,2.614,1868,1.653,1869,2.614,1870,3.243,1871,1.653,1872,1.653,1873,1.653,1874,2.614,1875,1.653,1876,1.653,1877,1.653,1878,1.653,1879,2.614,1880,1.653,1881,1.653,1882,1.653,1883,1.653,1884,3.686,1885,3.243,1886,1.653,1887,1.653,1888,1.653,1889,1.653,1890,1.653,1891,1.653,1892,2.429,1893,4.269,1894,2.614,1895,2.614,1896,2.614,1897,2.614,1898,2.614,1899,2.429,1900,2.614,1901,2.614,1902,2.614,1903,2.614,1904,2.614,1905,2.614,1906,1.653,1907,3.243,1908,1.653,1909,1.653,1910,2.614,1911,2.614,1912,1.653,1913,1.653,1914,1.536,1915,3.243,1916,1.653,1917,1.536,1918,1.536,1919,3.425,1920,1.653,1921,2.614,1922,1.536,1923,1.653,1924,1.653,1925,1.536,1926,1.653,1927,1.653,1928,2.614,1929,1.653,1930,2.614,1931,1.653,1932,1.653,1933,1.653,1934,1.653,1935,1.653,1936,2.614,1937,2.614,1938,3.243,1939,3.243,1940,1.653,1941,2.614,1942,2.614,1943,3.243,1944,3.686,1945,1.653,1946,1.653,1947,1.653,1948,1.653,1949,1.653,1950,1.653,1951,2.614,1952,1.653,1953,1.653,1954,1.653,1955,1.653,1956,1.653,1957,1.653,1958,1.653,1959,1.653,1960,1.653,1961,1.653,1962,1.653,1963,2.614,1964,1.653,1965,1.653,1966,1.653,1967,1.653,1968,3.243,1969,1.653,1970,1.653,1971,1.653,1972,1.653,1973,1.653,1974,1.653]],["title/interfaces/option.html",[135,0.173,360,2.239]],["body/interfaces/option.html",[0,0.368,3,0.152,4,0.152,5,0.133,8,0.115,19,0.629,25,0.014,26,0.476,27,0.143,30,0.251,38,0.303,48,0.272,52,0.219,53,0.133,58,0.685,59,0.657,60,0.219,61,0.152,62,0.341,80,0.336,87,0.011,88,0.011,91,0.29,92,0.837,101,1.177,103,0.937,109,1.092,124,0.972,126,0.575,131,0.902,133,0.937,134,0.685,135,0.328,174,1.661,346,2.724,347,2.869,348,3.219,351,1.788,352,2.724,353,3.219,354,3.219,355,3.219,356,3.605,357,3.942,358,3.219,359,3.366,360,3.942,361,4.639,362,3.423,363,1.941,364,3.219,365,3.114,366,3.423,367,3.219,368,0.934,369,3.219,852,0.774]],["title/interfaces/optionRangeQueryData.html",[135,0.173,1348,2.239]],["body/interfaces/optionRangeQueryData.html",[0,0.316,3,0.121,4,0.121,5,0.106,8,0.091,25,0.014,26,0.249,27,0.14,30,0.271,38,0.283,48,0.215,52,0.21,53,0.106,58,0.543,59,0.521,60,0.201,61,0.121,62,0.333,63,0.657,64,0.818,66,0.793,80,0.362,87,0.009,88,0.009,91,0.249,92,0.663,96,0.663,101,1.011,103,0.743,123,0.991,124,1.019,126,0.706,131,0.716,133,0.743,134,0.543,135,0.305,145,2.347,165,0.956,170,1.128,171,0.956,173,1.027,179,0.956,180,1.244,183,1.668,203,2.161,218,1.798,255,1.225,274,1.53,359,1.798,365,1.798,368,1.129,388,2.405,449,0.771,463,2.367,466,1.182,497,1.609,504,1.896,626,1.418,681,1.53,688,1.063,706,1.655,709,1.655,737,3.261,750,2.405,852,0.614,1110,1.93,1225,3.78,1330,2.405,1334,2.553,1335,3.521,1337,4.24,1338,3.097,1339,2.553,1340,3.474,1341,3.954,1343,3.474,1344,2.553,1345,2.553,1347,3.097,1348,3.521,1349,4.24,1350,3.474,1351,3.474,1352,3.474,1353,2.553,1354,3.95,1355,2.553,1356,2.553,1357,2.553,1358,2.553,1359,2.553,1360,2.553,1361,2.553,1362,2.553,1363,2.553,1364,3.474,1365,2.553,1366,2.553,1367,2.553,1368,2.553,1369,2.553,1370,3.474,1371,2.553,1372,2.553,1373,2.553,1374,2.553,1375,2.553,1376,3.474,1377,4.24,1378,2.553,1379,3.474,1380,4.435,1381,2.553,1382,3.95,1383,2.553,1384,2.553]],["title/interfaces/optionSelectQueryData.html",[135,0.173,1347,2.239]],["body/interfaces/optionSelectQueryData.html",[0,0.317,3,0.122,4,0.122,5,0.107,8,0.092,25,0.014,26,0.251,27,0.137,30,0.272,38,0.29,48,0.217,52,0.21,53,0.107,58,0.547,59,0.524,60,0.201,61,0.122,62,0.335,63,0.659,64,0.82,66,0.795,80,0.364,87,0.009,88,0.009,91,0.25,92,0.668,96,0.668,101,1.016,103,0.748,123,1.65,124,1.022,126,0.708,131,0.721,133,0.748,134,0.547,135,0.306,145,2.358,165,0.963,170,1.134,171,0.963,173,1.03,179,0.963,180,1.247,183,1.676,203,2.176,218,1.81,255,1.234,274,1.54,359,1.81,365,1.81,368,1.059,388,2.421,449,0.776,463,2.376,466,1.191,497,1.617,504,1.903,626,1.428,681,1.54,688,1.071,706,1.667,709,1.667,737,3.271,750,2.421,852,0.618,1110,1.939,1225,2.291,1330,2.421,1334,2.57,1335,3.534,1337,4.252,1338,3.112,1339,2.57,1340,3.491,1341,3.964,1343,3.491,1344,2.57,1345,2.57,1347,3.534,1348,3.112,1349,2.57,1350,3.491,1351,3.491,1352,3.491,1353,2.57,1354,3.964,1355,2.57,1356,2.57,1357,2.57,1358,2.57,1359,2.57,1360,2.57,1361,2.57,1362,2.57,1363,2.57,1364,3.491,1365,2.57,1366,2.57,1367,2.57,1368,2.57,1369,2.57,1370,3.491,1371,2.57,1372,2.57,1373,2.57,1374,2.57,1375,2.57,1376,3.491,1377,4.252,1378,2.57,1379,3.491,1380,4.446,1381,2.57,1382,3.964,1383,2.57,1384,2.57]],["title/interfaces/projectInformation.html",[127,1.847,135,0.173]],["body/interfaces/projectInformation.html",[0,0.321,3,0.124,4,0.124,5,0.108,8,0.093,19,0.511,25,0.014,26,0.467,27,0.106,30,0.349,34,1.477,38,0.304,48,0.221,52,0.223,53,0.108,58,0.557,59,0.534,60,0.203,61,0.124,62,0.338,63,0.773,64,0.824,66,0.799,80,0.467,87,0.009,88,0.009,91,0.253,92,0.68,96,0.68,101,1.028,103,0.761,109,1.311,124,0.961,126,0.467,127,3.465,128,1.842,130,2.135,131,0.733,133,0.761,134,0.557,135,0.275,144,2.847,151,2.274,161,1.766,162,2.308,163,2.012,165,1.604,169,1.842,173,0.68,174,1.823,177,1.302,178,2.847,198,1.923,218,1.842,363,1.256,377,1.962,449,1.447,497,1.212,699,1.696,800,2.792,801,1.567,848,2.792,852,0.629,1010,4.27,1020,2.777,1072,4.572,1089,2.792,1095,3.565,1097,3.004,1098,5.184,1100,3.004,1102,3.004,1103,3.999,1105,3.004,1106,3.004,1108,3.004,1110,1.962,1111,2.717,1112,3.149,1113,4.057,1114,2.108,1115,2.792,1116,2.792,1117,2.214,1118,2.214,1119,3.004,1120,3.004,1121,4.594,1122,3.004,1123,3.004,1124,3.004,1125,3.004,1126,3.004]],["title/interfaces/projectServerInformation.html",[128,1.769,135,0.173]],["body/interfaces/projectServerInformation.html",[0,0.321,3,0.123,4,0.123,5,0.108,8,0.093,19,0.51,25,0.014,26,0.436,27,0.106,30,0.348,34,1.476,38,0.306,48,0.22,52,0.223,53,0.108,58,0.555,59,0.532,60,0.202,61,0.123,62,0.337,63,0.773,64,0.823,66,0.799,80,0.466,87,0.009,88,0.009,91,0.253,92,0.678,96,0.678,101,1.026,103,0.759,109,1.31,124,0.96,126,0.466,127,3.463,128,2.483,130,2.133,131,0.731,133,0.759,134,0.555,135,0.274,144,3.602,151,2.273,161,1.761,162,2.306,163,2.006,165,1.603,169,1.837,173,0.678,174,1.819,177,1.298,178,2.841,198,1.918,218,1.837,363,1.693,377,1.959,449,1.481,497,1.208,699,1.691,800,2.784,801,1.563,848,2.784,852,0.627,1010,4.264,1020,2.286,1072,2.784,1089,2.784,1095,3.56,1097,2.996,1098,5.181,1100,2.996,1102,2.996,1103,3.994,1105,2.996,1106,2.996,1108,2.996,1110,1.959,1111,2.712,1112,3.143,1113,4.05,1114,2.102,1115,2.784,1116,2.784,1117,2.208,1118,2.208,1119,4.914,1120,2.996,1121,4.588,1122,2.996,1123,2.996,1124,2.996,1125,2.996,1126,2.996]],["title/properties.html",[91,0.217,1580,2.902]],["body/properties.html",[25,0.013,87,0.012,88,0.012,91,0.296,1976,6.591,1977,6.591]],["title/interfaces/queryData.html",[135,0.173,1341,2.239]],["body/interfaces/queryData.html",[0,0.318,3,0.122,4,0.122,5,0.107,22,1.002,25,0.014,26,0.252,27,0.105,30,0.273,38,0.287,48,0.218,52,0.211,53,0.107,58,0.549,59,0.527,60,0.202,61,0.122,62,0.335,63,0.66,64,0.821,66,0.796,80,0.365,87,0.009,88,0.009,92,0.671,96,0.671,101,1.019,103,0.751,123,1.002,124,1.024,126,0.71,131,0.724,133,0.751,134,0.549,135,0.306,145,2.364,165,0.967,170,1.137,171,0.967,173,1.032,179,0.967,180,1.248,183,1.681,203,2.185,218,1.818,255,1.239,274,1.547,359,1.818,365,1.818,368,1.061,388,2.431,449,0.779,463,2.381,466,1.196,497,1.622,504,1.907,626,1.434,681,1.547,688,1.075,706,2.27,709,1.674,737,3.276,750,2.431,852,0.62,1110,1.945,1225,2.301,1330,2.431,1334,2.581,1335,3.541,1337,4.259,1338,3.121,1339,2.581,1340,3.501,1341,4.093,1343,3.501,1344,2.581,1345,2.581,1347,3.541,1348,3.541,1349,2.581,1350,3.501,1351,3.501,1352,3.501,1353,2.581,1354,3.972,1355,2.581,1356,2.581,1357,2.581,1358,2.581,1359,2.581,1360,2.581,1361,2.581,1362,2.581,1363,2.581,1364,3.501,1365,2.581,1366,2.581,1367,2.581,1368,2.581,1369,2.581,1370,3.501,1371,2.581,1372,2.581,1373,2.581,1374,2.581,1375,2.581,1376,3.501,1377,4.259,1378,2.581,1379,3.501,1380,4.452,1381,2.581,1382,3.972,1383,2.581,1384,2.581,1483,3.578,1978,4.112]],["title/interfaces/rangeFilter.html",[135,0.173,366,2.126]],["body/interfaces/rangeFilter.html",[0,0.367,3,0.152,4,0.152,5,0.133,8,0.114,19,0.627,25,0.014,26,0.431,27,0.15,30,0.25,38,0.293,48,0.271,52,0.219,53,0.133,58,0.683,59,0.654,60,0.219,61,0.152,62,0.341,80,0.335,87,0.011,88,0.011,91,0.289,92,0.834,101,1.174,103,0.934,109,1.09,124,0.97,126,0.573,131,0.899,133,0.934,134,0.683,135,0.328,174,1.655,346,2.715,347,2.859,348,3.207,351,1.782,352,2.715,353,3.207,354,3.207,355,3.207,356,3.597,357,4.13,358,3.207,359,3.263,360,3.597,361,3.207,362,3.416,363,2.12,364,3.207,365,3.263,366,3.737,367,4.633,368,1.126,369,4.633,852,0.771]],["title/interfaces/reportResponse.html",[135,0.173,1112,2.239]],["body/interfaces/reportResponse.html",[0,0.279,3,0.101,4,0.101,5,0.088,8,0.076,19,0.417,25,0.014,26,0.405,27,0.134,30,0.239,31,1.753,38,0.301,52,0.186,53,0.088,58,0.454,59,0.435,60,0.17,61,0.145,62,0.397,63,0.739,64,0.773,66,0.852,80,0.32,87,0.008,88,0.008,91,0.22,126,0.701,135,0.147,142,3.319,145,1.442,214,3.833,218,1.503,228,1.33,231,1.025,243,3.009,255,1.472,343,4.486,351,1.186,368,0.708,377,2.307,397,3.833,464,1.503,466,1.924,467,2.677,468,1.768,504,2.351,555,2.452,608,3.175,626,1.186,639,4.121,688,0.889,702,2.159,844,3.833,852,0.513,885,3.694,1020,2.326,1095,4.062,1103,4.153,1110,2.307,1112,4.062,1127,2.669,1135,2.959,1137,2.959,1139,2.959,1141,2.959,1142,4.974,1144,4.974,1145,2.959,1146,4.251,1148,2.959,1149,5.437,1151,2.452,1152,5.994,1153,2.959,1154,2.959,1155,2.959,1156,2.959,1157,4.251,1158,2.959,1159,2.959,1160,2.959,1161,2.959,1162,4.251,1163,7.023,1164,4.251,1165,6.434,1166,5.437,1167,4.251,1168,2.959,1169,4.251,1170,6.434,1171,2.959,1172,2.959,1173,4.251,1174,6.79,1175,6.175,1176,4.974,1177,5.193,1178,4.251,1179,4.251,1180,6.175,1181,2.959,1182,2.959,1183,5.193,1184,5.698,1185,5.437,1186,4.974,1187,5.758,1188,5.994,1189,5.994,1190,6.175,1191,2.959,1192,6.318,1193,5.406,1194,2.959,1195,2.959,1196,2.959,1197,5.437,1198,2.959,1199,4.974,1200,2.959,1201,5.437,1202,5.437,1203,5.698,1204,4.974,1205,5.437,1206,2.959,1207,4.974,1208,2.959,1209,2.959,1210,4.251,1211,5.994,1212,4.251,1213,3.921,1214,2.959,1215,5.437,1216,4.251,1217,4.251,1218,4.251,1219,2.959,1220,4.251,1221,4.251,1222,4.251,1223,2.959,1224,2.959,1225,3.702,1226,4.974,1227,4.251,1228,3.833,1229,2.669,1230,2.959,1231,4.251,1232,2.959,1233,2.959,1234,2.959,1235,4.251,1236,4.251,1237,2.959,1238,2.959,1239,2.959,1240,4.251,1241,2.959,1242,2.959,1243,2.959,1244,2.959,1245,4.486,1246,2.959,1247,4.251,1248,4.251,1249,4.251,1250,2.959,1251,2.959,1252,2.959,1253,2.959,1254,2.959,1255,2.959,1256,2.959,1257,2.134,1258,2.959,1259,2.959,1260,2.959,1261,2.959,1262,2.959,1263,2.959,1264,2.959,1265,4.251,1266,2.959,1267,2.959,1268,2.959,1269,2.959,1270,2.134,1271,2.959,1272,2.959,1273,2.959,1274,2.959,1275,2.959,1276,2.959,1277,2.959,1278,2.959,1279,2.959,1280,4.251,1281,2.959,1282,2.959,1283,2.959,1284,2.959,1285,2.959,1286,2.959,1287,2.959,1288,2.959,1289,2.959,1290,2.959,1291,2.959,1292,2.959,1293,2.959,1294,2.959,1979,4.884]],["title/interfaces/roomData.html",[135,0.173,1020,1.628]],["body/interfaces/roomData.html",[0,0.315,3,0.12,4,0.12,5,0.105,8,0.091,19,0.497,25,0.014,26,0.464,27,0.133,28,1.209,30,0.345,34,1.471,38,0.307,48,0.215,52,0.221,53,0.105,58,0.541,59,0.519,60,0.2,61,0.12,62,0.333,63,0.77,64,0.817,66,0.792,80,0.462,87,0.009,88,0.009,91,0.248,92,0.661,96,0.661,101,1.008,103,0.74,109,1.304,124,0.948,126,0.454,127,3.361,128,1.791,130,2.117,131,0.713,133,0.74,134,0.541,135,0.271,144,3.57,151,2.262,161,1.717,162,2.286,163,1.955,165,1.586,169,1.791,173,0.661,174,1.788,177,1.265,178,2.793,198,1.87,218,1.791,363,1.22,377,1.925,449,1.458,497,1.178,699,1.648,800,3.699,801,2.077,848,2.714,852,0.611,1010,4.208,1020,2.556,1072,2.714,1089,2.714,1095,3.514,1097,2.92,1098,5.154,1100,2.92,1102,2.92,1103,3.942,1105,2.92,1106,2.92,1108,2.92,1110,2.352,1111,3.256,1112,3.089,1113,3.98,1114,2.793,1115,3.699,1116,4.519,1117,3.583,1118,3.583,1119,2.92,1120,2.92,1121,4.528,1122,2.92,1123,2.92,1124,2.92,1125,2.92,1126,2.92]],["title/interfaces/roomData-1.html",[135,0.144,801,1.254,1020,1.357]],["body/interfaces/roomData-1.html",[1,1.367,3,0.069,4,0.069,5,0.06,8,0.052,19,0.285,25,0.014,27,0.044,30,0.222,31,2.009,34,1.088,38,0.169,48,0.123,52,0.21,53,0.06,60,0.135,61,0.069,62,0.428,63,0.696,64,0.923,66,0.792,69,1.556,71,1.373,79,2.018,80,0.505,87,0.006,88,0.006,91,0.165,96,0.84,105,1.211,106,1.415,109,0.621,132,0.78,135,0.222,170,0.747,171,0.861,173,1.017,179,0.861,180,0.645,184,1.846,185,0.831,198,2.094,199,1.774,200,0.908,201,1.144,202,1.853,205,2.682,206,0.752,207,0.78,208,0.752,209,0.78,212,0.78,217,0.985,220,1.234,221,1.373,225,1.121,228,1.433,229,1.373,230,2.05,231,0.7,232,1.946,268,0.945,315,0.752,324,1.853,326,3.363,333,2.005,334,1.121,340,2.166,363,1.104,368,1.098,377,0.81,406,1.458,408,1.277,413,1.954,428,1.946,429,1.175,431,2.41,432,1.458,433,0.945,434,1.326,436,1.234,446,1.731,449,0.694,466,1.065,467,2.593,468,2.703,469,1.774,482,0.78,483,1.072,504,2.051,521,2.299,537,1.946,558,2.166,573,1.946,592,1.234,595,1.3,596,1.3,688,1.465,736,2.455,737,2.486,798,1.373,801,2.24,847,2.299,852,0.35,870,2.41,1020,2.537,1053,2.455,1058,1.458,1059,1.458,1083,1.458,1084,1.458,1085,1.458,1086,1.458,1110,2.077,1111,3.009,1114,4.097,1117,1.234,1118,2.978,1213,4.601,1257,3.232,1270,2.847,1428,2.455,1451,2.455,1529,1.458,1538,1.556,1542,3.232,1616,2.455,1628,1.458,1702,3.451,1708,2.455,1709,2.455,1710,3.271,1711,1.675,1712,3.271,1713,1.675,1714,2.641,1715,3.99,1716,2.641,1717,2.455,1718,2.641,1719,3.99,1720,3.713,1721,2.641,1722,2.641,1723,4.041,1724,1.675,1725,1.675,1726,1.675,1727,2.641,1728,1.675,1729,1.675,1730,2.641,1731,1.675,1732,1.675,1733,1.675,1734,1.675,1735,1.675,1736,1.675,1737,1.675,1738,1.675,1739,1.675,1740,1.675,1741,1.675,1742,1.675,1743,2.641,1744,1.675,1745,1.675,1746,1.675,1747,1.675,1748,1.675,1749,4.041,1750,1.675,1751,2.641,1752,2.641,1753,1.675,1754,2.641,1755,3.271,1756,2.641,1757,1.675,1758,3.271,1759,1.675,1760,1.675,1761,1.675,1762,1.675,1763,2.641,1764,2.641,1765,1.675,1766,1.675,1767,1.675,1768,1.675,1769,3.271,1770,1.675,1771,3.271,1772,4.294,1773,4.041,1774,1.675,1775,1.675,1776,2.641,1777,2.641,1778,1.675,1779,2.641,1780,1.675,1781,1.675,1782,1.675,1783,3.271,1784,1.675,1785,1.675,1786,4.494,1787,1.675,1788,3.713,1789,2.641,1790,1.675,1791,1.675,1792,1.675,1793,1.675,1794,1.675,1795,1.675,1796,1.675,1797,1.675,1798,1.675,1799,1.675,1800,1.675,1801,2.641,1802,3.713,1803,1.675,1804,2.641,1805,2.641,1806,2.641,1807,3.713,1808,1.675,1809,3.271,1810,1.675,1811,1.675,1812,1.675,1813,1.675,1814,1.675,1815,2.641,1816,2.641,1817,2.641,1818,2.641,1819,2.641,1820,1.675,1821,1.675,1822,1.556,1823,1.675,1824,1.675,1825,1.675,1826,1.675,1827,1.675,1828,1.675,1829,1.675,1830,1.675,1831,1.675,1832,2.641,1833,1.675,1834,1.675,1835,1.675,1836,1.675,1837,1.675,1838,3.271,1839,1.675,1840,1.675,1841,2.641,1842,3.271,1843,1.675,1844,1.675,1845,3.271,1846,1.675,1847,1.675,1848,1.675,1849,2.641,1850,3.271,1851,1.675,1852,2.641,1853,2.641,1854,1.675,1855,1.675,1856,1.675,1857,1.675,1858,1.675,1859,2.641,1860,3.271,1861,1.675,1862,1.675,1863,1.675,1864,2.641,1865,3.271,1866,1.675,1867,2.641,1868,1.675,1869,2.641,1870,3.271,1871,1.675,1872,1.675,1873,1.675,1874,2.641,1875,1.675,1876,1.675,1877,1.675,1878,1.675,1879,2.641,1880,1.675,1881,1.675,1882,1.675,1883,1.675,1884,3.713,1885,3.271,1886,1.675,1887,1.675,1888,1.675,1889,1.675,1890,1.675,1891,1.675,1892,2.455,1893,4.294,1894,2.641,1895,2.641,1896,2.641,1897,2.641,1898,2.641,1899,2.455,1900,2.641,1901,2.641,1902,2.641,1903,2.641,1904,2.641,1905,2.641,1906,1.675,1907,3.271,1908,1.675,1909,1.675,1910,2.641,1911,2.641,1912,1.675,1913,1.675,1914,1.556,1915,3.271,1916,1.675,1917,1.556,1918,1.556,1919,3.451,1920,1.675,1921,2.641,1922,1.556,1923,1.675,1924,1.675,1925,1.556,1926,1.675,1927,1.675,1928,2.641,1929,1.675,1930,2.641,1931,1.675,1932,1.675,1933,1.675,1934,1.675,1935,1.675,1936,2.641,1937,2.641,1938,3.271,1939,3.271,1940,1.675,1941,2.641,1942,2.641,1943,3.271,1944,3.713,1945,1.675,1946,1.675,1947,1.675,1948,1.675,1949,1.675,1950,1.675,1951,2.641,1952,1.675,1953,1.675,1954,1.675,1955,1.675,1956,1.675,1957,1.675,1958,1.675,1959,1.675,1960,1.675,1961,1.675,1962,1.675,1963,2.641,1964,1.675,1965,1.675,1966,1.675,1967,1.675,1968,3.271,1969,1.675,1970,1.675,1971,1.675,1972,1.675,1973,1.675,1974,1.675]],["title/interfaces/roomSpanSettings.html",[135,0.173,1527,3.14]],["body/interfaces/roomSpanSettings.html",[1,1.33,3,0.066,4,0.066,5,0.058,8,0.099,19,0.273,25,0.014,26,0.376,27,0.103,30,0.173,31,1.412,38,0.164,48,0.118,52,0.2,53,0.058,60,0.066,61,0.066,62,0.421,63,0.569,64,0.896,66,0.714,71,2.975,79,2.365,80,0.501,87,0.006,88,0.006,91,0.159,96,0.363,105,1.375,106,1.573,132,0.749,135,0.096,170,1.192,173,0.363,185,0.804,199,0.871,200,1.968,205,2.61,206,0.722,207,0.749,208,0.722,209,0.749,212,0.749,220,1.184,225,1.076,229,1.317,243,1.443,268,1.796,271,1.028,315,0.722,316,1.711,318,1.127,324,1.793,326,3.713,329,3.084,330,1.939,333,1.951,334,1.076,336,1.748,340,1.317,345,5.09,346,2.345,352,1.883,368,1.131,408,1.236,413,2.559,433,0.907,434,1.283,446,2.322,449,0.422,467,2.682,468,2.682,469,2.629,474,2.782,476,1.606,482,0.749,483,1.028,504,0.671,573,1.883,576,1.793,592,1.184,595,1.247,596,1.983,608,2.38,620,2.375,637,3.158,801,2.786,827,1.748,852,0.336,870,3.107,880,3.182,885,1.317,979,1.748,982,2.555,1020,2.047,1030,2.782,1031,2.782,1032,3.948,1034,1.748,1035,1.493,1039,3.084,1043,1.939,1083,2.225,1084,1.398,1085,1.398,1086,2.225,1087,1.939,1110,1.236,1111,1.711,1114,2.233,1115,1.493,1116,3.371,1117,1.883,1118,1.883,1177,4.59,1183,2.782,1184,1.748,1193,2.782,1203,2.782,1228,3.948,1229,2.782,1245,1.748,1456,1.939,1524,1.939,1527,3.948,1626,1.939,1628,1.398,1708,3.371,1709,3.371,1715,3.919,1717,2.375,1719,3.919,1822,1.493,1892,3.919,1899,2.375,1914,2.375,1917,1.493,1918,1.493,1919,3.371,1922,3.371,1925,1.493,1980,5.031,1981,5.031,1982,5.031,1983,5.031,1984,5.491,1985,3.544,1986,3.544,1987,2.228,1988,2.228,1989,2.228,1990,2.228,1991,2.228,1992,2.228,1993,6.365,1994,6.365,1995,2.228,1996,2.228,1997,2.228,1998,2.228,1999,2.228,2000,2.228,2001,2.228,2002,2.228,2003,3.544,2004,2.228,2005,2.228,2006,2.228,2007,2.228,2008,2.228,2009,2.228,2010,2.228,2011,2.228,2012,2.228,2013,2.228,2014,2.228,2015,2.228,2016,2.228,2017,2.228,2018,4.413,2019,2.228,2020,2.228,2021,2.228,2022,2.228,2023,2.228,2024,3.544,2025,2.228,2026,2.228,2027,2.228,2028,2.228,2029,5.031,2030,5.491,2031,3.544,2032,2.228,2033,2.228,2034,2.228,2035,4.413,2036,2.228,2037,2.228,2038,3.544,2039,2.228,2040,2.228,2041,2.228,2042,2.228,2043,2.228,2044,2.228,2045,4.413,2046,2.228,2047,2.228,2048,2.228,2049,2.228,2050,2.228,2051,2.228,2052,2.228,2053,3.544,2054,2.228,2055,2.228,2056,2.228,2057,2.228,2058,6.133,2059,5.848,2060,5.491,2061,5.848,2062,2.228,2063,2.228,2064,2.228,2065,3.544,2066,4.413,2067,2.228,2068,7.571,2069,2.228,2070,2.228,2071,3.544,2072,2.228,2073,2.228,2074,2.228,2075,4.413,2076,2.228,2077,2.228,2078,4.413,2079,2.228,2080,4.413,2081,2.228,2082,4.413,2083,2.228,2084,4.413,2085,2.228,2086,2.228,2087,4.413,2088,2.228,2089,5.031,2090,5.031,2091,4.413,2092,5.848,2093,6.133,2094,2.228,2095,2.228,2096,5.848,2097,2.228,2098,3.544,2099,3.544,2100,2.228,2101,2.228,2102,6.722,2103,2.228,2104,2.228,2105,2.228,2106,2.228,2107,2.228,2108,5.031,2109,5.031,2110,6.133,2111,2.228,2112,2.228,2113,2.228,2114,2.228,2115,2.228,2116,5.031,2117,3.544,2118,4.413,2119,5.031,2120,4.413,2121,5.491,2122,2.228,2123,6.133,2124,2.228,2125,4.413,2126,2.228,2127,2.228,2128,2.228,2129,3.544,2130,2.228,2131,2.228,2132,2.228,2133,3.544,2134,2.228,2135,2.228,2136,2.228,2137,2.228,2138,2.228,2139,2.228,2140,2.228,2141,2.228,2142,2.228,2143,2.228,2144,2.228,2145,2.228,2146,2.228,2147,2.228,2148,3.544,2149,4.413,2150,2.228,2151,2.228,2152,2.228,2153,2.228,2154,2.228,2155,2.228,2156,2.228,2157,2.228,2158,2.228,2159,2.228,2160,5.491,2161,2.228,2162,2.228,2163,2.228,2164,3.544,2165,2.228,2166,2.228,2167,3.544,2168,2.228,2169,3.544,2170,2.228,2171,2.228,2172,3.544,2173,2.228,2174,2.228,2175,2.228,2176,5.031,2177,2.228,2178,2.228,2179,2.228,2180,2.228,2181,2.228,2182,4.413,2183,3.544,2184,5.031,2185,4.413,2186,2.228,2187,2.228,2188,3.544,2189,2.228,2190,2.228,2191,2.228,2192,2.228,2193,2.228,2194,2.228,2195,2.228,2196,2.228,2197,2.228,2198,2.228,2199,2.228,2200,2.228,2201,2.228,2202,2.228,2203,2.228,2204,2.228,2205,2.228,2206,3.544,2207,4.413,2208,4.413,2209,3.544,2210,2.228,2211,3.544,2212,2.228,2213,2.228,2214,4.413,2215,2.228,2216,3.544,2217,6.133,2218,2.228,2219,2.228,2220,4.413,2221,2.228,2222,3.544,2223,3.544,2224,2.228,2225,2.228,2226,2.228,2227,2.228,2228,2.228,2229,5.848,2230,5.848,2231,2.228,2232,3.544,2233,3.544,2234,2.228,2235,4.413,2236,2.228,2237,2.228,2238,2.228,2239,2.228,2240,4.413,2241,4.413,2242,4.413,2243,4.413,2244,2.228]],["title/interfaces/selectFilter.html",[135,0.173,362,2.126]],["body/interfaces/selectFilter.html",[0,0.369,3,0.153,4,0.153,5,0.134,8,0.115,19,0.632,25,0.014,26,0.432,27,0.149,30,0.252,38,0.294,48,0.273,52,0.22,53,0.134,58,0.688,59,0.66,60,0.22,61,0.153,62,0.342,80,0.337,87,0.011,88,0.011,91,0.291,92,0.84,101,1.18,103,0.941,109,1.095,124,0.975,126,0.578,131,0.906,133,0.941,134,0.688,135,0.329,174,1.668,346,2.736,347,2.882,348,3.232,351,1.796,352,2.736,353,3.232,354,3.232,355,3.232,356,3.615,357,4.142,358,3.232,359,3.37,360,4.142,361,3.232,362,3.75,363,2.127,364,4.646,365,3.121,366,3.432,367,3.232,368,0.937,369,3.232,852,0.777]],["title/interfaces/shopData.html",[135,0.173,702,1.769]],["body/interfaces/shopData.html",[0,0.338,3,0.107,4,0.107,5,0.094,8,0.081,25,0.014,26,0.222,27,0.096,30,0.314,34,1.469,38,0.298,48,0.27,52,0.201,53,0.094,58,0.483,59,0.463,60,0.219,61,0.152,62,0.192,63,0.739,64,0.664,66,0.76,80,0.421,87,0.008,88,0.008,91,0.23,92,0.59,96,0.59,101,0.933,103,0.933,105,0.851,109,1.303,124,0.893,126,0.871,130,1.72,131,0.637,133,1.238,134,0.483,135,0.344,151,2.181,162,1.654,165,1.511,170,1.433,171,0.851,173,0.59,177,1.848,179,0.851,180,1.041,181,1.473,182,2.078,183,1.538,201,1.595,231,1.09,351,1.262,363,1.936,368,1.019,372,1.6,446,1.484,449,1.333,463,2.225,464,1.6,465,2.84,466,1.052,467,1.31,468,1.31,469,1.415,481,2.872,484,1.92,485,1.361,486,1.6,497,1.484,499,1.747,502,1.747,528,2.615,529,1.534,530,1.534,531,1.747,608,2.407,626,2.24,669,1.747,681,1.361,683,1.747,684,1.922,685,1.922,687,1.922,688,1.961,697,3.143,698,1.922,699,1.473,700,2.164,701,1.83,702,2.84,703,2.73,704,2.856,705,2.856,706,1.473,707,3.394,708,2.465,709,1.473,710,1.922,711,1.922,712,1.922,713,3.143,714,2.712,715,1.922,716,1.922,717,1.922,718,1.922,719,2.712,720,1.922,721,1.922,722,1.922,723,1.83,724,1.922,725,2.465,726,1.922,727,1.83,852,0.546]],["title/miscellaneous/typealiases.html",[1686,2.093,2245,4.815]],["body/miscellaneous/typealiases.html",[8,0.137,25,0.014,27,0.115,40,3.168,41,2.82,50,3.168,87,0.012,88,0.012,90,3.246,116,4.01,136,2.701,146,3.46,147,3.246,180,1.075,252,2.487,282,4.094,291,4.802,299,3.835,300,3.835,347,3.418,356,4.01,359,2.701,362,3.246,365,2.701,366,3.246,385,3.835,438,3.835,740,4.498,853,4.094,864,4.802,865,4.405,1686,3.835,1689,6.618,2246,6.109,2247,6.109,2248,6.109,2249,7.166]],["title/miscellaneous/variables.html",[1686,2.093,2250,4.191]],["body/miscellaneous/variables.html",[8,0.132,25,0.014,27,0.141,38,0.22,87,0.012,88,0.012,106,1.295,122,2.512,123,1.959,124,1.061,126,0.842,193,6.118,699,3.053,757,4.265,1151,5.409,1490,5.147,1492,6.529,1494,6.529,1495,5.147,1496,6.118,1555,5.147,1556,6.118,1565,5.147,1686,3.712,1692,6.118,2250,5.147,2251,5.914,2252,5.914,2253,7.03,2254,7.03,2255,5.914,2256,5.914,2257,5.914,2258,5.914,2259,5.914,2260,5.914,2261,5.914,2262,5.914,2263,5.914,2264,5.914,2265,5.914,2266,5.914,2267,5.914]]],"invertedIndex":[["",{"_index":25,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"dependencies.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"miscellaneous/functions.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"index.html":{},"interfaces/modelInterface.html":{},"modules.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"properties.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":504,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/PlanHousePageComponent.html":{},"injectables/ReportService.html":{},"injectables/ShopService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"coverage.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureShopData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["0)this.notification.setsuccess",{"_index":545,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["0.0.0",{"_index":1977,"title":{},"body":{"properties.html":{}}}],["0.05",{"_index":1916,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["0.1",{"_index":1789,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["0.10.3",{"_index":1603,"title":{},"body":{"dependencies.html":{}}}],["0.15",{"_index":1828,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["0.15.0",{"_index":1624,"title":{},"body":{"dependencies.html":{}}}],["0.176.0",{"_index":1617,"title":{},"body":{"dependencies.html":{}}}],["0.2",{"_index":1219,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["0.3",{"_index":1259,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["0.3s",{"_index":1221,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["0.6",{"_index":384,"title":{},"body":{"injectables/ClientImageControlService.html":{}}}],["0.8.0",{"_index":1597,"title":{},"body":{"dependencies.html":{}}}],["0.8rem",{"_index":1250,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["0/1",{"_index":1493,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1574,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1489,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1569,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1575,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1549,"title":{},"body":{"coverage.html":{}}}],["0deg",{"_index":2212,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["0x000000",{"_index":1793,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["1",{"_index":801,"title":{"interfaces/roomData-1.html":{}},"body":{"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"index.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["1).join",{"_index":1085,"title":{},"body":{"components/PlanHousePageComponent.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["1).tostring",{"_index":1470,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["1.2.1",{"_index":1599,"title":{},"body":{"dependencies.html":{}}}],["1.234.567",{"_index":400,"title":{},"body":{"pipes/CostFormatPipe.html":{}}}],["1.2rem",{"_index":1234,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["1.3rem",{"_index":1223,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["1.4.1",{"_index":1601,"title":{},"body":{"dependencies.html":{}}}],["1.5",{"_index":1734,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["1.5rem",{"_index":1200,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["1.6",{"_index":1182,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["1/1",{"_index":1530,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":1508,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":71,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/FinderService.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["10/10",{"_index":1512,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":885,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"injectables/ReportService.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"coverage.html":{},"interfaces/reportResponse.html":{},"interfaces/roomSpanSettings.html":{}}}],["1000",{"_index":1790,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["10px",{"_index":1226,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["11",{"_index":2148,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["115px",{"_index":1473,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["1250",{"_index":1476,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["13/14",{"_index":1518,"title":{},"body":{"coverage.html":{}}}],["135deg",{"_index":2209,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["14",{"_index":1706,"title":{},"body":{"index.html":{}}}],["15/16",{"_index":1510,"title":{},"body":{"coverage.html":{}}}],["15px",{"_index":1202,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["16",{"_index":1705,"title":{},"body":{"index.html":{}}}],["16.0.0",{"_index":1609,"title":{},"body":{"dependencies.html":{}}}],["16/17",{"_index":1500,"title":{},"body":{"coverage.html":{}}}],["16/19",{"_index":1506,"title":{},"body":{"coverage.html":{}}}],["16px",{"_index":1217,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["18",{"_index":1402,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["19.0.0",{"_index":1612,"title":{},"body":{"dependencies.html":{}}}],["19.1.2",{"_index":1610,"title":{},"body":{"dependencies.html":{}}}],["19.2.9",{"_index":1583,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":1114,"title":{},"body":{"injectables/ProjectService.html":{},"components/UploadOverlayComponent.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["2/2",{"_index":1544,"title":{},"body":{"coverage.html":{}}}],["2/3",{"_index":1554,"title":{},"body":{"coverage.html":{}}}],["2/4",{"_index":1564,"title":{},"body":{"coverage.html":{}}}],["2025",{"_index":850,"title":{},"body":{"components/MainPageComponent.html":{}}}],["20px",{"_index":1211,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["21/23",{"_index":1523,"title":{},"body":{"coverage.html":{}}}],["24.8.2",{"_index":1614,"title":{},"body":{"dependencies.html":{}}}],["25",{"_index":1507,"title":{},"body":{"coverage.html":{}}}],["25/26",{"_index":1516,"title":{},"body":{"coverage.html":{}}}],["250",{"_index":330,"title":{},"body":{"directives/AutoHeightDirective.html":{},"interfaces/roomSpanSettings.html":{}}}],["2500",{"_index":540,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"interfaces/clientProportions.html":{}}}],["250px",{"_index":1249,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["25px",{"_index":1214,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["2px",{"_index":1197,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["2rem",{"_index":1210,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["3",{"_index":800,"title":{},"body":{"components/ImageSliderComponent.html":{},"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["3.0.1",{"_index":1607,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":1502,"title":{},"body":{"coverage.html":{}}}],["300",{"_index":657,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["30px",{"_index":1201,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["32/74",{"_index":1526,"title":{},"body":{"coverage.html":{}}}],["344e41",{"_index":1265,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["350",{"_index":2165,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["36/37",{"_index":1504,"title":{},"body":{"coverage.html":{}}}],["38/40",{"_index":1548,"title":{},"body":{"coverage.html":{}}}],["39/50",{"_index":1540,"title":{},"body":{"coverage.html":{}}}],["3d",{"_index":443,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureModelControlService.html":{},"interfaces/clientProportions.html":{},"miscellaneous/functions.html":{}}}],["3px",{"_index":2236,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["3rem",{"_index":1191,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["4",{"_index":1115,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{},"interfaces/roomSpanSettings.html":{}}}],["4.0.2",{"_index":1593,"title":{},"body":{"dependencies.html":{}}}],["4.17.21",{"_index":1608,"title":{},"body":{"dependencies.html":{}}}],["4.3.3",{"_index":1598,"title":{},"body":{"dependencies.html":{}}}],["4.36.0",{"_index":1589,"title":{},"body":{"dependencies.html":{}}}],["4.37.0",{"_index":1594,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":1541,"title":{},"body":{"coverage.html":{}}}],["4/6",{"_index":1553,"title":{},"body":{"coverage.html":{}}}],["4/9",{"_index":1551,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":639,"title":{},"body":{"components/FinderComponent.html":{},"injectables/ReportService.html":{},"interfaces/foundFurniture.html":{},"interfaces/reportResponse.html":{}}}],["40px",{"_index":1176,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["41",{"_index":1707,"title":{},"body":{"index.html":{}}}],["43",{"_index":1525,"title":{},"body":{"coverage.html":{}}}],["44",{"_index":1550,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":1755,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["5/5",{"_index":1543,"title":{},"body":{"coverage.html":{}}}],["5/6",{"_index":1573,"title":{},"body":{"coverage.html":{}}}],["5/7",{"_index":1563,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":884,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"coverage.html":{}}}],["500",{"_index":1474,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["5000",{"_index":537,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/PlanHousePageComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["500px",{"_index":1256,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["6/6",{"_index":1511,"title":{},"body":{"coverage.html":{}}}],["6/7",{"_index":1521,"title":{},"body":{"coverage.html":{}}}],["66",{"_index":1552,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":69,"title":{},"body":{"injectables/AccountCookieService.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["7.3.0",{"_index":1620,"title":{},"body":{"dependencies.html":{}}}],["7.8.2",{"_index":1615,"title":{},"body":{"dependencies.html":{}}}],["7/10",{"_index":1571,"title":{},"body":{"coverage.html":{}}}],["7/7",{"_index":1519,"title":{},"body":{"coverage.html":{}}}],["7/8",{"_index":1568,"title":{},"body":{"coverage.html":{}}}],["7/9",{"_index":1560,"title":{},"body":{"coverage.html":{}}}],["70",{"_index":1570,"title":{},"body":{"coverage.html":{}}}],["71",{"_index":1562,"title":{},"body":{"coverage.html":{}}}],["768",{"_index":2224,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["768px",{"_index":1267,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["77",{"_index":1559,"title":{},"body":{"coverage.html":{}}}],["78",{"_index":1539,"title":{},"body":{"coverage.html":{}}}],["8.0.3",{"_index":1605,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":1566,"title":{},"body":{"coverage.html":{}}}],["81",{"_index":1557,"title":{},"body":{"coverage.html":{}}}],["83",{"_index":1572,"title":{},"body":{"coverage.html":{}}}],["84",{"_index":1505,"title":{},"body":{"coverage.html":{}}}],["85",{"_index":1520,"title":{},"body":{"coverage.html":{}}}],["87",{"_index":1567,"title":{},"body":{"coverage.html":{}}}],["8px",{"_index":1205,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["9/11",{"_index":1558,"title":{},"body":{"coverage.html":{}}}],["90",{"_index":1270,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData-1.html":{}}}],["91",{"_index":1522,"title":{},"body":{"coverage.html":{}}}],["92",{"_index":1517,"title":{},"body":{"coverage.html":{}}}],["93",{"_index":1509,"title":{},"body":{"coverage.html":{}}}],["94",{"_index":1499,"title":{},"body":{"coverage.html":{}}}],["95",{"_index":1547,"title":{},"body":{"coverage.html":{}}}],["96",{"_index":1515,"title":{},"body":{"coverage.html":{}}}],["97",{"_index":1503,"title":{},"body":{"coverage.html":{}}}],["_blank",{"_index":1286,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["_id",{"_index":144,"title":{},"body":{"injectables/AccountService.html":{},"injectables/ProjectService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["a3b18a",{"_index":1193,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{},"interfaces/roomSpanSettings.html":{}}}],["a:hover",{"_index":1254,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["abortconroller",{"_index":1741,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["abortcontroller",{"_index":737,"title":{},"body":{"injectables/FurnitureModelControlService.html":{},"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"interfaces/roomData-1.html":{}}}],["aborterror",{"_index":1375,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["abortloadroom",{"_index":1946,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["abstractcontrol",{"_index":1626,"title":{},"body":{"interfaces/editForm.html":{},"interfaces/roomSpanSettings.html":{}}}],["account",{"_index":125,"title":{},"body":{"injectables/AccountService.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/UploadEntry.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"miscellaneous/functions.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/googleAuthData.html":{}}}],["account.accounttype",{"_index":150,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["account.service",{"_index":57,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AuthService.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{}}}],["account/code",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{}}}],["account_data",{"_index":1652,"title":{},"body":{"interfaces/editForm.html":{}}}],["account_data.email",{"_index":1653,"title":{},"body":{"interfaces/editForm.html":{}}}],["account_data.furnitures",{"_index":1657,"title":{},"body":{"interfaces/editForm.html":{}}}],["account_data.nickname",{"_index":1654,"title":{},"body":{"interfaces/editForm.html":{}}}],["account_data.password",{"_index":1658,"title":{},"body":{"interfaces/editForm.html":{}}}],["account_data.projects",{"_index":1655,"title":{},"body":{"interfaces/editForm.html":{}}}],["account_type",{"_index":1641,"title":{},"body":{"interfaces/editForm.html":{}}}],["accountcookieservice",{"_index":1,"title":{"injectables/AccountCookieService.html":{}},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientProportions.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["accountdata",{"_index":172,"title":{},"body":{"injectables/AccountService.html":{},"components/PlanHousePageComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/furnitureAccountData.html":{}}}],["accountdata.furnitures",{"_index":175,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["accountdata.furnitures.map(furnituredata",{"_index":176,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["accountfulldata",{"_index":138,"title":{"interfaces/accountFullData.html":{}},"body":{"injectables/AccountService.html":{},"components/PlanHousePageComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/furnitureAccountData.html":{}}}],["accountpagecomponent",{"_index":248,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"coverage.html":{},"interfaces/editForm.html":{}}}],["accountservice",{"_index":89,"title":{"injectables/AccountService.html":{}},"body":{"injectables/AccountService.html":{},"components/AppComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/furnitureAccountData.html":{}}}],["accounttype",{"_index":50,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"injectables/AuthService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/googleAuthData.html":{},"miscellaneous/typealiases.html":{}}}],["action",{"_index":549,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["activatedroute",{"_index":428,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/foundFurniture.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["actual_component",{"_index":281,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["addfile",{"_index":1412,"title":{},"body":{"injectables/UploadService.html":{}}}],["addfile(file",{"_index":887,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["additionaldata",{"_index":465,"title":{"interfaces/additionalData.html":{}},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["addmodel(furniturecardid",{"_index":1778,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["addmodule",{"_index":983,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["addroom",{"_index":2186,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["aftercolors",{"_index":1464,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["afterviewchecked",{"_index":981,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["afterviewinit",{"_index":573,"title":{},"body":{"components/FinderComponent.html":{},"components/MainPageComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/foundFurniture.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["alias",{"_index":1561,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":2246,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["align",{"_index":1188,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["all'}/${idfurniture",{"_index":660,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["alpha",{"_index":1797,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["angular",{"_index":2265,"title":{},"body":{"miscellaneous/variables.html":{}}}],["angular/animations",{"_index":1582,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":482,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"dependencies.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["angular/common/http",{"_index":131,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/roomData.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["angular/core",{"_index":53,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"dependencies.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["angular/forms",{"_index":1035,"title":{},"body":{"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"dependencies.html":{},"interfaces/editForm.html":{},"interfaces/roomSpanSettings.html":{}}}],["angular/platform",{"_index":1584,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":217,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/clientProportions.html":{},"dependencies.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["angular/service",{"_index":1586,"title":{},"body":{"dependencies.html":{}}}],["animate",{"_index":1808,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["animationframeid",{"_index":1732,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["antialias",{"_index":1796,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["any).id",{"_index":1847,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["api",{"_index":699,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"injectables/ProjectService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{},"interfaces/shopData.html":{},"miscellaneous/variables.html":{}}}],["app",{"_index":207,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["app.component.html",{"_index":213,"title":{},"body":{"components/AppComponent.html":{}}}],["appautoheight",{"_index":280,"title":{},"body":{"components/AppComponent.html":{},"directives/AutoHeightDirective.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["appcomponent",{"_index":186,"title":{"components/AppComponent.html":{}},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"coverage.html":{}}}],["appconfig",{"_index":1496,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["applicationconfig",{"_index":2254,"title":{},"body":{"miscellaneous/variables.html":{}}}],["area",{"_index":1994,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["arguments",{"_index":794,"title":{},"body":{"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{}}}],["array(grid_size).fill(false",{"_index":2056,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["array.from",{"_index":2055,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["arrowdown",{"_index":2145,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["arrowleft",{"_index":2147,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["arrowright",{"_index":2146,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["arrowup",{"_index":2144,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["async",{"_index":96,"title":{},"body":{"injectables/AccountService.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FurnitureCardControlService.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/shopData.html":{}}}],["asyncpipe",{"_index":1388,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["auth",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{}}}],["authdata",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{},"miscellaneous/typealiases.html":{}}}],["authdata.accounttype",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{}}}],["authdata.email",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{}}}],["authdata.password",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{}}}],["authorid",{"_index":1119,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["authormatched",{"_index":714,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["authservice",{"_index":196,"title":{"injectables/AuthService.html":{}},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"coverage.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{}}}],["auto",{"_index":343,"title":{},"body":{"directives/AutoHeightDirective.html":{},"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["autoheightdirective",{"_index":194,"title":{"directives/AutoHeightDirective.html":{}},"body":{"components/AppComponent.html":{},"directives/AutoHeightDirective.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"coverage.html":{}}}],["autoproceed",{"_index":873,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["avatarurl",{"_index":139,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/furnitureAccountData.html":{}}}],["await",{"_index":173,"title":{},"body":{"injectables/AccountService.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FurnitureCardControlService.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/shopData.html":{}}}],["background",{"_index":1177,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{},"interfaces/roomSpanSettings.html":{}}}],["baseclienturl",{"_index":1151,"title":{},"body":{"injectables/ReportService.html":{},"coverage.html":{},"interfaces/reportResponse.html":{},"miscellaneous/variables.html":{}}}],["basefilter",{"_index":357,"title":{"interfaces/baseFilter.html":{}},"body":{"injectables/CategoryService.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"coverage.html":{},"interfaces/option.html":{},"interfaces/rangeFilter.html":{},"interfaces/selectFilter.html":{}}}],["baseserviceurl",{"_index":92,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interfaces/MyXhrUploadOptions.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/roomData.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["baseurl",{"_index":124,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interfaces/MyXhrUploadOptions.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/roomData.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{},"miscellaneous/variables.html":{}}}],["baseurl}account/avatar?jwt=${jwt",{"_index":1319,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["beforecolors",{"_index":1463,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["behaviorsubject",{"_index":679,"title":{},"body":{"injectables/FinderService.html":{},"interfaces/MyXhrUploadOptions.html":{},"injectables/NotificationService.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["black",{"_index":1178,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["blob",{"_index":377,"title":{},"body":{"injectables/ClientImageControlService.html":{},"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureModelControlService.html":{},"components/ImageSliderComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"interfaces/clientProportions.html":{},"miscellaneous/functions.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{}}}],["blob([htmlcontent",{"_index":1282,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["bloburl",{"_index":509,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["block",{"_index":1212,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["body",{"_index":1173,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["boolean",{"_index":105,"title":{},"body":{"injectables/AccountService.html":{},"directives/AutoHeightDirective.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FurnitureCardControlService.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/shopData.html":{}}}],["bootstrap",{"_index":1556,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["bootstrapapplication(appcomponent",{"_index":2266,"title":{},"body":{"miscellaneous/variables.html":{}}}],["border",{"_index":1203,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{},"interfaces/roomSpanSettings.html":{}}}],["bottom",{"_index":1192,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["box",{"_index":1215,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["break",{"_index":1922,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["browser",{"_index":1585,"title":{},"body":{"dependencies.html":{}}}],["calculategridarea(objectx",{"_index":2067,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["calculatemoveobjectdata(objectsavedata",{"_index":1855,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["calculateobjectsavedata(object",{"_index":1840,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["callsaveemitter",{"_index":2016,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["calypso",{"_index":1166,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["camera",{"_index":1728,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["camera_frustum_bounds",{"_index":1862,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["cancelupload",{"_index":1392,"title":{},"body":{"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{}}}],["cancelupload(fileid",{"_index":895,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["cancelupload(id",{"_index":1396,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["canvas_container",{"_index":1798,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["canvas_container.appendchild(this.renderer.domelement",{"_index":1803,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["canvasratioofwindow",{"_index":1733,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["card",{"_index":231,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"interfaces/MyXhrUploadOptions.html":{},"injectables/ReportService.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/additionalData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData-1.html":{},"interfaces/shopData.html":{}}}],["card.cost",{"_index":662,"title":{},"body":{"components/FinderComponent.html":{}}}],["card.name",{"_index":661,"title":{},"body":{"components/FinderComponent.html":{}}}],["case",{"_index":1919,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["catch",{"_index":179,"title":{},"body":{"injectables/AccountService.html":{},"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ShopService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"interfaces/roomData-1.html":{},"interfaces/shopData.html":{}}}],["catcherror",{"_index":774,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{}}}],["catcherror((error",{"_index":777,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{}}}],["category",{"_index":351,"title":{},"body":{"injectables/CategoryService.html":{},"components/FinderComponent.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/ReportService.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/option.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["categoryarray",{"_index":2006,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["categorydata",{"_index":352,"title":{"interfaces/categoryData.html":{}},"body":{"injectables/CategoryService.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"coverage.html":{},"interfaces/option.html":{},"interfaces/rangeFilter.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{}}}],["categoryname",{"_index":1344,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["categoryservice",{"_index":346,"title":{"injectables/CategoryService.html":{}},"body":{"injectables/CategoryService.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"coverage.html":{},"interfaces/option.html":{},"interfaces/rangeFilter.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{}}}],["cdr",{"_index":1992,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["center",{"_index":1189,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["change_data",{"_index":1635,"title":{},"body":{"interfaces/editForm.html":{}}}],["changeaccountdata",{"_index":146,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/googleAuthData.html":{},"miscellaneous/typealiases.html":{}}}],["changeaccountdataemail",{"_index":136,"title":{"interfaces/changeAccountDataEmail.html":{}},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"miscellaneous/functions.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/googleAuthData.html":{},"miscellaneous/typealiases.html":{}}}],["changedata",{"_index":121,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/googleAuthData.html":{}}}],["changedata.accounttype",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{}}}],["changedata.jwt",{"_index":168,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/googleAuthData.html":{}}}],["changedata.nickname",{"_index":167,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["changedata.password",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{}}}],["changedetectorref",{"_index":474,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/roomSpanSettings.html":{}}}],["changeimagescounter",{"_index":541,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["changemainimage",{"_index":786,"title":{},"body":{"components/ImageSliderComponent.html":{}}}],["changemainimage(index",{"_index":796,"title":{},"body":{"components/ImageSliderComponent.html":{}}}],["changemodeslider",{"_index":789,"title":{},"body":{"components/ImageSliderComponent.html":{}}}],["changes['roomdata'].currentvalue",{"_index":1750,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["changes['roomdata'].previousvalue",{"_index":1752,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["changesecondarydata",{"_index":119,"title":{"interfaces/changeSecondaryData.html":{}},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["checkauthandloaddata",{"_index":1667,"title":{},"body":{"interfaces/editForm.html":{}}}],["checkdesktop",{"_index":580,"title":{},"body":{"components/FinderComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"coverage.html":{},"interfaces/foundFurniture.html":{},"miscellaneous/functions.html":{}}}],["checkguideinclude",{"_index":2046,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["checkjwt",{"_index":93,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["checkshoppage",{"_index":585,"title":{},"body":{"components/FinderComponent.html":{}}}],["checkshoppage(name",{"_index":599,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["checkvalid",{"_index":416,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["checkvalid(typerequest",{"_index":437,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["checkviewport",{"_index":787,"title":{},"body":{"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{}}}],["child.setattribute('tabindex",{"_index":842,"title":{},"body":{"components/MainPageComponent.html":{}}}],["child.style.pointerevents",{"_index":843,"title":{},"body":{"components/MainPageComponent.html":{}}}],["circumference",{"_index":1391,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["class",{"_index":61,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["clearerror",{"_index":959,"title":{},"body":{"injectables/NotificationService.html":{}}}],["clearfurniturecard",{"_index":417,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["clearinput",{"_index":586,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["clearroom",{"_index":1881,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["cleartimeout(this.clicktimer",{"_index":2126,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["cleartimeout(this.debouncetimer",{"_index":652,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["clickroom(event",{"_index":2159,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["clicktimer",{"_index":1999,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["clientfilters",{"_index":1338,"title":{"interfaces/clientFilters.html":{}},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"coverage.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["clientimagecontrolservice",{"_index":370,"title":{"injectables/ClientImageControlService.html":{}},"body":{"injectables/ClientImageControlService.html":{},"coverage.html":{},"interfaces/editForm.html":{}}}],["clientproportions",{"_index":487,"title":{"interfaces/clientProportions.html":{}},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{},"coverage.html":{}}}],["clientx",{"_index":2086,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["clienty",{"_index":2087,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["clipboard",{"_index":1452,"title":{},"body":{"components/ViewFurnitureComponent.html":{},"dependencies.html":{}}}],["clipboardservice",{"_index":1436,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["closeaddmodule",{"_index":988,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["closeeditform",{"_index":1679,"title":{},"body":{"interfaces/editForm.html":{}}}],["closefoundresultslist",{"_index":587,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["closeguide",{"_index":2166,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["closeloader",{"_index":1880,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["closeproject",{"_index":989,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["closescene",{"_index":2179,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["closeviewroom",{"_index":2213,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["coeff_proportions",{"_index":2235,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["color",{"_index":608,"title":{},"body":{"components/FinderComponent.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/reportResponse.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/shopData.html":{}}}],["color:white",{"_index":1263,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["color_button_element",{"_index":1455,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["color_button_element.getattribute('data",{"_index":1460,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["color_button_element.style.setproperty('margin",{"_index":1471,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["colorbutton",{"_index":1447,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["colorclientdata",{"_index":704,"title":{"interfaces/colorClientData.html":{}},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["colordata",{"_index":525,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["colordata.color",{"_index":721,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["colordata.imagesdata.idmainimage",{"_index":531,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["colordata.imagesdata.images.length",{"_index":542,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["colordata.imagesdata.images.map(url",{"_index":722,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["colorfromserverdata",{"_index":705,"title":{"interfaces/colorFromServerData.html":{}},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["colorrequest",{"_index":627,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["colors",{"_index":463,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/ShopService.html":{},"interfaces/additionalData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"interfaces/shopData.html":{}}}],["colors.length",{"_index":550,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["colors_element",{"_index":1457,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["colors_element.queryselectorall('.colorvariant",{"_index":1462,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["colors_variants",{"_index":1461,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["colors_variants.foreach((colorvariant",{"_index":1465,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["colorvariant",{"_index":1467,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["column",{"_index":1186,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["commonmodule",{"_index":1625,"title":{},"body":{"interfaces/editForm.html":{}}}],["component",{"_index":185,"title":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{}},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"coverage.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["component_template",{"_index":247,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["components",{"_index":187,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"index.html":{}}}],["components/image",{"_index":701,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"injectables/ServerImageControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["components/notification/notification.component",{"_index":222,"title":{},"body":{"components/AppComponent.html":{}}}],["components/plan",{"_index":219,"title":{},"body":{"components/AppComponent.html":{}}}],["components/scene/scene.component",{"_index":218,"title":{},"body":{"components/AppComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{}}}],["components/upload",{"_index":237,"title":{},"body":{"components/AppComponent.html":{}}}],["compressed_image",{"_index":1662,"title":{},"body":{"interfaces/editForm.html":{}}}],["compressedfile",{"_index":386,"title":{},"body":{"injectables/ClientImageControlService.html":{}}}],["compressimage",{"_index":373,"title":{},"body":{"injectables/ClientImageControlService.html":{}}}],["compressimage(image",{"_index":374,"title":{},"body":{"injectables/ClientImageControlService.html":{}}}],["compressor",{"_index":378,"title":{},"body":{"injectables/ClientImageControlService.html":{}}}],["compressor(image",{"_index":382,"title":{},"body":{"injectables/ClientImageControlService.html":{}}}],["compressor.js",{"_index":376,"title":{},"body":{"injectables/ClientImageControlService.html":{}}}],["compressorjs",{"_index":379,"title":{},"body":{"injectables/ClientImageControlService.html":{},"dependencies.html":{}}}],["config",{"_index":1492,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["console.error",{"_index":388,"title":{},"body":{"injectables/ClientImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["console.error('error",{"_index":181,"title":{},"body":{"injectables/AccountService.html":{},"injectables/FurnitureCardControlService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["console.error(error",{"_index":505,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{}}}],["console.log(error",{"_index":1059,"title":{},"body":{"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["const",{"_index":64,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/shopData.html":{}}}],["constructor",{"_index":19,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/MainPageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientProportions.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/googleAuthData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{}}}],["constructor(accountservice",{"_index":998,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["constructor(cookieservice",{"_index":20,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["constructor(elementref",{"_index":817,"title":{},"body":{"components/MainPageComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["constructor(finderservice",{"_index":594,"title":{},"body":{"components/FinderComponent.html":{}}}],["constructor(furniturecardservice",{"_index":1416,"title":{},"body":{"injectables/UploadService.html":{}}}],["constructor(httpmodule",{"_index":100,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{}}}],["constructor(notification",{"_index":762,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{}}}],["constructor(notificationservice",{"_index":939,"title":{},"body":{"components/NotificationComponent.html":{}}}],["constructor(private",{"_index":681,"title":{},"body":{"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/additionalData.html":{},"interfaces/clientFilters.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"interfaces/shopData.html":{}}}],["constructor(public",{"_index":1407,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["constructor(route",{"_index":427,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["constructor(uploadservice",{"_index":1394,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["contain",{"_index":1258,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["content",{"_index":1207,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["content:center",{"_index":1252,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["control.service",{"_index":228,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"injectables/ReportService.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData-1.html":{}}}],["control.service.ts",{"_index":372,"title":{},"body":{"injectables/ClientImageControlService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"injectables/ServerImageControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["control.service.ts:108",{"_index":1312,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["control.service.ts:11",{"_index":1302,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["control.service.ts:112",{"_index":686,"title":{},"body":{"injectables/FurnitureCardControlService.html":{}}}],["control.service.ts:12",{"_index":732,"title":{},"body":{"injectables/FurnitureModelControlService.html":{}}}],["control.service.ts:127",{"_index":691,"title":{},"body":{"injectables/FurnitureCardControlService.html":{}}}],["control.service.ts:178",{"_index":694,"title":{},"body":{"injectables/FurnitureCardControlService.html":{}}}],["control.service.ts:19",{"_index":375,"title":{},"body":{"injectables/ClientImageControlService.html":{}}}],["control.service.ts:195",{"_index":696,"title":{},"body":{"injectables/FurnitureCardControlService.html":{}}}],["control.service.ts:20",{"_index":1308,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["control.service.ts:214",{"_index":689,"title":{},"body":{"injectables/FurnitureCardControlService.html":{}}}],["control.service.ts:25",{"_index":738,"title":{},"body":{"injectables/FurnitureModelControlService.html":{}}}],["control.service.ts:30",{"_index":1316,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["control.service.ts:45",{"_index":1314,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["control.service.ts:46",{"_index":741,"title":{},"body":{"injectables/FurnitureModelControlService.html":{}}}],["control.service.ts:56",{"_index":734,"title":{},"body":{"injectables/FurnitureModelControlService.html":{}}}],["control.service.ts:59",{"_index":1484,"title":{},"body":{"interfaces/additionalData.html":{}}}],["control.service.ts:65",{"_index":1306,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["control.service.ts:80",{"_index":1304,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["control.service.ts:94",{"_index":1310,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["controller",{"_index":736,"title":{},"body":{"injectables/FurnitureModelControlService.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["controller.signal",{"_index":751,"title":{},"body":{"injectables/FurnitureModelControlService.html":{}}}],["controls",{"_index":1731,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["cookie",{"_index":55,"title":{},"body":{"injectables/AccountCookieService.html":{},"components/NotificationComponent.html":{},"dependencies.html":{}}}],["cookie.service",{"_index":132,"title":{},"body":{"injectables/AccountService.html":{},"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientProportions.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["cookie.service.ts",{"_index":7,"title":{},"body":{"injectables/AccountCookieService.html":{},"coverage.html":{}}}],["cookie.service.ts:18",{"_index":47,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["cookie.service.ts:31",{"_index":33,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["cookie.service.ts:38",{"_index":42,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["cookie.service.ts:49",{"_index":35,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["cookie.service.ts:56",{"_index":32,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["cookie.service.ts:64",{"_index":37,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["cookie.service.ts:72",{"_index":51,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["cookie.service.ts:8",{"_index":23,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["cookie.service.ts:82",{"_index":39,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["cookie.service.ts:89",{"_index":29,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["cookies",{"_index":1017,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["cookieservice",{"_index":21,"title":{},"body":{"injectables/AccountCookieService.html":{},"components/CreateFurniturePageComponent.html":{},"components/NotificationComponent.html":{},"interfaces/clientProportions.html":{}}}],["copyshoplink",{"_index":1432,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["copyshoplink(furnitureurl",{"_index":1440,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["core",{"_index":1619,"title":{},"body":{"dependencies.html":{}}}],["cost",{"_index":626,"title":{},"body":{"components/FinderComponent.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/ReportService.html":{},"injectables/ShopService.html":{},"interfaces/additionalData.html":{},"interfaces/clientFilters.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"interfaces/reportResponse.html":{},"interfaces/shopData.html":{}}}],["cost.tostring().replace(/\\b(?=(\\d{3})+(?!\\d))/g",{"_index":1281,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["costformat",{"_index":396,"title":{},"body":{"pipes/CostFormatPipe.html":{},"components/FinderComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["costformatpipe",{"_index":392,"title":{"pipes/CostFormatPipe.html":{}},"body":{"pipes/CostFormatPipe.html":{},"components/FinderComponent.html":{},"components/ViewFurnitureComponent.html":{},"coverage.html":{},"interfaces/foundFurniture.html":{}}}],["costpipe",{"_index":1128,"title":{},"body":{"injectables/ReportService.html":{}}}],["costpipe(cost",{"_index":1135,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["courier",{"_index":1170,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["coverage",{"_index":1485,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":252,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/UploadEntry.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"miscellaneous/typealiases.html":{}}}],["createaccountdata",{"_index":116,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{},"miscellaneous/typealiases.html":{}}}],["createaccountdata.accounttype",{"_index":153,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["createaccountdata.email",{"_index":158,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["createaccountdata.nickname",{"_index":155,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["createaccountdata.password",{"_index":160,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["createemailaccountdata",{"_index":147,"title":{"interfaces/createEmailAccountData.html":{}},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{},"miscellaneous/typealiases.html":{}}}],["createfurniture",{"_index":826,"title":{},"body":{"components/MainPageComponent.html":{}}}],["createfurniturecard",{"_index":418,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["createfurniturecomponent",{"_index":251,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"coverage.html":{}}}],["createfurniturecomponentref",{"_index":412,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["createfurniturepagecomponent",{"_index":254,"title":{"components/CreateFurniturePageComponent.html":{}},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"coverage.html":{}}}],["createproject",{"_index":990,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["createreport",{"_index":1129,"title":{},"body":{"injectables/ReportService.html":{}}}],["createreport(roomdata",{"_index":1137,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["createreporthtml",{"_index":1130,"title":{},"body":{"injectables/ReportService.html":{}}}],["createreporthtml(roomdata",{"_index":1139,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["createroom",{"_index":1821,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["createroomshape(widthratio",{"_index":1861,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["createroundedrectanglegeometry(width",{"_index":1810,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["css",{"_index":603,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["current",{"_index":916,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["current_project_id",{"_index":1067,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["current_route",{"_index":646,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["current_route.firstchild",{"_index":648,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["current_route.snapshot.data['pagename",{"_index":650,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["currentcolorid",{"_index":1431,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["currentidclickedroom",{"_index":2011,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["currentplanhouse",{"_index":984,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["currentprojectid",{"_index":985,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["currentviewroom",{"_index":2009,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["cursor",{"_index":2120,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["dad7cd",{"_index":1179,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["dashed",{"_index":2237,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["data",{"_index":893,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["date",{"_index":67,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["date.now().tostring",{"_index":889,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["debounce",{"_index":614,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["debouncetimer",{"_index":581,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["decoration",{"_index":1246,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["decorators",{"_index":458,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/PlanHousePageComponent.html":{}}}],["default",{"_index":122,"title":{},"body":{"injectables/AccountService.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":22,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/additionalData.html":{},"interfaces/queryData.html":{}}}],["delay",{"_index":964,"title":{},"body":{"injectables/NotificationService.html":{}}}],["delete/color",{"_index":1327,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["delete/project",{"_index":1328,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["deleteaccount",{"_index":94,"title":{},"body":{"injectables/AccountService.html":{}}}],["deleteaccount(jwt",{"_index":107,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["deleteaccountjwt",{"_index":95,"title":{},"body":{"injectables/AccountService.html":{}}}],["deleteaccountjwt(jwt",{"_index":110,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["deleteaccounttype",{"_index":10,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["deletecolor",{"_index":419,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["deletecolorcalculate",{"_index":420,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["deletedeleteproject",{"_index":1090,"title":{},"body":{"injectables/ProjectService.html":{}}}],["deletedeleteproject(jwt",{"_index":1097,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["deletefurniturecard",{"_index":421,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"interfaces/clientProportions.html":{}}}],["deletefurniturecard(jwt",{"_index":687,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["deletefurnituremodel",{"_index":728,"title":{},"body":{"injectables/FurnitureModelControlService.html":{}}}],["deletefurnituremodel(jwt",{"_index":733,"title":{},"body":{"injectables/FurnitureModelControlService.html":{}}}],["deleteguiderule",{"_index":11,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["deletejwt",{"_index":12,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["deletemodel",{"_index":1966,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["deleteproject",{"_index":991,"title":{},"body":{"components/PlanHousePageComponent.html":{},"injectables/ServerImageControlService.html":{}}}],["deleteproject(indexproject",{"_index":1005,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["deleteproject(jwt",{"_index":1303,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["deleteprojectcolor",{"_index":1296,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["deleteprojectcolor(jwt",{"_index":1305,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["deleteroom",{"_index":2191,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["dependencies",{"_index":1581,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["description",{"_index":48,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/ClientImageControlService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"miscellaneous/functions.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["direction",{"_index":1185,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["directive",{"_index":245,"title":{"directives/AutoHeightDirective.html":{}},"body":{"components/AppComponent.html":{},"directives/AutoHeightDirective.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"coverage.html":{},"index.html":{}}}],["directives",{"_index":279,"title":{},"body":{"components/AppComponent.html":{},"directives/AutoHeightDirective.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["directives/auto",{"_index":235,"title":{},"body":{"components/AppComponent.html":{}}}],["disabled",{"_index":1080,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["display",{"_index":1183,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{},"interfaces/roomSpanSettings.html":{}}}],["docheck",{"_index":475,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["document.createelement('a",{"_index":1289,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["document.documentelement.scrolltop",{"_index":2074,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["documentation",{"_index":1486,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":189,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/foundFurniture.html":{}}}],["downloadbutton",{"_index":1288,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["downloadbutton.click",{"_index":1293,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["downloadbutton.download",{"_index":1291,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["downloadbutton.href",{"_index":1290,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["downloadhtml",{"_index":1131,"title":{},"body":{"injectables/ReportService.html":{}}}],["downloadhtml(roomname",{"_index":1141,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["dragged_element",{"_index":2116,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["e",{"_index":1923,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["ease",{"_index":1222,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["editform",{"_index":1501,"title":{"interfaces/editForm.html":{}},"body":{"coverage.html":{},"interfaces/editForm.html":{}}}],["el",{"_index":317,"title":{},"body":{"directives/AutoHeightDirective.html":{}}}],["elem.queryselectorall('*').foreach(child",{"_index":841,"title":{},"body":{"components/MainPageComponent.html":{}}}],["elemenetref",{"_index":999,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["element",{"_index":244,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["elementref",{"_index":333,"title":{},"body":{"directives/AutoHeightDirective.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/MainPageComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/foundFurniture.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["email",{"_index":40,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"injectables/AuthService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"miscellaneous/functions.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/googleAuthData.html":{},"miscellaneous/typealiases.html":{}}}],["emailauthdata",{"_index":299,"title":{"interfaces/emailAuthData.html":{}},"body":{"injectables/AuthService.html":{},"coverage.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{},"miscellaneous/typealiases.html":{}}}],["emitplanhouse",{"_index":2048,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["enable",{"_index":2195,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["end_column",{"_index":2082,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["end_row",{"_index":2084,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["endcolumn",{"_index":2061,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["endpoint",{"_index":854,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["endrow",{"_index":2060,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["endx",{"_index":1980,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["endy",{"_index":1981,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["error",{"_index":180,"title":{},"body":{"injectables/AccountService.html":{},"injectables/ClientImageControlService.html":{},"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"interfaces/MyXhrUploadOptions.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"interfaces/roomData-1.html":{},"interfaces/shopData.html":{},"miscellaneous/typealiases.html":{}}}],["error('invalid",{"_index":716,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["error.interceptor.ts",{"_index":760,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{},"coverage.html":{}}}],["error.interceptor.ts:14",{"_index":763,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{}}}],["error.interceptor.ts:30",{"_index":768,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{}}}],["error.message",{"_index":389,"title":{},"body":{"injectables/ClientImageControlService.html":{}}}],["error.name",{"_index":1374,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["errormessage",{"_index":935,"title":{},"body":{"components/NotificationComponent.html":{}}}],["errormessage||successmessage",{"_index":955,"title":{},"body":{"components/NotificationComponent.html":{}}}],["errorsubject",{"_index":957,"title":{},"body":{"injectables/NotificationService.html":{}}}],["errortext",{"_index":1364,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["escapedraggingmode",{"_index":2158,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["event",{"_index":326,"title":{},"body":{"directives/AutoHeightDirective.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"interfaces/editForm.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["event.changedtouches[0",{"_index":2113,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["event.changedtouches[0].clienty",{"_index":2132,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["event.clientx",{"_index":1896,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["event.clienty",{"_index":1899,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["event.key",{"_index":1918,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["event.preventdefault",{"_index":2129,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["event.target",{"_index":340,"title":{},"body":{"directives/AutoHeightDirective.html":{},"interfaces/editForm.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["event_target",{"_index":2161,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["eventemitter",{"_index":1709,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["eventtarget",{"_index":1445,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["expirationdate",{"_index":65,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["expirationdate.setdate(expirationdate.getdate",{"_index":68,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["expirationdate.setminutes(expirationdate.getminutes",{"_index":70,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["expires",{"_index":73,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["export",{"_index":60,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["extends",{"_index":363,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/ProjectService.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/rangeFilter.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["extension",{"_index":905,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["f18dc4",{"_index":2135,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["face",{"_index":1164,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["false",{"_index":79,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"directives/AutoHeightDirective.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientProportions.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["family",{"_index":1165,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["fbx",{"_index":1701,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fetch",{"_index":1361,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["fetch(bloburl.tostring",{"_index":510,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["fetch(imagedataurl",{"_index":1959,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["fetch(url.tostring",{"_index":748,"title":{},"body":{"injectables/FurnitureModelControlService.html":{}}}],["field",{"_index":358,"title":{},"body":{"injectables/CategoryService.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/option.html":{},"interfaces/rangeFilter.html":{},"interfaces/selectFilter.html":{}}}],["fieldname",{"_index":855,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["file",{"_index":5,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["file.data",{"_index":879,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["file.data.name",{"_index":881,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["file.id",{"_index":912,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["file.meta.name",{"_index":878,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["file.meta['furniturecardid",{"_index":899,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["file.meta['uploadtype",{"_index":901,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["file.name",{"_index":1410,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["file.progress.percentage",{"_index":883,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["file.status",{"_index":1411,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["file.type",{"_index":892,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["fileid",{"_index":913,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["filename",{"_index":1421,"title":{},"body":{"injectables/UploadService.html":{}}}],["filename.split",{"_index":904,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["filereader",{"_index":1155,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["filter",{"_index":356,"title":{},"body":{"injectables/CategoryService.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"coverage.html":{},"interfaces/option.html":{},"interfaces/rangeFilter.html":{},"interfaces/selectFilter.html":{},"miscellaneous/typealiases.html":{}}}],["filters",{"_index":355,"title":{},"body":{"injectables/CategoryService.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/option.html":{},"interfaces/rangeFilter.html":{},"interfaces/selectFilter.html":{}}}],["filtersobject",{"_index":1376,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["filtersobject.colors",{"_index":1383,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["filtersobject.colors.push(...furnituredata.colors",{"_index":1381,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["filtersobject.maxcost",{"_index":1380,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["filtersobject.mincost",{"_index":1382,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["find?q",{"_index":675,"title":{},"body":{"injectables/FinderService.html":{}}}],["finder",{"_index":574,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["finder'},{'name",{"_index":257,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["finder.component.html",{"_index":578,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["finder.component.scss",{"_index":579,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["finder/finder.component",{"_index":930,"title":{},"body":{"components/NavigationPanelComponent.html":{}}}],["findercomponent",{"_index":256,"title":{"components/FinderComponent.html":{}},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"coverage.html":{},"interfaces/foundFurniture.html":{}}}],["finderinput",{"_index":822,"title":{},"body":{"components/MainPageComponent.html":{}}}],["finderservice",{"_index":204,"title":{"injectables/FinderService.html":{}},"body":{"components/AppComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"coverage.html":{},"interfaces/foundFurniture.html":{}}}],["findfreespace(roomproportions",{"_index":2052,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["findfurnitures",{"_index":588,"title":{},"body":{"components/FinderComponent.html":{}}}],["findfurnitures(findstring",{"_index":604,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["findstring",{"_index":606,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["firstvaluefrom",{"_index":133,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/roomData.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["firstvaluefrom(this.httpmodule.delete(this.baseserviceurl",{"_index":163,"title":{},"body":{"injectables/AccountService.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["firstvaluefrom(this.httpmodule.get(this.baseserviceurl",{"_index":174,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/FinderService.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"interfaces/accountFullData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/googleAuthData.html":{},"interfaces/option.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/rangeFilter.html":{},"interfaces/roomData.html":{},"interfaces/selectFilter.html":{}}}],["firstvaluefrom(this.httpmodule.post(`${baseurl}account/avatar",{"_index":1321,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["firstvaluefrom(this.httpmodule.post(this.baseserviceurl",{"_index":161,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/googleAuthData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["firstvaluefrom(this.httpmodule.put(this.baseserviceurl",{"_index":169,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/ProjectService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/googleAuthData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["fit",{"_index":1236,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["fixpath",{"_index":1784,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["flex",{"_index":1184,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{},"interfaces/roomSpanSettings.html":{}}}],["floor_size",{"_index":1841,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["floor_size.length",{"_index":1852,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["floor_size.width",{"_index":1849,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["focusfinder",{"_index":813,"title":{},"body":{"components/MainPageComponent.html":{}}}],["font",{"_index":1163,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["format('truetype",{"_index":1169,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["format.pipe",{"_index":625,"title":{},"body":{"components/FinderComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/foundFurniture.html":{}}}],["format.pipe.ts",{"_index":395,"title":{},"body":{"pipes/CostFormatPipe.html":{},"coverage.html":{}}}],["format.pipe.ts:12",{"_index":399,"title":{},"body":{"pipes/CostFormatPipe.html":{}}}],["formcontrol",{"_index":1031,"title":{},"body":{"components/PlanHousePageComponent.html":{},"interfaces/editForm.html":{},"interfaces/roomSpanSettings.html":{}}}],["formcontrol(null",{"_index":2240,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["formcontrol(this.accountdata?.nickname",{"_index":1671,"title":{},"body":{"interfaces/editForm.html":{}}}],["formcontrol(this.accountdata?.password",{"_index":1675,"title":{},"body":{"interfaces/editForm.html":{}}}],["formdata",{"_index":856,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"injectables/ServerImageControlService.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["formdata.append('image",{"_index":1320,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["formdata.append('images",{"_index":1323,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["formelement",{"_index":2002,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["formgroup",{"_index":1030,"title":{},"body":{"components/PlanHousePageComponent.html":{},"interfaces/editForm.html":{},"interfaces/roomSpanSettings.html":{}}}],["found_intersection",{"_index":1907,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["found_intersection.parent",{"_index":1911,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["foundfurniture",{"_index":582,"title":{"interfaces/foundFurniture.html":{}},"body":{"components/FinderComponent.html":{},"coverage.html":{},"interfaces/foundFurniture.html":{}}}],["fromobject",{"_index":166,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/googleAuthData.html":{}}}],["function",{"_index":148,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/MyXhrUploadOptions.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["functions",{"_index":1687,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["functions.used",{"_index":623,"title":{},"body":{"components/FinderComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"interfaces/foundFurniture.html":{}}}],["functions.used.ts",{"_index":1577,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["furnitre/create",{"_index":479,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/MainPageComponent.html":{},"interfaces/clientProportions.html":{},"coverage.html":{}}}],["furniture",{"_index":255,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"injectables/ReportService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"coverage.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"interfaces/reportResponse.html":{}}}],["furniture'},{'name",{"_index":253,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["furniture,app",{"_index":839,"title":{},"body":{"components/MainPageComponent.html":{}}}],["furniture.component",{"_index":480,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/MainPageComponent.html":{},"interfaces/clientProportions.html":{}}}],["furniture.component.html",{"_index":1429,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["furniture.component.scss",{"_index":1430,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["furniture.component.ts",{"_index":1427,"title":{},"body":{"components/ViewFurnitureComponent.html":{},"coverage.html":{}}}],["furniture.component.ts:17",{"_index":1437,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["furniture.component.ts:26",{"_index":1450,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["furniture.component.ts:30",{"_index":1438,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["furniture.component.ts:34",{"_index":1439,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["furniture.component.ts:36",{"_index":1443,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["furniture.component.ts:46",{"_index":1446,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["furniture.component.ts:73",{"_index":1449,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["furniture.component.ts:77",{"_index":1441,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["furniture.name",{"_index":1274,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["furniture.previewurl",{"_index":1372,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["furniture.proportions.height}c",{"_index":1276,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["furniture.proportions.length}c",{"_index":1277,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["furniture.proportions.width}c",{"_index":1275,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["furniture.shops.map(shopdata",{"_index":1278,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["furniture/card",{"_index":698,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["furniture/images",{"_index":1318,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["furniture/model",{"_index":743,"title":{},"body":{"injectables/FurnitureModelControlService.html":{},"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["furniture/view",{"_index":835,"title":{},"body":{"components/MainPageComponent.html":{},"components/ViewFurnitureComponent.html":{},"coverage.html":{}}}],["furniture_card_id",{"_index":898,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["furniture_data",{"_index":519,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["furniture_data.colors.foreach(async",{"_index":524,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["furniture_id",{"_index":521,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["furniture_model_blob",{"_index":533,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["furniture_model_blob[0",{"_index":547,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["furnitureaccountdata",{"_index":143,"title":{"interfaces/furnitureAccountData.html":{}},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["furniturebasedata",{"_index":707,"title":{"interfaces/furnitureBaseData.html":{}},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["furniturecard",{"_index":713,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["furniturecardcontrolservice",{"_index":201,"title":{"injectables/FurnitureCardControlService.html":{}},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/additionalData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/shopData.html":{}}}],["furniturecardid",{"_index":688,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interfaces/MyXhrUploadOptions.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/additionalData.html":{},"interfaces/clientFilters.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData-1.html":{},"interfaces/shopData.html":{}}}],["furniturecardservice",{"_index":429,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["furniturecardupdatedata",{"_index":697,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["furnitureclientdata",{"_index":708,"title":{"interfaces/furnitureClientData.html":{}},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["furnituredata",{"_index":177,"title":{},"body":{"injectables/AccountService.html":{},"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/ProjectService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{},"interfaces/shopData.html":{}}}],["furnituredata.cost",{"_index":1379,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["furnituredata.name",{"_index":1480,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["furnituredata.previewurl",{"_index":178,"title":{},"body":{"injectables/AccountService.html":{},"injectables/ProjectService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["furnitureexampledata",{"_index":810,"title":{},"body":{"components/MainPageComponent.html":{}}}],["furniturefooter",{"_index":1227,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["furniturefromserverdata",{"_index":481,"title":{"interfaces/furnitureFromServerData.html":{}},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/additionalData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["furnitureimage",{"_index":1224,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["furniturelink",{"_index":1262,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["furnituremodelcontrolservice",{"_index":202,"title":{"injectables/FurnitureModelControlService.html":{}},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureModelControlService.html":{},"interfaces/clientProportions.html":{},"coverage.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["furnituremodelinput",{"_index":564,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["furnituremodelservice",{"_index":432,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["furniturename",{"_index":664,"title":{},"body":{"injectables/FinderService.html":{}}}],["furnitureproportions",{"_index":703,"title":{"interfaces/furnitureProportions.html":{}},"body":{"injectables/FurnitureCardControlService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["furnitures",{"_index":142,"title":{},"body":{"injectables/AccountService.html":{},"injectables/ReportService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/reportResponse.html":{}}}],["furnitureshopdata",{"_index":1335,"title":{"interfaces/furnitureShopData.html":{}},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"coverage.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["furnituresize",{"_index":1771,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["furnituresspantitle",{"_index":1209,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["furnituretemplate",{"_index":811,"title":{},"body":{"components/MainPageComponent.html":{}}}],["furnituretitle",{"_index":555,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/ReportService.html":{},"interfaces/clientProportions.html":{},"interfaces/reportResponse.html":{}}}],["furnitureurl",{"_index":1442,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["gap",{"_index":1228,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{},"interfaces/roomSpanSettings.html":{}}}],["general_coefficient",{"_index":1870,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["generatehtmlcontent",{"_index":1132,"title":{},"body":{"injectables/ReportService.html":{}}}],["generatehtmlcontent(roomdata",{"_index":1145,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["geometry",{"_index":1819,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["getaccount",{"_index":97,"title":{},"body":{"injectables/AccountService.html":{}}}],["getaccount(jwt",{"_index":112,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["getaccountavatar",{"_index":1297,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["getaccountavatar(jwt",{"_index":1307,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["getallprojectimages",{"_index":1298,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["getallprojectimages(furniturecardid",{"_index":1309,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["getcurrentcolorid",{"_index":422,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["getcurrentviewroom",{"_index":992,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["getfileextension",{"_index":1413,"title":{},"body":{"injectables/UploadService.html":{}}}],["getfileextension(filename",{"_index":902,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["getfindfurnitures",{"_index":666,"title":{},"body":{"injectables/FinderService.html":{}}}],["getfindfurnitures(query",{"_index":670,"title":{},"body":{"injectables/FinderService.html":{}}}],["getfindoptionsbyresult",{"_index":1331,"title":{},"body":{"injectables/ShopService.html":{}}}],["getfindoptionsbyresult(resultsarray",{"_index":1334,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["getfurniturecard",{"_index":182,"title":{},"body":{"injectables/AccountService.html":{},"injectables/FurnitureCardControlService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["getfurniturecard(furniturecardid",{"_index":690,"title":{},"body":{"injectables/FurnitureCardControlService.html":{}}}],["getfurnituremodel",{"_index":729,"title":{},"body":{"injectables/FurnitureModelControlService.html":{}}}],["getfurnituremodel(jwt",{"_index":735,"title":{},"body":{"injectables/FurnitureModelControlService.html":{}}}],["getgetallcategories",{"_index":348,"title":{},"body":{"injectables/CategoryService.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/option.html":{},"interfaces/rangeFilter.html":{},"interfaces/selectFilter.html":{}}}],["getgetcategorydata",{"_index":1332,"title":{},"body":{"injectables/ShopService.html":{}}}],["getgetcategorydata(categoryname",{"_index":1339,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["getgetproject",{"_index":1091,"title":{},"body":{"injectables/ProjectService.html":{}}}],["getgetproject(jwt",{"_index":1100,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["getgetreportofroom",{"_index":1092,"title":{},"body":{"injectables/ProjectService.html":{}}}],["getgetreportofroom(jwt",{"_index":1102,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["getguiderule",{"_index":13,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["getimage",{"_index":589,"title":{},"body":{"components/FinderComponent.html":{}}}],["getimage(idfurniture",{"_index":607,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["getitemscount",{"_index":788,"title":{},"body":{"components/ImageSliderComponent.html":{}}}],["getjwt",{"_index":14,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["getmainimage",{"_index":1299,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["getmainimage(furniturecardid",{"_index":1311,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["getreport",{"_index":1950,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["getrequestpasswordcode",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{}}}],["getrequestpasswordcode(email",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{}}}],["getresponseerror",{"_index":857,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["geturl",{"_index":590,"title":{},"body":{"components/FinderComponent.html":{}}}],["geturl(idfurniture",{"_index":611,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["getusertype",{"_index":15,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["glb.loader.ts",{"_index":1534,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["gltf/glb",{"_index":1700,"title":{},"body":{"miscellaneous/functions.html":{}}}],["google",{"_index":41,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"injectables/AuthService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/googleAuthData.html":{},"miscellaneous/typealiases.html":{}}}],["googleauthdata",{"_index":300,"title":{"interfaces/googleAuthData.html":{}},"body":{"injectables/AuthService.html":{},"coverage.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{},"miscellaneous/typealiases.html":{}}}],["grabbing",{"_index":2118,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["grid",{"_index":1993,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["grid_area",{"_index":2093,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["grid_occupied",{"_index":2054,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["grid_size",{"_index":2053,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["gridarea",{"_index":1116,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{},"interfaces/roomSpanSettings.html":{}}}],["guideinclude",{"_index":36,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["guidetemplate",{"_index":2012,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["hasbeenchanged",{"_index":1746,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["hasroomidbeenprocessed",{"_index":986,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["height",{"_index":468,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/ReportService.html":{},"interfaces/additionalData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/shopData.html":{}}}],["height.directive",{"_index":236,"title":{},"body":{"components/AppComponent.html":{}}}],["height.directive.ts",{"_index":314,"title":{},"body":{"directives/AutoHeightDirective.html":{},"coverage.html":{}}}],["height.directive.ts:12",{"_index":332,"title":{},"body":{"directives/AutoHeightDirective.html":{}}}],["height.directive.ts:19",{"_index":322,"title":{},"body":{"directives/AutoHeightDirective.html":{}}}],["height.directive.ts:27",{"_index":323,"title":{},"body":{"directives/AutoHeightDirective.html":{}}}],["height.directive.ts:38",{"_index":327,"title":{},"body":{"directives/AutoHeightDirective.html":{}}}],["height:40px",{"_index":1251,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["heightratio",{"_index":1860,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["hemisphere_light",{"_index":1791,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["hemispherelight",{"_index":1885,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["hostlistener",{"_index":334,"title":{},"body":{"directives/AutoHeightDirective.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["hostlistener('click",{"_index":1890,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["hostlistener('document:contextmenu",{"_index":2153,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["hostlistener('document:keydown.arrowdown",{"_index":2137,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["hostlistener('document:keydown.arrowleft",{"_index":2139,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["hostlistener('document:keydown.arrowright",{"_index":2138,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["hostlistener('document:keydown.arrowup",{"_index":2136,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["hostlistener('document:keydown.escape",{"_index":2157,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["hostlistener('document:keyup.enter",{"_index":2105,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["hostlistener('document:mouseleave",{"_index":2100,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["hostlistener('document:mousemove",{"_index":2127,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["hostlistener('document:mouseup",{"_index":2106,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["hostlistener('document:touchend",{"_index":2104,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["hostlistener('document:touchmove",{"_index":2128,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["hostlistener('mousemove",{"_index":1924,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["hostlistener('window:keydown",{"_index":1912,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["hostlistener('window:resize",{"_index":798,"title":{},"body":{"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["hostlistener('window:scroll",{"_index":2155,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["hostlisteners",{"_index":790,"title":{},"body":{"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{}}}],["house",{"_index":271,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"coverage.html":{},"interfaces/roomSpanSettings.html":{}}}],["house'},{'name",{"_index":269,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["house.component",{"_index":221,"title":{},"body":{"components/AppComponent.html":{},"components/MainPageComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["house.component.html",{"_index":1990,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["house.component.scss",{"_index":1991,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["house.component.ts",{"_index":1524,"title":{},"body":{"coverage.html":{},"interfaces/roomSpanSettings.html":{}}}],["house/plan",{"_index":220,"title":{},"body":{"components/AppComponent.html":{},"components/MainPageComponent.html":{},"components/PlanHousePageComponent.html":{},"coverage.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["housequality",{"_index":215,"title":{},"body":{"components/AppComponent.html":{},"components/MainPageComponent.html":{}}}],["hover",{"_index":1264,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["hq",{"_index":931,"title":{},"body":{"components/NavigationPanelComponent.html":{}}}],["html",{"_index":243,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"injectables/ReportService.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/foundFurniture.html":{},"interfaces/reportResponse.html":{},"interfaces/roomSpanSettings.html":{}}}],["html2canvas",{"_index":1600,"title":{},"body":{"dependencies.html":{}}}],["html2pdf.js",{"_index":1602,"title":{},"body":{"dependencies.html":{}}}],["htmlbuttonelement",{"_index":1456,"title":{},"body":{"components/ViewFurnitureComponent.html":{},"interfaces/roomSpanSettings.html":{}}}],["htmlbuttonelement).style.setproperty",{"_index":1468,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["htmlcanvaselement).getboundingclientrect",{"_index":1895,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["htmlcontent",{"_index":1149,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["htmldivelement",{"_index":2092,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["htmlformelement",{"_index":2003,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["htmlinputelement",{"_index":556,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{}}}],["htmlspanelement",{"_index":620,"title":{},"body":{"components/FinderComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/foundFurniture.html":{},"interfaces/roomSpanSettings.html":{}}}],["htmltextareaelement",{"_index":341,"title":{},"body":{"directives/AutoHeightDirective.html":{}}}],["htmlurl",{"_index":1142,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["http",{"_index":669,"title":{},"body":{"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["http://localhost:4200",{"_index":2264,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http_interceptors",{"_index":2261,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http_params",{"_index":151,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/googleAuthData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{},"interfaces/shopData.html":{}}}],["http_params.set('jwt",{"_index":711,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["httpclient",{"_index":101,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/roomData.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["httperrorinterceptor",{"_index":757,"title":{"interceptors/HttpErrorInterceptor.html":{}},"body":{"interceptors/HttpErrorInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["httperrorresponse",{"_index":772,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{}}}],["httpevent",{"_index":770,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{}}}],["httphandler",{"_index":767,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{}}}],["httpinterceptor",{"_index":771,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{}}}],["httpmodule",{"_index":103,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/roomData.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["httpparams",{"_index":130,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/googleAuthData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{},"interfaces/shopData.html":{}}}],["httpparams().set('furniturecardid",{"_index":710,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["httpparams().set('jwt",{"_index":723,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"injectables/ServerImageControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["httprequest",{"_index":765,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{}}}],["id",{"_index":449,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interfaces/MyXhrUploadOptions.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/additionalData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/shopData.html":{}}}],["idb",{"_index":1604,"title":{},"body":{"dependencies.html":{}}}],["idcolor",{"_index":1459,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["identifier",{"_index":1487,"title":{},"body":{"coverage.html":{}}}],["idfurniture",{"_index":610,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["idmainimage",{"_index":530,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"components/ImageSliderComponent.html":{},"interfaces/additionalData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/shopData.html":{}}}],["idpage",{"_index":414,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["if(changeimagescounter",{"_index":544,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["if(this.routesub)this.routesub.unsubscribe",{"_index":496,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["if(this.scenecomponent.hasbeenchanged)this.scenecomponent.loadroom",{"_index":2178,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["image",{"_index":227,"title":{},"body":{"components/AppComponent.html":{},"injectables/ClientImageControlService.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"injectables/ServerImageControlService.html":{},"interfaces/UploadEntry.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"coverage.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{}}}],["imageclientcontrolservice",{"_index":1631,"title":{},"body":{"interfaces/editForm.html":{}}}],["imagedatablob",{"_index":1963,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["imagedataresponse",{"_index":1958,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["imagedataresponse.blob",{"_index":1964,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["imagedataresponse.ok",{"_index":1962,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["imagedataurl",{"_index":1956,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["imagefile",{"_index":1317,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["images",{"_index":529,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"components/ImageSliderComponent.html":{},"interfaces/additionalData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/shopData.html":{}}}],["images_blob_array",{"_index":506,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["images_data",{"_index":543,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["imagesarray",{"_index":456,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["imagesarray.map(async",{"_index":508,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["imagesblobarray",{"_index":526,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["imagesdata",{"_index":528,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"components/ImageSliderComponent.html":{},"injectables/ServerImageControlService.html":{},"interfaces/additionalData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["imagesdata.idmainimage",{"_index":1326,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["imagesdata.idmainimage===i",{"_index":807,"title":{},"body":{"components/ImageSliderComponent.html":{}}}],["imagesdata.images.foreach((file",{"_index":1322,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["imageservercontrolservice",{"_index":1630,"title":{},"body":{"interfaces/editForm.html":{}}}],["imageservice",{"_index":597,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["imagesliderclientdata",{"_index":484,"title":{"interfaces/imageSliderClientData.html":{}},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"components/ImageSliderComponent.html":{},"injectables/ServerImageControlService.html":{},"interfaces/additionalData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/shopData.html":{}}}],["imageslidercomponent",{"_index":258,"title":{"components/ImageSliderComponent.html":{}},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"coverage.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{}}}],["imagesliderfromserverdata",{"_index":700,"title":{"interfaces/imageSliderFromServerData.html":{}},"body":{"injectables/FurnitureCardControlService.html":{},"components/ImageSliderComponent.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/shopData.html":{}}}],["imageurl",{"_index":1157,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["img",{"_index":1255,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["implements",{"_index":315,"title":{},"body":{"directives/AutoHeightDirective.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["import",{"_index":52,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["imports",{"_index":209,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"miscellaneous/functions.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["index=\"${indexroom",{"_index":2228,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["index=\"${this.currentidclickedroom",{"_index":2091,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["index=\"${this.currentviewroom",{"_index":2215,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["indexable",{"_index":1483,"title":{},"body":{"interfaces/additionalData.html":{},"interfaces/queryData.html":{}}}],["indexproject",{"_index":1007,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["indexroom",{"_index":2160,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["indexvariant",{"_index":1466,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["infinity",{"_index":1377,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["info",{"_index":3,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["initcategories",{"_index":2041,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["initeditform",{"_index":1669,"title":{},"body":{"interfaces/editForm.html":{}}}],["initialized",{"_index":2014,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["initthreejs",{"_index":1785,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["inject",{"_index":335,"title":{},"body":{"directives/AutoHeightDirective.html":{}}}],["inject(elementref",{"_index":331,"title":{},"body":{"directives/AutoHeightDirective.html":{}}}],["injectable",{"_index":0,"title":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"injectables/NotificationService.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"injectables/UploadService.html":{}},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"interfaces/MyXhrUploadOptions.html":{},"injectables/NotificationService.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["injectables",{"_index":2,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"injectables/NotificationService.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"injectables/UploadService.html":{},"index.html":{}}}],["inline",{"_index":1244,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["input",{"_index":324,"title":{},"body":{"directives/AutoHeightDirective.html":{},"components/ImageSliderComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["input.scrollheight",{"_index":344,"title":{},"body":{"directives/AutoHeightDirective.html":{}}}],["input.style.height",{"_index":342,"title":{},"body":{"directives/AutoHeightDirective.html":{}}}],["inputelement",{"_index":583,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["inputfurniturenamesubject",{"_index":665,"title":{},"body":{"injectables/FinderService.html":{}}}],["inputprocess",{"_index":591,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["inputs",{"_index":320,"title":{},"body":{"directives/AutoHeightDirective.html":{},"components/ImageSliderComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["instanceof",{"_index":880,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"interfaces/roomSpanSettings.html":{}}}],["intercept",{"_index":761,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{}}}],["intercept(request",{"_index":764,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{}}}],["interceptor",{"_index":756,"title":{"interceptors/HttpErrorInterceptor.html":{}},"body":{"coverage.html":{}}}],["interceptors",{"_index":758,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{}}}],["interface",{"_index":135,"title":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FurnitureCardControlService.html":{},"components/ImageSliderComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["interfaces",{"_index":852,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"index.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["intersect.object.name",{"_index":1909,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["intersect.object.type",{"_index":1910,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["intersection_z",{"_index":1930,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["intersections",{"_index":1905,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["intersections.find(intersect",{"_index":1908,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["intersections.length",{"_index":1927,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["intersections[0].point.x",{"_index":1929,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["intersections[0].point.z",{"_index":1931,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["intersections_x",{"_index":1928,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["isclick",{"_index":1998,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["isdoubleclick",{"_index":2000,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["isdragging",{"_index":1997,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["iseditformopen",{"_index":1629,"title":{},"body":{"interfaces/editForm.html":{}}}],["isemailaccount",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"interfaces/emailAuthData.html":{},"miscellaneous/functions.html":{},"interfaces/googleAuthData.html":{}}}],["isemailaccount(account",{"_index":149,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"miscellaneous/functions.html":{},"interfaces/furnitureAccountData.html":{}}}],["isemailaccount(authdata",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{}}}],["isemailaccount(changedata",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{}}}],["isemailaccount(createaccountdata",{"_index":156,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["isguideincluded",{"_index":2007,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["isguidevisible",{"_index":2008,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["ismobileview",{"_index":785,"title":{},"body":{"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{}}}],["isoccupied",{"_index":2133,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["isshowloader",{"_index":1745,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["items",{"_index":1268,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["join",{"_index":1280,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["json.stringify(querydata",{"_index":1359,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["jspdf",{"_index":1606,"title":{},"body":{"dependencies.html":{}}}],["justify",{"_index":1230,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["jwt",{"_index":34,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"injectables/AuthService.html":{},"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/googleAuthData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/shopData.html":{}}}],["jwt)).furnituredata._id",{"_index":523,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["jwt/delete",{"_index":164,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["jwt/long",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{}}}],["jwt/temporary',null",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{}}}],["key",{"_index":706,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"injectables/ShopService.html":{},"interfaces/additionalData.html":{},"interfaces/clientFilters.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"interfaces/shopData.html":{}}}],["keyboardevent",{"_index":1914,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["lastplanhouse",{"_index":2005,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["left",{"_index":1243,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["left:0",{"_index":1272,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["legend",{"_index":242,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["length",{"_index":469,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/shopData.html":{}}}],["letter",{"_index":1195,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["line",{"_index":1181,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["link",{"_index":825,"title":{},"body":{"components/MainPageComponent.html":{}}}],["list",{"_index":1238,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["literal",{"_index":1979,"title":{},"body":{"interfaces/reportResponse.html":{}}}],["load_object",{"_index":1774,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["loader",{"_index":1744,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["loaders",{"_index":1713,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["loadfbxmodel",{"_index":1532,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["loadfbxmodel(url",{"_index":1694,"title":{},"body":{"miscellaneous/functions.html":{}}}],["loadfurnituremodel(filemodel",{"_index":1770,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["loadgltfmodel",{"_index":1535,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["loadgltfmodel(url",{"_index":1697,"title":{},"body":{"miscellaneous/functions.html":{}}}],["loadingmanager",{"_index":1696,"title":{},"body":{"miscellaneous/functions.html":{}}}],["loadmodel",{"_index":1529,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["loadmodel(blob",{"_index":1698,"title":{},"body":{"miscellaneous/functions.html":{}}}],["loadmodel(filemodel",{"_index":1775,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["loadobjmodel",{"_index":1537,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["loadobjmodel(url",{"_index":1703,"title":{},"body":{"miscellaneous/functions.html":{}}}],["loadroom",{"_index":1873,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["loaduserdata(jwt",{"_index":1651,"title":{},"body":{"interfaces/editForm.html":{}}}],["location",{"_index":205,"title":{},"body":{"components/AppComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["lodash",{"_index":336,"title":{},"body":{"directives/AutoHeightDirective.html":{},"dependencies.html":{},"interfaces/roomSpanSettings.html":{}}}],["login",{"_index":261,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["loginpagecomponent",{"_index":260,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"coverage.html":{}}}],["logout",{"_index":937,"title":{},"body":{"components/NotificationComponent.html":{},"interfaces/editForm.html":{}}}],["long",{"_index":45,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["main",{"_index":263,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["mainpagecomponent",{"_index":262,"title":{"components/MainPageComponent.html":{}},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"coverage.html":{}}}],["manager",{"_index":1695,"title":{},"body":{"miscellaneous/functions.html":{}}}],["map(object",{"_index":1971,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["margin",{"_index":1174,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["matching",{"_index":88,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"dependencies.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"miscellaneous/functions.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"index.html":{},"interfaces/modelInterface.html":{},"modules.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"properties.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.floor(relative_x",{"_index":2079,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["math.floor(relative_y",{"_index":2081,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["math.pi",{"_index":1401,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["math.round(room_proportions.length",{"_index":2085,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["math.round(room_proportions.width",{"_index":2083,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["max",{"_index":1225,"title":{},"body":{"injectables/ReportService.html":{},"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"interfaces/reportResponse.html":{}}}],["max_z",{"_index":1943,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["maxcost",{"_index":1351,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["maxvalue",{"_index":369,"title":{},"body":{"injectables/CategoryService.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/option.html":{},"interfaces/rangeFilter.html":{},"interfaces/selectFilter.html":{}}}],["maxx",{"_index":1938,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["media",{"_index":1266,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["memberof",{"_index":1152,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["menuopen",{"_index":923,"title":{},"body":{"components/NavigationPanelComponent.html":{}}}],["mergeapplicationconfig(appconfig",{"_index":2267,"title":{},"body":{"miscellaneous/variables.html":{}}}],["message",{"_index":948,"title":{},"body":{"components/NotificationComponent.html":{},"injectables/NotificationService.html":{}}}],["meta",{"_index":894,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["metadata",{"_index":192,"title":{},"body":{"components/AppComponent.html":{},"directives/AutoHeightDirective.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["method",{"_index":749,"title":{},"body":{"injectables/FurnitureModelControlService.html":{}}}],["methods",{"_index":9,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{}}}],["mime",{"_index":1699,"title":{},"body":{"miscellaneous/functions.html":{}}}],["min",{"_index":1349,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["min_z",{"_index":1940,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["mincost",{"_index":1350,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["minvalue",{"_index":367,"title":{},"body":{"injectables/CategoryService.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/option.html":{},"interfaces/rangeFilter.html":{},"interfaces/selectFilter.html":{}}}],["minx",{"_index":1935,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["miscellaneous",{"_index":1686,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":718,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["mobileview",{"_index":321,"title":{},"body":{"directives/AutoHeightDirective.html":{}}}],["model",{"_index":232,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureModelControlService.html":{},"interfaces/clientProportions.html":{},"coverage.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["modelfile",{"_index":742,"title":{},"body":{"injectables/FurnitureModelControlService.html":{}}}],["modelinterface",{"_index":1110,"title":{"interfaces/modelInterface.html":{}},"body":{"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"coverage.html":{},"interfaces/furnitureShopData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["modules",{"_index":1975,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["monospace",{"_index":1180,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["mouse",{"_index":1737,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["mouseevent",{"_index":1892,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["move_room_element",{"_index":2141,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["movedata",{"_index":1773,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["moveroom(event",{"_index":2140,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["multi",{"_index":2263,"title":{},"body":{"miscellaneous/variables.html":{}}}],["myxhruploadoptions",{"_index":851,"title":{"interfaces/MyXhrUploadOptions.html":{}},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"coverage.html":{}}}],["n",{"_index":1477,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["n${description",{"_index":1478,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["name",{"_index":26,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/foundFurniture.html":{},"miscellaneous/functions.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["name.length",{"_index":552,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["nameinput",{"_index":553,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["nameinput.focus",{"_index":557,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["navigatetopage",{"_index":814,"title":{},"body":{"components/MainPageComponent.html":{}}}],["navigatetopage(link",{"_index":823,"title":{},"body":{"components/MainPageComponent.html":{}}}],["navigation",{"_index":265,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{}}}],["navigationpanelcomponent",{"_index":264,"title":{"components/NavigationPanelComponent.html":{}},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"coverage.html":{},"interfaces/editForm.html":{}}}],["new",{"_index":66,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/ClientImageControlService.html":{},"components/CreateFurniturePageComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interfaces/MyXhrUploadOptions.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/shopData.html":{}}}],["new.ttf",{"_index":1172,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["new_grid_area",{"_index":2149,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["new_room",{"_index":2188,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["new_room.gridarea",{"_index":2190,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["new_url",{"_index":1083,"title":{},"body":{"components/PlanHousePageComponent.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["newindex",{"_index":1469,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["newproject",{"_index":1063,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["newproject.projectdata",{"_index":1066,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["newxobjectposition",{"_index":1939,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["newzobjectposition",{"_index":1944,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["next",{"_index":766,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{}}}],["next.handle(request).pipe",{"_index":776,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{}}}],["ngafterviewchecked",{"_index":993,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["ngafterviewinit",{"_index":592,"title":{},"body":{"components/FinderComponent.html":{},"components/MainPageComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/foundFurniture.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["ngclass",{"_index":575,"title":{},"body":{"components/FinderComponent.html":{},"components/MainPageComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/foundFurniture.html":{}}}],["ngfor",{"_index":576,"title":{},"body":{"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/roomSpanSettings.html":{}}}],["ngif",{"_index":408,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["ngonchanges",{"_index":1433,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["ngonchanges(changes",{"_index":1748,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["ngondestroy",{"_index":423,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["ngoninit",{"_index":318,"title":{},"body":{"directives/AutoHeightDirective.html":{},"components/CreateFurniturePageComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{},"interfaces/roomSpanSettings.html":{}}}],["ngtemplateoutlet",{"_index":1986,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["ngx",{"_index":54,"title":{},"body":{"injectables/AccountCookieService.html":{},"components/ViewFurnitureComponent.html":{},"dependencies.html":{}}}],["nickname",{"_index":140,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/furnitureAccountData.html":{}}}],["nodelistof).foreach(elem",{"_index":840,"title":{},"body":{"components/MainPageComponent.html":{}}}],["none",{"_index":844,"title":{},"body":{"components/MainPageComponent.html":{},"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["notification",{"_index":433,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interceptors/HttpErrorInterceptor.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["notification'},{'name",{"_index":267,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["notification.component.html",{"_index":933,"title":{},"body":{"components/NotificationComponent.html":{}}}],["notification.component.scss",{"_index":934,"title":{},"body":{"components/NotificationComponent.html":{}}}],["notification.service",{"_index":863,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["notificationcomponent",{"_index":195,"title":{"components/NotificationComponent.html":{}},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"coverage.html":{}}}],["notificationservice",{"_index":434,"title":{"injectables/NotificationService.html":{}},"body":{"components/CreateFurniturePageComponent.html":{},"interceptors/HttpErrorInterceptor.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"coverage.html":{},"interfaces/editForm.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["null",{"_index":170,"title":{},"body":{"injectables/AccountService.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FurnitureCardControlService.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/PlanHousePageComponent.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/shopData.html":{}}}],["number",{"_index":368,"title":{},"body":{"injectables/CategoryService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FurnitureCardControlService.html":{},"components/ImageSliderComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ReportService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["obj",{"_index":908,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"miscellaneous/functions.html":{}}}],["object",{"_index":1257,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData-1.html":{}}}],["object.keys(querydata).length",{"_index":1356,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["object.name",{"_index":1970,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["object.position",{"_index":1844,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["object.rotation.y",{"_index":1854,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["object.scale.set(general_coefficient",{"_index":1872,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["object.type",{"_index":1884,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["object.userdata",{"_index":1846,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["object_position",{"_index":1843,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["object_position.x",{"_index":1848,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["object_position.z",{"_index":1851,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["objectid",{"_index":1714,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["objectloadinterface",{"_index":1542,"title":{"interfaces/objectLoadInterface.html":{}},"body":{"coverage.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["objects",{"_index":1118,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["objects_scene_array",{"_index":1968,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["objectsavedata",{"_index":1845,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["objectsavedata.xmetersdistance",{"_index":1856,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["objectsavedata.yrotate",{"_index":1858,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["objectsavedata.zmetersdistance",{"_index":1857,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["objectsceneinterface",{"_index":1111,"title":{"interfaces/objectSceneInterface.html":{}},"body":{"injectables/ProjectService.html":{},"coverage.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["objectsize",{"_index":1933,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["objectsize.length",{"_index":1942,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["objectsize.width",{"_index":1937,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["objectx",{"_index":2065,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["objecty",{"_index":2066,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["observable",{"_index":678,"title":{},"body":{"injectables/FinderService.html":{},"interceptors/HttpErrorInterceptor.html":{},"injectables/NotificationService.html":{}}}],["offset",{"_index":1345,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["oldcameraposition",{"_index":1952,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["oldcamerarotation",{"_index":1954,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["oldsizeviewroom",{"_index":2004,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["onchanges",{"_index":1428,"title":{},"body":{"components/ViewFurnitureComponent.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["oncontextmenu(event",{"_index":2154,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["ondestroy",{"_index":406,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["oninit",{"_index":316,"title":{},"body":{"directives/AutoHeightDirective.html":{},"components/CreateFurniturePageComponent.html":{},"components/ImageSliderComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/roomSpanSettings.html":{}}}],["oninput",{"_index":319,"title":{},"body":{"directives/AutoHeightDirective.html":{}}}],["oninput(event",{"_index":325,"title":{},"body":{"directives/AutoHeightDirective.html":{}}}],["onmouseclick(event",{"_index":1891,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["onmouseleave(event",{"_index":2101,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["onmousemove(event",{"_index":1925,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["onmouseup(event",{"_index":2107,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["onresize(event",{"_index":1887,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["onscroll",{"_index":2156,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["op",{"_index":516,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["openaddmodule",{"_index":994,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["opencreatefurniture",{"_index":815,"title":{},"body":{"components/MainPageComponent.html":{}}}],["openeditform",{"_index":1677,"title":{},"body":{"interfaces/editForm.html":{}}}],["openfoundresultslist",{"_index":593,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["openfurniturevariant",{"_index":1434,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["openfurniturevariant(colorbutton",{"_index":1444,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["openhtmlinnewtab",{"_index":1133,"title":{},"body":{"injectables/ReportService.html":{}}}],["openhtmlinnewtab(roomname",{"_index":1148,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["openlink",{"_index":1260,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["openlink,.shoplink",{"_index":1271,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["openproject",{"_index":995,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["openproject(indexproject",{"_index":1014,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["openproject(projectid",{"_index":1681,"title":{},"body":{"interfaces/editForm.html":{}}}],["openscene",{"_index":2177,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["openviewfurniture",{"_index":816,"title":{},"body":{"components/MainPageComponent.html":{}}}],["openviewroom(indexroom",{"_index":2225,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["operations",{"_index":512,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["option",{"_index":360,"title":{"interfaces/option.html":{}},"body":{"injectables/CategoryService.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"coverage.html":{},"interfaces/option.html":{},"interfaces/rangeFilter.html":{},"interfaces/selectFilter.html":{}}}],["optional",{"_index":28,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/editForm.html":{},"miscellaneous/functions.html":{},"interfaces/roomData.html":{}}}],["optionrangequerydata",{"_index":1348,"title":{"interfaces/optionRangeQueryData.html":{}},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"coverage.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["options",{"_index":364,"title":{},"body":{"injectables/CategoryService.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/option.html":{},"interfaces/rangeFilter.html":{},"interfaces/selectFilter.html":{}}}],["optionselectquerydata",{"_index":1347,"title":{"interfaces/optionSelectQueryData.html":{}},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"coverage.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["orbitcontrols",{"_index":1710,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["orbitcontrols(this.camera",{"_index":1824,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["otherstartcolumn",{"_index":2064,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["otherstartrow",{"_index":2063,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["output",{"_index":1708,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["overlay",{"_index":1387,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["overlay'},{'name",{"_index":276,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["overlay.component",{"_index":239,"title":{},"body":{"components/AppComponent.html":{}}}],["overlay.component.html",{"_index":1389,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["overlay.component.scss",{"_index":1390,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["overlay.component.ts",{"_index":1386,"title":{},"body":{"components/UploadOverlayComponent.html":{},"coverage.html":{}}}],["overlay.component.ts:13",{"_index":1395,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["overlay.component.ts:14",{"_index":1404,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["overlay.component.ts:16",{"_index":1403,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["overlay.component.ts:18",{"_index":1397,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["overlay.component.ts:22",{"_index":1399,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["overlay.component.ts:25",{"_index":1400,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["overlay/upload",{"_index":238,"title":{},"body":{"components/AppComponent.html":{},"components/UploadOverlayComponent.html":{},"coverage.html":{}}}],["overview",{"_index":1704,"title":{"index.html":{}},"body":{"index.html":{}}}],["package",{"_index":1580,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["padding",{"_index":1175,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["paddingpolarangle",{"_index":1832,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["page",{"_index":407,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/MainPageComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{}}}],["page'},{'name",{"_index":249,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["page.component.html",{"_index":409,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/MainPageComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{}}}],["page.component.scss",{"_index":411,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/MainPageComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{}}}],["page.component.ts",{"_index":405,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/MainPageComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/clientProportions.html":{},"coverage.html":{},"interfaces/editForm.html":{}}}],["page.component.ts:100",{"_index":1009,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:104",{"_index":453,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["page.component.ts:119",{"_index":1016,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:124",{"_index":455,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["page.component.ts:138",{"_index":447,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["page.component.ts:140",{"_index":1004,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:156",{"_index":1018,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:166",{"_index":442,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["page.component.ts:183",{"_index":1006,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:197",{"_index":1008,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:202",{"_index":457,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["page.component.ts:206",{"_index":1021,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:21",{"_index":818,"title":{},"body":{"components/MainPageComponent.html":{}}}],["page.component.ts:214",{"_index":1001,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:222",{"_index":1013,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:230",{"_index":1002,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:240",{"_index":439,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["page.component.ts:241",{"_index":1015,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:248",{"_index":1033,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:29",{"_index":832,"title":{},"body":{"components/MainPageComponent.html":{}}}],["page.component.ts:299",{"_index":441,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["page.component.ts:319",{"_index":445,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["page.component.ts:32",{"_index":831,"title":{},"body":{"components/MainPageComponent.html":{}}}],["page.component.ts:328",{"_index":444,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["page.component.ts:34",{"_index":473,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["page.component.ts:340",{"_index":448,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["page.component.ts:35",{"_index":834,"title":{},"body":{"components/MainPageComponent.html":{}}}],["page.component.ts:36",{"_index":471,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["page.component.ts:38",{"_index":833,"title":{},"body":{"components/MainPageComponent.html":{}}}],["page.component.ts:40",{"_index":460,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["page.component.ts:42",{"_index":1000,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:44",{"_index":462,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/MainPageComponent.html":{}}}],["page.component.ts:49",{"_index":470,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["page.component.ts:56",{"_index":1027,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:57",{"_index":828,"title":{},"body":{"components/MainPageComponent.html":{}}}],["page.component.ts:59",{"_index":1023,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:60",{"_index":435,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["page.component.ts:62",{"_index":1025,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:65",{"_index":1022,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:67",{"_index":819,"title":{},"body":{"components/MainPageComponent.html":{}}}],["page.component.ts:68",{"_index":1024,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:71",{"_index":1026,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:74",{"_index":821,"title":{},"body":{"components/MainPageComponent.html":{}}}],["page.component.ts:75",{"_index":1029,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:78",{"_index":451,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["page.component.ts:81",{"_index":1012,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:83",{"_index":830,"title":{},"body":{"components/MainPageComponent.html":{}}}],["page.component.ts:90",{"_index":829,"title":{},"body":{"components/MainPageComponent.html":{}}}],["page.component.ts:93",{"_index":1011,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:95",{"_index":450,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["page.component.ts:98",{"_index":824,"title":{},"body":{"components/MainPageComponent.html":{}}}],["page.mock",{"_index":837,"title":{},"body":{"components/MainPageComponent.html":{}}}],["page/account",{"_index":1498,"title":{},"body":{"coverage.html":{},"interfaces/editForm.html":{}}}],["page/create",{"_index":404,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{},"coverage.html":{}}}],["page/login",{"_index":1514,"title":{},"body":{"coverage.html":{}}}],["page/main",{"_index":809,"title":{},"body":{"components/MainPageComponent.html":{},"coverage.html":{}}}],["page/plan",{"_index":980,"title":{},"body":{"components/PlanHousePageComponent.html":{},"coverage.html":{}}}],["page/shop",{"_index":1546,"title":{},"body":{"coverage.html":{}}}],["pageinit",{"_index":424,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/PlanHousePageComponent.html":{}}}],["pageinit(jwt",{"_index":452,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["pagename",{"_index":649,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["panel",{"_index":920,"title":{},"body":{"components/NavigationPanelComponent.html":{}}}],["panel'},{'name",{"_index":266,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["panel.component",{"_index":478,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/MainPageComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{}}}],["panel.component.html",{"_index":921,"title":{},"body":{"components/NavigationPanelComponent.html":{}}}],["panel.component.scss",{"_index":922,"title":{},"body":{"components/NavigationPanelComponent.html":{}}}],["panel.component.ts",{"_index":919,"title":{},"body":{"components/NavigationPanelComponent.html":{},"coverage.html":{}}}],["panel.component.ts:20",{"_index":929,"title":{},"body":{"components/NavigationPanelComponent.html":{}}}],["panel.component.ts:23",{"_index":928,"title":{},"body":{"components/NavigationPanelComponent.html":{}}}],["panel.component.ts:29",{"_index":926,"title":{},"body":{"components/NavigationPanelComponent.html":{}}}],["panel.component.ts:40",{"_index":925,"title":{},"body":{"components/NavigationPanelComponent.html":{}}}],["panel.component.ts:50",{"_index":927,"title":{},"body":{"components/NavigationPanelComponent.html":{}}}],["panel/navigation",{"_index":477,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/clientProportions.html":{},"coverage.html":{},"interfaces/editForm.html":{}}}],["param",{"_index":63,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/ClientImageControlService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/shopData.html":{}}}],["parameters",{"_index":24,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"miscellaneous/functions.html":{}}}],["paramobject",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{}}}],["paramobject.password",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{}}}],["params",{"_index":165,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/roomData.html":{},"interfaces/shopData.html":{}}}],["params.append('filters",{"_index":1358,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["params.get('id",{"_index":493,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["params.get('planid",{"_index":1052,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["paramsitem",{"_index":1240,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["paramslist",{"_index":1237,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["paramsspan",{"_index":1235,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["paramstitle",{"_index":1232,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["parent_element",{"_index":2026,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["parent_element.classlist.contains('projectpreviewspan",{"_index":2028,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["parseint(params.get('planid",{"_index":1054,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["parseint(this.route.snapshot.params['roomid",{"_index":1042,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["parts",{"_index":903,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["parts.length",{"_index":906,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["parts.pop()?.tolowercase",{"_index":907,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["password",{"_index":137,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/googleAuthData.html":{}}}],["path",{"_index":74,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["pdf",{"_index":1105,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["pipe",{"_index":391,"title":{"pipes/CostFormatPipe.html":{}},"body":{"pipes/CostFormatPipe.html":{},"coverage.html":{},"index.html":{}}}],["pipes",{"_index":393,"title":{},"body":{"pipes/CostFormatPipe.html":{}}}],["pipes/cost",{"_index":624,"title":{},"body":{"components/FinderComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/foundFurniture.html":{}}}],["pipetransform",{"_index":401,"title":{},"body":{"pipes/CostFormatPipe.html":{}}}],["plan",{"_index":268,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["plan_id",{"_index":1053,"title":{},"body":{"components/PlanHousePageComponent.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["planhouse",{"_index":827,"title":{},"body":{"components/MainPageComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/roomSpanSettings.html":{}}}],["planhousecomponent",{"_index":199,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"coverage.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["planhouseemitter",{"_index":2015,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["planhouseexampledata",{"_index":812,"title":{},"body":{"components/MainPageComponent.html":{}}}],["planhousepagecomponent",{"_index":270,"title":{"components/PlanHousePageComponent.html":{}},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"coverage.html":{}}}],["planid",{"_index":1003,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["plugins",{"_index":1592,"title":{},"body":{"dependencies.html":{}}}],["position",{"_index":1241,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["postcreateaccount",{"_index":98,"title":{},"body":{"injectables/AccountService.html":{}}}],["postcreateaccount(createaccountdata",{"_index":115,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["postcreatefurniturecard",{"_index":684,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["postcreatefurniturecard(furnituredata",{"_index":693,"title":{},"body":{"injectables/FurnitureCardControlService.html":{}}}],["postcreatelongjwt",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{}}}],["postcreatelongjwt(authdata",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{}}}],["postcreateproject",{"_index":1093,"title":{},"body":{"injectables/ProjectService.html":{}}}],["postcreateproject(jwt",{"_index":1106,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["postcreateshortjwt",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{}}}],["postcreateshortjwt(email",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{}}}],["postuploadfurnituremodel",{"_index":730,"title":{},"body":{"injectables/FurnitureModelControlService.html":{}}}],["postuploadfurnituremodel(modelfile",{"_index":739,"title":{},"body":{"injectables/FurnitureModelControlService.html":{}}}],["postuploadprojectimages",{"_index":1300,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["postuploadprojectimages(color",{"_index":1313,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["postuploaduseravatar",{"_index":1301,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["postuploaduseravatar(imagefile",{"_index":1315,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["previewurl",{"_index":145,"title":{},"body":{"injectables/AccountService.html":{},"injectables/ReportService.html":{},"injectables/ShopService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"interfaces/reportResponse.html":{}}}],["previousgridarea",{"_index":1995,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["private",{"_index":62,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["proccessdescription",{"_index":1435,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["proccessdescription(description",{"_index":1448,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["proccessdescription(furnituredata.description,furnituredata.proportions",{"_index":1481,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["profile",{"_index":849,"title":{},"body":{"components/MainPageComponent.html":{}}}],["progress",{"_index":867,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["project",{"_index":848,"title":{},"body":{"components/MainPageComponent.html":{},"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["project.service",{"_index":129,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["project_data",{"_index":1071,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["projectdata.name",{"_index":1088,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["projectid",{"_index":1098,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/editForm.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["projectinformation",{"_index":127,"title":{"interfaces/projectInformation.html":{}},"body":{"injectables/AccountService.html":{},"injectables/ProjectService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["projectnameform",{"_index":987,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["projects",{"_index":141,"title":{},"body":{"injectables/AccountService.html":{},"components/PlanHousePageComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/furnitureAccountData.html":{}}}],["projectserverinformation",{"_index":128,"title":{"interfaces/projectServerInformation.html":{}},"body":{"injectables/AccountService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["projectservice",{"_index":198,"title":{"injectables/ProjectService.html":{}},"body":{"components/AppComponent.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"coverage.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{}}}],["promise",{"_index":109,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"components/CreateFurniturePageComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"miscellaneous/functions.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/googleAuthData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/rangeFilter.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["promise((resolve",{"_index":380,"title":{},"body":{"injectables/ClientImageControlService.html":{}}}],["promise.all",{"_index":507,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["properties",{"_index":91,"title":{"properties.html":{}},"body":{"injectables/AccountService.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"properties.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["proportions",{"_index":466,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/ReportService.html":{},"injectables/ShopService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/additionalData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData-1.html":{},"interfaces/shopData.html":{}}}],["proportions.height",{"_index":559,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{}}}],["proportions.length",{"_index":561,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{}}}],["proportions.width",{"_index":560,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{}}}],["protected",{"_index":413,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["provide",{"_index":2260,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provideanimations",{"_index":2257,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provideclienthydration",{"_index":2256,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providedin",{"_index":58,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interfaces/MyXhrUploadOptions.html":{},"injectables/NotificationService.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["provideeventplugins",{"_index":2259,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providehttpclient(withinterceptorsfromdi",{"_index":2258,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providerouter(routes",{"_index":2255,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providers",{"_index":193,"title":{},"body":{"components/AppComponent.html":{},"miscellaneous/variables.html":{}}}],["providers:[autoheightdirective,notificationcomponent,accountservice,authservice,accountcookieservice,serverimagecontrolservice,projectservice,planhousecomponent,scenecomponent,furniturecardcontrolservice,furnituremodelcontrolservice,shopservice,finderservice,location",{"_index":241,"title":{},"body":{"components/AppComponent.html":{}}}],["public",{"_index":870,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["puppeteer",{"_index":1613,"title":{},"body":{"dependencies.html":{}}}],["putupdatebasedata",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{}}}],["putupdatebasedata(changedata",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{}}}],["putupdatefurniturecard",{"_index":685,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["putupdatefurniturecard(furniturecardupdatedata",{"_index":695,"title":{},"body":{"injectables/FurnitureCardControlService.html":{}}}],["putupdateproject",{"_index":1094,"title":{},"body":{"injectables/ProjectService.html":{}}}],["putupdateproject(jwt",{"_index":1108,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["putupdatesecondaryaccountdata",{"_index":99,"title":{},"body":{"injectables/AccountService.html":{}}}],["putupdatesecondaryaccountdata(changedata",{"_index":118,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["px",{"_index":345,"title":{},"body":{"directives/AutoHeightDirective.html":{},"interfaces/roomSpanSettings.html":{}}}],["q",{"_index":1920,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["quality",{"_index":383,"title":{},"body":{"injectables/ClientImageControlService.html":{}}}],["query",{"_index":672,"title":{},"body":{"injectables/FinderService.html":{}}}],["querydata",{"_index":1341,"title":{"interfaces/queryData.html":{}},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"coverage.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["queryvalue",{"_index":361,"title":{},"body":{"injectables/CategoryService.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/option.html":{},"interfaces/rangeFilter.html":{},"interfaces/selectFilter.html":{}}}],["radius",{"_index":1213,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData-1.html":{}}}],["range",{"_index":365,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ShopService.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/selectFilter.html":{},"miscellaneous/typealiases.html":{}}}],["rangefilter",{"_index":366,"title":{"interfaces/rangeFilter.html":{}},"body":{"injectables/CategoryService.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"coverage.html":{},"interfaces/option.html":{},"interfaces/rangeFilter.html":{},"interfaces/selectFilter.html":{},"miscellaneous/typealiases.html":{}}}],["raycaster",{"_index":1735,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["reactiveformsmodule",{"_index":982,"title":{},"body":{"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/editForm.html":{},"interfaces/roomSpanSettings.html":{}}}],["read",{"_index":461,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["reader",{"_index":1154,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["reader.onload",{"_index":1156,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["reader.readasdataurl(renderimage",{"_index":1161,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["reader.result",{"_index":1158,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["real_proportions_coefficient",{"_index":1869,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["received_data",{"_index":632,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["received_data.length",{"_index":635,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["rect",{"_index":1894,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["rect.height",{"_index":1901,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["rect.left",{"_index":1897,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["rect.top",{"_index":1900,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["rect.width",{"_index":1898,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["rectangle_mesh_size",{"_index":1932,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["rectangle_mesh_size.length",{"_index":1941,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["rectangle_mesh_size.width",{"_index":1936,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["rectangle_size.length",{"_index":1868,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["rectangle_size.width",{"_index":1866,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["rectanglemesh",{"_index":1739,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["reject",{"_index":381,"title":{},"body":{"injectables/ClientImageControlService.html":{}}}],["reject(error",{"_index":390,"title":{},"body":{"injectables/ClientImageControlService.html":{}}}],["relative",{"_index":1242,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["relative_x",{"_index":2070,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["relative_y",{"_index":2072,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["reloadpage",{"_index":938,"title":{},"body":{"components/NotificationComponent.html":{}}}],["removefilefromqueue",{"_index":1414,"title":{},"body":{"injectables/UploadService.html":{}}}],["removefilefromqueue(fileid",{"_index":909,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["removefromqueue",{"_index":1393,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["removefromqueue(id",{"_index":1398,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["renderer",{"_index":595,"title":{},"body":{"components/FinderComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/foundFurniture.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["renderer2",{"_index":596,"title":{},"body":{"components/FinderComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/foundFurniture.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["renderimage",{"_index":1103,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{}}}],["rendertitle",{"_index":1198,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["renderurl",{"_index":1146,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["report.html",{"_index":1292,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["report.service",{"_index":1113,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["reportresponse",{"_index":1112,"title":{"interfaces/reportResponse.html":{}},"body":{"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"coverage.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{}}}],["reportservice",{"_index":1095,"title":{"injectables/ReportService.html":{}},"body":{"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"coverage.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{}}}],["request",{"_index":769,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{}}}],["requestanimationframe",{"_index":1805,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["requesturl",{"_index":1354,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["res.blob",{"_index":754,"title":{},"body":{"injectables/FurnitureModelControlService.html":{}}}],["res.ok",{"_index":753,"title":{},"body":{"injectables/FurnitureModelControlService.html":{}}}],["resetroomposition(clientx",{"_index":2088,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["resize",{"_index":820,"title":{},"body":{"components/MainPageComponent.html":{}}}],["resolve(compressedfile",{"_index":387,"title":{},"body":{"injectables/ClientImageControlService.html":{}}}],["response",{"_index":497,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"interfaces/MyXhrUploadOptions.html":{},"injectables/ProjectService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"interfaces/additionalData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/roomData.html":{},"interfaces/shopData.html":{}}}],["response.authormatched",{"_index":499,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["response.blob",{"_index":511,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["response.furniturecard",{"_index":502,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["response.furniturecard.colors.map(colordata",{"_index":720,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["response.furnitures",{"_index":1124,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["response.furnitures.map(furnituredata",{"_index":1125,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["response.json",{"_index":1367,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["response.ok",{"_index":1363,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["response.resultsarray",{"_index":1369,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["response.status",{"_index":1366,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["response.statustext",{"_index":876,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["response.text",{"_index":1365,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["response?.furniturecard",{"_index":715,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["responsetext",{"_index":869,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["results",{"_index":87,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"dependencies.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"miscellaneous/functions.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"index.html":{},"interfaces/modelInterface.html":{},"modules.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"properties.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results_array",{"_index":1368,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["results_array.map(furniture",{"_index":1371,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["resultsarray",{"_index":1337,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["resultsarray.foreach(furnituredata",{"_index":1378,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["resultsclientfiltersdata",{"_index":1343,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["return",{"_index":80,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["returns",{"_index":30,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"miscellaneous/functions.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["rgba(0",{"_index":1218,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["right",{"_index":1472,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["room",{"_index":1123,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["room.gridarea.split('/').map(number",{"_index":2062,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["room_data",{"_index":1069,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["room_element",{"_index":2214,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["room_element.getboundingclientrect",{"_index":2231,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["room_id",{"_index":1041,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["room_objects_data",{"_index":1973,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["room_proportions",{"_index":1822,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["room_proportions.length",{"_index":1836,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["roomdata",{"_index":1020,"title":{"interfaces/roomData.html":{},"interfaces/roomData-1.html":{}},"body":{"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"coverage.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["roomdata.furnitures.map(furniture",{"_index":1273,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["roomdata.name",{"_index":1162,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["roomdata.objects",{"_index":1875,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["roomdataplan",{"_index":1712,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["roomfloorbase",{"_index":1838,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["roomform",{"_index":2239,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["roomguidetemplate",{"_index":2023,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["roomheight",{"_index":2230,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["roomid",{"_index":1010,"title":{},"body":{"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["roomname",{"_index":1144,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["roomproportions",{"_index":1117,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["rooms",{"_index":1072,"title":{},"body":{"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["roomsguidetemplate1",{"_index":2019,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["roomsguidetemplate2",{"_index":2021,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["roomspan",{"_index":1996,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["roomspansettings",{"_index":1527,"title":{"interfaces/roomSpanSettings.html":{}},"body":{"coverage.html":{},"interfaces/roomSpanSettings.html":{}}}],["roomview",{"_index":2222,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["roomwidth",{"_index":2229,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["root",{"_index":59,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interfaces/MyXhrUploadOptions.html":{},"injectables/NotificationService.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["root'},{'name",{"_index":250,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["rotate",{"_index":2208,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["rotateangle",{"_index":1915,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["rotatetargetobject(event",{"_index":1913,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["route",{"_index":436,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/foundFurniture.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["router",{"_index":431,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/MainPageComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["routerlink",{"_index":577,"title":{},"body":{"components/FinderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{}}}],["routeroutlet",{"_index":210,"title":{},"body":{"components/AppComponent.html":{}}}],["routeroutlet,notificationcomponent,uploadoverlaycomponent",{"_index":240,"title":{},"body":{"components/AppComponent.html":{}}}],["routesub",{"_index":415,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["routing",{"_index":1621,"title":{},"body":{"dependencies.html":{}}}],["row",{"_index":1229,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{},"interfaces/roomSpanSettings.html":{}}}],["rxjs",{"_index":134,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"components/CreateFurniturePageComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"interfaces/MyXhrUploadOptions.html":{},"injectables/NotificationService.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"dependencies.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/roomData.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["rxjs/operators",{"_index":775,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{}}}],["samesite",{"_index":75,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["savechanges",{"_index":1639,"title":{},"body":{"interfaces/editForm.html":{}}}],["savehouse",{"_index":2050,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["saveobjectsemitter",{"_index":1726,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["saveproject",{"_index":996,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["saveroom",{"_index":1772,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["scene",{"_index":1723,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["scene'},{'name",{"_index":272,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["scene.component.html",{"_index":1724,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["scene.component.scss",{"_index":1725,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["scene/scene.component",{"_index":1985,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["scene_proportions_coefficient",{"_index":1871,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["scenecomponent",{"_index":200,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"coverage.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["sceneopentoggle",{"_index":2010,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["segments",{"_index":1809,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["select",{"_index":359,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ShopService.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/selectFilter.html":{},"miscellaneous/typealiases.html":{}}}],["selectfilter",{"_index":362,"title":{"interfaces/selectFilter.html":{}},"body":{"injectables/CategoryService.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"coverage.html":{},"interfaces/option.html":{},"interfaces/rangeFilter.html":{},"interfaces/selectFilter.html":{},"miscellaneous/typealiases.html":{}}}],["selector",{"_index":206,"title":{},"body":{"components/AppComponent.html":{},"directives/AutoHeightDirective.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["self",{"_index":1208,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["server",{"_index":862,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["serverconfig",{"_index":1494,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["serverimagecontrol",{"_index":430,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"interfaces/clientProportions.html":{}}}],["serverimagecontrolservice",{"_index":197,"title":{"injectables/ServerImageControlService.html":{}},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"injectables/ServerImageControlService.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"interfaces/clientProportions.html":{},"coverage.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{}}}],["service",{"_index":56,"title":{},"body":{"injectables/AccountCookieService.html":{},"dependencies.html":{}}}],["services/account",{"_index":225,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["services/account.service",{"_index":223,"title":{},"body":{"components/AppComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/editForm.html":{}}}],["services/auth.service",{"_index":224,"title":{},"body":{"components/AppComponent.html":{},"interfaces/editForm.html":{}}}],["services/category.service",{"_index":1989,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["services/client",{"_index":1627,"title":{},"body":{"interfaces/editForm.html":{}}}],["services/finder.service",{"_index":234,"title":{},"body":{"components/AppComponent.html":{},"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["services/furniture",{"_index":230,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["services/notification.service",{"_index":483,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["services/project.service",{"_index":229,"title":{},"body":{"components/AppComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["services/server",{"_index":226,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{}}}],["services/shop.service",{"_index":233,"title":{},"body":{"components/AppComponent.html":{}}}],["services/upload.service",{"_index":1405,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["set('accounttype",{"_index":152,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/googleAuthData.html":{}}}],["set('color",{"_index":1324,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["set('email",{"_index":157,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/googleAuthData.html":{}}}],["set('furniturecardid",{"_index":725,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"injectables/ServerImageControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["set('idmainimage",{"_index":1325,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["set('jwt",{"_index":162,"title":{},"body":{"injectables/AccountService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{},"interfaces/shopData.html":{}}}],["set('name",{"_index":1120,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["set('nickname",{"_index":154,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["set('password",{"_index":159,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/googleAuthData.html":{}}}],["set('projectid",{"_index":1121,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["set('roomid",{"_index":1122,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["set(filtersobject.colors",{"_index":1384,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["seterror",{"_index":960,"title":{},"body":{"injectables/NotificationService.html":{}}}],["seterror(message",{"_index":963,"title":{},"body":{"injectables/NotificationService.html":{}}}],["setfurniturename",{"_index":667,"title":{},"body":{"injectables/FinderService.html":{}}}],["setfurniturename(name",{"_index":673,"title":{},"body":{"injectables/FinderService.html":{}}}],["setguiderule",{"_index":16,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["setjwt",{"_index":17,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["setjwt(jwt",{"_index":43,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["setsuccess",{"_index":961,"title":{},"body":{"injectables/NotificationService.html":{}}}],["setsuccess(message",{"_index":966,"title":{},"body":{"injectables/NotificationService.html":{}}}],["settimeout",{"_index":637,"title":{},"body":{"components/FinderComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/foundFurniture.html":{},"interfaces/roomSpanSettings.html":{}}}],["setusertype",{"_index":18,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["setusertype(accounttype",{"_index":49,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["shadow",{"_index":1216,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["shape",{"_index":1812,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["shape.lineto",{"_index":1817,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["shape.lineto(width",{"_index":1815,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["shape.moveto",{"_index":1814,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["shape.quadraticcurveto",{"_index":1818,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["shape.quadraticcurveto(width",{"_index":1816,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["shape_ratio",{"_index":1864,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["shop",{"_index":274,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"injectables/ShopService.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientFilters.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["shop/${category",{"_index":659,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["shopdata",{"_index":702,"title":{"interfaces/shopData.html":{}},"body":{"injectables/FurnitureCardControlService.html":{},"injectables/ReportService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/reportResponse.html":{},"interfaces/shopData.html":{}}}],["shopdata.cost",{"_index":1482,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["shoppagecomponent",{"_index":273,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"coverage.html":{}}}],["shops",{"_index":464,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/ReportService.html":{},"interfaces/additionalData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/reportResponse.html":{},"interfaces/shopData.html":{}}}],["shops.length",{"_index":566,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["shopservice",{"_index":203,"title":{"injectables/ShopService.html":{}},"body":{"components/AppComponent.html":{},"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"coverage.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["shopsspan",{"_index":1269,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["shopstitle",{"_index":1233,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["showguide",{"_index":2044,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["showloader",{"_index":1878,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["side_area",{"_index":2075,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["signal",{"_index":750,"title":{},"body":{"injectables/FurnitureModelControlService.html":{},"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["simplechanges",{"_index":1451,"title":{},"body":{"components/ViewFurnitureComponent.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["size",{"_index":1190,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["sizing:border",{"_index":1253,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["slider",{"_index":781,"title":{},"body":{"components/ImageSliderComponent.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{}}}],["slider'},{'name",{"_index":259,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["slider.component",{"_index":486,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/ServerImageControlService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/additionalData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["slider.component.html",{"_index":783,"title":{},"body":{"components/ImageSliderComponent.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{}}}],["slider.component.scss",{"_index":784,"title":{},"body":{"components/ImageSliderComponent.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{}}}],["slider.component.ts",{"_index":780,"title":{},"body":{"components/ImageSliderComponent.html":{},"coverage.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{}}}],["slider.component.ts:40",{"_index":803,"title":{},"body":{"components/ImageSliderComponent.html":{}}}],["slider.component.ts:45",{"_index":804,"title":{},"body":{"components/ImageSliderComponent.html":{}}}],["slider.component.ts:52",{"_index":793,"title":{},"body":{"components/ImageSliderComponent.html":{}}}],["slider.component.ts:58",{"_index":792,"title":{},"body":{"components/ImageSliderComponent.html":{}}}],["slider.component.ts:64",{"_index":802,"title":{},"body":{"components/ImageSliderComponent.html":{}}}],["slider.component.ts:73",{"_index":795,"title":{},"body":{"components/ImageSliderComponent.html":{}}}],["slider.component.ts:81",{"_index":797,"title":{},"body":{"components/ImageSliderComponent.html":{}}}],["slider.component.ts:91",{"_index":799,"title":{},"body":{"components/ImageSliderComponent.html":{}}}],["slider/image",{"_index":485,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"components/ImageSliderComponent.html":{},"injectables/ServerImageControlService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/additionalData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/shopData.html":{}}}],["solid",{"_index":1204,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["source",{"_index":4,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["spacing",{"_index":1196,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["spanheight",{"_index":2233,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["spanwidth",{"_index":2232,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["spinner",{"_index":1611,"title":{},"body":{"dependencies.html":{}}}],["src",{"_index":1167,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["src/.../account.service.ts",{"_index":1689,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../app.config.server.ts",{"_index":2253,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../app.config.ts",{"_index":2251,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.service.ts",{"_index":2247,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../category.service.ts",{"_index":2248,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../fbx.loader.ts",{"_index":1690,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../gltf",{"_index":1691,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../index.ts",{"_index":1692,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../main.server.ts",{"_index":2252,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../obj.loader.ts",{"_index":1693,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../reusable",{"_index":1688,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../upload.service.ts",{"_index":2249,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/app.component.ts",{"_index":191,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app.component.ts:27",{"_index":216,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app.config.server.ts",{"_index":1490,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.config.ts",{"_index":1495,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/components/account",{"_index":1497,"title":{},"body":{"coverage.html":{},"interfaces/editForm.html":{}}}],["src/components/create",{"_index":403,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{},"coverage.html":{}}}],["src/components/finder/finder.component.ts",{"_index":572,"title":{},"body":{"components/FinderComponent.html":{},"coverage.html":{},"interfaces/foundFurniture.html":{}}}],["src/components/finder/finder.component.ts:105",{"_index":602,"title":{},"body":{"components/FinderComponent.html":{}}}],["src/components/finder/finder.component.ts:113",{"_index":617,"title":{},"body":{"components/FinderComponent.html":{}}}],["src/components/finder/finder.component.ts:118",{"_index":601,"title":{},"body":{"components/FinderComponent.html":{}}}],["src/components/finder/finder.component.ts:130",{"_index":600,"title":{},"body":{"components/FinderComponent.html":{}}}],["src/components/finder/finder.component.ts:147",{"_index":613,"title":{},"body":{"components/FinderComponent.html":{}}}],["src/components/finder/finder.component.ts:167",{"_index":609,"title":{},"body":{"components/FinderComponent.html":{}}}],["src/components/finder/finder.component.ts:177",{"_index":612,"title":{},"body":{"components/FinderComponent.html":{}}}],["src/components/finder/finder.component.ts:40",{"_index":621,"title":{},"body":{"components/FinderComponent.html":{}}}],["src/components/finder/finder.component.ts:45",{"_index":619,"title":{},"body":{"components/FinderComponent.html":{}}}],["src/components/finder/finder.component.ts:50",{"_index":618,"title":{},"body":{"components/FinderComponent.html":{}}}],["src/components/finder/finder.component.ts:55",{"_index":598,"title":{},"body":{"components/FinderComponent.html":{}}}],["src/components/finder/finder.component.ts:69",{"_index":615,"title":{},"body":{"components/FinderComponent.html":{}}}],["src/components/finder/finder.component.ts:78",{"_index":605,"title":{},"body":{"components/FinderComponent.html":{}}}],["src/components/finder/finder.component.ts:97",{"_index":616,"title":{},"body":{"components/FinderComponent.html":{}}}],["src/components/image",{"_index":779,"title":{},"body":{"components/ImageSliderComponent.html":{},"coverage.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{}}}],["src/components/login",{"_index":1513,"title":{},"body":{"coverage.html":{}}}],["src/components/main",{"_index":808,"title":{},"body":{"components/MainPageComponent.html":{},"coverage.html":{}}}],["src/components/navigation",{"_index":918,"title":{},"body":{"components/NavigationPanelComponent.html":{},"coverage.html":{}}}],["src/components/notification/notification.component.ts",{"_index":932,"title":{},"body":{"components/NotificationComponent.html":{},"coverage.html":{}}}],["src/components/notification/notification.component.ts:17",{"_index":940,"title":{},"body":{"components/NotificationComponent.html":{}}}],["src/components/notification/notification.component.ts:24",{"_index":944,"title":{},"body":{"components/NotificationComponent.html":{}}}],["src/components/notification/notification.component.ts:27",{"_index":945,"title":{},"body":{"components/NotificationComponent.html":{}}}],["src/components/notification/notification.component.ts:33",{"_index":942,"title":{},"body":{"components/NotificationComponent.html":{}}}],["src/components/notification/notification.component.ts:46",{"_index":943,"title":{},"body":{"components/NotificationComponent.html":{}}}],["src/components/notification/notification.component.ts:53",{"_index":941,"title":{},"body":{"components/NotificationComponent.html":{}}}],["src/components/plan",{"_index":979,"title":{},"body":{"components/PlanHousePageComponent.html":{},"coverage.html":{},"interfaces/roomSpanSettings.html":{}}}],["src/components/scene/loaders/index.ts",{"_index":1528,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/components/scene/loaders/loaders/fbx.loader.ts",{"_index":1531,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/components/scene/loaders/loaders/gltf",{"_index":1533,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/components/scene/loaders/loaders/obj.loader.ts",{"_index":1536,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/components/scene/scene.component.ts",{"_index":1538,"title":{},"body":{"coverage.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["src/components/shop",{"_index":1545,"title":{},"body":{"coverage.html":{}}}],["src/components/upload",{"_index":1385,"title":{},"body":{"components/UploadOverlayComponent.html":{},"coverage.html":{}}}],["src/components/view",{"_index":1426,"title":{},"body":{"components/ViewFurnitureComponent.html":{},"coverage.html":{}}}],["src/directives/auto",{"_index":313,"title":{},"body":{"directives/AutoHeightDirective.html":{},"coverage.html":{}}}],["src/interceptors/http",{"_index":759,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{},"coverage.html":{}}}],["src/main.server.ts",{"_index":1555,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/pipes/cost",{"_index":394,"title":{},"body":{"pipes/CostFormatPipe.html":{},"coverage.html":{}}}],["src/services/account",{"_index":6,"title":{},"body":{"injectables/AccountCookieService.html":{},"coverage.html":{}}}],["src/services/account.service.ts",{"_index":90,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"miscellaneous/functions.html":{},"interfaces/furnitureAccountData.html":{},"miscellaneous/typealiases.html":{}}}],["src/services/account.service.ts:109",{"_index":117,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/services/account.service.ts:128",{"_index":111,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/services/account.service.ts:139",{"_index":120,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/services/account.service.ts:154",{"_index":108,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/services/account.service.ts:165",{"_index":113,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/services/account.service.ts:187",{"_index":104,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/services/account.service.ts:97",{"_index":102,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/services/auth.service.ts",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{},"miscellaneous/typealiases.html":{}}}],["src/services/auth.service.ts:38",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/services/auth.service.ts:49",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/services/auth.service.ts:67",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/services/auth.service.ts:79",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/services/auth.service.ts:98",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/services/category.service.ts",{"_index":347,"title":{},"body":{"injectables/CategoryService.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"coverage.html":{},"interfaces/option.html":{},"interfaces/rangeFilter.html":{},"interfaces/selectFilter.html":{},"miscellaneous/typealiases.html":{}}}],["src/services/category.service.ts:72",{"_index":349,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/services/category.service.ts:82",{"_index":350,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/services/client",{"_index":371,"title":{},"body":{"injectables/ClientImageControlService.html":{},"coverage.html":{}}}],["src/services/finder.service.ts",{"_index":663,"title":{},"body":{"injectables/FinderService.html":{},"coverage.html":{}}}],["src/services/finder.service.ts:17",{"_index":676,"title":{},"body":{"injectables/FinderService.html":{}}}],["src/services/finder.service.ts:20",{"_index":680,"title":{},"body":{"injectables/FinderService.html":{}}}],["src/services/finder.service.ts:23",{"_index":668,"title":{},"body":{"injectables/FinderService.html":{}}}],["src/services/finder.service.ts:35",{"_index":674,"title":{},"body":{"injectables/FinderService.html":{}}}],["src/services/finder.service.ts:44",{"_index":671,"title":{},"body":{"injectables/FinderService.html":{}}}],["src/services/furniture",{"_index":683,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["src/services/index.ts",{"_index":1565,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/services/notification.service.ts",{"_index":956,"title":{},"body":{"injectables/NotificationService.html":{},"coverage.html":{}}}],["src/services/notification.service.ts:16",{"_index":970,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/services/notification.service.ts:21",{"_index":973,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/services/notification.service.ts:24",{"_index":969,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/services/notification.service.ts:27",{"_index":972,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/services/notification.service.ts:34",{"_index":965,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/services/notification.service.ts:44",{"_index":967,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/services/notification.service.ts:53",{"_index":962,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/services/project.service.ts",{"_index":1089,"title":{},"body":{"injectables/ProjectService.html":{},"coverage.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["src/services/project.service.ts:106",{"_index":1109,"title":{},"body":{"injectables/ProjectService.html":{}}}],["src/services/project.service.ts:120",{"_index":1104,"title":{},"body":{"injectables/ProjectService.html":{}}}],["src/services/project.service.ts:53",{"_index":1096,"title":{},"body":{"injectables/ProjectService.html":{}}}],["src/services/project.service.ts:66",{"_index":1107,"title":{},"body":{"injectables/ProjectService.html":{}}}],["src/services/project.service.ts:79",{"_index":1099,"title":{},"body":{"injectables/ProjectService.html":{}}}],["src/services/project.service.ts:92",{"_index":1101,"title":{},"body":{"injectables/ProjectService.html":{}}}],["src/services/report.service.ts",{"_index":1127,"title":{},"body":{"injectables/ReportService.html":{},"coverage.html":{},"interfaces/reportResponse.html":{}}}],["src/services/report.service.ts:29",{"_index":1134,"title":{},"body":{"injectables/ReportService.html":{}}}],["src/services/report.service.ts:322",{"_index":1136,"title":{},"body":{"injectables/ReportService.html":{}}}],["src/services/report.service.ts:334",{"_index":1150,"title":{},"body":{"injectables/ReportService.html":{}}}],["src/services/report.service.ts:349",{"_index":1143,"title":{},"body":{"injectables/ReportService.html":{}}}],["src/services/report.service.ts:39",{"_index":1138,"title":{},"body":{"injectables/ReportService.html":{}}}],["src/services/report.service.ts:51",{"_index":1140,"title":{},"body":{"injectables/ReportService.html":{}}}],["src/services/report.service.ts:72",{"_index":1147,"title":{},"body":{"injectables/ReportService.html":{}}}],["src/services/server",{"_index":1295,"title":{},"body":{"injectables/ServerImageControlService.html":{},"coverage.html":{}}}],["src/services/shop.service.ts",{"_index":1330,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"coverage.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["src/services/shop.service.ts:10",{"_index":1978,"title":{},"body":{"interfaces/queryData.html":{}}}],["src/services/shop.service.ts:151",{"_index":1336,"title":{},"body":{"injectables/ShopService.html":{}}}],["src/services/shop.service.ts:75",{"_index":1346,"title":{},"body":{"injectables/ShopService.html":{}}}],["src/services/shop.service.ts:78",{"_index":1333,"title":{},"body":{"injectables/ShopService.html":{}}}],["src/services/shop.service.ts:97",{"_index":1342,"title":{},"body":{"injectables/ShopService.html":{}}}],["src/services/upload.service.ts",{"_index":853,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/services/upload.service.ts:102",{"_index":1420,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/services/upload.service.ts:107",{"_index":1422,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/services/upload.service.ts:112",{"_index":1423,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/services/upload.service.ts:28",{"_index":1425,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/services/upload.service.ts:29",{"_index":1424,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/services/upload.service.ts:30",{"_index":1417,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/services/upload.service.ts:73",{"_index":1418,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/services/upload.service.ts:87",{"_index":1419,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/usable/reusable",{"_index":1576,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["standalone",{"_index":208,"title":{},"body":{"components/AppComponent.html":{},"directives/AutoHeightDirective.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["standalone:true",{"_index":1406,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["start_column",{"_index":2078,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["start_row",{"_index":2080,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["startcolumn",{"_index":2059,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["startrange",{"_index":1340,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["startrow",{"_index":2058,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["startx",{"_index":1982,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["starty",{"_index":1983,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["statements",{"_index":1488,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":2018,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["status",{"_index":868,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["strategies",{"_index":1622,"title":{},"body":{"dependencies.html":{}}}],["strict",{"_index":76,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["string",{"_index":38,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"miscellaneous/functions.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{},"miscellaneous/variables.html":{}}}],["structure",{"_index":717,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["style",{"_index":1239,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["styleurl",{"_index":410,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/foundFurniture.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{}}}],["styleurls",{"_index":1628,"title":{},"body":{"interfaces/editForm.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["subscription",{"_index":472,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["success",{"_index":385,"title":{},"body":{"injectables/ClientImageControlService.html":{},"interfaces/MyXhrUploadOptions.html":{},"injectables/NotificationService.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"miscellaneous/typealiases.html":{}}}],["successmessage",{"_index":936,"title":{},"body":{"components/NotificationComponent.html":{}}}],["successsubject",{"_index":958,"title":{},"body":{"injectables/NotificationService.html":{}}}],["switch",{"_index":1917,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["table",{"_index":1579,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1578,"title":{},"body":{"coverage.html":{}}}],["taiga",{"_index":805,"title":{},"body":{"components/ImageSliderComponent.html":{},"dependencies.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{}}}],["target",{"_index":1660,"title":{},"body":{"interfaces/editForm.html":{}}}],["target.files?.[0",{"_index":1661,"title":{},"body":{"interfaces/editForm.html":{}}}],["target_element",{"_index":2089,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["targetobject",{"_index":1742,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["template",{"_index":188,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["templateref",{"_index":1984,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["templateurl",{"_index":212,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["temporary",{"_index":46,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["text",{"_index":1187,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["text/html",{"_index":1283,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["textarea",{"_index":328,"title":{},"body":{"directives/AutoHeightDirective.html":{}}}],["then((res",{"_index":752,"title":{},"body":{"injectables/FurnitureModelControlService.html":{}}}],["this.abortconroller",{"_index":1769,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.abortconroller.abort",{"_index":1947,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.abortcontroller",{"_index":1352,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["this.abortcontroller.abort",{"_index":1353,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["this.abortcontroller.signal",{"_index":1362,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["this.accountcookieservice.deleteaccounttype",{"_index":1684,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.accountcookieservice.deleteguiderule",{"_index":2173,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.accountcookieservice.deletejwt",{"_index":1683,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.accountcookieservice.getguiderule",{"_index":2047,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.accountcookieservice.getjwt",{"_index":184,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/PlanHousePageComponent.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.accountcookieservice.getusertype",{"_index":1642,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.accountcookieservice.setguiderule",{"_index":2167,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.accountdata",{"_index":1050,"title":{},"body":{"components/PlanHousePageComponent.html":{},"interfaces/editForm.html":{}}}],["this.accountdata.avatarurl",{"_index":1665,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.accountdata.nickname",{"_index":1638,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.accountdata.password",{"_index":1650,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.accountdata.projects",{"_index":1065,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.accountdata.projects.length",{"_index":1055,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.accountdata.projects.splice(indexproject",{"_index":1077,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.accountdata.projects[indexproject]._id",{"_index":1075,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.accountdata.projects[plan_id",{"_index":1056,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.accountdata.projects[this.currentprojectid!].rooms",{"_index":1078,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.accountdata.projects[this.currentprojectid]._id",{"_index":1068,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.accountdata.projects[this.currentprojectid].name",{"_index":1073,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.accountdata?.password",{"_index":1647,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.accountservice.deleteaccountjwt(jwt",{"_index":1682,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.accountservice.getaccount(jwt)).accountdata",{"_index":1051,"title":{},"body":{"components/PlanHousePageComponent.html":{},"interfaces/editForm.html":{}}}],["this.accountservice.putupdatesecondaryaccountdata(change_data",{"_index":1637,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.addmodel(furniture_id",{"_index":1768,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.addmodel(object.objectid",{"_index":1876,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.addmodule",{"_index":1036,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.addobjecttoscene(load_object",{"_index":1776,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.animate",{"_index":1806,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.animationframeid",{"_index":1804,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.authservice.putupdatebasedata(change_data",{"_index":1649,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.baseserviceurl",{"_index":875,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["this.baseserviceurl}?category=${categoryname}&startrange=${startrange",{"_index":1355,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["this.baseserviceurl}main?furniturecardid=${furniturecardid}&color=${color",{"_index":1329,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["this.calculatefrustumbounds",{"_index":1863,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.calculategridarea(clientx",{"_index":2094,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.calculategridarea(event.changedtouches[0].clientx",{"_index":2131,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.calculategridarea(event.clientx",{"_index":2130,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.calculatemoveobjectdata(object",{"_index":1877,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.calculateobjectsavedata(object",{"_index":1972,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.calculateroomspansettings",{"_index":2035,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.callsaveemitter.emit",{"_index":2051,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.camera",{"_index":1786,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.camera.aspect",{"_index":1888,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.camera.position.clone",{"_index":1953,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.camera.position.copy(oldcameraposition",{"_index":1960,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.camera.position.set(0",{"_index":1754,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.camera.position.z",{"_index":1800,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.camera.rotation.clone",{"_index":1955,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.camera.rotation.copy(oldcamerarotation",{"_index":1961,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.camera.rotation.set(three.mathutils.degtorad",{"_index":1756,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.camera.updateprojectionmatrix",{"_index":1889,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.cancelupload(file.id",{"_index":886,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["this.canvasratioofwindow",{"_index":1802,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.categoryarray",{"_index":2042,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.categoryservice.getgetallcategories()).categoryarray",{"_index":2043,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.cdr.detectchanges",{"_index":2032,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.checkauthandloaddata",{"_index":1632,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.checkguideinclude",{"_index":2024,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.checkshoppage(value",{"_index":655,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["this.checkvalid('create",{"_index":518,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.checkvalid('update",{"_index":538,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.checkviewport",{"_index":845,"title":{},"body":{"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{}}}],["this.clearerror",{"_index":975,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.clearfurniturecard",{"_index":494,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.clearroom",{"_index":1753,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.clicktimer",{"_index":2122,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.clipboardservice.copyfromcontent(furnitureurl",{"_index":1479,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["this.closeaddmodule",{"_index":1060,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.closeeditform",{"_index":1645,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.closefoundresultslist",{"_index":636,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["this.closeloader",{"_index":1783,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.controls",{"_index":1823,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.controls.dampingfactor",{"_index":1827,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.controls.enabledamping",{"_index":1826,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.controls.enablezoom",{"_index":1829,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.controls.maxdistance",{"_index":1831,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.controls.maxpolarangle",{"_index":1833,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.controls.mindistance",{"_index":1830,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.cookieservice.delete('accounttype",{"_index":86,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["this.cookieservice.delete('guideinclude",{"_index":82,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["this.cookieservice.delete('jwt",{"_index":77,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["this.cookieservice.deleteaccounttype",{"_index":953,"title":{},"body":{"components/NotificationComponent.html":{}}}],["this.cookieservice.deletejwt",{"_index":952,"title":{},"body":{"components/NotificationComponent.html":{}}}],["this.cookieservice.get('accounttype",{"_index":85,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["this.cookieservice.get('guideinclude",{"_index":81,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["this.cookieservice.get('jwt",{"_index":83,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["this.cookieservice.getjwt",{"_index":488,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.cookieservice.set('accounttype",{"_index":84,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["this.cookieservice.set('guideinclude",{"_index":78,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["this.cookieservice.set('jwt",{"_index":72,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["this.costpipe(shopdata.cost",{"_index":1279,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["this.createfurniturecomponent",{"_index":569,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.createfurniturecomponent.currentcolorid",{"_index":503,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.createfurniturecomponent.furnituredata",{"_index":520,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.createfurniturecomponent.furnituredata.colors.length",{"_index":571,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.createfurniturecomponent.furnituredata.colors[this.createfurniturecomponent.currentcolorid].color",{"_index":570,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.createfurniturecomponent.furnituremodelinput.files",{"_index":546,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.createfurniturecomponent.furnituremodelinput.files![0",{"_index":534,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.createfurniturecomponent.openadditional",{"_index":562,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.createfurniturecomponent.opencolormodule",{"_index":551,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.createfurniturecomponent.openshopsmodule",{"_index":567,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.createfurniturecomponentref.nativeelement.queryselector",{"_index":554,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.createreporthtml(roomdata",{"_index":1153,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["this.createroom",{"_index":1759,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.createroomshape(room_proportions.width",{"_index":1835,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.currentcolorid",{"_index":1475,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["this.currentidclickedroom",{"_index":2068,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.currentplanhouse",{"_index":1070,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.currentprojectid",{"_index":1057,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.currentviewroom",{"_index":2110,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.debouncetimer",{"_index":653,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["this.downloadhtml(roomname",{"_index":1287,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["this.editform",{"_index":1670,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.editform.addcontrol('password",{"_index":1674,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.editform.reset",{"_index":1680,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.editform.valid",{"_index":1640,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.editform.value.nickname",{"_index":1636,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.editform.value.password",{"_index":1648,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.el.nativeelement.addeventlistener('input",{"_index":338,"title":{},"body":{"directives/AutoHeightDirective.html":{}}}],["this.elemenetref.nativeelement.queryselector('.addmodule",{"_index":1037,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.elementref.nativeelement.parentelement",{"_index":2027,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.elementref.nativeelement.queryselector('#canvascontainer",{"_index":1799,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.elementref.nativeelement.queryselector('.addmodulebtn",{"_index":2039,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.elementref.nativeelement.queryselector('.colors",{"_index":1458,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["this.elementref.nativeelement.queryselector('.finderinput",{"_index":631,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["this.elementref.nativeelement.queryselector('.roomspan",{"_index":2034,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.elementref.nativeelement.queryselector('.variantsspan",{"_index":629,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["this.elementref.nativeelement.queryselector('[style*=\"cursor",{"_index":2117,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.elementref.nativeelement.queryselector('form",{"_index":2037,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.elementref.nativeelement.queryselector(`[data",{"_index":2142,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.elementref.nativeelement.queryselectorall('app",{"_index":838,"title":{},"body":{"components/MainPageComponent.html":{}}}],["this.emitplanhouse",{"_index":2121,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.errormessage",{"_index":947,"title":{},"body":{"components/NotificationComponent.html":{}}}],["this.errorsubject.asobservable",{"_index":968,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.errorsubject.next",{"_index":977,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.errorsubject.next(message",{"_index":974,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.finderservice.getfindfurnitures(findstring",{"_index":633,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["this.finderservice.setfurniturename(name",{"_index":651,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["this.findfreespace(new_room.roomproportions",{"_index":2189,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.findfurnitures(value",{"_index":656,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["this.fixpath",{"_index":1767,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.formelement",{"_index":2036,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.formelement.classlist.add('openaddmodule",{"_index":2206,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.formelement.classlist.contains('openaddmodule",{"_index":2210,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.formelement.classlist.remove('openaddmodule",{"_index":2211,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.foundfurniture",{"_index":638,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["this.foundfurniture.length",{"_index":640,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["this.furniturecardid",{"_index":1453,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["this.furniturecardservice.deletefurniturecard(jwt",{"_index":515,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"interfaces/clientProportions.html":{}}}],["this.furniturecardservice.getfurniturecard(furniturecardid)).furniturecard.proportions",{"_index":1780,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.furniturecardservice.getfurniturecard(this.furniturecardid)).furniturecard",{"_index":1454,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["this.furniturecardservice.getfurniturecard(this.idpage",{"_index":498,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.furniturecardservice.postcreatefurniturecard(furniture_data",{"_index":522,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.furniturecardservice.putupdatefurniturecard(furniture_data",{"_index":539,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.furnituredata",{"_index":501,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.furnituremodelservice.deletefurnituremodel(jwt",{"_index":513,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.furnituremodelservice.getfurnituremodel(jwt",{"_index":1781,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.furnituremodelservice.postuploadfurnituremodel(furniture_model_blob",{"_index":535,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.furnituremodelservice.postuploadfurnituremodel(furniture_model_blob[0",{"_index":548,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.generatehtmlcontent(roomdata",{"_index":1159,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["this.getfileextension(file.name",{"_index":891,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["this.getfindoptionsbyresult(updated_results",{"_index":1373,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["this.getobjectsize(this.rectanglemesh",{"_index":1842,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.getobjectsize(this.rectanglemesh).width",{"_index":1762,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.getobjectsize(this.targetobject",{"_index":1934,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.guidetemplate",{"_index":2030,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.hasbeenchanged",{"_index":1764,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.hasroomidbeenprocessed",{"_index":1038,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.httpmodule.delete(this.baseserviceurl",{"_index":727,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["this.httpmodule.get(this.baseserviceurl",{"_index":712,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["this.httpmodule.post(this.baseserviceurl",{"_index":724,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["this.httpmodule.put(this.baseserviceurl",{"_index":726,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["this.idpage",{"_index":492,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.imageclientcontrolservice.compressimage(file",{"_index":1663,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.imageservercontrolservice.getaccountavatar(jwt",{"_index":1656,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.imageservercontrolservice.postuploaduseravatar(compressed_image",{"_index":1664,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.imageservice.getmainimage(idfurniture",{"_index":658,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["this.initcategories",{"_index":2025,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.initeditform",{"_index":1633,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.initialized.emit",{"_index":2040,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.initthreejs",{"_index":1747,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.inputelement",{"_index":630,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["this.inputelement.value",{"_index":644,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["this.inputfurniturenamesubject.asobservable",{"_index":677,"title":{},"body":{"injectables/FinderService.html":{}}}],["this.inputfurniturenamesubject.next(name",{"_index":682,"title":{},"body":{"injectables/FinderService.html":{}}}],["this.inputprocess",{"_index":645,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["this.isareaoccupied(grid_area",{"_index":2095,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.isareaoccupied(gridarea",{"_index":2134,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.isareaoccupied(new_grid_area",{"_index":2150,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.isclick",{"_index":2123,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.isdoubleclick",{"_index":2125,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.isdragging",{"_index":2102,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.iseditformopen",{"_index":1678,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.isguideincluded",{"_index":2029,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.isguidevisible",{"_index":2045,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.ismobileview",{"_index":846,"title":{},"body":{"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{}}}],["this.isshowloader",{"_index":1879,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.lastplanhouse",{"_index":2226,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.loadfurnituremodel(model",{"_index":1782,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.loadroom",{"_index":1765,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.loaduserdata(jwt",{"_index":1668,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.location.path",{"_index":1087,"title":{},"body":{"components/PlanHousePageComponent.html":{},"interfaces/roomSpanSettings.html":{}}}],["this.location.path().split('/').slice(0",{"_index":1084,"title":{},"body":{"components/PlanHousePageComponent.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["this.location.replacestate(new_url",{"_index":1086,"title":{},"body":{"components/PlanHousePageComponent.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["this.mobileview",{"_index":337,"title":{},"body":{"directives/AutoHeightDirective.html":{}}}],["this.mouse.x",{"_index":1902,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.mouse.y",{"_index":1903,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.notification.seterror",{"_index":558,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.notification.seterror(error.error.message",{"_index":778,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{}}}],["this.notification.setsuccess",{"_index":536,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/PlanHousePageComponent.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{}}}],["this.notificationservice.error$.subscribe(message",{"_index":946,"title":{},"body":{"components/NotificationComponent.html":{}}}],["this.notificationservice.success$.subscribe(message",{"_index":949,"title":{},"body":{"components/NotificationComponent.html":{}}}],["this.oldsizeviewroom",{"_index":2216,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.oldsizeviewroom.height",{"_index":2219,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.oldsizeviewroom.width",{"_index":2218,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.oninput.bind(this.el.nativeelement",{"_index":339,"title":{},"body":{"directives/AutoHeightDirective.html":{}}}],["this.onmouseup(event",{"_index":2103,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.openfoundresultslist",{"_index":634,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["this.openhtmlinnewtab(roomdata.name",{"_index":1160,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["this.openviewroom(this.currentidclickedroom",{"_index":2163,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.pageinit(jwt",{"_index":495,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.planhouse",{"_index":1039,"title":{},"body":{"components/PlanHousePageComponent.html":{},"interfaces/roomSpanSettings.html":{}}}],["this.planhouse.currentidclickedroom",{"_index":1045,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.planhouse.currentviewroom",{"_index":1044,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.planhouse.foreach(room",{"_index":2057,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.planhouse.guidetemplate",{"_index":1048,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.planhouse.openviewroom(room_id",{"_index":1046,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.planhouse.roomguidetemplate",{"_index":1049,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.planhouse.sceneopentoggle",{"_index":1047,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.planhouse.splice(this.currentidclickedroom",{"_index":2192,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.planhouse[indexroom",{"_index":2227,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.planhouse[indexroom].name",{"_index":2204,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.planhouse[indexroom].roomproportions",{"_index":2203,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.planhouse[this.currentidclickedroom!].gridarea",{"_index":2097,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.planhouse[this.currentidclickedroom].gridarea",{"_index":2152,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.planhouse[this.currentidclickedroom].gridarea.split('/').map(number",{"_index":2143,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.planhouse[this.currentidclickedroom].name",{"_index":2183,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.planhouse[this.currentidclickedroom].roomproportions",{"_index":2069,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.planhouse[this.currentviewroom].objects",{"_index":2175,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.planhousecomponent.closeviewroom",{"_index":1948,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.planhousecomponent.sceneopentoggle",{"_index":1763,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.planhouseemitter.emit(this.planhouse",{"_index":2049,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.previousgridarea",{"_index":2098,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.projectnameform.value",{"_index":1061,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.projectnameform.value.name",{"_index":1062,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.projectservice.deletedeleteproject(jwt",{"_index":1076,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.projectservice.getgetreportofroom(jwt",{"_index":1965,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.projectservice.postcreateproject(jwt",{"_index":1064,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.projectservice.putupdateproject(jwt",{"_index":1074,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.raycaster.intersectobject(this.rectanglemesh",{"_index":1926,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.raycaster.intersectobjects(this.scene.children",{"_index":1906,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.raycaster.setfromcamera(this.mouse",{"_index":1904,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.rectanglemesh",{"_index":1839,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.rectanglemesh.name",{"_index":1837,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.rectanglemesh.rotation.x",{"_index":1760,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.reloadpage",{"_index":954,"title":{},"body":{"components/NotificationComponent.html":{}}}],["this.renderer",{"_index":1795,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.renderer.addclass(room_element",{"_index":2238,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.renderer.addclass(this.addmodule",{"_index":1079,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.renderer.addclass(this.variantsspan",{"_index":641,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["this.renderer.domelement",{"_index":1825,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.renderer.domelement.todataurl('image/png",{"_index":1957,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.renderer.removeclass(room_element",{"_index":2221,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.renderer.removeclass(this.addmodule",{"_index":1081,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.renderer.removeclass(this.variantsspan",{"_index":643,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["this.renderer.removestyle(dragged_element",{"_index":2119,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.renderer.removestyle(room_element",{"_index":2220,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.renderer.removestyle(target_element",{"_index":2099,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.renderer.render(this.scene",{"_index":1807,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.renderer.setsize(window.innerwidth",{"_index":1801,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.renderer.setstyle(event_target",{"_index":2164,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.renderer.setstyle(move_room_element",{"_index":2151,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.renderer.setstyle(room_element",{"_index":2217,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.renderer.setstyle(target_element",{"_index":2096,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.renderer.setstyle(this.roomspan",{"_index":2223,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.renderer.setstyle(this.togglemodulebutton",{"_index":2207,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.reportservice.createreport(response",{"_index":1126,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["this.resetroomposition(event.clientx",{"_index":2111,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.resetroomposition(touch.clientx",{"_index":2114,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.roomdata",{"_index":1749,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.roomdata.objects",{"_index":1874,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.roomdata.roomproportions",{"_index":1758,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.roomdata?._id",{"_index":1951,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.roomform.get('height')?.disable",{"_index":2200,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.roomform.get('height')?.enable",{"_index":2197,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.roomform.get('length')?.disable",{"_index":2201,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.roomform.get('length')?.enable",{"_index":2198,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.roomform.get('width')?.disable",{"_index":2199,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.roomform.get('width')?.enable",{"_index":2196,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.roomform.patchvalue",{"_index":2185,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.roomform.value",{"_index":2187,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.roomform.value.name",{"_index":2182,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.roomguidetemplate",{"_index":2172,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.roomproportions",{"_index":1757,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.roomproportions.length",{"_index":1853,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.roomproportions.width",{"_index":1850,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.roomsguidetemplate1",{"_index":2031,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.roomsguidetemplate2",{"_index":2168,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.roomspan",{"_index":2033,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.roomspan.getboundingclientrect",{"_index":2234,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.roomspan.queryselector(`[data",{"_index":2090,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.roomspansettings.endx",{"_index":2076,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.roomspansettings.gap",{"_index":2077,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.roomspansettings.startx",{"_index":2071,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.roomspansettings.starty",{"_index":2073,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.route.parammap.subscribe(params",{"_index":491,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.route.root",{"_index":647,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["this.route.snapshot.params['furniturecardid",{"_index":1766,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.route.snapshot.params['planid",{"_index":1949,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.route.snapshot.params['roomid",{"_index":1040,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.router.navigatebyurl",{"_index":1685,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.router.navigatebyurl('/account",{"_index":517,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.router.navigatebyurl('/create/new",{"_index":500,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.router.navigatebyurl('/login",{"_index":489,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{}}}],["this.router.navigatebyurl('/plan",{"_index":1058,"title":{},"body":{"components/PlanHousePageComponent.html":{},"interfaces/editForm.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.routesub",{"_index":490,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.savehouse",{"_index":2176,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.saveobjectsemitter.emit(room_objects_data",{"_index":1974,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.saveproject",{"_index":1082,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.saveroom",{"_index":1777,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.scene",{"_index":1751,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.scene.add(hemisphere_light",{"_index":1794,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.scene.children.filter(object",{"_index":1969,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.scene.children.length",{"_index":1882,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.scene.children[i",{"_index":1883,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.scene.remove(object",{"_index":1886,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.scene.remove(this.targetobject",{"_index":1967,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.scenecomponent.saveroom",{"_index":2180,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.sceneopentoggle",{"_index":2109,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.serverimagecontrol.deleteproject(jwt",{"_index":514,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"interfaces/clientProportions.html":{}}}],["this.serverimagecontrol.postuploadprojectimages(colordata.color",{"_index":532,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.showguide",{"_index":2169,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.showloader",{"_index":1779,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.successmessage",{"_index":950,"title":{},"body":{"components/NotificationComponent.html":{}}}],["this.successsubject.asobservable",{"_index":971,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.successsubject.next",{"_index":978,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.successsubject.next(message",{"_index":976,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.targetobject",{"_index":1893,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.targetobject.position.set(newxobjectposition",{"_index":1945,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.targetobject.rotation.y",{"_index":1921,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.togglecontrols(this.currentidclickedroom",{"_index":2205,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.togglecontrols(true",{"_index":2193,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.togglemodulebutton",{"_index":2038,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.toggleopenroommodule",{"_index":2184,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.toggleopenroommodule(this.currentidclickedroom",{"_index":2124,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.transformurlarraytoblob(colordata.imagesdata.images",{"_index":527,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.updatebasedataifneeded(jwt",{"_index":1644,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.updatesecondaryaccountdata(jwt",{"_index":1643,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.updateupload(file.id",{"_index":882,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["this.uploads$.next([...current",{"_index":917,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["this.uploads$.next(updatedqueue",{"_index":914,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["this.uploads$.value.filter(file",{"_index":911,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["this.uploadservice.addfile(modelfile",{"_index":755,"title":{},"body":{"injectables/FurnitureModelControlService.html":{}}}],["this.uploadservice.cancelupload(id",{"_index":1408,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["this.uploadservice.removefilefromqueue(id",{"_index":1409,"title":{},"body":{"components/UploadOverlayComponent.html":{}}}],["this.uppy",{"_index":872,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["this.uppy.addfile",{"_index":890,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["this.uppy.getfile(fileid",{"_index":896,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["this.uppy.on('upload",{"_index":877,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["this.uppy.removefile(fileid",{"_index":897,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["this.uppy.use(xhrupload",{"_index":874,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["this.variantsspan",{"_index":628,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["three",{"_index":1616,"title":{},"body":{"dependencies.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["three.buffergeometry",{"_index":1811,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["three.hemispherelight(0xaaaaaa",{"_index":1792,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["three.js",{"_index":1702,"title":{},"body":{"miscellaneous/functions.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["three.mathutils.degtorad",{"_index":1761,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["three.mathutils.degtorad(90",{"_index":1834,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["three.mesh",{"_index":1740,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["three.object3d",{"_index":1743,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["three.perspectivecamera",{"_index":1729,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["three.perspectivecamera(75",{"_index":1787,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["three.raycaster",{"_index":1736,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["three.scene",{"_index":1730,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["three.shape",{"_index":1813,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["three.shapegeometry(shape",{"_index":1820,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["three.vector2",{"_index":1738,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["three.webglrenderer",{"_index":1727,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["three/examples/jsm/controls/orbitcontrols.js",{"_index":1711,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["throttle",{"_index":329,"title":{},"body":{"directives/AutoHeightDirective.html":{},"interfaces/roomSpanSettings.html":{}}}],["throw",{"_index":183,"title":{},"body":{"injectables/AccountService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"injectables/ShopService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"interfaces/shopData.html":{}}}],["throwerror",{"_index":773,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{}}}],["throws",{"_index":709,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"injectables/ShopService.html":{},"interfaces/additionalData.html":{},"interfaces/clientFilters.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"interfaces/shopData.html":{}}}],["title",{"_index":214,"title":{},"body":{"components/AppComponent.html":{},"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["togglecontrols(enable",{"_index":2194,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["togglemenu",{"_index":924,"title":{},"body":{"components/NavigationPanelComponent.html":{}}}],["togglemodulebutton",{"_index":2001,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["toggleopenroommodule(indexroom",{"_index":2202,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["top",{"_index":1261,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["touch",{"_index":2112,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["touch.clienty",{"_index":2115,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["touchevent",{"_index":2108,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["transform",{"_index":397,"title":{},"body":{"pipes/CostFormatPipe.html":{},"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["transform(value",{"_index":398,"title":{},"body":{"pipes/CostFormatPipe.html":{}}}],["transformedfurniturecard",{"_index":719,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["transformurlarraytoblob",{"_index":425,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["transformurlarraytoblob(imagesarray",{"_index":454,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["transition",{"_index":1220,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["translatemany",{"_index":354,"title":{},"body":{"injectables/CategoryService.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/option.html":{},"interfaces/rangeFilter.html":{},"interfaces/selectFilter.html":{}}}],["translateone",{"_index":353,"title":{},"body":{"injectables/CategoryService.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/option.html":{},"interfaces/rangeFilter.html":{},"interfaces/selectFilter.html":{}}}],["transparent",{"_index":1247,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["tree",{"_index":190,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["true",{"_index":106,"title":{},"body":{"injectables/AccountService.html":{},"components/AppComponent.html":{},"directives/AutoHeightDirective.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/UploadEntry.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientProportions.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"miscellaneous/functions.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":171,"title":{},"body":{"injectables/AccountService.html":{},"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ShopService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"interfaces/roomData-1.html":{},"interfaces/shopData.html":{}}}],["tuicarousel",{"_index":782,"title":{},"body":{"components/ImageSliderComponent.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{}}}],["turnoff",{"_index":2171,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["turnoffguides(turnoff",{"_index":2170,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["type",{"_index":27,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/UploadEntry.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"miscellaneous/functions.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":2245,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typejwt",{"_index":44,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["typeof",{"_index":1043,"title":{},"body":{"components/PlanHousePageComponent.html":{},"interfaces/roomSpanSettings.html":{}}}],["typerequest",{"_index":440,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["ui/cdk",{"_index":1588,"title":{},"body":{"dependencies.html":{}}}],["ui/core",{"_index":1590,"title":{},"body":{"dependencies.html":{}}}],["ui/event",{"_index":1591,"title":{},"body":{"dependencies.html":{}}}],["ui/kit",{"_index":806,"title":{},"body":{"components/ImageSliderComponent.html":{},"dependencies.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{}}}],["ui/legacy",{"_index":1595,"title":{},"body":{"dependencies.html":{}}}],["undefined",{"_index":446,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FurnitureCardControlService.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/PlanHousePageComponent.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/additionalData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/shopData.html":{}}}],["unique_id",{"_index":888,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["unknown",{"_index":114,"title":{},"body":{"injectables/AccountService.html":{},"injectables/ShopService.html":{}}}],["update",{"_index":438,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"interfaces/clientProportions.html":{},"miscellaneous/typealiases.html":{}}}],["updatebasedataifneeded(jwt",{"_index":1646,"title":{},"body":{"interfaces/editForm.html":{}}}],["updated_results",{"_index":1370,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["updatedqueue",{"_index":910,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["updatefurniturecard",{"_index":426,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["updateplandata",{"_index":997,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["updateplandata(planhouse",{"_index":1019,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["updateroom",{"_index":2181,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["updateroomobjects(objects",{"_index":2174,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["updatesecondaryaccountdata(jwt",{"_index":1634,"title":{},"body":{"interfaces/editForm.html":{}}}],["updateupload",{"_index":1415,"title":{},"body":{"injectables/UploadService.html":{}}}],["updateupload(id",{"_index":915,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["upload",{"_index":275,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"interfaces/MyXhrUploadOptions.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"injectables/ServerImageControlService.html":{},"interfaces/UploadEntry.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"dependencies.html":{}}}],["upload.service",{"_index":744,"title":{},"body":{"injectables/FurnitureModelControlService.html":{}}}],["upload_object_size.length",{"_index":1865,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["upload_object_size.width",{"_index":1867,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["upload_type",{"_index":900,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["uploadavatar(event",{"_index":1659,"title":{},"body":{"interfaces/editForm.html":{}}}],["uploadentry",{"_index":866,"title":{"interfaces/UploadEntry.html":{}},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"coverage.html":{}}}],["uploadimagesinput",{"_index":568,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["uploading",{"_index":865,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"miscellaneous/typealiases.html":{}}}],["uploadinput",{"_index":563,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["uploadinput.click",{"_index":565,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["uploadoverlaycomponent",{"_index":211,"title":{"components/UploadOverlayComponent.html":{}},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"coverage.html":{}}}],["uploads",{"_index":871,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["uploadservice",{"_index":731,"title":{"injectables/UploadService.html":{}},"body":{"injectables/FurnitureModelControlService.html":{},"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"coverage.html":{}}}],["uploadstatus",{"_index":864,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["uploadtype",{"_index":740,"title":{},"body":{"injectables/FurnitureModelControlService.html":{},"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["uppercase",{"_index":1194,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["uppy",{"_index":858,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["uppy/angular",{"_index":1596,"title":{},"body":{"dependencies.html":{}}}],["uppy/core",{"_index":859,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["uppy/xhr",{"_index":861,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{},"dependencies.html":{}}}],["url",{"_index":126,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"components/ImageSliderComponent.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"miscellaneous/functions.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{},"miscellaneous/variables.html":{}}}],["url('${baseclienturl}assets/fonts/calypso.ttf",{"_index":1168,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["url('${baseclienturl}assets/fonts/courier",{"_index":1171,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["url(this.baseserviceurl",{"_index":745,"title":{},"body":{"injectables/FurnitureModelControlService.html":{}}}],["url.createobjecturl(blob",{"_index":1284,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["url.createobjecturl(compressed_image",{"_index":1666,"title":{},"body":{"interfaces/editForm.html":{}}}],["url.revokeobjecturl(htmlurl",{"_index":1294,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["url.searchparams.set('furniturecardid",{"_index":747,"title":{},"body":{"injectables/FurnitureModelControlService.html":{}}}],["url.searchparams.set('jwt",{"_index":746,"title":{},"body":{"injectables/FurnitureModelControlService.html":{}}}],["urlsearchparams",{"_index":1357,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["urlsearchparams(params).tostring",{"_index":1360,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["usable/main",{"_index":836,"title":{},"body":{"components/MainPageComponent.html":{}}}],["usable/reusable",{"_index":622,"title":{},"body":{"components/FinderComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"interfaces/foundFurniture.html":{}}}],["useclass",{"_index":2262,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validationerrors",{"_index":1988,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["validatorfn",{"_index":1987,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["validators",{"_index":1034,"title":{},"body":{"components/PlanHousePageComponent.html":{},"interfaces/editForm.html":{},"interfaces/roomSpanSettings.html":{}}}],["validators.max(10",{"_index":2242,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["validators.maxlength(20",{"_index":2244,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["validators.maxlength(30",{"_index":1673,"title":{},"body":{"interfaces/editForm.html":{}}}],["validators.min(0.1",{"_index":2241,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["validators.minlength(3",{"_index":1672,"title":{},"body":{"interfaces/editForm.html":{}}}],["validators.minlength(6",{"_index":1676,"title":{},"body":{"interfaces/editForm.html":{}}}],["validators.pattern(/^\\d*\\.?\\d",{"_index":2243,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["validators.required",{"_index":1032,"title":{},"body":{"components/PlanHousePageComponent.html":{},"interfaces/editForm.html":{},"interfaces/roomSpanSettings.html":{}}}],["value",{"_index":123,"title":{},"body":{"injectables/AccountService.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientFilters.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"miscellaneous/variables.html":{}}}],["value.length",{"_index":654,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["value.tostring().replace(/\\b(?=(\\d{3})+(?!\\d))/g",{"_index":402,"title":{},"body":{"pipes/CostFormatPipe.html":{}}}],["var",{"_index":246,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["variable",{"_index":1491,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":2250,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["variantsspan",{"_index":584,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["variantsspanopen",{"_index":642,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["version",{"_index":1976,"title":{},"body":{"properties.html":{}}}],["view",{"_index":278,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["viewchild",{"_index":476,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/roomSpanSettings.html":{}}}],["viewchild('planhouse",{"_index":1028,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["viewchild('roomguidetemplate",{"_index":2022,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["viewchild('roomsguidetemplate1",{"_index":2017,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["viewchild('roomsguidetemplate2",{"_index":2020,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["viewchild('scene",{"_index":2013,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["viewchild(createfurniturecomponent",{"_index":459,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["viewfurniturecomponent",{"_index":277,"title":{"components/ViewFurnitureComponent.html":{}},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/UploadOverlayComponent.html":{},"components/ViewFurnitureComponent.html":{},"coverage.html":{}}}],["void",{"_index":31,"title":{},"body":{"injectables/AccountCookieService.html":{},"directives/AutoHeightDirective.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureModelControlService.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ReportService.html":{},"components/UploadOverlayComponent.html":{},"injectables/UploadService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["weight",{"_index":1199,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["white",{"_index":1245,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{},"interfaces/roomSpanSettings.html":{}}}],["width",{"_index":467,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/ReportService.html":{},"interfaces/additionalData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/shopData.html":{}}}],["width:250px",{"_index":1248,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["width:fit",{"_index":1206,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["widthratio",{"_index":1859,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["window.getcomputedstyle(event_target).getpropertyvalue('grid",{"_index":2162,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["window.innerheight",{"_index":1788,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["window.innerwidth",{"_index":847,"title":{},"body":{"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["window.location.reload",{"_index":951,"title":{},"body":{"components/NotificationComponent.html":{}}}],["window.open(url",{"_index":1285,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["window:resize",{"_index":791,"title":{},"body":{"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{}}}],["workbox",{"_index":1618,"title":{},"body":{"dependencies.html":{}}}],["worker",{"_index":1587,"title":{},"body":{"dependencies.html":{}}}],["wrap",{"_index":1231,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["x",{"_index":1715,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["xdistance",{"_index":1721,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["xhrupload",{"_index":860,"title":{},"body":{"interfaces/MyXhrUploadOptions.html":{},"interfaces/UploadEntry.html":{},"injectables/UploadService.html":{}}}],["xmetersdistance",{"_index":1716,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["y",{"_index":1719,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["yes",{"_index":692,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"injectables/ShopService.html":{},"miscellaneous/functions.html":{}}}],["yrotate",{"_index":1720,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["z",{"_index":1717,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["zdistance",{"_index":1722,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["zmetersdistance",{"_index":1718,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["zone.js",{"_index":1623,"title":{},"body":{"dependencies.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"injectables/AccountCookieService.html":{"url":"injectables/AccountCookieService.html","title":"injectable - AccountCookieService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccountCookieService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/account-cookie.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                deleteAccountType\n                            \n                            \n                                deleteGuideRule\n                            \n                            \n                                deleteJwt\n                            \n                            \n                                getGuideRule\n                            \n                            \n                                getJwt\n                            \n                            \n                                getUserType\n                            \n                            \n                                setGuideRule\n                            \n                            \n                                setJwt\n                            \n                            \n                                setUserType\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cookieService: CookieService)\n                    \n                \n                        \n                            \n                                Defined in src/services/account-cookie.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cookieService\n                                                  \n                                                        \n                                                                    CookieService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        deleteAccountType\n                        \n                    \n                \n            \n            \n                \ndeleteAccountType()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/account-cookie.service.ts:89\n                        \n                    \n\n\n            \n                \n                        Удаление типа пользователя из куки\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteGuideRule\n                        \n                    \n                \n            \n            \n                \ndeleteGuideRule()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/account-cookie.service.ts:56\n                        \n                    \n\n\n            \n                \n                        Удаление флага отображения руководства из куки\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteJwt\n                        \n                    \n                \n            \n            \n                \ndeleteJwt()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/account-cookie.service.ts:31\n                        \n                    \n\n\n            \n                \n                        Удаление JWT токена из куки\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getGuideRule\n                        \n                    \n                \n            \n            \n                \ngetGuideRule()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/account-cookie.service.ts:49\n                        \n                    \n\n\n            \n                \n                        Получение значения флага отображения руководства из куки\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                Значение куки guideInclude\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getJwt\n                        \n                    \n                \n            \n            \n                \ngetJwt()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/account-cookie.service.ts:64\n                        \n                    \n\n\n            \n                \n                        Получение JWT токена из куки\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                JWT токен, либо пустую строку, если кука отсутствует\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserType\n                        \n                    \n                \n            \n            \n                \ngetUserType()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/account-cookie.service.ts:82\n                        \n                    \n\n\n            \n                \n                        Получение типа пользователя из куки\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                Тип аккаунта ('email' или 'google'), либо пустая строка, если кука отсутствует\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setGuideRule\n                        \n                    \n                \n            \n            \n                \nsetGuideRule()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/account-cookie.service.ts:38\n                        \n                    \n\n\n            \n                \n                        Установка флага отображения руководства (guideInclude) в куки\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setJwt\n                        \n                    \n                \n            \n            \n                \nsetJwt(jwt: string, typeJwt: \"long\" | \"temporary\")\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/account-cookie.service.ts:18\n                        \n                    \n\n\n            \n                \n                        Установка JWT токена в куки с указанием срока действия\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    JWT токен\n\n                                            \n                                        \n                                        \n                                                typeJwt\n                                            \n                                                        \"long\" | \"temporary\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Тип JWT токена ('long' — долгосрочный, 'temporary' — временный)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setUserType\n                        \n                    \n                \n            \n            \n                \nsetUserType(accountType: accountType)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/account-cookie.service.ts:72\n                        \n                    \n\n\n            \n                \n                        Установка типа пользователя в куки\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                accountType\n                                            \n                                                            accountType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Тип аккаунта ('email' или 'google')\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { CookieService } from 'ngx-cookie-service';\nimport { accountType } from './account.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccountCookieService {\n  constructor(\n    private cookieService: CookieService\n  ) { }\n\n  /**\n   * Установка JWT токена в куки с указанием срока действия\n   * @param jwt JWT токен\n   * @param typeJwt Тип JWT токена ('long' — долгосрочный, 'temporary' — временный)\n   */\n  setJwt(jwt: string, typeJwt: 'long' | 'temporary') {\n    const expirationDate = new Date();\n    if (typeJwt === 'long') {\n      expirationDate.setDate(expirationDate.getDate() + 7); // срок действия 7 дней\n    } else {\n      expirationDate.setMinutes(expirationDate.getMinutes() + 10); // срок действия 10 минут\n    }\n    this.cookieService.set('jwt', jwt, { expires: expirationDate, path: '/', sameSite: 'Strict' });\n  }\n\n  /**\n   * Удаление JWT токена из куки\n   */\n  deleteJwt() {\n    this.cookieService.delete('jwt', '/');\n  }\n\n  /**\n   * Установка флага отображения руководства (guideInclude) в куки\n   */\n  setGuideRule() {\n    // Здесь исправил установку срока действия куки — должно быть объект Date, а не число\n    const expirationDate = new Date();\n    expirationDate.setDate(expirationDate.getDate() + 7);\n    this.cookieService.set('guideInclude', 'false', { expires: expirationDate, path: '/', sameSite: 'Strict' });\n  }\n\n  /**\n   * Получение значения флага отображения руководства из куки\n   * @returns Значение куки guideInclude\n   */\n  getGuideRule() {\n    return this.cookieService.get('guideInclude');\n  }\n\n  /**\n   * Удаление флага отображения руководства из куки\n   */\n  deleteGuideRule() {\n    this.cookieService.delete('guideInclude', '/');\n  }\n\n  /**\n   * Получение JWT токена из куки\n   * @returns JWT токен, либо пустую строку, если кука отсутствует\n   */\n  getJwt(): string {\n    return this.cookieService.get('jwt');\n  }\n\n  /**\n   * Установка типа пользователя в куки\n   * @param accountType Тип аккаунта ('email' или 'google')\n   */\n  setUserType(accountType: accountType) {\n    const expirationDate = new Date();\n    expirationDate.setDate(expirationDate.getDate() + 7);\n    this.cookieService.set('accountType', accountType, { expires: expirationDate, path: '/', sameSite: 'Strict' });\n  }\n\n  /**\n   * Получение типа пользователя из куки\n   * @returns Тип аккаунта ('email' или 'google'), либо пустая строка, если кука отсутствует\n   */\n  getUserType(): string {\n    return this.cookieService.get('accountType');\n  }\n\n  /**\n   * Удаление типа пользователя из куки\n   */\n  deleteAccountType() {\n    this.cookieService.delete('accountType', '/');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AccountService.html":{"url":"injectables/AccountService.html","title":"injectable - AccountService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccountService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/account.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseServiceUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                checkJwt\n                            \n                            \n                                DELETEaccount\n                            \n                            \n                                DELETEaccountJwt\n                            \n                            \n                                    Async\n                                GETaccount\n                            \n                            \n                                POSTcreateAccount\n                            \n                            \n                                PUTupdateSecondaryAccountData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpModule: HttpClient, accountCookieService: AccountCookieService)\n                    \n                \n                        \n                            \n                                Defined in src/services/account.service.ts:97\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpModule\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accountCookieService\n                                                  \n                                                        \n                                                                        AccountCookieService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        checkJwt\n                        \n                    \n                \n            \n            \n                \ncheckJwt()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/account.service.ts:187\n                        \n                    \n\n\n            \n                \n                        Проверка наличия JWT токена в куках\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                true, если JWT токен найден, иначе false\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DELETEaccount\n                        \n                    \n                \n            \n            \n                \nDELETEaccount(jwt: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/account.service.ts:154\n                        \n                    \n\n\n            \n                \n                        Удаление аккаунта пользователя\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    JWT токен\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise с сообщением об успешном удалении пользователя\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DELETEaccountJwt\n                        \n                    \n                \n            \n            \n                \nDELETEaccountJwt(jwt: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/account.service.ts:128\n                        \n                    \n\n\n            \n                \n                        Удаление JWT токена пользователя\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    JWT токен\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise с сообщением об успешном удалении токена\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        GETaccount\n                        \n                    \n                \n            \n            \n                \n                        \n                    GETaccount(jwt: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/account.service.ts:165\n                        \n                    \n\n\n            \n                \n                        Получение полной информации об аккаунте пользователя\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    JWT токен\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Promise с данными аккаунта (включая проекты и мебель)\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        POSTcreateAccount\n                        \n                    \n                \n            \n            \n                \nPOSTcreateAccount(createAccountData: createAccountData)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/account.service.ts:109\n                        \n                    \n\n\n            \n                \n                        Создание нового пользователя\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createAccountData\n                                            \n                                                            createAccountData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Основная информация о пользователе (никнейм, email, пароль)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise с сообщением об успешном создании пользователя\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PUTupdateSecondaryAccountData\n                        \n                    \n                \n            \n            \n                \nPUTupdateSecondaryAccountData(changeData: changeSecondaryData)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/account.service.ts:139\n                        \n                    \n\n\n            \n                \n                        Обновление вторичных данных аккаунта (например, никнейм)\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                changeData\n                                            \n                                                            changeSecondaryData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Данные для изменения\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise с сообщением об успешном обновлении\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseServiceUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : baseUrl + 'account'\n                    \n                \n                    \n                        \n                                Defined in src/services/account.service.ts:97\n                        \n                    \n\n            \n                \n                    Базовый URL для аккаунт-сервисов\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { projectInformation, projectServerInformation } from './project.service';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { AccountCookieService } from './account-cookie.service';\nimport { baseUrl } from '.';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные для изменения аккаунта с email\n */\nexport interface changeAccountDataEmail {\n  /** JWT токен */\n  jwt: string;\n  /** Тип аккаунта (email) */\n  accountType: 'email';\n  /** Пароль пользователя */\n  password: string;\n}\n\n/**\n * Полные данные аккаунта пользователя\n */\nexport interface accountFullData {\n  /** URL аватара */\n  avatarUrl: string;\n  /** Никнейм пользователя */\n  nickname: string;\n  /** Email пользователя */\n  email: string;\n  /** Массив проектов пользователя */\n  projects: projectInformation[];\n  /** Массив мебели, связанной с аккаунтом */\n  furnitures: furnitureAccountData[];\n  /** Пароль пользователя (необязательный) */\n  password?: string;\n}\n\n/**\n * Данные для изменения вторичных данных аккаунта\n */\nexport interface changeSecondaryData {\n  /** JWT токен */\n  jwt: string;\n  /** Новый никнейм */\n  nickname: string;\n}\n\n/**\n * Данные по мебели, связанной с аккаунтом\n */\nexport interface furnitureAccountData {\n  /** Идентификатор мебели */\n  _id: string;\n  /** Название мебели */\n  name: string;\n  /** URL превью изображения мебели */\n  previewUrl: string;\n}\n\n/** Тип аккаунта */\nexport type accountType = 'google' | 'email';\n\n/** Тип данных для изменения аккаунта (на данный момент только email) */\nexport type changeAccountData = changeAccountDataEmail;\n\n/**\n * Данные для создания аккаунта с email\n */\ninterface createEmailAccountData {\n  /** Email */\n  email: string;\n  /** Пароль */\n  password: string;\n  /** Никнейм */\n  nickname: string;\n  /** Тип аккаунта (email) */\n  accountType: 'email';\n}\n\n/** Тип данных для создания аккаунта */\nexport type createAccountData = createEmailAccountData;\n\n/**\n * Функция-помощник для проверки, что аккаунт с типом email\n * @param account Объект аккаунта\n * @returns true, если аккаунт с типом email\n */\nexport function isEmailAccount(account: { accountType: accountType }): account is changeAccountDataEmail {\n  return account.accountType === 'email';\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccountService {\n  /** Базовый URL для аккаунт-сервисов */\n  private baseServiceUrl = baseUrl + 'account';\n\n  constructor(\n    private httpModule: HttpClient,\n    private accountCookieService: AccountCookieService\n  ) { }\n\n  /**\n   * Создание нового пользователя\n   * @param createAccountData Основная информация о пользователе (никнейм, email, пароль)\n   * @returns Promise с сообщением об успешном создании пользователя\n   */\n  POSTcreateAccount(createAccountData: createAccountData) {\n    let HTTP_PARAMS = new HttpParams()\n      .set('accountType', createAccountData.accountType)\n      .set('nickname', createAccountData.nickname);\n\n    if (isEmailAccount(createAccountData)) {\n      HTTP_PARAMS = HTTP_PARAMS\n        .set('email', createAccountData.email)\n        .set('password', createAccountData.password);\n    }\n\n    return firstValueFrom(this.httpModule.post(this.baseServiceUrl, HTTP_PARAMS)) as Promise;\n  }\n\n  /**\n   * Удаление JWT токена пользователя\n   * @param jwt JWT токен\n   * @returns Promise с сообщением об успешном удалении токена\n   */\n  DELETEaccountJwt(jwt: string) {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt);\n    return firstValueFrom(this.httpModule.delete(this.baseServiceUrl + '/jwt/delete', { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Обновление вторичных данных аккаунта (например, никнейм)\n   * @param changeData Данные для изменения\n   * @returns Promise с сообщением об успешном обновлении\n   */\n  PUTupdateSecondaryAccountData(changeData: changeSecondaryData) {\n    const HTTP_PARAMS = new HttpParams({\n      fromObject: {\n        nickname: changeData.nickname,\n        jwt: changeData.jwt\n      }\n    });\n    return firstValueFrom(this.httpModule.put(this.baseServiceUrl, null, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Удаление аккаунта пользователя\n   * @param jwt JWT токен\n   * @returns Promise с сообщением об успешном удалении пользователя\n   */\n  DELETEaccount(jwt: string) {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt);\n    return firstValueFrom(this.httpModule.delete(this.baseServiceUrl, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Получение полной информации об аккаунте пользователя\n   * @param jwt JWT токен\n   * @returns Promise с данными аккаунта (включая проекты и мебель)\n   */\n  async GETaccount(jwt: string) {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt);\n    try {\n      let { accountData } = await firstValueFrom(this.httpModule.get(this.baseServiceUrl, { params: HTTP_PARAMS })) as { accountData: accountFullData & { projects: projectServerInformation[] } };\n      accountData.furnitures = accountData.furnitures.map(furnitureData => {\n        return {\n          ...furnitureData,\n          previewUrl: baseUrl + furnitureData.previewUrl\n        };\n      });\n      return { accountData: accountData };\n    } catch (error) {\n      console.error('Error in GETfurnitureCard:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Проверка наличия JWT токена в куках\n   * @returns true, если JWT токен найден, иначе false\n   */\n  checkJwt(): boolean {\n    return this.accountCookieService.getJwt() ? true : false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n            \n                providers\n                \n                                AutoHeightDirective\n                                NotificationComponent\n                                AccountService\n                                AuthService\n                                AccountCookieService\n                                ServerImageControlService\n                                ProjectService\n                                PlanHouseComponent\n                                SceneComponent\n                                FurnitureCardControlService\n                                FurnitureModelControlService\n                                ShopService\n                                FinderService\n                            Location\n                \n            \n\n\n            \n                selector\n                app-root\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            RouterOutlet\n                                NotificationComponent\n                                UploadOverlayComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'HouseQuality'\n                    \n                \n                    \n                        \n                                Defined in src/app.component.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component} from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\nimport { SceneComponent } from './components/scene/scene.component';\nimport { PlanHouseComponent } from './components/plan-house/plan-house.component';\nimport { NotificationComponent } from './components/notification/notification.component';\nimport { AccountService } from './services/account.service';\nimport { AuthService } from './services/auth.service';\nimport { AccountCookieService } from './services/account-cookie.service';\nimport { ServerImageControlService } from './services/server-image-control.service';\nimport { ProjectService } from './services/project.service';\nimport { FurnitureCardControlService } from './services/furniture-card-control.service';\nimport { FurnitureModelControlService } from './services/furniture-model-control.service';\nimport { ShopService } from './services/shop.service';\nimport { FinderService } from './services/finder.service';\nimport { AutoHeightDirective } from './directives/auto-height.directive';\nimport { UploadOverlayComponent } from './components/upload-overlay/upload-overlay.component';\n\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [RouterOutlet,NotificationComponent,UploadOverlayComponent],\n  providers:[AutoHeightDirective,NotificationComponent,AccountService,AuthService,AccountCookieService,ServerImageControlService,ProjectService,PlanHouseComponent,SceneComponent,FurnitureCardControlService,FurnitureModelControlService,ShopService,FinderService,Location],\n  templateUrl: './app.component.html'\n})\nexport class AppComponent {\n  title = 'HouseQuality'; \n}\n\n    \n\n    \n        \n\n\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AccountPageComponent', 'selector': 'app-account-page'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreateFurnitureComponent', 'selector': 'app-create-furniture'},{'name': 'CreateFurniturePageComponent', 'selector': 'app-create-furniture-page'},{'name': 'FinderComponent', 'selector': 'app-finder'},{'name': 'ImageSliderComponent', 'selector': 'app-image-slider'},{'name': 'LoginPageComponent', 'selector': 'app-login-page'},{'name': 'MainPageComponent', 'selector': 'app-main-page'},{'name': 'NavigationPanelComponent', 'selector': 'app-navigation-panel'},{'name': 'NotificationComponent', 'selector': 'app-notification'},{'name': 'PlanHouseComponent', 'selector': 'app-plan-house'},{'name': 'PlanHousePageComponent', 'selector': 'app-plan-house-page'},{'name': 'SceneComponent', 'selector': 'app-scene'},{'name': 'ShopPageComponent', 'selector': 'app-shop-page'},{'name': 'UploadOverlayComponent', 'selector': 'app-upload-overlay'},{'name': 'ViewFurnitureComponent', 'selector': 'app-view-furniture'}];\n    var DIRECTIVES = [{'name': 'AutoHeightDirective', 'selector': '[appAutoHeight]'}];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseServiceUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                GETrequestPasswordCode\n                            \n                            \n                                POSTcreateLongJWT\n                            \n                            \n                                POSTcreateShortJWT\n                            \n                            \n                                PUTupdateBaseData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpModule: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/services/auth.service.ts:38\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpModule\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        GETrequestPasswordCode\n                        \n                    \n                \n            \n            \n                \nGETrequestPasswordCode(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/auth.service.ts:98\n                        \n                    \n\n\n            \n                \n                        Запрос кода сброса пароля по email\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Email пользователя\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise с кодом для сброса пароля\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        POSTcreateLongJWT\n                        \n                    \n                \n            \n            \n                \nPOSTcreateLongJWT(authData: authData)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/auth.service.ts:49\n                        \n                    \n\n\n            \n                \n                        Создание длинного JWT токена\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                authData\n                                            \n                                                            authData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Данные для входа (email+пароль или google)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise с JWT токеном\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        POSTcreateShortJWT\n                        \n                    \n                \n            \n            \n                \nPOSTcreateShortJWT(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/auth.service.ts:67\n                        \n                    \n\n\n            \n                \n                        Создание короткого (временного) JWT токена\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Email пользователя\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise с временным JWT токеном\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PUTupdateBaseData\n                        \n                    \n                \n            \n            \n                \nPUTupdateBaseData(changeData: changeAccountData)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/auth.service.ts:79\n                        \n                    \n\n\n            \n                \n                        Обновление базовой информации о пользователе\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                changeData\n                                            \n                                                            changeAccountData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Новые данные для обновления аккаунта\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise с сообщением об успехе обновления\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseServiceUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : baseUrl + 'auth/'\n                    \n                \n                    \n                        \n                                Defined in src/services/auth.service.ts:38\n                        \n                    \n\n            \n                \n                    Базовый URL для auth-роутов\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { accountType, changeAccountDataEmail, changeAccountData } from './account.service';\nimport { baseUrl } from '.';\nimport { isEmailAccount } from './account.service';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные для аутентификации через email\n */\nexport interface emailAuthData {\n  /** Email пользователя */\n  email: string;\n  /** Пароль пользователя */\n  password: string;\n  /** Тип аккаунта - 'email' */\n  accountType: 'email';\n}\n\n/**\n * Данные для аутентификации через Google\n */\nexport interface googleAuthData {\n  /** Тип аккаунта - 'google' */\n  accountType: 'google';\n}\n\n/**\n * Объединённый тип данных для аутентификации\n */\nexport type authData = googleAuthData | emailAuthData;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  /** Базовый URL для auth-роутов */\n  private baseServiceUrl = baseUrl + 'auth/';\n\n  constructor(\n    private httpModule: HttpClient\n  ) { }\n\n  /**\n   * Создание длинного JWT токена\n   * @param authData Данные для входа (email+пароль или google)\n   * @returns Promise с JWT токеном\n   */\n  POSTcreateLongJWT(authData: authData) {\n    let HTTP_PARAMS = new HttpParams()\n      .set('accountType', authData.accountType);\n\n    if (isEmailAccount(authData)) {\n      HTTP_PARAMS = HTTP_PARAMS\n        .set('email', authData.email)\n        .set('password', authData.password);\n    }\n\n    return firstValueFrom(this.httpModule.post(this.baseServiceUrl + 'jwt/long', HTTP_PARAMS)) as Promise;\n  }\n\n  /**\n   * Создание короткого (временного) JWT токена\n   * @param email Email пользователя\n   * @returns Promise с временным JWT токеном\n   */\n  POSTcreateShortJWT(email: string) {\n    let HTTP_PARAMS = new HttpParams()\n      .set('email', email);\n\n    return firstValueFrom(this.httpModule.post(this.baseServiceUrl + 'jwt/temporary',null, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Обновление базовой информации о пользователе\n   * @param changeData Новые данные для обновления аккаунта\n   * @returns Promise с сообщением об успехе обновления\n   */\n  PUTupdateBaseData(changeData: changeAccountData) {\n    const paramObject: any = {\n      accountType: changeData.accountType,\n      jwt: changeData.jwt\n    };\n\n    if (isEmailAccount(changeData)) {\n      paramObject.password = changeData.password;\n    }\n\n    const HTTP_PARAMS = new HttpParams({ fromObject: paramObject });\n    return firstValueFrom(this.httpModule.put(this.baseServiceUrl + 'account', changeData)) as Promise;\n  }\n\n  /**\n   * Запрос кода сброса пароля по email\n   * @param email Email пользователя\n   * @returns Promise с кодом для сброса пароля\n   */\n  GETrequestPasswordCode(email: string) {\n    let HTTP_PARAMS = new HttpParams()\n      .set('email', email);\n\n    return firstValueFrom(this.httpModule.get(this.baseServiceUrl + 'account/code', { params: HTTP_PARAMS })) as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/AutoHeightDirective.html":{"url":"directives/AutoHeightDirective.html","title":"directive - AutoHeightDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  AutoHeightDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/directives/auto-height.directive.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        OnInit\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [appAutoHeight]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                el\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                            \n                                onInput\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                mobileView\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/directives/auto-height.directive.ts:19\n                            \n                        \n\n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        mobileView\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in src/directives/auto-height.directive.ts:19\n                            \n                        \n                \n                    \n                        Флаг мобильного отображения.\nЕсли true, включается автоизменение высоты текстового поля\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/directives/auto-height.directive.ts:27\n                        \n                    \n\n\n            \n                \n                        Инициализация директивы\nДобавляет слушатель события 'input' только если включён мобильный режим\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onInput\n                        \n                    \n                \n            \n            \n                \nonInput(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/directives/auto-height.directive.ts:38\n                        \n                    \n\n\n            \n                \n                        Обработчик события ввода текста в textarea\nАвтоматически регулирует высоту textarea под содержимое\nФункция вызова ограничена (throttle) с задержкой 250 мс\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Событие ввода\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        el\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ElementRef)\n                    \n                \n                    \n                        \n                                Defined in src/directives/auto-height.directive.ts:12\n                        \n                    \n\n            \n                \n                    Элемент, к которому привязана директива\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, ElementRef, HostListener, inject, Input, OnInit } from '@angular/core';\nimport { throttle } from 'lodash';\n\n@Directive({\n  selector: '[appAutoHeight]',\n  standalone: true\n})\nexport class AutoHeightDirective implements OnInit {\n  /**\n   * Элемент, к которому привязана директива\n   */\n  private el = inject(ElementRef);\n  \n  /**\n   * Флаг мобильного отображения.\n   * Если true, включается автоизменение высоты текстового поля\n   */\n  @Input()\n  mobileView: boolean = false;\n\n  constructor() { }\n\n  /**\n   * Инициализация директивы\n   * Добавляет слушатель события 'input' только если включён мобильный режим\n   */\n  ngOnInit(): void {\n    if (!this.mobileView) return;\n    this.el.nativeElement.addEventListener('input', this.onInput.bind(this.el.nativeElement));\n  }\n  \n  /**\n   * Обработчик события ввода текста в textarea\n   * Автоматически регулирует высоту textarea под содержимое\n   * Функция вызова ограничена (throttle) с задержкой 250 мс\n   * @param event Событие ввода\n   */\n  onInput(event: Event) {\n    const input = event.target as HTMLTextAreaElement;\n    throttle(() => {\n      input.style.height = 'auto';\n      input.style.height = (input.scrollHeight) + 'px';\n    }, 250)();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CategoryService.html":{"url":"injectables/CategoryService.html","title":"injectable - CategoryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CategoryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/category.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseServiceUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                GETgetAllCategories\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpModule: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/services/category.service.ts:72\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpModule\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        GETgetAllCategories\n                        \n                    \n                \n            \n            \n                \nGETgetAllCategories()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/category.service.ts:82\n                        \n                    \n\n\n            \n                \n                        Получение всех категорий\n\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise с массивом категорий\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseServiceUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : baseUrl + 'category'\n                    \n                \n                    \n                        \n                                Defined in src/services/category.service.ts:72\n                        \n                    \n\n            \n                \n                    Базовый URL для работы с категориями\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные категории\n */\nexport interface categoryData {\n  /** Название категории */\n  name: string;\n  /** Перевод категории в единственном числе */\n  translateOne: string;\n  /** Перевод категории во множественном числе */\n  translateMany: string;\n  /** Массив фильтров категории */\n  filters: filter[];\n}\n\n/**\n * Базовый фильтр\n */\ninterface baseFilter {\n  /** Имя фильтра */\n  name: string;\n  /** Поле, по которому фильтр */\n  field: string;\n}\n\n/**\n * Опция для select-фильтра\n */\nexport interface option {\n  /** Название опции */\n  name: string;\n  /** Значение опции для запроса */\n  queryValue: string;\n}\n\n/**\n * Фильтр типа select\n */\ninterface selectFilter extends baseFilter {\n  /** Тип фильтра */\n  type: 'select';\n  /** Варианты выбора */\n  options: option[];\n}\n\n/**\n * Фильтр типа range\n */\ninterface rangeFilter extends baseFilter {\n  /** Тип фильтра */\n  type: 'range';\n  /** Минимальное значение */\n  minValue: number;\n  /** Максимальное значение */\n  maxValue: number;\n}\n\n/**\n * Тип фильтра: select или range\n */\nexport type filter = rangeFilter | selectFilter;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CategoryService {\n  /** Базовый URL для работы с категориями */\n  private baseServiceUrl = baseUrl + 'category';\n\n  constructor(\n    private httpModule: HttpClient\n  ) { }\n\n  /**\n   * Получение всех категорий\n   * @returns Promise с массивом категорий\n   */\n  GETgetAllCategories() {\n    return firstValueFrom(this.httpModule.get(this.baseServiceUrl)) as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ClientImageControlService.html":{"url":"injectables/ClientImageControlService.html","title":"injectable - ClientImageControlService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ClientImageControlService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/client-image-control.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для работы с клиентскими изображениями, включая сжатие\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                compressImage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        compressImage\n                        \n                    \n                \n            \n            \n                \ncompressImage(image: File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/client-image-control.service.ts:19\n                        \n                    \n\n\n            \n                \n                        Сжимает изображение с помощью библиотеки Compressor.js\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                image\n                                            \n                                                        File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nИсходный файл изображения (Blob или File)\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise, который резолвится в сжатый Blob или отклоняется с ошибкой\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport Compressor from 'compressorjs';\n\n/**\n * Сервис для работы с клиентскими изображениями, включая сжатие\n * @class ClientImageControlService\n * @injectable\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ClientImageControlService {\n\n  /**\n   * Сжимает изображение с помощью библиотеки Compressor.js\n   * @param image - Исходный файл изображения (Blob или File)\n   * @returns Promise, который резолвится в сжатый Blob или отклоняется с ошибкой\n   */\n  compressImage(image: File): Promise {\n    return new Promise((resolve, reject) => {\n      new Compressor(image, {\n        quality: 0.6,\n        success: (compressedFile: Blob) => {\n          resolve(compressedFile);\n        },\n        error: (error) => {\n          console.error('Ошибка сжатия:', error.message);\n          reject(error);\n        },\n      });\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/CostFormatPipe.html":{"url":"pipes/CostFormatPipe.html","title":"pipe - CostFormatPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  CostFormatPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/pipes/cost-format.pipe.ts\n        \n\n\n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        costFormat\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/pipes/cost-format.pipe.ts:12\n                        \n                    \n\n\n            \n                \n                        Форматирование числа стоимости в строку с разделением тысяч точками и добавлением символа рубля\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Число стоимости для форматирования\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                Отформатированная строка, например: \"1.234.567 ₽\"\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'costFormat'\n})\nexport class CostFormatPipe implements PipeTransform {\n  /**\n   * Форматирование числа стоимости в строку с разделением тысяч точками и добавлением символа рубля\n   * @param value Число стоимости для форматирования\n   * @returns Отформатированная строка, например: \"1.234.567 ₽\"\n   */\n  transform(value: number): string {\n    return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.') + ' ₽';\n  }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/CreateFurniturePageComponent.html":{"url":"components/CreateFurniturePageComponent.html","title":"component - CreateFurniturePageComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  CreateFurniturePageComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/components/create-furniture-page/create-furniture-page.component.ts\n\n\n\n    \n        Description\n    \n    \n        Компонент страницы создания и редактирования мебели.\nОтвечает за загрузку данных, валидацию, сохранение и удаление мебели.\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-create-furniture-page\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                                NavigationPanelComponent\n                                CreateFurnitureComponent\n                            NgIf\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./create-furniture-page.component.html\n            \n\n\n\n            \n                styleUrl\n                ./create-furniture-page.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Private\n                                createFurnitureComponent\n                            \n                            \n                                    \n                                    Private\n                                createFurnitureComponentRef\n                            \n                            \n                                    Protected\n                                furnitureData\n                            \n                            \n                                    Protected\n                                idPage\n                            \n                            \n                                    Private\n                                routeSub\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                checkValid\n                            \n                            \n                                    Protected\n                                clearFurnitureCard\n                            \n                            \n                                    Protected\n                                    Async\n                                createFurnitureCard\n                            \n                            \n                                    Protected\n                                deleteColor\n                            \n                            \n                                    Protected\n                                deleteColorCalculate\n                            \n                            \n                                    Protected\n                                    Async\n                                deleteFurnitureCard\n                            \n                            \n                                    Protected\n                                getCurrentColorId\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Private\n                                    Async\n                                pageInit\n                            \n                            \n                                    Private\n                                    Async\n                                transformUrlArrayToBlob\n                            \n                            \n                                    Protected\n                                    Async\n                                updateFurnitureCard\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(route: ActivatedRoute, cookieService: AccountCookieService, furnitureCardService: FurnitureCardControlService, serverImageControl: ServerImageControlService, router: Router, furnitureModelService: FurnitureModelControlService, notification: NotificationService)\n                    \n                \n                        \n                            \n                                Defined in src/components/create-furniture-page/create-furniture-page.component.ts:60\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        route\n                                                  \n                                                        \n                                                                    ActivatedRoute\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cookieService\n                                                  \n                                                        \n                                                                        AccountCookieService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        furnitureCardService\n                                                  \n                                                        \n                                                                        FurnitureCardControlService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        serverImageControl\n                                                  \n                                                        \n                                                                        ServerImageControlService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        furnitureModelService\n                                                  \n                                                        \n                                                                        FurnitureModelControlService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        notification\n                                                  \n                                                        \n                                                                        NotificationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        checkValid\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkValid(typeRequest: \"update\" | \"create\")\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/create-furniture-page/create-furniture-page.component.ts:240\n                        \n                    \n\n\n            \n                \n                        Проверяет валидность данных мебели.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                typeRequest\n                                            \n                                                        \"update\" | \"create\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nтип операции ('create' или 'update').\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                true, если данные валидны, иначе false.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        clearFurnitureCard\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearFurnitureCard()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/create-furniture-page/create-furniture-page.component.ts:299\n                        \n                    \n\n\n            \n                \n                        Очищает данные мебели в компоненте.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Async\n                        createFurnitureCard\n                        \n                    \n                \n            \n            \n                \n                        \n                    createFurnitureCard()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/create-furniture-page/create-furniture-page.component.ts:166\n                        \n                    \n\n\n            \n                \n                        Создаёт новую мебель:\n\nпроверяет валидность,\nсоздаёт карточку,\nзагружает изображения по цветам,\nзагружает 3D модель,\nпоказывает уведомление и перенаправляет пользователя.\n\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        deleteColor\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteColor()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/create-furniture-page/create-furniture-page.component.ts:328\n                        \n                    \n\n\n            \n                \n                        Удаляет текущий цвет, если цветов больше одного.\nЕсли цветов один — показывает ошибку.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        deleteColorCalculate\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteColorCalculate()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/create-furniture-page/create-furniture-page.component.ts:319\n                        \n                    \n\n\n            \n                \n                        Возвращает цвет, который планируется удалить (для расчётов и логирования).\n\n\n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                цвет (строка) текущего выделенного цвета или undefined.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Async\n                        deleteFurnitureCard\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteFurnitureCard()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/create-furniture-page/create-furniture-page.component.ts:138\n                        \n                    \n\n\n            \n                \n                        Удаляет мебель, 3D модель и связанные изображения с сервера.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        getCurrentColorId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCurrentColorId()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/create-furniture-page/create-furniture-page.component.ts:340\n                        \n                    \n\n\n            \n                \n                        Возвращает текущий id выбранного цвета.\n\n\n                        \n                            Returns :     number | undefined\n\n                        \n                            \n                                id цвета или undefined.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/create-furniture-page/create-furniture-page.component.ts:95\n                        \n                    \n\n\n            \n                \n                        Отписка от подписки при уничтожении компонента.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/create-furniture-page/create-furniture-page.component.ts:78\n                        \n                    \n\n\n            \n                \n                        Инициализация компонента:\n\nпроверяет JWT,\nподписывается на изменения параметров маршрута,\nзагружает мебель, если id не \"new\".\n\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        pageInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    pageInit(jwt: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/create-furniture-page/create-furniture-page.component.ts:104\n                        \n                    \n\n\n            \n                \n                        Загружает данные мебели по id и JWT.\nЕсли автор не совпадает, происходит перенаправление на создание новой мебели.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nJWT токен пользователя.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        transformUrlArrayToBlob\n                        \n                    \n                \n            \n            \n                \n                        \n                    transformUrlArrayToBlob(imagesArray: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/create-furniture-page/create-furniture-page.component.ts:124\n                        \n                    \n\n\n            \n                \n                        Преобразует массив URL строк изображений в массив Blob объектов.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                imagesArray\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nмассив URL строк изображений.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise с массивом Blob объектов.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Async\n                        updateFurnitureCard\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateFurnitureCard()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/create-furniture-page/create-furniture-page.component.ts:202\n                        \n                    \n\n\n            \n                \n                        Обновляет данные мебели:\n\nпроверяет валидность,\nобновляет карточку мебели,\nобновляет изображения,\nпри необходимости загружает новую 3D модель,\nпоказывает уведомление об успешном обновлении.\n\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        createFurnitureComponent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateFurnitureComponent\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild(CreateFurnitureComponent)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/create-furniture-page/create-furniture-page.component.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        createFurnitureComponentRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild(CreateFurnitureComponent, {read: ElementRef})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/create-furniture-page/create-furniture-page.component.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        furnitureData\n                        \n                    \n                \n            \n                \n                    \n                        Default value : {\n    name: '',\n    description: '',\n    colors: [],\n    shops: [],\n    additionalData: {},\n    proportions: {\n      width: null,\n      height: null,\n      length: null\n    }\n  }\n                    \n                \n                    \n                        \n                                Defined in src/components/create-furniture-page/create-furniture-page.component.ts:49\n                        \n                    \n\n            \n                \n                    Данные мебели с дополнительным полем пропорций клиента.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        idPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/components/create-furniture-page/create-furniture-page.component.ts:36\n                        \n                    \n\n            \n                \n                    Id страницы.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        routeSub\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                \n                    \n                        Default value : new Subscription()\n                    \n                \n                    \n                        \n                                Defined in src/components/create-furniture-page/create-furniture-page.component.ts:34\n                        \n                    \n\n            \n                \n                    Подписка на изменения маршрута в приложении.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { ChangeDetectorRef, Component, DoCheck, ElementRef, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { NavigationPanelComponent } from '../navigation-panel/navigation-panel.component';\nimport { CreateFurnitureComponent } from '../create-furnitre/create-furniture.component';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AccountCookieService } from '../../services/account-cookie.service';\nimport { FurnitureCardControlService, furnitureFromServerData } from '../../services/furniture-card-control.service';\nimport { ServerImageControlService } from '../../services/server-image-control.service';\nimport { NgIf } from '@angular/common';\nimport { FurnitureModelControlService } from '../../services/furniture-model-control.service';\nimport { NotificationService } from '../../services/notification.service';\nimport { imageSliderClientData } from '../image-slider/image-slider.component';\nimport { Subscription } from 'rxjs';\n\n/** Данные для формы габаритов мебели на клиенте.*/\ninterface clientProportions {\n  width: number | null;\n  height: number | null;\n  length: number | null;\n}\n\n/**\n * Компонент страницы создания и редактирования мебели.\n * Отвечает за загрузку данных, валидацию, сохранение и удаление мебели.\n */\n@Component({\n  selector: 'app-create-furniture-page',\n  standalone: true,\n  imports: [NavigationPanelComponent, CreateFurnitureComponent, NgIf],\n  templateUrl: './create-furniture-page.component.html',\n  styleUrl: './create-furniture-page.component.scss'\n})\nexport class CreateFurniturePageComponent implements OnInit, OnDestroy {\n  /** Подписка на изменения маршрута в приложении.*/\n  private routeSub: Subscription = new Subscription();\n  /** Id страницы.*/\n  protected idPage!: string;\n  \n  @ViewChild(CreateFurnitureComponent)\n  /** Переменная для взаимодействия с методами дочернего компонента.*/\n  private createFurnitureComponent!: CreateFurnitureComponent;\n  \n  @ViewChild(CreateFurnitureComponent, { read: ElementRef })\n  /** Переменная для взаимодействия с html дочернего компонента.*/\n  private createFurnitureComponentRef!: ElementRef;\n\n  /**\n   * Данные мебели с дополнительным полем пропорций клиента.\n   */\n  protected furnitureData: furnitureFromServerData & { proportions: clientProportions } = {\n    name: '',\n    description: '',\n    colors: [],\n    shops: [],\n    additionalData: {},\n    proportions: {\n      width: null,\n      height: null,\n      length: null\n    }\n  };\n\n  constructor(\n    private route: ActivatedRoute,\n    private cookieService: AccountCookieService,\n    private furnitureCardService: FurnitureCardControlService,\n    private serverImageControl: ServerImageControlService,\n    private router: Router,\n    private furnitureModelService: FurnitureModelControlService,\n    private notification: NotificationService\n  ) { }\n\n  /**\n   * Инициализация компонента:\n   * - проверяет JWT,\n   * - подписывается на изменения параметров маршрута,\n   * - загружает мебель, если id не \"new\".\n   */\n  ngOnInit(): void {\n    const JWT = this.cookieService.getJwt();\n    if (!JWT) {\n      this.router.navigateByUrl('/login');\n      return;\n    }\n\n    this.routeSub = this.route.paramMap.subscribe(params => {\n      this.idPage = params.get('id') ?? 'new';\n      this.clearFurnitureCard();\n      if (this.idPage !== 'new') this.pageInit(JWT);\n    });\n  }\n\n  /**\n   * Отписка от подписки при уничтожении компонента.\n   */\n  ngOnDestroy() {\n    if(this.routeSub)this.routeSub.unsubscribe();\n  }\n\n  /**\n   * Загружает данные мебели по id и JWT.\n   * Если автор не совпадает, происходит перенаправление на создание новой мебели.\n   * @param jwt - JWT токен пользователя.\n   */\n  private async pageInit(jwt: string) {\n    try {\n      const RESPONSE = await this.furnitureCardService.GETfurnitureCard(this.idPage, jwt);\n      if (RESPONSE.authorMatched === false) {\n        this.router.navigateByUrl('/create/new');\n        return;\n      }\n      this.furnitureData = RESPONSE.furnitureCard;\n      this.createFurnitureComponent.currentColorId = 0;\n    } catch (error) {\n      this.router.navigateByUrl('/create/new');\n      console.error(error);\n    }\n  }\n\n  /**\n   * Преобразует массив URL строк изображений в массив Blob объектов.\n   * @param imagesArray - массив URL строк изображений.\n   * @returns Promise с массивом Blob объектов.\n   */\n  private async transformUrlArrayToBlob(imagesArray: string[]): Promise {\n    const IMAGES_BLOB_ARRAY: Blob[] = await Promise.all(\n      imagesArray.map(async (blobUrl): Promise => {\n        const RESPONSE = await fetch(blobUrl.toString());\n        const BLOB = await RESPONSE.blob();\n        return BLOB;\n      })\n    );\n    return IMAGES_BLOB_ARRAY;\n  }\n\n  /**\n   * Удаляет мебель, 3D модель и связанные изображения с сервера.\n   */\n  protected async deleteFurnitureCard() {\n    const JWT = this.cookieService.getJwt();\n    if (!JWT) return;\n\n    const operations = [\n      () => this.furnitureModelService.DELETEfurnitureModel(JWT, this.idPage),\n      () => this.serverImageControl.DELETEproject(JWT, this.idPage),\n      () => this.furnitureCardService.DELETEfurnitureCard(JWT, this.idPage)\n    ];\n\nfor (const op of operations) {\n  try {\n    await op();\n  } catch (error) {\n  }\n}\n\n    this.router.navigateByUrl('/account');\n  }\n\n  /**\n   * Создаёт новую мебель:\n   * - проверяет валидность,\n   * - создаёт карточку,\n   * - загружает изображения по цветам,\n   * - загружает 3D модель,\n   * - показывает уведомление и перенаправляет пользователя.\n   */\n  protected async createFurnitureCard() {\n    const JWT = this.cookieService.getJwt();\n    if (!this.checkValid('create') || !JWT) return;\n    try {\n      const FURNITURE_DATA = this.createFurnitureComponent.furnitureData;\n      const FURNITURE_ID = (await this.furnitureCardService.POSTcreateFurnitureCard(FURNITURE_DATA, JWT)).furnitureData._id;\n\n\n      FURNITURE_DATA.colors.forEach(async (colorData) => {\n        const imagesBlobArray = await this.transformUrlArrayToBlob(colorData.imagesData.images);\n        const imagesData: imageSliderClientData = {\n          images: imagesBlobArray,\n          idMainImage: colorData.imagesData.idMainImage\n        };\n        await this.serverImageControl.POSTuploadProjectImages(colorData.color, imagesData, JWT, FURNITURE_ID);\n      });\n\n\n      const FURNITURE_MODEL_BLOB = this.createFurnitureComponent.furnitureModelInput.files![0];\n      this.furnitureModelService.POSTuploadFurnitureModel(FURNITURE_MODEL_BLOB, JWT, FURNITURE_ID, 'create');\n\n      this.notification.setSuccess('Мебель добавлена', 5000);\n      this.router.navigateByUrl('/account');\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  /**\n   * Обновляет данные мебели:\n   * - проверяет валидность,\n   * - обновляет карточку мебели,\n   * - обновляет изображения,\n   * - при необходимости загружает новую 3D модель,\n   * - показывает уведомление об успешном обновлении.\n   */\n  protected async updateFurnitureCard() {\n    const JWT = this.cookieService.getJwt();\n    if (!this.checkValid('update') || !JWT) return;\n    try {\n      const FURNITURE_DATA = this.createFurnitureComponent.furnitureData;\n      await this.furnitureCardService.PUTupdateFurnitureCard(FURNITURE_DATA, this.idPage, JWT);\n      this.notification.setSuccess('Карточка обновлена', 2500);\n\n      let changeImagesCounter = 0\n      FURNITURE_DATA.colors.forEach(async (colorData) => {\n        if (colorData.imagesData.images.length === 0) return;\n        const IMAGES_BLOB_ARRAY = await this.transformUrlArrayToBlob(colorData.imagesData.images);\n        const IMAGES_DATA: imageSliderClientData = {\n          images: IMAGES_BLOB_ARRAY,\n          idMainImage: colorData.imagesData.idMainImage\n        };\n        await this.serverImageControl.POSTuploadProjectImages(colorData.color, IMAGES_DATA, JWT, this.idPage);\n        changeImagesCounter++;\n      });\n      if(changeImagesCounter > 0)this.notification.setSuccess('Изображения обновлены', 2500);\n\n      const FURNITURE_MODEL_BLOB = this.createFurnitureComponent.furnitureModelInput.files!;\n      if (FURNITURE_MODEL_BLOB[0]) {\n        this.furnitureModelService.POSTuploadFurnitureModel(FURNITURE_MODEL_BLOB[0], JWT, this.idPage, 'update');\n      }\n\n      \n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  /**\n   * Проверяет валидность данных мебели.\n   * @param typeRequest - тип операции ('create' или 'update').\n   * @param action - если true, то при ошибке вызываются уведомления и открываются необходимые модули.\n   * @returns true, если данные валидны, иначе false.\n   */\n  protected checkValid(typeRequest: 'update' | 'create'): boolean {\n    const { colors, shops, proportions, name } = this.furnitureData;\n    const FURNITURE_MODEL_BLOB = this.createFurnitureComponent.furnitureModelInput.files![0];\n\n    if (colors.length == 0) {\n      this.createFurnitureComponent.openColorModule();\n      return false;\n    }\n    if (name.length == 0) {\n      const nameInput = this.createFurnitureComponentRef.nativeElement.querySelector(\n        '.furnitureTitle'\n      ) as HTMLInputElement;\n\n      if (nameInput) {\n        nameInput.focus();\n      }\n      this.notification.setError('Заполните название мебели', 5000);\n      return false;\n    }\n    if (!proportions.height || !proportions.width || !proportions.length) {\n      this.createFurnitureComponent.openAdditional();\n      this.notification.setError('Заполните параметры', 5000);\n      return false;\n    }\n    if (!FURNITURE_MODEL_BLOB && typeRequest === 'create') {\n      const uploadInput = this.createFurnitureComponentRef.nativeElement.querySelector(\n        '.furnitureModelInput'\n      ) as HTMLInputElement;\n\n      if (uploadInput) {\n        uploadInput.click();\n      }\n      this.notification.setError('Загрузите 3D модель', 5000);\n      return false;\n    }\n    if (shops.length == 0) {\n      this.createFurnitureComponent.openShopsModule();\n      this.notification.setError('Добавьте магазины', 5000);\n      return false;\n    }\n    for (let colorData of colors) {\n      if (colorData.imagesData.images.length == 0 && typeRequest === 'create') {\n        const uploadInput = this.createFurnitureComponentRef.nativeElement.querySelector(\n          '.uploadImagesInput'\n        ) as HTMLInputElement;\n\n        if (uploadInput) {\n          uploadInput.click();\n        }\n        this.notification.setError('Загрузите изображения', 5000);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Очищает данные мебели в компоненте.\n   */\n  protected clearFurnitureCard() {\n    if (this.createFurnitureComponent) this.createFurnitureComponent.currentColorId = undefined;\n    this.furnitureData = {\n      name: '',\n      description: '',\n      colors: [],\n      shops: [],\n      additionalData: {},\n      proportions: {\n        width: null,\n        height: null,\n        length: null\n      }\n    };\n  }\n\n  /**\n   * Возвращает цвет, который планируется удалить (для расчётов и логирования).\n   * @returns цвет (строка) текущего выделенного цвета или undefined.\n   */\n  protected deleteColorCalculate(): string | undefined {\n    if (!this.createFurnitureComponent || this.createFurnitureComponent.currentColorId === undefined) return undefined;\n    return this.createFurnitureComponent.furnitureData.colors[this.createFurnitureComponent.currentColorId].color;\n  }\n\n  /**\n   * Удаляет текущий цвет, если цветов больше одного.\n   * Если цветов один — показывает ошибку.\n   */\n  protected deleteColor() {\n    if (this.createFurnitureComponent.furnitureData.colors.length \n    \n\n    \n        \n  \n  \n  \n    \n        \n    \n    \n      {{idPage === 'new' ? 'Создать' : 'Обновить'}}\n    \n    \n      \n    \n  \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                {{idPage === \\'new\\' ? \\'Создать\\' : \\'Обновить\\'}}                    '\n    var COMPONENTS = [{'name': 'AccountPageComponent', 'selector': 'app-account-page'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreateFurnitureComponent', 'selector': 'app-create-furniture'},{'name': 'CreateFurniturePageComponent', 'selector': 'app-create-furniture-page'},{'name': 'FinderComponent', 'selector': 'app-finder'},{'name': 'ImageSliderComponent', 'selector': 'app-image-slider'},{'name': 'LoginPageComponent', 'selector': 'app-login-page'},{'name': 'MainPageComponent', 'selector': 'app-main-page'},{'name': 'NavigationPanelComponent', 'selector': 'app-navigation-panel'},{'name': 'NotificationComponent', 'selector': 'app-notification'},{'name': 'PlanHouseComponent', 'selector': 'app-plan-house'},{'name': 'PlanHousePageComponent', 'selector': 'app-plan-house-page'},{'name': 'SceneComponent', 'selector': 'app-scene'},{'name': 'ShopPageComponent', 'selector': 'app-shop-page'},{'name': 'UploadOverlayComponent', 'selector': 'app-upload-overlay'},{'name': 'ViewFurnitureComponent', 'selector': 'app-view-furniture'}];\n    var DIRECTIVES = [{'name': 'AutoHeightDirective', 'selector': '[appAutoHeight]'}];\n    var ACTUAL_COMPONENT = {'name': 'CreateFurniturePageComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FinderComponent.html":{"url":"components/FinderComponent.html","title":"component - FinderComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  FinderComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/components/finder/finder.component.ts\n\n\n\n    \n        Description\n    \n    \n        Компонент поиска мебели.\nПозволяет искать мебель по названию и отображать результаты.\n\n    \n\n\n    \n        Implements\n    \n    \n                AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-finder\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            NgClass\n                            NgFor\n                            NgIf\n                            RouterLink\n                            CostFormatPipe\n                            RouterLink\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./finder.component.html\n            \n\n\n\n            \n                styleUrl\n                ./finder.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                checkDesktop\n                            \n                            \n                                    Private\n                                debounceTimer\n                            \n                            \n                                    Protected\n                                    Optional\n                                foundFurniture\n                            \n                            \n                                    Private\n                                inputElement\n                            \n                            \n                                    Private\n                                variantsSpan\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                checkShopPage\n                            \n                            \n                                    Protected\n                                clearInput\n                            \n                            \n                                    Private\n                                closeFoundResultsList\n                            \n                            \n                                    Private\n                                    Async\n                                findFurnitures\n                            \n                            \n                                    Protected\n                                getImage\n                            \n                            \n                                    Protected\n                                getUrl\n                            \n                            \n                                    Protected\n                                inputProcess\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                    Private\n                                openFoundResultsList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(finderService: FinderService, elementRef: ElementRef, renderer: Renderer2, imageService: ServerImageControlService, route: ActivatedRoute)\n                    \n                \n                        \n                            \n                                Defined in src/components/finder/finder.component.ts:55\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        finderService\n                                                  \n                                                        \n                                                                        FinderService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        elementRef\n                                                  \n                                                        \n                                                                    ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                    Renderer2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        imageService\n                                                  \n                                                        \n                                                                        ServerImageControlService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        route\n                                                  \n                                                        \n                                                                    ActivatedRoute\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        checkShopPage\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkShopPage(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/finder/finder.component.ts:130\n                        \n                    \n\n\n            \n                \n                        Проверяет, находится ли пользователь на странице магазина.\nЕсли да, устанавливает в сервисе имя мебели.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Имя мебели для поиска\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                true если на странице магазина, иначе false\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        clearInput\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearInput()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/finder/finder.component.ts:118\n                        \n                    \n\n\n            \n                \n                        Очищает поле ввода и скрывает список результатов.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        closeFoundResultsList\n                        \n                    \n                \n            \n            \n                \n                        \n                    closeFoundResultsList()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/finder/finder.component.ts:105\n                        \n                    \n\n\n            \n                \n                        Закрывает список найденных результатов (удаляет CSS класс).\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        findFurnitures\n                        \n                    \n                \n            \n            \n                \n                        \n                    findFurnitures(findString: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/finder/finder.component.ts:78\n                        \n                    \n\n\n            \n                \n                        Выполняет поиск мебели на сервере по заданной строке.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                findString\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Строка для поиска мебели\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        getImage\n                        \n                    \n                \n            \n            \n                \n                        \n                    getImage(idFurniture: string, color: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/finder/finder.component.ts:167\n                        \n                    \n\n\n            \n                \n                        Возвращает URL главного изображения мебели по id и цвету.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                idFurniture\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор мебели\n\n                                            \n                                        \n                                        \n                                                color\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Цвет мебели\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                URL изображения\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        getUrl\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUrl(idFurniture: string, category: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/finder/finder.component.ts:177\n                        \n                    \n\n\n            \n                \n                        Формирует URL для перехода на страницу мебели.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                idFurniture\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор мебели\n\n                                            \n                                        \n                                        \n                                                category\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Категория мебели\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                URL для маршрутизации\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        inputProcess\n                        \n                    \n                \n            \n            \n                \n                        \n                    inputProcess()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/finder/finder.component.ts:147\n                        \n                    \n\n\n            \n                \n                        Обрабатывает ввод пользователя с задержкой (debounce).\nЗапускает поиск, если введена строка.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/finder/finder.component.ts:69\n                        \n                    \n\n\n            \n                \n                        Инициализация после рендера компонента:\nПолучение необходимых DOM-элементов для управления поиском.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        openFoundResultsList\n                        \n                    \n                \n            \n            \n                \n                        \n                    openFoundResultsList()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/finder/finder.component.ts:97\n                        \n                    \n\n\n            \n                \n                        Открывает список найденных результатов (добавляет CSS класс).\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        checkDesktop\n                        \n                    \n                \n            \n                \n                    \n                        Default value : checkDesktop\n                    \n                \n                    \n                        \n                                Defined in src/components/finder/finder.component.ts:113\n                        \n                    \n\n            \n                \n                    Утилитная функция проверки, запущено ли приложение на десктопе.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        debounceTimer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/components/finder/finder.component.ts:55\n                        \n                    \n\n            \n                \n                    Таймер для реализации дебаунса ввода.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Optional\n                        foundFurniture\n                        \n                    \n                \n            \n                \n                    \n                        Type :         foundFurniture[]\n\n                    \n                \n                    \n                        \n                                Defined in src/components/finder/finder.component.ts:50\n                        \n                    \n\n            \n                \n                    Массив найденных объектов мебели.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        inputElement\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HTMLInputElement\n\n                    \n                \n                    \n                        \n                                Defined in src/components/finder/finder.component.ts:45\n                        \n                    \n\n            \n                \n                    Ссылка на HTML-элемент текстового поля ввода.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        variantsSpan\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HTMLSpanElement\n\n                    \n                \n                    \n                        \n                                Defined in src/components/finder/finder.component.ts:40\n                        \n                    \n\n            \n                \n                    Ссылка на HTML-элемент с результатами поиска (список вариантов).\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { NgClass, NgFor, NgIf } from '@angular/common';\nimport { AfterViewInit, Component, ElementRef, Renderer2 } from '@angular/core';\nimport { FinderService } from '../../services/finder.service';\nimport { ServerImageControlService } from '../../services/server-image-control.service';\nimport { ActivatedRoute, RouterLink } from '@angular/router';\nimport { checkDesktop } from '../../usable/reusable-functions.used';\nimport { CostFormatPipe } from '../../pipes/cost-format.pipe';\n\n/**\n * Интерфейс, описывающий найденную мебель.\n */\ninterface foundFurniture {\n  /** Название мебели */\n  name: string;\n  /** Цена мебели */\n  cost: number;\n  /** Цвет, указанный в запросе */\n  colorRequest: string;\n  /** Уникальный идентификатор мебели */\n  id: string;\n  /** Категория мебели */\n  category: string;\n}\n\n/**\n * Компонент поиска мебели.\n * Позволяет искать мебель по названию и отображать результаты.\n */\n@Component({\n  selector: 'app-finder',\n  standalone: true,\n  imports: [NgClass, NgFor, NgIf, RouterLink, CostFormatPipe, RouterLink],\n  templateUrl: './finder.component.html',\n  styleUrl: './finder.component.scss'\n})\nexport class FinderComponent implements AfterViewInit {\n  /**\n   * Ссылка на HTML-элемент с результатами поиска (список вариантов).\n   */\n  private variantsSpan!: HTMLSpanElement;\n\n  /**\n   * Ссылка на HTML-элемент текстового поля ввода.\n   */\n  private inputElement!: HTMLInputElement;\n\n  /**\n   * Массив найденных объектов мебели.\n   */\n  protected foundFurniture?: foundFurniture[];\n\n  /**\n   * Таймер для реализации дебаунса ввода.\n   */\n  private debounceTimer: any = null;\n\n  constructor(\n    private finderService: FinderService,\n    private elementRef: ElementRef,\n    private renderer: Renderer2,\n    private imageService: ServerImageControlService,\n    private route: ActivatedRoute\n  ) { }\n\n  /**\n   * Инициализация после рендера компонента:\n   * Получение необходимых DOM-элементов для управления поиском.\n   */\n  ngAfterViewInit(): void {\n    this.variantsSpan = this.elementRef.nativeElement.querySelector('.variantsSpan') as HTMLSpanElement;\n    this.inputElement = this.elementRef.nativeElement.querySelector('.finderInput') as HTMLInputElement;\n  }\n\n  /**\n   * Выполняет поиск мебели на сервере по заданной строке.\n   * @param findString Строка для поиска мебели\n   */\n  private async findFurnitures(findString: string) {\n    const RECEIVED_DATA = await this.finderService.GETfindFurnitures(findString) as foundFurniture[];\n    this.openFoundResultsList();\n\n    if (RECEIVED_DATA.length > 0) {\n      this.closeFoundResultsList();\n      setTimeout(() => {\n        this.foundFurniture = RECEIVED_DATA;\n        this.openFoundResultsList();\n      }, 400);\n    } else {\n      // Если результатов нет, очищаем массив foundFurniture\n      this.foundFurniture !== undefined ? this.foundFurniture.length = 0 : this.foundFurniture = [];\n    }\n  }\n\n  /**\n   * Открывает список найденных результатов (добавляет CSS класс).\n   */\n  private openFoundResultsList() {\n    if (!this.variantsSpan) return;\n    this.renderer.addClass(this.variantsSpan, 'variantsSpanOpen');\n  }\n\n  /**\n   * Закрывает список найденных результатов (удаляет CSS класс).\n   */\n  private closeFoundResultsList() {\n    if (!this.variantsSpan) return;\n    this.renderer.removeClass(this.variantsSpan, 'variantsSpanOpen');\n  }\n\n  /**\n   * Утилитная функция проверки, запущено ли приложение на десктопе.\n   */\n  protected checkDesktop = checkDesktop;\n\n  /**\n   * Очищает поле ввода и скрывает список результатов.\n   */\n  protected clearInput() {\n    this.inputElement.value = '';\n    this.inputProcess();\n    this.closeFoundResultsList();\n  }\n\n  /**\n   * Проверяет, находится ли пользователь на странице магазина.\n   * Если да, устанавливает в сервисе имя мебели.\n   * @param name Имя мебели для поиска\n   * @returns true если на странице магазина, иначе false\n   */\n  private checkShopPage(name: string): boolean {\n    let CURRENT_ROUTE = this.route.root;\n    while (CURRENT_ROUTE.firstChild) {\n      CURRENT_ROUTE = CURRENT_ROUTE.firstChild;\n    }\n    const pageName = CURRENT_ROUTE.snapshot.data['pageName'];\n    if (pageName === 'shop') {\n      this.finderService.setFurnitureName(name);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Обрабатывает ввод пользователя с задержкой (debounce).\n   * Запускает поиск, если введена строка.\n   */\n  protected inputProcess() {\n    const VALUE = this.inputElement.value;\n    clearTimeout(this.debounceTimer);\n    this.debounceTimer = setTimeout(() => {\n      if (VALUE.length === 0) {\n        if (this.checkShopPage(VALUE)) this.closeFoundResultsList();\n        return;\n      }\n      if (this.checkShopPage(VALUE)) return;\n\n      this.findFurnitures(VALUE);\n    }, 300);\n  }\n\n  /**\n   * Возвращает URL главного изображения мебели по id и цвету.\n   * @param idFurniture Идентификатор мебели\n   * @param color Цвет мебели\n   * @returns URL изображения\n   */\n  protected getImage(idFurniture: string, color: string): string {\n    return this.imageService.GETmainImage(idFurniture, color);\n  }\n\n  /**\n   * Формирует URL для перехода на страницу мебели.\n   * @param idFurniture Идентификатор мебели\n   * @param category Категория мебели\n   * @returns URL для маршрутизации\n   */\n  protected getUrl(idFurniture: string, category: string): string {\n    return `/shop/${category ?? 'all'}/${idFurniture}`;\n  }\n}\n\n    \n\n    \n        \n    \n        \n            \n        \n        \n        \n            \n        \n    \n    \n        Ничего не найдено :(\n        \n            \n                {{card.name}}\n                {{ card.cost | costFormat }}\n            \n            \n        \n        Перейти в магазин\n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                                    Ничего не найдено :(                                    {{card.name}}                {{ card.cost | costFormat }}                                        Перейти в магазин    '\n    var COMPONENTS = [{'name': 'AccountPageComponent', 'selector': 'app-account-page'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreateFurnitureComponent', 'selector': 'app-create-furniture'},{'name': 'CreateFurniturePageComponent', 'selector': 'app-create-furniture-page'},{'name': 'FinderComponent', 'selector': 'app-finder'},{'name': 'ImageSliderComponent', 'selector': 'app-image-slider'},{'name': 'LoginPageComponent', 'selector': 'app-login-page'},{'name': 'MainPageComponent', 'selector': 'app-main-page'},{'name': 'NavigationPanelComponent', 'selector': 'app-navigation-panel'},{'name': 'NotificationComponent', 'selector': 'app-notification'},{'name': 'PlanHouseComponent', 'selector': 'app-plan-house'},{'name': 'PlanHousePageComponent', 'selector': 'app-plan-house-page'},{'name': 'SceneComponent', 'selector': 'app-scene'},{'name': 'ShopPageComponent', 'selector': 'app-shop-page'},{'name': 'UploadOverlayComponent', 'selector': 'app-upload-overlay'},{'name': 'ViewFurnitureComponent', 'selector': 'app-view-furniture'}];\n    var DIRECTIVES = [{'name': 'AutoHeightDirective', 'selector': '[appAutoHeight]'}];\n    var ACTUAL_COMPONENT = {'name': 'FinderComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FinderService.html":{"url":"injectables/FinderService.html","title":"injectable - FinderService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FinderService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/finder.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для поиска мебели по названию\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseServiceUrl\n                            \n                            \n                                furnitureName$\n                            \n                            \n                                    Private\n                                inputFurnitureNameSubject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                GETfindFurnitures\n                            \n                            \n                                setFurnitureName\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpModule: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/services/finder.service.ts:23\n                            \n                        \n\n                \n                    \n                            Конструктор сервиса\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        httpModule\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nHTTP клиент для выполнения запросов\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        GETfindFurnitures\n                        \n                    \n                \n            \n            \n                \nGETfindFurnitures(query: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/finder.service.ts:44\n                        \n                    \n\n\n            \n                \n                        Выполняет поиск мебели по названию, возвращая до 10 найденных публикаций\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nСтрока запроса поиска\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise с результатами поиска (массив публикаций или любая структура, возвращаемая сервером)\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setFurnitureName\n                        \n                    \n                \n            \n            \n                \nsetFurnitureName(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/finder.service.ts:35\n                        \n                    \n\n\n            \n                \n                        Устанавливает текущее название мебели для поиска\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nНазвание мебели\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseServiceUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : baseUrl + 'find?q='\n                    \n                \n                    \n                        \n                                Defined in src/services/finder.service.ts:17\n                        \n                    \n\n            \n                \n                    Базовый URL для запросов поиска\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        furnitureName$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.inputFurnitureNameSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/services/finder.service.ts:23\n                        \n                    \n\n            \n                \n                    Observable для подписки на изменения названия мебели\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        inputFurnitureNameSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject('')\n                    \n                \n                    \n                        \n                                Defined in src/services/finder.service.ts:20\n                        \n                    \n\n            \n                \n                    BehaviorSubject для хранения текущего названия мебели для поиска\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { BehaviorSubject, firstValueFrom } from 'rxjs';\n\n/**\n * Сервис для поиска мебели по названию\n * @class FinderService\n * @injectable\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class FinderService {\n\n  /** Базовый URL для запросов поиска */\n  private baseServiceUrl = baseUrl + 'find?q=';\n\n  /** BehaviorSubject для хранения текущего названия мебели для поиска */\n  private inputFurnitureNameSubject = new BehaviorSubject('');\n\n  /** Observable для подписки на изменения названия мебели */\n  furnitureName$ = this.inputFurnitureNameSubject.asObservable();\n\n  /**\n   * Конструктор сервиса\n   * @param httpModule - HTTP клиент для выполнения запросов\n   */\n  constructor(private httpModule: HttpClient) { }\n\n  /**\n   * Устанавливает текущее название мебели для поиска\n   * @param name - Название мебели\n   */\n  setFurnitureName(name: string): void {\n    this.inputFurnitureNameSubject.next(name);\n  }\n\n  /**\n   * Выполняет поиск мебели по названию, возвращая до 10 найденных публикаций\n   * @param query - Строка запроса поиска\n   * @returns Promise с результатами поиска (массив публикаций или любая структура, возвращаемая сервером)\n   */\n  GETfindFurnitures(query: string): Promise {\n    return firstValueFrom(this.httpModule.get(this.baseServiceUrl + query));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FurnitureCardControlService.html":{"url":"injectables/FurnitureCardControlService.html","title":"injectable - FurnitureCardControlService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FurnitureCardControlService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/furniture-card-control.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для управления карточками мебели\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseServiceUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                DELETEfurnitureCard\n                            \n                            \n                                    Async\n                                GETfurnitureCard\n                            \n                            \n                                POSTcreateFurnitureCard\n                            \n                            \n                                PUTupdateFurnitureCard\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpModule: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/services/furniture-card-control.service.ts:112\n                            \n                        \n\n                \n                    \n                            Конструктор сервиса\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        httpModule\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                HTTP клиент для запросов\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        DELETEfurnitureCard\n                        \n                    \n                \n            \n            \n                \nDELETEfurnitureCard(jwt: string, furnitureCardId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/furniture-card-control.service.ts:214\n                        \n                    \n\n\n            \n                \n                        Удаление карточки мебели по ID и JWT токену\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nJWT токен пользователя\n\n\n                                            \n                                        \n                                        \n                                                furnitureCardId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID карточки мебели для удаления\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise с сообщением результата удаления\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        GETfurnitureCard\n                        \n                    \n                \n            \n            \n                \n                        \n                    GETfurnitureCard(furnitureCardId: string, jwt?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/furniture-card-control.service.ts:127\n                        \n                    \n\n\n            \n                \n                        Получение карточки мебели по ID и опциональному JWT токену\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                furnitureCardId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID карточки мебели\n\n\n                                            \n                                        \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nJWT токен пользователя (опционально)\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise с объектом, содержащим данные карточки и флаг совпадения автора\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        POSTcreateFurnitureCard\n                        \n                    \n                \n            \n            \n                \nPOSTcreateFurnitureCard(furnitureData: furnitureFromServerData, jwt: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/furniture-card-control.service.ts:178\n                        \n                    \n\n\n            \n                \n                        Создание новой карточки мебели\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                furnitureData\n                                            \n                                                            furnitureFromServerData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nДанные новой карточки мебели\n\n\n                                            \n                                        \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nJWT токен пользователя\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise с данными созданной карточки, включая её ID\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PUTupdateFurnitureCard\n                        \n                    \n                \n            \n            \n                \nPUTupdateFurnitureCard(furnitureCardUpdateData: furnitureFromServerData, furnitureCardId: string, jwt: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/furniture-card-control.service.ts:195\n                        \n                    \n\n\n            \n                \n                        Обновление существующей карточки мебели\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                furnitureCardUpdateData\n                                            \n                                                            furnitureFromServerData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nОбновленные данные карточки мебели\n\n\n                                            \n                                        \n                                        \n                                                furnitureCardId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID карточки мебели для обновления\n\n\n                                            \n                                        \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nJWT токен пользователя\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise с сообщением результата обновления\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseServiceUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : baseUrl + 'furniture/card'\n                    \n                \n                    \n                        \n                                Defined in src/services/furniture-card-control.service.ts:112\n                        \n                    \n\n            \n                \n                    Базовый URL для запросов к API мебели\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { imageSliderClientData, imageSliderFromServerData } from '../components/image-slider/image-slider.component';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные магазина с ценой и URL\n * @interface shopData\n */\nexport interface shopData {\n  /** Цена мебели */\n  cost: number;\n  /** URL магазина или товара */\n  url: string;\n}\n\n/**\n * Пропорции мебели (ширина, длина, высота)\n * @interface furnitureProportions\n */\nexport interface furnitureProportions {\n  /** Ширина мебели (или null, если не задана) */\n  width: number | null;\n  /** Длина мебели (или null, если не задана) */\n  length: number | null;\n  /** Высота мебели (или null, если не задана) */\n  height: number | null;\n}\n\n/**\n * Данные цвета на клиенте, включая слайдер изображений\n * @interface colorClientData\n */\nexport interface colorClientData {\n  /** Цвет мебели */\n  color: string;\n  /** Данные для слайдера изображений */\n  imagesData: imageSliderClientData;\n}\n\n/**\n * Данные цвета с сервера, включая слайдер изображений\n * @interface colorFromServerData\n */\nexport interface colorFromServerData {\n  /** Цвет мебели */\n  color: string;\n  /** Данные для слайдера изображений */\n  imagesData: imageSliderFromServerData;\n}\n\n/**\n * Дополнительные данные мебели с динамическими ключами\n * @interface additionalData\n */\nexport interface additionalData {\n  /** Категория мебели (опционально) */\n  category?: string;\n  /** Другие динамические свойства */\n  [key: string]: string | undefined;\n}\n\n/**\n * Базовые данные мебели, общие для клиента и сервера\n * @interface furnitureBaseData\n */\ninterface furnitureBaseData {\n  /** Название мебели */\n  name: string;\n  /** Описание мебели */\n  description: string;\n  /** Пропорции мебели */\n  proportions: furnitureProportions;\n  /** Список магазинов с ценами и URL */\n  shops: shopData[];\n  /** Дополнительные данные */\n  additionalData: additionalData;\n}\n\n/**\n * Данные мебели на клиенте с цветами\n * @interface furnitureClientData\n * @extends furnitureBaseData\n */\nexport interface furnitureClientData extends furnitureBaseData {\n  /** Список цветов с данными для клиента */\n  colors: colorClientData[];\n}\n\n/**\n * Данные мебели с сервера с цветами\n * @interface furnitureFromServerData\n * @extends furnitureBaseData\n */\nexport interface furnitureFromServerData extends furnitureBaseData {\n  /** Список цветов с данными с сервера */\n  colors: colorFromServerData[];\n}\n\n/**\n * Сервис для управления карточками мебели\n * @class FurnitureCardControlService\n * @injectable\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class FurnitureCardControlService {\n\n  /** Базовый URL для запросов к API мебели */\n  private baseServiceUrl = baseUrl + 'furniture/card';\n\n  /**\n   * Конструктор сервиса\n   * @param httpModule HTTP клиент для запросов\n   */\n  constructor(private httpModule: HttpClient) { }\n\n  /**\n   * Получение карточки мебели по ID и опциональному JWT токену\n   * @param furnitureCardId - ID карточки мебели\n   * @param [jwt] - JWT токен пользователя (опционально)\n   * @returns Promise с объектом, содержащим данные карточки и флаг совпадения автора\n   * @throws Ошибка при некорректной структуре ответа или при ошибках запроса\n   */\n  async GETfurnitureCard(\n    furnitureCardId: string,\n    jwt?: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams().set('furnitureCardId', furnitureCardId);\n\n    if (jwt !== undefined) {\n      HTTP_PARAMS = HTTP_PARAMS.set('jwt', jwt);\n    }\n\n    try {\n      const response = await firstValueFrom(\n        this.httpModule.get(this.baseServiceUrl, { params: HTTP_PARAMS })\n      ) as {\n        furnitureCard: furnitureFromServerData;\n        authorMatched: boolean;\n      };\n\n      if (!response?.furnitureCard) {\n        throw new Error('Invalid response structure: furnitureCard missing');\n      }\n\n      // Добавляем полный URL к изображениям\n      const transformedFurnitureCard = {\n        ...response.furnitureCard,\n        colors: response.furnitureCard.colors.map(colorData => ({\n          color: colorData.color,\n          imagesData: {\n            idMainImage: colorData.imagesData.idMainImage,\n            images: colorData.imagesData.images.map(url => baseUrl + url)\n          }\n        }))\n      };\n\n      return {\n        furnitureCard: transformedFurnitureCard,\n        authorMatched: response.authorMatched\n      };\n\n    } catch (error) {\n      console.error('Error in GETfurnitureCard:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Создание новой карточки мебели\n   * @param furnitureData - Данные новой карточки мебели\n   * @param jwt - JWT токен пользователя\n   * @returns Promise с данными созданной карточки, включая её ID\n   */\n  POSTcreateFurnitureCard(\n    furnitureData: furnitureFromServerData,\n    jwt: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams().set('jwt', jwt);\n    return firstValueFrom(\n      this.httpModule.post(this.baseServiceUrl, furnitureData, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n\n  /**\n   * Обновление существующей карточки мебели\n   * @param furnitureCardUpdateData - Обновленные данные карточки мебели\n   * @param furnitureCardId - ID карточки мебели для обновления\n   * @param jwt - JWT токен пользователя\n   * @returns Promise с сообщением результата обновления\n   */\n  PUTupdateFurnitureCard(\n    furnitureCardUpdateData: furnitureFromServerData,\n    furnitureCardId: string,\n    jwt: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId);\n    return firstValueFrom(\n      this.httpModule.put(this.baseServiceUrl, furnitureCardUpdateData, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n\n  /**\n   * Удаление карточки мебели по ID и JWT токену\n   * @param jwt - JWT токен пользователя\n   * @param furnitureCardId - ID карточки мебели для удаления\n   * @returns Promise с сообщением результата удаления\n   */\n  DELETEfurnitureCard(jwt: string, furnitureCardId: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId);\n    return firstValueFrom(\n      this.httpModule.delete(this.baseServiceUrl, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FurnitureModelControlService.html":{"url":"injectables/FurnitureModelControlService.html","title":"injectable - FurnitureModelControlService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FurnitureModelControlService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/furniture-model-control.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseServiceUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                DELETEfurnitureModel\n                            \n                            \n                                GETfurnitureModel\n                            \n                            \n                                POSTuploadFurnitureModel\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpModule: HttpClient, uploadService: UploadService)\n                    \n                \n                        \n                            \n                                Defined in src/services/furniture-model-control.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpModule\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        uploadService\n                                                  \n                                                        \n                                                                        UploadService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        DELETEfurnitureModel\n                        \n                    \n                \n            \n            \n                \nDELETEfurnitureModel(jwt: string, furnitureCardId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/furniture-model-control.service.ts:56\n                        \n                    \n\n\n            \n                \n                        Удаление 3D модели мебели по ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nJWT токен пользователя\n\n\n                                            \n                                        \n                                        \n                                                furnitureCardId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID модели мебели для удаления\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nРезультат запроса с сообщением\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        GETfurnitureModel\n                        \n                    \n                \n            \n            \n                \nGETfurnitureModel(jwt: string, furnitureCardId: string, controller: AbortController)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/furniture-model-control.service.ts:25\n                        \n                    \n\n\n            \n                \n                        Получение 3D модели мебели по ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nJWT токен пользователя для авторизации\n\n\n                                            \n                                        \n                                        \n                                                furnitureCardId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID модели мебели\n\n\n                                            \n                                        \n                                        \n                                                controller\n                                            \n                                                        AbortController\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nФайл модели в формате Blob\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        POSTuploadFurnitureModel\n                        \n                    \n                \n            \n            \n                \nPOSTuploadFurnitureModel(modelFile: File, jwt: string, furnitureCardId: string, uploadType: uploadType)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/furniture-model-control.service.ts:46\n                        \n                    \n\n\n            \n                \n                        Загрузка 3D модели мебели на сервер\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                modelFile\n                                            \n                                                        File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nФайл модели для загрузки\n\n\n                                            \n                                        \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nJWT токен пользователя\n\n\n                                            \n                                        \n                                        \n                                                furnitureCardId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID мебели, к которой относится модель\n\n\n                                            \n                                        \n                                        \n                                                uploadType\n                                            \n                                                            uploadType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseServiceUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : baseUrl + 'furniture/model'\n                    \n                \n                    \n                        \n                                Defined in src/services/furniture-model-control.service.ts:12\n                        \n                    \n\n            \n                \n                    Базовый URL для API запросов к моделям мебели\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { firstValueFrom } from 'rxjs';\nimport { UploadService, uploadType } from './upload.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FurnitureModelControlService {\n  /** Базовый URL для API запросов к моделям мебели */\n  private baseServiceUrl = baseUrl + 'furniture/model';\n\n  constructor(\n    private httpModule: HttpClient,\n    private uploadService: UploadService\n  ) { }\n\n  /**\n   * Получение 3D модели мебели по ID\n   * @param {string} jwt - JWT токен пользователя для авторизации\n   * @param {string} furnitureCardId - ID модели мебели\n   * @returns {Promise} - Файл модели в формате Blob\n   */\n  GETfurnitureModel(jwt: string, furnitureCardId: string, controller: AbortController): Promise {\n    const url = new URL(this.baseServiceUrl);\n    url.searchParams.set('jwt', jwt);\n    url.searchParams.set('furnitureCardId', furnitureCardId);\n\n    return fetch(url.toString(), {\n      method: 'GET',\n      signal: controller.signal,\n    })\n      .then((res) => {\n        if (!res.ok) throw new Error('Отмена загрузки');\n        return res.blob();\n      });\n  }\n\n  /**\n   * Загрузка 3D модели мебели на сервер\n   * @param {Blob} modelFile - Файл модели для загрузки\n   * @param {string} jwt - JWT токен пользователя\n   * @param {string} furnitureCardId - ID мебели, к которой относится модель\n   */\n  POSTuploadFurnitureModel(modelFile: File, jwt: string, furnitureCardId: string, uploadType: uploadType) {\n    this.uploadService.addFile(modelFile, jwt, furnitureCardId, uploadType)\n  }\n\n  /**\n   * Удаление 3D модели мебели по ID\n   * @param {string} jwt - JWT токен пользователя\n   * @param {string} furnitureCardId - ID модели мебели для удаления\n   * @returns {Promise} - Результат запроса с сообщением\n   */\n  DELETEfurnitureModel(jwt: string, furnitureCardId: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId);\n\n    return firstValueFrom(\n      this.httpModule.delete(this.baseServiceUrl, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interceptors/HttpErrorInterceptor.html":{"url":"interceptors/HttpErrorInterceptor.html","title":"interceptor - HttpErrorInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Interceptors\n  HttpErrorInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interceptors/http-error.interceptor.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(notification: NotificationService)\n                    \n                \n                        \n                            \n                                Defined in src/interceptors/http-error.interceptor.ts:14\n                            \n                        \n\n                \n                    \n                            Конструктор интерсептора ошибок HTTP\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        notification\n                                                  \n                                                        \n                                                                        NotificationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Сервис уведомлений для отображения ошибок\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(request: HttpRequest, next: HttpHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/interceptors/http-error.interceptor.ts:30\n                        \n                    \n\n\n            \n                \n                        Перехватчик HTTP-запросов для обработки ошибок\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        HttpRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    HTTP-запрос\n\n                                            \n                                        \n                                        \n                                                next\n                                            \n                                                        HttpHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Обработчик HTTP-запроса\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable>\n\n                        \n                            \n                                Observable с HTTP-событиями, с обработкой ошибок\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpErrorResponse\n} from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { NotificationService } from '../services/notification.service';\n\n@Injectable()\nexport class HttpErrorInterceptor implements HttpInterceptor {\n\n  /**\n   * Конструктор интерсептора ошибок HTTP\n   * @param notification Сервис уведомлений для отображения ошибок\n   */\n  constructor(\n    private notification: NotificationService,\n  ) {}\n\n  /**\n   * Перехватчик HTTP-запросов для обработки ошибок\n   * @param request HTTP-запрос\n   * @param next Обработчик HTTP-запроса\n   * @returns Observable с HTTP-событиями, с обработкой ошибок\n   */\n  intercept(request: HttpRequest, next: HttpHandler): Observable> {\n    return next.handle(request).pipe(\n      catchError((error: HttpErrorResponse) => {\n        // Показываем сообщение об ошибке через NotificationService\n        this.notification.setError(error.error.message, 5000);\n        // Пробрасываем ошибку дальше\n        return throwError(() => error);\n      })\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ImageSliderComponent.html":{"url":"components/ImageSliderComponent.html","title":"component - ImageSliderComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ImageSliderComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/components/image-slider/image-slider.component.ts\n\n\n\n    \n        Description\n    \n    \n        Компонент слайдера изображений.\nОтображает изображения с возможностью выбора главного изображения.\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-image-slider\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            NgIf\n                            NgFor\n                            TuiCarousel\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./image-slider.component.html\n            \n\n\n\n            \n                styleUrl\n                ./image-slider.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                index\n                            \n                            \n                                    Protected\n                                isMobileView\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                changeMainImage\n                            \n                            \n                                    \n                                    Private\n                                checkViewport\n                            \n                            \n                                    Protected\n                                getItemsCount\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                changeModeSlider\n                            \n                            \n                                imagesData\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                window:resize\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        changeModeSlider\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in src/components/image-slider/image-slider.component.ts:58\n                            \n                        \n                \n                    \n                        Входной параметр, который может менять режим слайдера (не используется явно в коде).\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        imagesData\n                    \n                \n                \n                    \n                        Type :         imageSliderFromServerData\n\n                    \n                \n                        \n                            \n                                    Defined in src/components/image-slider/image-slider.component.ts:52\n                            \n                        \n                \n                    \n                        Входные данные с изображениями с сервера.\nСодержит массив URL и индекс главного изображения.\n\n                    \n                \n            \n        \n\n\n\n    \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        window:resize\n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \nwindow:resize()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/image-slider/image-slider.component.ts:73\n                        \n                    \n\n\n            \n                \n                        Отслеживание изменения размера окна браузера.\nОбновляет флаг isMobileView при изменении ширины окна.\n\n\n                \n            \n        \n    \n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        changeMainImage\n                        \n                    \n                \n            \n            \n                \n                        \n                    changeMainImage(index: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/image-slider/image-slider.component.ts:81\n                        \n                    \n\n\n            \n                \n                        Меняет индекс главного изображения (idMainImage) в данных.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                index\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Индекс изображения, выбранного пользователем\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        checkViewport\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkViewport()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('window:resize', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in src/components/image-slider/image-slider.component.ts:73\n                        \n                    \n\n\n            \n                \n                        Отслеживание изменения размера окна браузера.\nОбновляет флаг isMobileView при изменении ширины окна.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        getItemsCount\n                        \n                    \n                \n            \n            \n                \n                        \n                    getItemsCount()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/image-slider/image-slider.component.ts:91\n                        \n                    \n\n\n            \n                \n                        Возвращает количество элементов для отображения в слайдере.\nЕсли изображений меньше 3 — возвращает длину массива,\nиначе 1 для мобильного и 3 для десктопного вида.\n\n\n                        \n                            Returns :         number\n\n                        \n                            \n                                Количество видимых элементов слайдера\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/image-slider/image-slider.component.ts:64\n                        \n                    \n\n\n            \n                \n                        Инициализация компонента.\nПроверяет ширину экрана при загрузке.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        index\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/components/image-slider/image-slider.component.ts:40\n                        \n                    \n\n            \n                \n                    Текущий индекс выбранного слайда (используется для локального отслеживания).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        isMobileView\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/components/image-slider/image-slider.component.ts:45\n                        \n                    \n\n            \n                \n                    Флаг, указывающий, находится ли текущее отображение в мобильном виде (ширина \n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, HostListener, Input, OnInit } from '@angular/core';\nimport { NgIf, NgFor } from '@angular/common';\nimport { TuiCarousel } from '@taiga-ui/kit';\n\n/**\n * Интерфейс данных для слайдера с клиентскими изображениями в формате Blob.\n */\nexport interface imageSliderClientData {\n  /** Массив изображений в формате Blob */\n  images: Blob[];\n  /** Индекс главного (выбранного) изображения */\n  idMainImage: number;\n}\n\n/**\n * Интерфейс данных для слайдера с изображениями с сервера в виде URL-строк.\n */\nexport interface imageSliderFromServerData {\n  /** Массив URL-строк изображений */\n  images: string[];\n  /** Индекс главного (выбранного) изображения */\n  idMainImage: number;\n}\n\n/**\n * Компонент слайдера изображений.\n * Отображает изображения с возможностью выбора главного изображения.\n */\n@Component({\n  selector: 'app-image-slider',\n  standalone: true,\n  imports: [NgIf, NgFor, TuiCarousel],\n  templateUrl: './image-slider.component.html',\n  styleUrl: './image-slider.component.scss'\n})\nexport class ImageSliderComponent implements OnInit {\n  /**\n   * Текущий индекс выбранного слайда (используется для локального отслеживания).\n   */\n  protected index: number = 0;\n\n  /**\n   * Флаг, указывающий, находится ли текущее отображение в мобильном виде (ширина \n    \n\n    \n        \n  \n    \n      \n      {{imagesData.idMainImage===i?'Основная':'Сделать основной'}}\n    \n  \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                  {{imagesData.idMainImage===i?\\'Основная\\':\\'Сделать основной\\'}}      '\n    var COMPONENTS = [{'name': 'AccountPageComponent', 'selector': 'app-account-page'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreateFurnitureComponent', 'selector': 'app-create-furniture'},{'name': 'CreateFurniturePageComponent', 'selector': 'app-create-furniture-page'},{'name': 'FinderComponent', 'selector': 'app-finder'},{'name': 'ImageSliderComponent', 'selector': 'app-image-slider'},{'name': 'LoginPageComponent', 'selector': 'app-login-page'},{'name': 'MainPageComponent', 'selector': 'app-main-page'},{'name': 'NavigationPanelComponent', 'selector': 'app-navigation-panel'},{'name': 'NotificationComponent', 'selector': 'app-notification'},{'name': 'PlanHouseComponent', 'selector': 'app-plan-house'},{'name': 'PlanHousePageComponent', 'selector': 'app-plan-house-page'},{'name': 'SceneComponent', 'selector': 'app-scene'},{'name': 'ShopPageComponent', 'selector': 'app-shop-page'},{'name': 'UploadOverlayComponent', 'selector': 'app-upload-overlay'},{'name': 'ViewFurnitureComponent', 'selector': 'app-view-furniture'}];\n    var DIRECTIVES = [{'name': 'AutoHeightDirective', 'selector': '[appAutoHeight]'}];\n    var ACTUAL_COMPONENT = {'name': 'ImageSliderComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/MainPageComponent.html":{"url":"components/MainPageComponent.html","title":"component - MainPageComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  MainPageComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/components/main-page/main-page.component.ts\n\n\n\n    \n        Description\n    \n    \n        Компонент главной страницы.\nУправляет отображением различных секций для создания мебели, планировки дома и просмотра мебели.\n\n    \n\n\n    \n        Implements\n    \n    \n                AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-main-page\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                                CreateFurnitureComponent\n                                ViewFurnitureComponent\n                                PlanHouseComponent\n                            NgClass\n                                NavigationPanelComponent\n                            RouterLink\n                            NgIf\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./main-page.component.html\n            \n\n\n\n            \n                styleUrl\n                ./main-page.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                furnitureExampleData\n                            \n                            \n                                    Protected\n                                furnitureTemplate\n                            \n                            \n                                    Protected\n                                isMobileView\n                            \n                            \n                                    Protected\n                                planHouseExampleData\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Private\n                                checkViewport\n                            \n                            \n                                    Protected\n                                focusFinder\n                            \n                            \n                                    Protected\n                                navigateToPage\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Protected\n                                openCreateFurniture\n                            \n                            \n                                    Protected\n                                openViewFurniture\n                            \n                        \n                    \n                \n\n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                window:resize\n                            \n                        \n                    \n                \n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(elementRef: ElementRef, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/components/main-page/main-page.component.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        elementRef\n                                                  \n                                                        \n                                                                    ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n    \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        window:resize\n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \nwindow:resize()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/main-page/main-page.component.ts:67\n                        \n                    \n\n\n            \n                \n                        Слушатель события изменения размера окна.\nОбновляет флаг isMobileView.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Событие resize окна\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        checkViewport\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkViewport()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('window:resize', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in src/components/main-page/main-page.component.ts:67\n                        \n                    \n\n\n            \n                \n                        Слушатель события изменения размера окна.\nОбновляет флаг isMobileView.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        focusFinder\n                        \n                    \n                \n            \n            \n                \n                        \n                    focusFinder()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/main-page/main-page.component.ts:74\n                        \n                    \n\n\n            \n                \n                        Фокусирует элемент ввода с классом 'finderInput', если он существует.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        navigateToPage\n                        \n                    \n                \n            \n            \n                \n                        \n                    navigateToPage(link: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/main-page/main-page.component.ts:98\n                        \n                    \n\n\n            \n                \n                        Навигация по приложению.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                link\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Ссылка для перехода на другую страницу\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/main-page/main-page.component.ts:44\n                        \n                    \n\n\n            \n                \n                        Инициализация компонента после загрузки представления.\nОтключает события для дочерних элементов в компонентах CreateFurniture и PlanHouse.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/main-page/main-page.component.ts:57\n                        \n                    \n\n\n            \n                \n                        Проверка на мобильную версию при инициализации компонента.\nУстанавливает флаг isMobileView в зависимости от ширины окна.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        openCreateFurniture\n                        \n                    \n                \n            \n            \n                \n                        \n                    openCreateFurniture()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/main-page/main-page.component.ts:90\n                        \n                    \n\n\n            \n                \n                        Открывает шаблон для создания новой мебели.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        openViewFurniture\n                        \n                    \n                \n            \n            \n                \n                        \n                    openViewFurniture()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/main-page/main-page.component.ts:83\n                        \n                    \n\n\n            \n                \n                        Открывает шаблон для просмотра мебели.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        furnitureExampleData\n                        \n                    \n                \n            \n                \n                    \n                        Default value : furnitureExampleData\n                    \n                \n                    \n                        \n                                Defined in src/components/main-page/main-page.component.ts:32\n                        \n                    \n\n            \n                \n                    Пример данных мебели\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        furnitureTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"view\" | \"create\"\n\n                    \n                \n                \n                    \n                        Default value : 'create'\n                    \n                \n                    \n                        \n                                Defined in src/components/main-page/main-page.component.ts:29\n                        \n                    \n\n            \n                \n                    Текущий отображаемый шаблон: 'view' или 'create'\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        isMobileView\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/components/main-page/main-page.component.ts:38\n                        \n                    \n\n            \n                \n                    Флаг для определения, находится ли пользователь на мобильном устройстве\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        planHouseExampleData\n                        \n                    \n                \n            \n                \n                    \n                        Default value : planHouseExampleData\n                    \n                \n                    \n                        \n                                Defined in src/components/main-page/main-page.component.ts:35\n                        \n                    \n\n            \n                \n                    Пример данных планировки дома\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { AfterViewInit, Component, ElementRef, HostListener } from '@angular/core';\nimport { CreateFurnitureComponent } from '../create-furnitre/create-furniture.component';\nimport { ViewFurnitureComponent } from '../view-furniture/view-furniture.component';\nimport { PlanHouseComponent } from '../plan-house/plan-house.component';\nimport { NgClass, NgIf } from '@angular/common';\nimport { NavigationPanelComponent } from '../navigation-panel/navigation-panel.component';\nimport { Router, RouterLink } from '@angular/router';\nimport { furnitureExampleData, planHouseExampleData } from '../../usable/main-page.mock';\n\n/**\n * Компонент главной страницы.\n * Управляет отображением различных секций для создания мебели, планировки дома и просмотра мебели.\n */\n@Component({\n  selector: 'app-main-page',\n  standalone: true,\n  imports: [CreateFurnitureComponent, ViewFurnitureComponent, PlanHouseComponent, NgClass, NavigationPanelComponent, RouterLink, NgIf],\n  templateUrl: './main-page.component.html',\n  styleUrl: './main-page.component.scss'\n})\nexport class MainPageComponent implements AfterViewInit {\n\n  constructor(\n    private elementRef: ElementRef, /** Элемент компонента */\n    private router: Router /** Сервис для навигации */\n  ) {}\n\n  /** Текущий отображаемый шаблон: 'view' или 'create' */\n  protected furnitureTemplate: 'view' | 'create' = 'create';\n\n  /** Пример данных мебели */\n  protected furnitureExampleData = furnitureExampleData;\n\n  /** Пример данных планировки дома */\n  protected planHouseExampleData = planHouseExampleData;\n\n  /** Флаг для определения, находится ли пользователь на мобильном устройстве */\n  protected isMobileView: boolean = false;\n\n  /**\n   * Инициализация компонента после загрузки представления.\n   * Отключает события для дочерних элементов в компонентах CreateFurniture и PlanHouse.\n   */\n  ngAfterViewInit(): void {\n    (this.elementRef.nativeElement.querySelectorAll('app-create-furniture,app-plan-house') as NodeListOf).forEach(elem => {\n      elem.querySelectorAll('*').forEach(child => {\n        child.setAttribute('tabindex', \"-1\"); /** Отключает фокусировку для дочерних элементов */\n        child.style.pointerEvents = 'none'; /** Отключает взаимодействие с дочерними элементами */\n      });\n    });\n  }\n\n  /**\n   * Проверка на мобильную версию при инициализации компонента.\n   * Устанавливает флаг isMobileView в зависимости от ширины окна.\n   */\n  ngOnInit() {\n    this.checkViewport();\n  }\n\n  /**\n   * Слушатель события изменения размера окна.\n   * Обновляет флаг isMobileView.\n   * @param event Событие resize окна\n   */\n  @HostListener('window:resize', ['$event'])\n  private checkViewport() {\n    this.isMobileView = window.innerWidth \n    \n\n    \n        \n    \n        \n            \n            \n            \n            \n        \n    \n    \n        \n            \n            \n            \n            \n        \n        HOUSEQUALITY\n        \n            Shop\n            Furniture\n            Project\n            Profile\n        \n    \n\n\n    \n    \n        \n            Ваш идеальный дом\n            HouseQuality - платформа для создания идеального дома. Зайдите в наш магазин цифрового дизайна и начните свое путешествие!\n            \n                \n                    Стиль\n                    Ваша идея\n                \n                \n                    Дом\n                    Ваша зона\n                \n                \n                    План\n                    Новый вид\n                \n                \n                    Мебель\n                    Большой выбор\n                \n            \n        \n\n        \n            Создаем и воплощаем ваши мечты\n            \n                Добавить мебель\n                Посмотреть мебель\n            \n        \n\n        \n            \n\n            \n        \n\n        \n            Создайте свой дом\n            Добавьте комнаты и передвиньте их\n        \n        \n    \n\n\n\n    \n        \n            Найти мебель\n            Аккаунт\n        \n        \n            Добавить мебель\n            Планировка\n        \n    \n    HouseQuality 2025\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                                                                                                    HOUSEQUALITY                    Shop            Furniture            Project            Profile                                        Ваш идеальный дом            HouseQuality - платформа для создания идеального дома. Зайдите в наш магазин цифрового дизайна и начните свое путешествие!                                                Стиль                    Ваша идея                                                    Дом                    Ваша зона                                                    План                    Новый вид                                                    Мебель                    Большой выбор                                                        Создаем и воплощаем ваши мечты                            Добавить мебель                Посмотреть мебель                                                                                Создайте свой дом            Добавьте комнаты и передвиньте их                                            Найти мебель            Аккаунт                            Добавить мебель            Планировка                HouseQuality 2025'\n    var COMPONENTS = [{'name': 'AccountPageComponent', 'selector': 'app-account-page'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreateFurnitureComponent', 'selector': 'app-create-furniture'},{'name': 'CreateFurniturePageComponent', 'selector': 'app-create-furniture-page'},{'name': 'FinderComponent', 'selector': 'app-finder'},{'name': 'ImageSliderComponent', 'selector': 'app-image-slider'},{'name': 'LoginPageComponent', 'selector': 'app-login-page'},{'name': 'MainPageComponent', 'selector': 'app-main-page'},{'name': 'NavigationPanelComponent', 'selector': 'app-navigation-panel'},{'name': 'NotificationComponent', 'selector': 'app-notification'},{'name': 'PlanHouseComponent', 'selector': 'app-plan-house'},{'name': 'PlanHousePageComponent', 'selector': 'app-plan-house-page'},{'name': 'SceneComponent', 'selector': 'app-scene'},{'name': 'ShopPageComponent', 'selector': 'app-shop-page'},{'name': 'UploadOverlayComponent', 'selector': 'app-upload-overlay'},{'name': 'ViewFurnitureComponent', 'selector': 'app-view-furniture'}];\n    var DIRECTIVES = [{'name': 'AutoHeightDirective', 'selector': '[appAutoHeight]'}];\n    var ACTUAL_COMPONENT = {'name': 'MainPageComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MyXhrUploadOptions.html":{"url":"interfaces/MyXhrUploadOptions.html","title":"interface - MyXhrUploadOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MyXhrUploadOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/upload.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            endpoint\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            fieldName\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            formData\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            getResponseError\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        endpoint\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        endpoint:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fieldName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fieldName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        formData\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        formData:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getResponseError\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getResponseError:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport Uppy from '@uppy/core';\nimport XHRUpload from '@uppy/xhr-upload';\nimport { BehaviorSubject } from 'rxjs';\nimport { baseUrl } from '.';\nimport { FurnitureCardControlService } from './furniture-card-control.service';\nimport { ServerImageControlService } from './server-image-control.service';\nimport { AccountCookieService } from './account-cookie.service';\nimport { NotificationService } from './notification.service';\n\ntype uploadStatus = 'uploading' | 'success' | 'error';\nexport type uploadType = 'create' | 'update';\nexport interface UploadEntry {\n  id: string;\n  name: string;\n  progress: number;\n  status: uploadStatus;\n}\ninterface MyXhrUploadOptions {\n  endpoint: string;\n  fieldName?: string;\n  formData?: boolean;\n  getResponseError?: (responseText: string, response: Response) => Error | null;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class UploadService {\n  private uppy: Uppy;\n  public uploads$ = new BehaviorSubject([]);\n  private baseServiceUrl = baseUrl + 'furniture/model';\n\n  constructor(\n    private furnitureCardService: FurnitureCardControlService,\n    private serverImageControl: ServerImageControlService,\n    private accountCookieService: AccountCookieService,\n    private notification: NotificationService\n  ) {\n    this.uppy = new Uppy({ autoProceed: true });\n\n    this.uppy.use(XHRUpload, {\n      endpoint: this.baseServiceUrl,\n      fieldName: 'file',\n      formData: true,\n      getResponseError: (responseText, response) => {\n        return new Error(`Ошибка: ${response.statusText}`);\n      }\n    } as MyXhrUploadOptions);\n\n    this.uppy.on('upload-progress', (file, progress) => {\n      if (file === undefined || file.meta.name === undefined) return;\n\n      const NAME = file.data instanceof File ? file.data.name : 'file'\n      this.updateUpload(file.id, NAME, file.progress.percentage ?? 50, 'uploading');\n    });\n\n    this.uppy.on('upload-success', (file) => {\n      if (file === undefined || file.meta.name === undefined) return;\n\n      const NAME = file.data instanceof File ? file.data.name : 'file'\n      this.updateUpload(file.id, NAME, 100, 'success');\n      this.notification.setSuccess('Модель обновлена', 2500);\n    });\n\n    this.uppy.on('upload-error', (file, error) => {\n      if (file === undefined || file.meta.name === undefined) return;\n\n      const NAME = file.data instanceof File ? file.data.name : 'file'\n      this.updateUpload(file.id, NAME, 100, 'error');\n      this.cancelUpload(file.id);\n    });\n  }\n\n  addFile(file: File, jwt: string, furnitureCardId: string, uploadType: uploadType) {\n    const UNIQUE_ID = Date.now().toString();\n    this.uppy.addFile({\n      name: UNIQUE_ID + this.getFileExtension(file.name),\n      type: file.type,\n      data: file,\n      meta: {\n        furnitureCardId: furnitureCardId,\n        jwt: jwt,\n        uploadType: uploadType\n      }\n    });\n  }\n\n  async cancelUpload(fileID: string) {\n    const file = this.uppy.getFile(fileID);\n    if (file) {\n      this.uppy.removeFile(fileID);\n      const JWT = this.accountCookieService.getJwt()\n      const FURNITURE_CARD_ID = file.meta['furnitureCardId'] as string;\n      const UPLOAD_TYPE = file.meta['uploadType'] as string;\n\n\n      if (JWT && FURNITURE_CARD_ID && UPLOAD_TYPE === 'create') {\n        await this.serverImageControl.DELETEproject(JWT, FURNITURE_CARD_ID)\n        this.furnitureCardService.DELETEfurnitureCard(JWT, FURNITURE_CARD_ID)\n      }\n    }\n  }\n  private getFileExtension(fileName: string): string | null {\n    const parts = fileName.split('.');\n    const EXTENSION = parts.length > 1 ? parts.pop()?.toLowerCase() : \"obj\"\n    return `.${EXTENSION}`\n  }\n  removeFileFromQueue(fileID: string) {\n    const updatedQueue = this.uploads$.value.filter(file => file.id !== fileID);\n    this.uploads$.next(updatedQueue);\n  }\n\n  private updateUpload(id: string, name: string, progress: number, status: uploadStatus) {\n    const current = this.uploads$.value.filter(file => file.id !== id);\n    this.uploads$.next([...current, { id, name, progress, status }]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NavigationPanelComponent.html":{"url":"components/NavigationPanelComponent.html","title":"component - NavigationPanelComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NavigationPanelComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/components/navigation-panel/navigation-panel.component.ts\n\n\n\n    \n        Description\n    \n    \n        Компонент навигационной панели.\nОтображает меню навигации и компонент поиска.\nПоддерживает адаптивность под мобильные устройства.\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-navigation-panel\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            RouterLink\n                                FinderComponent\n                            NgIf\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./navigation-panel.component.html\n            \n\n\n\n            \n                styleUrl\n                ./navigation-panel.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                isMobileView\n                            \n                            \n                                    Protected\n                                menuOpen\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Private\n                                checkViewport\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Protected\n                                toggleMenu\n                            \n                        \n                    \n                \n\n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                window:resize\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n\n\n\n    \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        window:resize\n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \nwindow:resize()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/navigation-panel/navigation-panel.component.ts:40\n                        \n                    \n\n\n            \n                \n                        Обработчик события изменения размера окна.\nПроверяет ширину окна и обновляет флаг isMobileView.\nЕсли устройство не мобильное — закрывает меню.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Событие изменения размера окна\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        checkViewport\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkViewport()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('window:resize', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in src/components/navigation-panel/navigation-panel.component.ts:40\n                        \n                    \n\n\n            \n                \n                        Обработчик события изменения размера окна.\nПроверяет ширину окна и обновляет флаг isMobileView.\nЕсли устройство не мобильное — закрывает меню.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/navigation-panel/navigation-panel.component.ts:29\n                        \n                    \n\n\n            \n                \n                        Жизненный цикл OnInit.\nВыполняет начальную проверку размера экрана.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        toggleMenu\n                        \n                    \n                \n            \n            \n                \n                        \n                    toggleMenu()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/navigation-panel/navigation-panel.component.ts:50\n                        \n                    \n\n\n            \n                \n                        Переключает состояние меню (открыто/закрыто).\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        isMobileView\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/components/navigation-panel/navigation-panel.component.ts:23\n                        \n                    \n\n            \n                \n                    Флаг, указывающий, отображается ли компонент в мобильной версии\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        menuOpen\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/components/navigation-panel/navigation-panel.component.ts:20\n                        \n                    \n\n            \n                \n                    Состояние открытия выпадающего меню (используется на мобильных устройствах)\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, HostListener, OnInit } from '@angular/core';\nimport { RouterLink } from '@angular/router';\nimport { FinderComponent } from '../finder/finder.component';\nimport { NgIf } from '@angular/common';\n\n/**\n * Компонент навигационной панели.\n * Отображает меню навигации и компонент поиска.\n * Поддерживает адаптивность под мобильные устройства.\n */\n@Component({\n  selector: 'app-navigation-panel',\n  standalone: true,\n  imports: [RouterLink, FinderComponent, NgIf],\n  templateUrl: './navigation-panel.component.html',\n  styleUrl: './navigation-panel.component.scss'\n})\nexport class NavigationPanelComponent implements OnInit {\n  /** Состояние открытия выпадающего меню (используется на мобильных устройствах) */\n  protected menuOpen = false;\n\n  /** Флаг, указывающий, отображается ли компонент в мобильной версии */\n  protected isMobileView = false;\n\n  /**\n   * Жизненный цикл OnInit.\n   * Выполняет начальную проверку размера экрана.\n   */\n  ngOnInit() {\n    this.checkViewport();\n  }\n\n  /**\n   * Обработчик события изменения размера окна.\n   * Проверяет ширину окна и обновляет флаг `isMobileView`.\n   * Если устройство не мобильное — закрывает меню.\n   * @param event Событие изменения размера окна\n   */\n  @HostListener('window:resize', ['$event'])\n  private checkViewport() {\n    this.isMobileView = window.innerWidth \n    \n\n    \n        \n    HQ\n\n    \n        \n    \n\n    \n        \n        \n            \n                \n            \n            \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n\n    \n        \n        \n            \n            Аккаунт\n        \n        \n            \n            Расстановка\n        \n        \n            \n            Мебель\n        \n        \n            \n            Магазин\n        \n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    HQ                                                                                                                                                                                                                                                            Аккаунт                                        Расстановка                                        Мебель                                        Магазин            '\n    var COMPONENTS = [{'name': 'AccountPageComponent', 'selector': 'app-account-page'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreateFurnitureComponent', 'selector': 'app-create-furniture'},{'name': 'CreateFurniturePageComponent', 'selector': 'app-create-furniture-page'},{'name': 'FinderComponent', 'selector': 'app-finder'},{'name': 'ImageSliderComponent', 'selector': 'app-image-slider'},{'name': 'LoginPageComponent', 'selector': 'app-login-page'},{'name': 'MainPageComponent', 'selector': 'app-main-page'},{'name': 'NavigationPanelComponent', 'selector': 'app-navigation-panel'},{'name': 'NotificationComponent', 'selector': 'app-notification'},{'name': 'PlanHouseComponent', 'selector': 'app-plan-house'},{'name': 'PlanHousePageComponent', 'selector': 'app-plan-house-page'},{'name': 'SceneComponent', 'selector': 'app-scene'},{'name': 'ShopPageComponent', 'selector': 'app-shop-page'},{'name': 'UploadOverlayComponent', 'selector': 'app-upload-overlay'},{'name': 'ViewFurnitureComponent', 'selector': 'app-view-furniture'}];\n    var DIRECTIVES = [{'name': 'AutoHeightDirective', 'selector': '[appAutoHeight]'}];\n    var ACTUAL_COMPONENT = {'name': 'NavigationPanelComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NotificationComponent.html":{"url":"components/NotificationComponent.html","title":"component - NotificationComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NotificationComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/components/notification/notification.component.ts\n\n\n\n    \n        Description\n    \n    \n        Компонент отображения уведомлений об ошибках и успехах.\nТакже содержит методы выхода из аккаунта и перезагрузки страницы.\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-notification\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            NgClass\n                            NgIf\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./notification.component.html\n            \n\n\n\n            \n                styleUrl\n                ./notification.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                errorMessage\n                            \n                            \n                                    Protected\n                                successMessage\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logout\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Protected\n                                reloadPage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(notificationService: NotificationService, cookieService: AccountCookieService)\n                    \n                \n                        \n                            \n                                Defined in src/components/notification/notification.component.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        notificationService\n                                                  \n                                                        \n                                                                        NotificationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cookieService\n                                                  \n                                                        \n                                                                        AccountCookieService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logout\n                        \n                    \n                \n            \n            \n                \n                        \n                    logout()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/notification/notification.component.ts:53\n                        \n                    \n\n\n            \n                \n                        Удаляет JWT и тип аккаунта из cookie, затем перезагружает страницу.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/notification/notification.component.ts:33\n                        \n                    \n\n\n            \n                \n                        Подписка на потоки сообщений при инициализации компонента.\nПолученные сообщения сохраняются в соответствующие свойства.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        reloadPage\n                        \n                    \n                \n            \n            \n                \n                        \n                    reloadPage()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/notification/notification.component.ts:46\n                        \n                    \n\n\n            \n                \n                        Перезагружает текущую страницу.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        errorMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/components/notification/notification.component.ts:24\n                        \n                    \n\n            \n                \n                    Сообщение об ошибке, получаемое из NotificationService\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        successMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/components/notification/notification.component.ts:27\n                        \n                    \n\n            \n                \n                    Сообщение об успешном действии, получаемое из NotificationService\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { NgClass, NgIf } from '@angular/common';\nimport { Component, OnInit } from '@angular/core';\nimport { NotificationService } from '../../services/notification.service';\nimport { AccountCookieService } from '../../services/account-cookie.service';\n\n/**\n * Компонент отображения уведомлений об ошибках и успехах.\n * Также содержит методы выхода из аккаунта и перезагрузки страницы.\n */\n@Component({\n  selector: 'app-notification',\n  standalone: true,\n  imports: [NgClass, NgIf],\n  templateUrl: './notification.component.html',\n  styleUrl: './notification.component.scss'\n})\nexport class NotificationComponent implements OnInit {\n  constructor(\n    private notificationService: NotificationService,\n    private cookieService: AccountCookieService\n  ) {}\n\n  /** Сообщение об ошибке, получаемое из NotificationService */\n  protected errorMessage!: string;\n\n  /** Сообщение об успешном действии, получаемое из NotificationService */\n  protected successMessage!: string;\n\n  /**\n   * Подписка на потоки сообщений при инициализации компонента.\n   * Полученные сообщения сохраняются в соответствующие свойства.\n   */\n  ngOnInit(): void {\n    this.notificationService.error$.subscribe(message => {\n      this.errorMessage = message;\n    });\n\n    this.notificationService.success$.subscribe(message => {\n      this.successMessage = message;\n    });\n  }\n\n  /**\n   * Перезагружает текущую страницу.\n   */\n  protected reloadPage(): void {\n    window.location.reload();\n  }\n\n  /**\n   * Удаляет JWT и тип аккаунта из cookie, затем перезагружает страницу.\n   */\n  protected logout(): void {\n    this.cookieService.deleteJwt();\n    this.cookieService.deleteAccountType();\n    this.reloadPage();\n  }\n}\n\n    \n\n    \n        \n    \n    \n        {{errorMessage?'Что-то пошло не так':'Успешно'}}\n        {{errorMessage||successMessage}}\n    \n    \n        \n            \n        \n        \n            \n        \n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                {{errorMessage?\\'Что-то пошло не так\\':\\'Успешно\\'}}        {{errorMessage||successMessage}}                                                                    '\n    var COMPONENTS = [{'name': 'AccountPageComponent', 'selector': 'app-account-page'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreateFurnitureComponent', 'selector': 'app-create-furniture'},{'name': 'CreateFurniturePageComponent', 'selector': 'app-create-furniture-page'},{'name': 'FinderComponent', 'selector': 'app-finder'},{'name': 'ImageSliderComponent', 'selector': 'app-image-slider'},{'name': 'LoginPageComponent', 'selector': 'app-login-page'},{'name': 'MainPageComponent', 'selector': 'app-main-page'},{'name': 'NavigationPanelComponent', 'selector': 'app-navigation-panel'},{'name': 'NotificationComponent', 'selector': 'app-notification'},{'name': 'PlanHouseComponent', 'selector': 'app-plan-house'},{'name': 'PlanHousePageComponent', 'selector': 'app-plan-house-page'},{'name': 'SceneComponent', 'selector': 'app-scene'},{'name': 'ShopPageComponent', 'selector': 'app-shop-page'},{'name': 'UploadOverlayComponent', 'selector': 'app-upload-overlay'},{'name': 'ViewFurnitureComponent', 'selector': 'app-view-furniture'}];\n    var DIRECTIVES = [{'name': 'AutoHeightDirective', 'selector': '[appAutoHeight]'}];\n    var ACTUAL_COMPONENT = {'name': 'NotificationComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NotificationService.html":{"url":"injectables/NotificationService.html","title":"injectable - NotificationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NotificationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/notification.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для управления уведомлениями об ошибках и успехах.\nПозволяет подписываться на сообщения и автоматически очищать их через заданный промежуток времени.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                error$\n                            \n                            \n                                    Private\n                                errorSubject\n                            \n                            \n                                success$\n                            \n                            \n                                    Private\n                                successSubject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                clearError\n                            \n                            \n                                setError\n                            \n                            \n                                setSuccess\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        clearError\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearError()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/notification.service.ts:53\n                        \n                    \n\n\n            \n                \n                        Очищает сообщения об ошибках и успехах\n(устанавливает значения в пустую строку)\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setError\n                        \n                    \n                \n            \n            \n                \nsetError(message: string, delay: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/notification.service.ts:34\n                        \n                    \n\n\n            \n                \n                        Устанавливает сообщение об ошибке и очищает его после задержки\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Текст ошибки для отображения\n\n                                            \n                                        \n                                        \n                                                delay\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Задержка в миллисекундах перед автоматическим удалением сообщения\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setSuccess\n                        \n                    \n                \n            \n            \n                \nsetSuccess(message: string, delay: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/notification.service.ts:44\n                        \n                    \n\n\n            \n                \n                        Устанавливает сообщение об успешном действии и очищает его после задержки\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Текст успешного сообщения\n\n                                            \n                                        \n                                        \n                                                delay\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Задержка в миллисекундах перед автоматическим удалением сообщения\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        error$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.errorSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/services/notification.service.ts:24\n                        \n                    \n\n            \n                \n                    Observable для подписки на сообщения об ошибках\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        errorSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject('')\n                    \n                \n                    \n                        \n                                Defined in src/services/notification.service.ts:16\n                        \n                    \n\n            \n                \n                    BehaviorSubject для ошибок, содержит строку с сообщением об ошибке или пустую строку.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        success$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.successSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/services/notification.service.ts:27\n                        \n                    \n\n            \n                \n                    Observable для подписки на успешные сообщения\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        successSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject('')\n                    \n                \n                    \n                        \n                                Defined in src/services/notification.service.ts:21\n                        \n                    \n\n            \n                \n                    BehaviorSubject для успешных сообщений, содержит строку с сообщением успеха или пустую строку.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n/**\n * Сервис для управления уведомлениями об ошибках и успехах.\n * Позволяет подписываться на сообщения и автоматически очищать их через заданный промежуток времени.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotificationService {\n\n  /** \n   * BehaviorSubject для ошибок, содержит строку с сообщением об ошибке или пустую строку.\n   */\n  private errorSubject = new BehaviorSubject('');\n\n  /** \n   * BehaviorSubject для успешных сообщений, содержит строку с сообщением успеха или пустую строку.\n   */\n  private successSubject = new BehaviorSubject('');\n\n  /** Observable для подписки на сообщения об ошибках */\n  error$ = this.errorSubject.asObservable();\n\n  /** Observable для подписки на успешные сообщения */\n  success$ = this.successSubject.asObservable();\n\n  /**\n   * Устанавливает сообщение об ошибке и очищает его после задержки\n   * @param message Текст ошибки для отображения\n   * @param delay Задержка в миллисекундах перед автоматическим удалением сообщения\n   */\n  setError(message: string, delay: number): void {\n    this.errorSubject.next(message);\n    setTimeout(() => this.clearError(), delay);\n  }\n\n  /**\n   * Устанавливает сообщение об успешном действии и очищает его после задержки\n   * @param message Текст успешного сообщения\n   * @param delay Задержка в миллисекундах перед автоматическим удалением сообщения\n   */\n  setSuccess(message: string, delay: number): void {\n    this.successSubject.next(message);\n    setTimeout(() => this.clearError(), delay);\n  }\n\n  /**\n   * Очищает сообщения об ошибках и успехах\n   * (устанавливает значения в пустую строку)\n   */\n  private clearError(): void {\n    this.errorSubject.next('');\n    this.successSubject.next('');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/PlanHousePageComponent.html":{"url":"components/PlanHousePageComponent.html","title":"component - PlanHousePageComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  PlanHousePageComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/components/plan-house-page/plan-house-page.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                AfterViewInit\n                OnInit\n                AfterViewChecked\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-plan-house-page\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                                NavigationPanelComponent\n                                PlanHouseComponent\n                            NgFor\n                            NgIf\n                            ReactiveFormsModule\n                            NgIf\n                            NgClass\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./plan-house-page.component.html\n            \n\n\n\n            \n                styleUrl\n                ./plan-house-page.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                accountData\n                            \n                            \n                                    Private\n                                addModule\n                            \n                            \n                                    Protected\n                                checkDesktop\n                            \n                            \n                                    Private\n                                currentPlanHouse\n                            \n                            \n                                    Protected\n                                currentProjectId\n                            \n                            \n                                    Private\n                                hasRoomIdBeenProcessed\n                            \n                            \n                                    \n                                    Private\n                                planHouse\n                            \n                            \n                                    Protected\n                                projectNameForm\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                closeAddModule\n                            \n                            \n                                    Protected\n                                closeProject\n                            \n                            \n                                    Protected\n                                    Async\n                                createProject\n                            \n                            \n                                    Protected\n                                    Async\n                                deleteProject\n                            \n                            \n                                    Protected\n                                getCurrentViewRoom\n                            \n                            \n                                ngAfterViewChecked\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Protected\n                                openAddModule\n                            \n                            \n                                    Protected\n                                openProject\n                            \n                            \n                                    Private\n                                    Async\n                                pageInit\n                            \n                            \n                                    Protected\n                                    Async\n                                saveProject\n                            \n                            \n                                    Protected\n                                updatePlanData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(accountService: AccountService, accountCookieService: AccountCookieService, router: Router, route: ActivatedRoute, elemenetRef: ElementRef, renderer: Renderer2, projectService: ProjectService, notification: NotificationService, location: Location)\n                    \n                \n                        \n                            \n                                Defined in src/components/plan-house-page/plan-house-page.component.ts:42\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        accountService\n                                                  \n                                                        \n                                                                        AccountService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accountCookieService\n                                                  \n                                                        \n                                                                        AccountCookieService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        route\n                                                  \n                                                        \n                                                                    ActivatedRoute\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        elemenetRef\n                                                  \n                                                        \n                                                                    ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                    Renderer2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        projectService\n                                                  \n                                                        \n                                                                        ProjectService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        notification\n                                                  \n                                                        \n                                                                        NotificationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        location\n                                                  \n                                                        \n                                                                    Location\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        closeAddModule\n                        \n                    \n                \n            \n            \n                \n                        \n                    closeAddModule()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/plan-house-page/plan-house-page.component.ts:214\n                        \n                    \n\n\n            \n                \n                        Закрывает модуль добавления проекта.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        closeProject\n                        \n                    \n                \n            \n            \n                \n                        \n                    closeProject()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/plan-house-page/plan-house-page.component.ts:230\n                        \n                    \n\n\n            \n                \n                        Закрывает текущий проект и убирает planId из URL.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Async\n                        createProject\n                        \n                    \n                \n            \n            \n                \n                        \n                    createProject()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/plan-house-page/plan-house-page.component.ts:140\n                        \n                    \n\n\n            \n                \n                        Создает новый проект с именем из формы.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Async\n                        deleteProject\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteProject(indexProject: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/plan-house-page/plan-house-page.component.ts:183\n                        \n                    \n\n\n            \n                \n                        Удаляет указанный проект пользователя.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                indexProject\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Индекс проекта в массиве\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        getCurrentViewRoom\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCurrentViewRoom()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/plan-house-page/plan-house-page.component.ts:197\n                        \n                    \n\n\n            \n                \n                        Возвращает текущую выбранную комнату в планировке.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngAfterViewChecked\n                        \n                    \n                \n            \n            \n                \nngAfterViewChecked()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/plan-house-page/plan-house-page.component.ts:100\n                        \n                    \n\n\n            \n                \n                        При загрузке проверяет наличие roomId и открывает комнату, если нужно.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/plan-house-page/plan-house-page.component.ts:93\n                        \n                    \n\n\n            \n                \n                        Получает DOM-элемент кнопки добавления проекта после инициализации view.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/plan-house-page/plan-house-page.component.ts:81\n                        \n                    \n\n\n            \n                \n                        Инициализация компонента.\nПроверяет наличие JWT, при отсутствии — редирект на страницу логина.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        openAddModule\n                        \n                    \n                \n            \n            \n                \n                        \n                    openAddModule()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/plan-house-page/plan-house-page.component.ts:222\n                        \n                    \n\n\n            \n                \n                        Открывает модуль добавления проекта.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        openProject\n                        \n                    \n                \n            \n            \n                \n                        \n                    openProject(indexProject: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/plan-house-page/plan-house-page.component.ts:241\n                        \n                    \n\n\n            \n                \n                        Открывает проект по его индексу и обновляет URL.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                indexProject\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Индекс проекта в массиве\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        pageInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    pageInit(jwt: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/plan-house-page/plan-house-page.component.ts:119\n                        \n                    \n\n\n            \n                \n                        Загружает данные аккаунта и инициализирует текущий проект по параметру в URL.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    JWT-токен из cookies\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Async\n                        saveProject\n                        \n                    \n                \n            \n            \n                \n                        \n                    saveProject()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/plan-house-page/plan-house-page.component.ts:156\n                        \n                    \n\n\n            \n                \n                        Сохраняет текущий открытый проект на сервер.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        updatePlanData\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePlanData(planHouse: roomData[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/plan-house-page/plan-house-page.component.ts:206\n                        \n                    \n\n\n            \n                \n                        Обновляет локальные данные проекта при изменении планировки.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                planHouse\n                                            \n                                                        roomData[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Новый массив данных комнат\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        accountData\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/components/plan-house-page/plan-house-page.component.ts:65\n                        \n                    \n\n            \n                \n                    Данные аккаунта пользователя с массивом проектов\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        addModule\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HTMLSpanElement\n\n                    \n                \n                    \n                        \n                                Defined in src/components/plan-house-page/plan-house-page.component.ts:59\n                        \n                    \n\n            \n                \n                    DOM-элемент кнопки добавления проекта\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        checkDesktop\n                        \n                    \n                \n            \n                \n                    \n                        Default value : checkDesktop()\n                    \n                \n                    \n                        \n                                Defined in src/components/plan-house-page/plan-house-page.component.ts:68\n                        \n                    \n\n            \n                \n                    Проверка, является ли текущее устройство десктопом\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        currentPlanHouse\n                        \n                    \n                \n            \n                \n                    \n                        Type :     roomData[] | undefined\n\n                    \n                \n                    \n                        \n                                Defined in src/components/plan-house-page/plan-house-page.component.ts:62\n                        \n                    \n\n            \n                \n                    Данные текущего плана комнат\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        currentProjectId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | undefined\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                    \n                        \n                                Defined in src/components/plan-house-page/plan-house-page.component.ts:71\n                        \n                    \n\n            \n                \n                    Индекс текущего выбранного проекта\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hasRoomIdBeenProcessed\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/components/plan-house-page/plan-house-page.component.ts:56\n                        \n                    \n\n            \n                \n                    Флаг, чтобы комната не открывалась повторно\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        planHouse\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PlanHouseComponent\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('planHouse')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/plan-house-page/plan-house-page.component.ts:75\n                        \n                    \n\n            \n                \n                    Ссылка на дочерний компонент планировки дома\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        projectNameForm\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new FormGroup({\n    name: new FormControl('', [Validators.required])\n  })\n                    \n                \n                    \n                        \n                                Defined in src/components/plan-house-page/plan-house-page.component.ts:248\n                        \n                    \n\n            \n                \n                    Форма для ввода названия проекта\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import {\n  AfterViewChecked,\n  AfterViewInit,\n  Component,\n  ElementRef,\n  OnInit,\n  Renderer2,\n  ViewChild\n} from '@angular/core';\nimport { NavigationPanelComponent } from '../navigation-panel/navigation-panel.component';\nimport { PlanHouseComponent } from '../plan-house/plan-house.component';\nimport { Location, NgClass, NgFor, NgIf } from '@angular/common';\nimport { accountFullData, AccountService } from '../../services/account.service';\nimport { AccountCookieService } from '../../services/account-cookie.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormControl, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { projectServerInformation, ProjectService, roomData } from '../../services/project.service';\nimport { NotificationService } from '../../services/notification.service';\nimport { checkDesktop } from '../../usable/reusable-functions.used';\n\n@Component({\n  selector: 'app-plan-house-page',\n  standalone: true,\n  imports: [\n    NavigationPanelComponent,\n    PlanHouseComponent,\n    NgFor,\n    NgIf,\n    ReactiveFormsModule,\n    NgIf,\n    NgClass\n  ],\n  templateUrl: './plan-house-page.component.html',\n  styleUrl: './plan-house-page.component.scss'\n})\nexport class PlanHousePageComponent implements AfterViewInit, OnInit, AfterViewChecked {\n  constructor(\n    private accountService: AccountService,\n    private accountCookieService: AccountCookieService,\n    private router: Router,\n    private route: ActivatedRoute,\n    private elemenetRef: ElementRef,\n    private renderer: Renderer2,\n    private projectService: ProjectService,\n    private notification: NotificationService,\n    private location: Location\n  ) { }\n\n  /** Флаг, чтобы комната не открывалась повторно */\n  private hasRoomIdBeenProcessed = false;\n\n  /** DOM-элемент кнопки добавления проекта */\n  private addModule!: HTMLSpanElement;\n\n  /** Данные текущего плана комнат */\n  private currentPlanHouse: roomData[] | undefined;\n\n  /** Данные аккаунта пользователя с массивом проектов */\n  protected accountData!: accountFullData & { projects: projectServerInformation[] };\n\n  /** Проверка, является ли текущее устройство десктопом */\n  protected checkDesktop = checkDesktop();\n\n  /** Индекс текущего выбранного проекта */\n  protected currentProjectId: number | undefined = undefined;\n\n  /** Ссылка на дочерний компонент планировки дома */\n  @ViewChild('planHouse')\n  private planHouse!: PlanHouseComponent;\n\n  /**\n   * Инициализация компонента.\n   * Проверяет наличие JWT, при отсутствии — редирект на страницу логина.\n   */\n  ngOnInit(): void {\n    const JWT = this.accountCookieService.getJwt();\n    if (!JWT) {\n      this.router.navigateByUrl('/login');\n      return;\n    }\n    this.pageInit(JWT);\n  }\n\n  /**\n   * Получает DOM-элемент кнопки добавления проекта после инициализации view.\n   */\n  ngAfterViewInit(): void {\n    this.addModule = this.elemenetRef.nativeElement.querySelector('.addModule');\n  }\n\n  /**\n   * При загрузке проверяет наличие roomId и открывает комнату, если нужно.\n   */\n  ngAfterViewChecked(): void {\n    if (this.hasRoomIdBeenProcessed || !this.planHouse || !this.route.snapshot.params['roomId']) return;\n    const ROOM_ID = parseInt(this.route.snapshot.params['roomId']!);\n    setTimeout(() => {\n      if (typeof ROOM_ID === 'number') {\n        this.planHouse.currentViewRoom = ROOM_ID;\n        this.planHouse.currentIdClickedRoom = ROOM_ID;\n        this.planHouse.openViewRoom(ROOM_ID);\n        this.planHouse.sceneOpenToggle = true;\n        this.planHouse.guideTemplate = this.planHouse.roomGuideTemplate;\n        this.hasRoomIdBeenProcessed = true;\n      }\n    }, 0);\n  }\n\n  /**\n   * Загружает данные аккаунта и инициализирует текущий проект по параметру в URL.\n   * @param jwt JWT-токен из cookies\n   */\n  private async pageInit(jwt: string) {\n    try {\n      this.accountData = (await this.accountService.GETaccount(jwt)).accountData;\n\n      this.route.paramMap.subscribe(params => {\n        if (params.get('planId') === null) return;\n        const PLAN_ID = parseInt(params.get('planId')!);\n        if (this.accountData.projects.length >= PLAN_ID && PLAN_ID >= 0 && this.accountData.projects[PLAN_ID] !== undefined) {\n          this.currentProjectId = PLAN_ID;\n        } else {\n          this.router.navigateByUrl('/plan')\n        }\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  /**\n   * Создает новый проект с именем из формы.\n   */\n  protected async createProject() {\n    this.closeAddModule();\n    const JWT = this.accountCookieService.getJwt();\n    if (!this.projectNameForm.value || !this.projectNameForm.value.name || !JWT) return;\n    try {\n      const newProject = await this.projectService.POSTcreateProject(JWT, this.projectNameForm.value.name);\n      this.accountData.projects = [...this.accountData.projects, newProject.projectData];\n      this.notification.setSuccess('Проект создан', 5000);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  /**\n   * Сохраняет текущий открытый проект на сервер.\n   */\n  protected async saveProject() {\n    if (this.currentProjectId === undefined) return;\n\n    const CURRENT_PROJECT_ID = this.accountData.projects[this.currentProjectId]._id;\n    const ROOM_DATA = this.currentPlanHouse;\n    if (ROOM_DATA === undefined) return;\n\n    const JWT = this.accountCookieService.getJwt();\n    if (!JWT) return;\n\n    const PROJECT_DATA = {\n      rooms: ROOM_DATA,\n      name: this.accountData.projects[this.currentProjectId].name\n    };\n\n    try {\n      await this.projectService.PUTupdateProject(JWT, CURRENT_PROJECT_ID, PROJECT_DATA);\n      this.notification.setSuccess('Проект обновлен', 5000);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  /**\n   * Удаляет указанный проект пользователя.\n   * @param indexProject Индекс проекта в массиве\n   */\n  protected async deleteProject(indexProject: number) {\n    const JWT = this.accountCookieService.getJwt();\n    const CURRENT_PROJECT_ID = this.accountData.projects[indexProject]._id;\n    if (!JWT || !CURRENT_PROJECT_ID) return;\n\n    await this.projectService.DELETEdeleteProject(JWT, CURRENT_PROJECT_ID);\n    this.notification.setSuccess('Проект удален', 5000);\n    this.accountData.projects.splice(indexProject, 1);\n  }\n\n\n  /**\n   * Возвращает текущую выбранную комнату в планировке.\n   */\n  protected getCurrentViewRoom() {\n    if (this.planHouse === undefined) return undefined;\n    return this.planHouse.currentViewRoom;\n  }\n\n  /**\n   * Обновляет локальные данные проекта при изменении планировки.\n   * @param planHouse Новый массив данных комнат\n   */\n  protected updatePlanData(planHouse: roomData[]) {\n    this.currentPlanHouse = planHouse;\n    this.accountData.projects[this.currentProjectId!].rooms = planHouse;\n  }\n\n  /**\n   * Закрывает модуль добавления проекта.\n   */\n  protected closeAddModule() {\n    if (!this.addModule) return;\n    this.renderer.addClass(this.addModule, 'disabled');\n  }\n\n  /**\n   * Открывает модуль добавления проекта.\n   */\n  protected openAddModule() {\n    if (!this.addModule) return;\n    this.renderer.removeClass(this.addModule, 'disabled');\n  }\n\n  /**\n   * Закрывает текущий проект и убирает `planId` из URL.\n   */\n  protected closeProject() {\n    this.saveProject();\n    this.currentProjectId = undefined;\n    const NEW_URL = this.location.path().split('/').slice(0, -1).join('/');\n    this.location.replaceState(NEW_URL);\n  }\n\n  /**\n   * Открывает проект по его индексу и обновляет URL.\n   * @param indexProject Индекс проекта в массиве\n   */\n  protected openProject(indexProject: number) {\n    const NEW_URL = this.location.path() + '/' + indexProject;\n    this.location.replaceState(NEW_URL);\n    this.currentProjectId = indexProject;\n  }\n\n  /** Форма для ввода названия проекта */\n  protected projectNameForm = new FormGroup({\n    name: new FormControl('', [Validators.required])\n  });\n}\n\n    \n\n    \n        \n  \n  Просмотр этой страницы с мобильных устройств невозможен. Пожалуйста, используйте компьютер.\n  \n    \n      \n        \n          {{projectData.name}}\n          \n            \n            \n          \n        \n        \n          \n        \n      \n      \n        Создать\n        \n      \n    \n    \n      \n        \n      \n      \n    \n  \n\n\n  \n    \n      \n    \n    \n      Название дома\n      \n        Название\n        \n      \n      Продолжить\n    \n  \n\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    Просмотр этой страницы с мобильных устройств невозможен. Пожалуйста, используйте компьютер.                              {{projectData.name}}                                                                                                  Создать                                                                                Название дома              Название                    Продолжить      '\n    var COMPONENTS = [{'name': 'AccountPageComponent', 'selector': 'app-account-page'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreateFurnitureComponent', 'selector': 'app-create-furniture'},{'name': 'CreateFurniturePageComponent', 'selector': 'app-create-furniture-page'},{'name': 'FinderComponent', 'selector': 'app-finder'},{'name': 'ImageSliderComponent', 'selector': 'app-image-slider'},{'name': 'LoginPageComponent', 'selector': 'app-login-page'},{'name': 'MainPageComponent', 'selector': 'app-main-page'},{'name': 'NavigationPanelComponent', 'selector': 'app-navigation-panel'},{'name': 'NotificationComponent', 'selector': 'app-notification'},{'name': 'PlanHouseComponent', 'selector': 'app-plan-house'},{'name': 'PlanHousePageComponent', 'selector': 'app-plan-house-page'},{'name': 'SceneComponent', 'selector': 'app-scene'},{'name': 'ShopPageComponent', 'selector': 'app-shop-page'},{'name': 'UploadOverlayComponent', 'selector': 'app-upload-overlay'},{'name': 'ViewFurnitureComponent', 'selector': 'app-view-furniture'}];\n    var DIRECTIVES = [{'name': 'AutoHeightDirective', 'selector': '[appAutoHeight]'}];\n    var ACTUAL_COMPONENT = {'name': 'PlanHousePageComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProjectService.html":{"url":"injectables/ProjectService.html","title":"injectable - ProjectService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProjectService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/project.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для управления проектами: создание, удаление, получение, обновление и генерация отчетов\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseServiceUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                DELETEdeleteProject\n                            \n                            \n                                GETgetProject\n                            \n                            \n                                    Async\n                                GETgetReportOfRoom\n                            \n                            \n                                POSTcreateProject\n                            \n                            \n                                PUTupdateProject\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpModule: HttpClient, reportService: ReportService)\n                    \n                \n                        \n                            \n                                Defined in src/services/project.service.ts:53\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpModule\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reportService\n                                                  \n                                                        \n                                                                        ReportService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        DELETEdeleteProject\n                        \n                    \n                \n            \n            \n                \nDELETEdeleteProject(jwt: string, projectId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/project.service.ts:79\n                        \n                    \n\n\n            \n                \n                        Удаление проекта\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    JWT токен для авторизации\n\n                                            \n                                        \n                                        \n                                                projectId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID проекта, который нужно удалить\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Промис с сообщением об удалении\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        GETgetProject\n                        \n                    \n                \n            \n            \n                \nGETgetProject(jwt: string, projectId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/project.service.ts:92\n                        \n                    \n\n\n            \n                \n                        Получение проекта по ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    JWT токен для авторизации\n\n                                            \n                                        \n                                        \n                                                projectId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID проекта, который нужно получить\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Промис с данными проекта\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        GETgetReportOfRoom\n                        \n                    \n                \n            \n            \n                \n                        \n                    GETgetReportOfRoom(jwt: string, roomId: string, renderImage: Blob)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/project.service.ts:120\n                        \n                    \n\n\n            \n                \n                        Получение отчета о комнате и генерация PDF отчета\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    JWT токен для авторизации\n\n                                            \n                                        \n                                        \n                                                roomId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID комнаты, по которой нужно получить отчет\n\n                                            \n                                        \n                                        \n                                                renderImage\n                                            \n                                                        Blob\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Изображение рендера комнаты в формате Blob\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Промис, завершающийся после создания отчета\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        POSTcreateProject\n                        \n                    \n                \n            \n            \n                \nPOSTcreateProject(jwt: string, name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/project.service.ts:66\n                        \n                    \n\n\n            \n                \n                        Создание нового проекта\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    JWT токен для авторизации\n\n                                            \n                                        \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Название проекта\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Промис с объектом, содержащим данные проекта\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PUTupdateProject\n                        \n                    \n                \n            \n            \n                \nPUTupdateProject(jwt: string, projectId: string, projectInformation: projectInformation)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/project.service.ts:106\n                        \n                    \n\n\n            \n                \n                        Обновление данных проекта\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    JWT токен для авторизации\n\n                                            \n                                        \n                                        \n                                                projectId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID проекта, который нужно обновить\n\n                                            \n                                        \n                                        \n                                                projectInformation\n                                            \n                                                            projectInformation\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Новые данные проекта\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Промис с сообщением об успешном обновлении\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseServiceUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : baseUrl + 'project'\n                    \n                \n                    \n                        \n                                Defined in src/services/project.service.ts:53\n                        \n                    \n\n            \n                \n                    Базовый URL для API запросов к проектам\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { baseUrl } from '.';\nimport { modelInterface, objectSceneInterface } from '../components/scene/scene.component';\nimport { firstValueFrom } from 'rxjs';\nimport { reportResponse } from './report.service';\nimport { ReportService } from './report.service';\n\n/**\n * Интерфейс описания комнаты\n */\nexport interface roomData {\n  /** Название комнаты */\n  name: string;\n  /** Сетка размещения (например, '1 / 2 / 3 / 4') */\n  gridArea: string;\n  /** Пропорции комнаты (ширина, высота, глубина) */\n  roomProportions: modelInterface;\n  /** Список объектов, размещённых в комнате */\n  objects: objectSceneInterface[];\n  /** (Необязательно) ID комнаты */\n  _id?: string;\n}\n\n/**\n * Интерфейс информации о проекте\n */\nexport interface projectInformation {\n  /** Название проекта */\n  name: string;\n  /** Список комнат в проекте */\n  rooms: roomData[];\n}\n\n/**\n * Интерфейс информации о проекте, получаемой с сервера\n */\nexport interface projectServerInformation extends projectInformation {\n  /** ID проекта */\n  _id: string;\n  /** ID автора проекта */\n  authorId: string;\n}\n\n/**\n * Сервис для управления проектами: создание, удаление, получение, обновление и генерация отчетов\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProjectService {\n  /** Базовый URL для API запросов к проектам */\n  private baseServiceUrl = baseUrl + 'project';\n\n  constructor(\n    private httpModule: HttpClient,\n    private reportService: ReportService\n  ) {}\n\n  /**\n   * Создание нового проекта\n   * @param jwt JWT токен для авторизации\n   * @param name Название проекта\n   * @returns Промис с объектом, содержащим данные проекта\n   */\n  POSTcreateProject(jwt: string, name: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('name', name);\n    return firstValueFrom(this.httpModule.post(this.baseServiceUrl, HTTP_PARAMS)) as Promise;\n  }\n\n  /**\n   * Удаление проекта\n   * @param jwt JWT токен для авторизации\n   * @param projectId ID проекта, который нужно удалить\n   * @returns Промис с сообщением об удалении\n   */\n  DELETEdeleteProject(jwt: string, projectId: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('projectId', projectId);\n    return firstValueFrom(this.httpModule.delete(this.baseServiceUrl, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Получение проекта по ID\n   * @param jwt JWT токен для авторизации\n   * @param projectId ID проекта, который нужно получить\n   * @returns Промис с данными проекта\n   */\n  GETgetProject(jwt: string, projectId: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('projectId', projectId);\n    return firstValueFrom(this.httpModule.get(this.baseServiceUrl, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Обновление данных проекта\n   * @param jwt JWT токен для авторизации\n   * @param projectId ID проекта, который нужно обновить\n   * @param projectInformation Новые данные проекта\n   * @returns Промис с сообщением об успешном обновлении\n   */\n  PUTupdateProject(jwt: string, projectId: string, projectInformation: projectInformation): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('projectId', projectId);\n    return firstValueFrom(this.httpModule.put(this.baseServiceUrl, projectInformation, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Получение отчета о комнате и генерация PDF отчета\n   * @param jwt JWT токен для авторизации\n   * @param roomId ID комнаты, по которой нужно получить отчет\n   * @param renderImage Изображение рендера комнаты в формате Blob\n   * @returns Промис, завершающийся после создания отчета\n   */\n  async GETgetReportOfRoom(jwt: string, roomId: string, renderImage: Blob): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('roomId', roomId);\n\n    const RESPONSE = await firstValueFrom(this.httpModule.get(this.baseServiceUrl + '/room', { params: HTTP_PARAMS })) as reportResponse;\n\n    RESPONSE.furnitures = RESPONSE.furnitures.map(furnitureData => {\n      furnitureData.previewUrl = baseUrl + furnitureData.previewUrl;\n      return furnitureData;\n    });\n\n    this.reportService.createReport(RESPONSE, renderImage);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ReportService.html":{"url":"injectables/ReportService.html","title":"injectable - ReportService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ReportService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/report.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для генерации HTML-отчёта по комнате и мебели.\nОткрывает отчет в новой вкладке и скачивает его.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                costPipe\n                            \n                            \n                                createReport\n                            \n                            \n                                    Private\n                                createReportHTML\n                            \n                            \n                                    Private\n                                downloadHtml\n                            \n                            \n                                    Private\n                                generateHtmlContent\n                            \n                            \n                                    Private\n                                openHtmlInNewTab\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/services/report.service.ts:29\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        costPipe\n                        \n                    \n                \n            \n            \n                \n                        \n                    costPipe(cost: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/report.service.ts:322\n                        \n                    \n\n\n            \n                \n                        Форматирует цену с разделителями тысяч.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cost\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nСтоимость\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                Отформатированная строка с ценой\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createReport\n                        \n                    \n                \n            \n            \n                \ncreateReport(roomData: reportResponse, renderImage: Blob)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/report.service.ts:39\n                        \n                    \n\n\n            \n                \n                        Инициирует создание HTML-отчета.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                roomData\n                                            \n                                                            reportResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nДанные комнаты и мебели\n\n\n                                            \n                                        \n                                        \n                                                renderImage\n                                            \n                                                        Blob\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nИзображение визуализации комнаты\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        createReportHTML\n                        \n                    \n                \n            \n            \n                \n                        \n                    createReportHTML(roomData: reportResponse, renderImage: Blob)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/report.service.ts:51\n                        \n                    \n\n\n            \n                \n                        Создаёт HTML-страницу отчета и открывает её.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                roomData\n                                            \n                                                            reportResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nДанные комнаты\n\n\n                                            \n                                        \n                                        \n                                                renderImage\n                                            \n                                                        Blob\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nРендер комнаты\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        downloadHtml\n                        \n                    \n                \n            \n            \n                \n                        \n                    downloadHtml(roomName: string, htmlUrl: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/report.service.ts:349\n                        \n                    \n\n\n            \n                \n                        Загружает HTML-файл отчета.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                roomName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nНазвание комнаты (для имени файла)\n\n\n                                            \n                                        \n                                        \n                                                htmlUrl\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nURL HTML-файла\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        generateHtmlContent\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateHtmlContent(roomData: reportResponse, renderUrl: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/report.service.ts:72\n                        \n                    \n\n\n            \n                \n                        Генерирует HTML-содержимое отчета.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                roomData\n                                            \n                                                            reportResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nДанные комнаты и мебели\n\n\n                                            \n                                        \n                                        \n                                                renderUrl\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nURL рендер-изображения\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                HTML-контент отчета\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        openHtmlInNewTab\n                        \n                    \n                \n            \n            \n                \n                        \n                    openHtmlInNewTab(roomName: string, htmlContent: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/report.service.ts:334\n                        \n                    \n\n\n            \n                \n                        Открывает HTML-контент в новой вкладке и запускает загрузку.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                roomName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nНазвание комнаты (используется для имени файла)\n\n\n                                            \n                                        \n                                        \n                                                htmlContent\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nСодержимое HTML\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { baseClientUrl } from '.';\nimport { modelInterface } from '../components/scene/scene.component';\nimport { shopData } from './furniture-card-control.service';\n\nexport interface reportResponse {\n    name: string;\n    proportions: modelInterface,\n    furnitures: {\n        name: string;\n        furnitureCardId: string;\n        previewUrl: string;\n        proportions: modelInterface;\n        shops: shopData[];\n        category: string;\n    }[]\n}\n\n/**\n * Сервис для генерации HTML-отчёта по комнате и мебели.\n * Открывает отчет в новой вкладке и скачивает его.\n *\n * @export\n * @class ReportService\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class ReportService {\n    constructor() { }\n\n    /**\n     * Инициирует создание HTML-отчета.\n     *\n     * @param {reportResponse} roomData - Данные комнаты и мебели\n     * @param {Blob} renderImage - Изображение визуализации комнаты\n     * @memberof ReportService\n     */\n    createReport(roomData: reportResponse, renderImage: Blob): void {\n        this.createReportHTML(roomData, renderImage);\n    }\n\n    /**\n     * Создаёт HTML-страницу отчета и открывает её.\n     *\n     * @private\n     * @param {reportResponse} roomData - Данные комнаты\n     * @param {Blob} renderImage - Рендер комнаты\n     * @memberof ReportService\n     */\n    private createReportHTML(roomData: reportResponse, renderImage: Blob): void {\n        const reader = new FileReader();\n\n        reader.onload = () => {\n            const imageUrl = reader.result as string;\n            const htmlContent = this.generateHtmlContent(roomData, imageUrl);\n            this.openHtmlInNewTab(roomData.name, htmlContent);\n        };\n\n        reader.readAsDataURL(renderImage);\n    }\n\n    /**\n     * Генерирует HTML-содержимое отчета.\n     *\n     * @private\n     * @param {reportResponse} roomData - Данные комнаты и мебели\n     * @param {string} renderUrl - URL рендер-изображения\n     * @returns {string} HTML-контент отчета\n     * @memberof ReportService\n     */\n    private generateHtmlContent(roomData: reportResponse, renderUrl: string): string {\n        return `\n      \n\n\n\n    \n    \n    Отчет по комнате ${roomData.name}\n    \n        @font-face {\n            font-family: 'Calypso';\n            src: url('${baseClientUrl}assets/fonts/Calypso.ttf') format('truetype');\n        }\n\n        @font-face {\n            font-family: 'Courier New';\n            src: url('${baseClientUrl}assets/fonts/Courier New.ttf') format('truetype');\n        }\n\n        body {\n            margin: 0;\n            padding: 40px;\n            background-color: black;\n            color: #DAD7CD;\n            font-family: 'Courier New', monospace;\n            line-height: 1.6;\n            display: flex;\n            flex-direction: column;\n        }\n\n        .title {\n            font-family: 'Calypso', 'Courier New', monospace;\n            text-align: center;\n            font-size: 3rem;\n            margin-bottom: 40px;\n            color: #A3B18A;\n            text-transform: uppercase;\n            letter-spacing: 2px;\n        }\n\n        .renderTitle {\n            font-family: 'Courier New', 'Courier New', monospace;\n            font-weight: 400;\n            font-size: 1.5rem;\n            margin: 30px 0 15px;\n            color: #A3B18A;\n            border-bottom: 2px solid #A3B18A;\n            padding-bottom: 8px;\n            width:fit-content;\n            align-self: center;\n        }\n\n        .furnituresSpanTitle {\n            font-family: 'Calypso', 'Courier New', monospace;\n            font-size: 2rem;\n            margin: 40px 0 20px;\n            color: #A3B18A;\n            display: block;\n            text-align: center;\n        }\n\n        .furniture {\n            display: flex;\n            flex-direction: column;\n            border-radius: 15px;\n            padding: 25px;\n            margin-bottom: 30px;\n            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);\n            transition: transform 0.3s ease;\n        }\n\n        .furnitureTitle {\n            font-family: 'Courier New', monospace;\n            font-weight: 400;\n            margin: 0 auto 15px;\n            font-size: 1.3rem;\n            color: #DAD7CD;\n        }\n\n        .furnitureImage {\n            margin: 0 auto;\n            max-width: 100%;\n            border-radius: 10px;\n            margin-bottom: 20px;\n        }\n\n        .furnitureFooter {\n            display: flex;\n            gap: 30px;\n            flex-direction: row;\n            justify-content: center;\n            flex-wrap: wrap;\n        }\n\n        .paramsTitle,\n        .shopsTitle {\n            font-family: 'Calypso', 'Courier New', monospace;\n            font-size: 1.2rem;\n            color: #A3B18A;\n            margin-bottom: 15px;\n        }\n\n        .paramsSpan {\n            width: fit-content;\n        }\n\n        .paramsList {\n            list-style-type: none;\n            padding: 0;\n            margin: 0;\n        }\n\n        .paramsItem {\n            margin-bottom: 8px;\n            position: relative;\n            padding-left: 20px;\n        }\n\n\n        a {\n            display: inline-block;\n            background-color: white;\n            color: black;\n            text-decoration: none;\n            border-radius: 10px;\n            transition: all 0.3s ease;\n            border: 2px solid transparent;\n            width:250px;\n            max-width: 250px;\n            text-align: center;\n            font-family: 'Courier New', monospace;\n            font-weight: 400;\n            font-size: 0.8rem;\n            height:40px;\n            align-content:center;\n            box-sizing:border-box;\n        }\n\n        a:hover {\n            background-color: transparent;\n            color: white;\n            border-color: white;\n        }\n\n        img {\n            width: 100%;\n            max-height: 500px;\n            object-fit: contain;\n            border-radius: 10px;\n            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);\n            margin-bottom: 30px;\n        }\n\n        .openLink {\n            width:250px;\n            max-width: 250px;\n            margin: 0 auto;\n            margin-top: 20px;\n        }\n        .furnitureLink{\n            background-color: #A3B18A;\n            color:white;\n            &:hover{\n                background-color: #344E41;\n                border: 2px solid #344E41;\n            }\n        }\n\n        @media (max-width: 768px) {\n            .furnitureFooter {\n                flex-direction: column;\n                align-items: center;\n                gap: 20px;\n                width: 100%;\n            }\n\n            .paramsSpan,\n            .shopsSpan {\n                width: 90%;\n            }\n\n            .openLink,.shopLink {\n                width: 100%;\n            }\n\n            .title {\n                font-size: 2rem;\n            }\n\n            body {\n                padding: 20px;\n            }\n            .paramsItem{\n                padding-left:0;\n            }\n                \n        }\n    \n\nОтчет по комнате${roomData.name}\nВид сверху\n\n\nДобавленная мебель\n${roomData.furnitures.map(furniture => `\n    \n    ${furniture.name}\n    \n    \n    \n     Параметры \n    \n     Ширина: ${furniture.proportions.width}cм \n     Высота: ${furniture.proportions.height}cм \n     Длина: ${furniture.proportions.length}cм \n    \n    \n    \n    ${furniture.shops.map(shopData => `\n         Магазины \n        \n      \n      ${this.costPipe(shopData.cost)}\n      \n      \n      `).join('')\n            }\n    \n    \n     Посмотреть мебель \n    \n    `).join('')}\nПосмотреть проект\n\n\n    `;\n    }\n\n    /**\n     * Форматирует цену с разделителями тысяч.\n     *\n     * @private\n     * @param {number} cost - Стоимость\n     * @returns {string} Отформатированная строка с ценой\n     * @memberof ReportService\n     */\n    private costPipe(cost: number): string {\n        return cost.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.');\n    }\n\n    /**\n     * Открывает HTML-контент в новой вкладке и запускает загрузку.\n     *\n     * @private\n     * @param {string} roomName - Название комнаты (используется для имени файла)\n     * @param {string} htmlContent - Содержимое HTML\n     * @memberof ReportService\n     */\n    private openHtmlInNewTab(roomName: string, htmlContent: string): void {\n        const blob = new Blob([htmlContent], { type: 'text/html' });\n        const url = URL.createObjectURL(blob);\n        window.open(url, '_blank');\n        this.downloadHtml(roomName, url);\n    }\n\n    /**\n     * Загружает HTML-файл отчета.\n     *\n     * @private\n     * @param {string} roomName - Название комнаты (для имени файла)\n     * @param {string} htmlUrl - URL HTML-файла\n     * @memberof ReportService\n     */\n    private downloadHtml(roomName: string, htmlUrl: string): void {\n        const downloadButton = document.createElement('a');\n        downloadButton.href = htmlUrl;\n        downloadButton.download = `${roomName}-report.html`;\n        downloadButton.click();\n        URL.revokeObjectURL(htmlUrl);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ServerImageControlService.html":{"url":"injectables/ServerImageControlService.html","title":"injectable - ServerImageControlService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ServerImageControlService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/server-image-control.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseServiceUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                DELETEproject\n                            \n                            \n                                DELETEprojectColor\n                            \n                            \n                                GETaccountAvatar\n                            \n                            \n                                GETallProjectImages\n                            \n                            \n                                GETmainImage\n                            \n                            \n                                POSTuploadProjectImages\n                            \n                            \n                                POSTuploadUserAvatar\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpModule: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/services/server-image-control.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpModule\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        DELETEproject\n                        \n                    \n                \n            \n            \n                \nDELETEproject(jwt: string, furnitureCardId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/server-image-control.service.ts:80\n                        \n                    \n\n\n            \n                \n                        Удаление проекта по ID карточки мебели.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    JWT токен пользователя.\n\n                                            \n                                        \n                                        \n                                                furnitureCardId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID карточки мебели.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Промис с сообщением об успешном удалении проекта.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DELETEprojectColor\n                        \n                    \n                \n            \n            \n                \nDELETEprojectColor(jwt: string, furnitureCardId: string, color: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/server-image-control.service.ts:65\n                        \n                    \n\n\n            \n                \n                        Удаление цвета проекта (мебели).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    JWT токен пользователя.\n\n                                            \n                                        \n                                        \n                                                furnitureCardId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID карточки мебели.\n\n                                            \n                                        \n                                        \n                                                color\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Цвет, который нужно удалить.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Промис с сообщением об успешном удалении.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        GETaccountAvatar\n                        \n                    \n                \n            \n            \n                \nGETaccountAvatar(jwt: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/server-image-control.service.ts:20\n                        \n                    \n\n\n            \n                \n                        Получение URL аватара пользователя.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    JWT токен пользователя.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                Строка с URL для получения аватара.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        GETallProjectImages\n                        \n                    \n                \n            \n            \n                \nGETallProjectImages(furnitureCardId: string, color: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/server-image-control.service.ts:94\n                        \n                    \n\n\n            \n                \n                        Получение всех изображений проекта по цвету и ID карточки мебели.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                furnitureCardId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID карточки мебели.\n\n                                            \n                                        \n                                        \n                                                color\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Цвет мебели.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Промис с URL изображений и ID главного изображения.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        GETmainImage\n                        \n                    \n                \n            \n            \n                \nGETmainImage(furnitureCardId: string, color: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/server-image-control.service.ts:108\n                        \n                    \n\n\n            \n                \n                        Получение URL главного изображения по ID карточки мебели и цвету.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                furnitureCardId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID карточки мебели.\n\n                                            \n                                        \n                                        \n                                                color\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Цвет мебели.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                Строка с URL главного изображения.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        POSTuploadProjectImages\n                        \n                    \n                \n            \n            \n                \nPOSTuploadProjectImages(color: string, imagesData: imageSliderClientData, jwt: string, furnitureCardId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/server-image-control.service.ts:45\n                        \n                    \n\n\n            \n                \n                        Загрузка изображений проекта.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                color\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Цвет мебели.\n\n                                            \n                                        \n                                        \n                                                imagesData\n                                            \n                                                            imageSliderClientData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Данные изображений (включая главную).\n\n                                            \n                                        \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    JWT токен пользователя.\n\n                                            \n                                        \n                                        \n                                                furnitureCardId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID карточки мебели.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Промис с сообщением об успешной загрузке.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        POSTuploadUserAvatar\n                        \n                    \n                \n            \n            \n                \nPOSTuploadUserAvatar(imageFile: Blob, jwt: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/server-image-control.service.ts:30\n                        \n                    \n\n\n            \n                \n                        Загрузка аватара пользователя.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                imageFile\n                                            \n                                                        Blob\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Изображение аватара.\n\n                                            \n                                        \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    JWT токен пользователя.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Промис с сообщением об успешной загрузке.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseServiceUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : baseUrl + 'furniture/images/'\n                    \n                \n                    \n                        \n                                Defined in src/services/server-image-control.service.ts:11\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { baseUrl } from '.';\nimport { firstValueFrom } from 'rxjs';\nimport { imageSliderClientData } from '../components/image-slider/image-slider.component';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ServerImageControlService {\n  private baseServiceUrl = baseUrl + 'furniture/images/';\n\n  constructor(private httpModule: HttpClient) {}\n\n  /**\n   * Получение URL аватара пользователя.\n   * @param {string} jwt JWT токен пользователя.\n   * @returns {string} Строка с URL для получения аватара.\n   */\n  GETaccountAvatar(jwt: string): string {\n    return `${baseUrl}account/avatar?jwt=${jwt}`;\n  }\n\n  /**\n   * Загрузка аватара пользователя.\n   * @param {Blob} imageFile Изображение аватара.\n   * @param {string} jwt JWT токен пользователя.\n   * @returns {Promise} Промис с сообщением об успешной загрузке.\n   */\n  POSTuploadUserAvatar(imageFile: Blob, jwt: string): Promise {\n    const formData = new FormData();\n    formData.append('image', imageFile);\n    const HTTP_PARAMS = new HttpParams().set('jwt', jwt);\n    return firstValueFrom(this.httpModule.post(`${baseUrl}account/avatar`, formData, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Загрузка изображений проекта.\n   * @param {string} color Цвет мебели.\n   * @param {imageSliderClientData} imagesData Данные изображений (включая главную).\n   * @param {string} jwt JWT токен пользователя.\n   * @param {string} furnitureCardId ID карточки мебели.\n   * @returns {Promise} Промис с сообщением об успешной загрузке.\n   */\n  POSTuploadProjectImages(color: string, imagesData: imageSliderClientData, jwt: string, furnitureCardId: string): Promise {\n    const formData = new FormData();\n    imagesData.images.forEach((file) => formData.append('images', file));\n\n    const HTTP_PARAMS = new HttpParams()\n      .set('furnitureCardId', furnitureCardId)\n      .set('color', color)\n      .set('idMainImage', imagesData.idMainImage)\n      .set('jwt', jwt);\n\n    return firstValueFrom(this.httpModule.post(this.baseServiceUrl + 'upload', formData, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Удаление цвета проекта (мебели).\n   * @param {string} jwt JWT токен пользователя.\n   * @param {string} furnitureCardId ID карточки мебели.\n   * @param {string} color Цвет, который нужно удалить.\n   * @returns {Promise} Промис с сообщением об успешном удалении.\n   */\n  DELETEprojectColor(jwt: string, furnitureCardId: string, color: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId)\n      .set('color', color);\n\n    return firstValueFrom(this.httpModule.delete(this.baseServiceUrl + 'delete/color', { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Удаление проекта по ID карточки мебели.\n   * @param {string} jwt JWT токен пользователя.\n   * @param {string} furnitureCardId ID карточки мебели.\n   * @returns {Promise} Промис с сообщением об успешном удалении проекта.\n   */\n  DELETEproject(jwt: string, furnitureCardId: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId);\n\n    return firstValueFrom(this.httpModule.delete(this.baseServiceUrl + 'delete/project', { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Получение всех изображений проекта по цвету и ID карточки мебели.\n   * @param {string} furnitureCardId ID карточки мебели.\n   * @param {string} color Цвет мебели.\n   * @returns {Promise} Промис с URL изображений и ID главного изображения.\n   */\n  GETallProjectImages(furnitureCardId: string, color: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('furnitureCardId', furnitureCardId)\n      .set('color', color);\n\n    return firstValueFrom(this.httpModule.get(this.baseServiceUrl + 'all', { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Получение URL главного изображения по ID карточки мебели и цвету.\n   * @param {string} furnitureCardId ID карточки мебели.\n   * @param {string} color Цвет мебели.\n   * @returns {string} Строка с URL главного изображения.\n   */\n  GETmainImage(furnitureCardId: string, color: string): string {\n    return `${this.baseServiceUrl}main?furnitureCardId=${furnitureCardId}&color=${color}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ShopService.html":{"url":"injectables/ShopService.html","title":"injectable - ShopService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ShopService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/shop.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для получения данных о мебели из магазина, с учетом фильтрации и пагинации.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                abortController\n                            \n                            \n                                    Private\n                                baseServiceUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getFindOptionsByResult\n                            \n                            \n                                    Async\n                                GETgetCategoryData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpModule: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/services/shop.service.ts:78\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpModule\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getFindOptionsByResult\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFindOptionsByResult(resultsArray: furnitureShopData[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/shop.service.ts:151\n                        \n                    \n\n\n            \n                \n                        Формирует объект фильтров на основе полученных данных о мебели.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                resultsArray\n                                            \n                                                            furnitureShopData[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nМассив карточек мебели\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         clientFilters\n\n                        \n                            \n                                Объект клиентских фильтров (цвета, минимальная и максимальная цена)\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        GETgetCategoryData\n                        \n                    \n                \n            \n            \n                \n                        \n                    GETgetCategoryData(categoryName: string, startRange: number, queryData?: queryData)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/shop.service.ts:97\n                        \n                    \n\n\n            \n                \n                        Выполняет GET-запрос на получение данных по категории мебели.\nПоддерживает фильтрацию и стартовую позицию для пагинации.\nПри повторном вызове отменяет предыдущий запрос.\n\nresultsArray: массив карточек мебели с обновлёнными URL превью\nresultsClientFiltersData: агрегированные данные фильтров для клиента\n\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                categoryName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nНазвание категории мебели.\n\n\n                                            \n                                        \n                                        \n                                                startRange\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nНачальный индекс (offset) выборки.\n\n\n                                            \n                                        \n                                        \n                                                queryData\n                                            \n                                                            queryData\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nОбъект фильтров (опционально).\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Промис с объектом, содержащим:\n\nresultsArray: массив карточек мебели с обновлёнными URL превью\nresultsClientFiltersData: агрегированные данные фильтров для клиента\n\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        abortController\n                        \n                    \n                \n            \n                \n                    \n                        Type :     AbortController | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/services/shop.service.ts:78\n                        \n                    \n\n            \n                \n                    Активный AbortController для отмены предыдущих запросов\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseServiceUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : baseUrl + 'shop'\n                    \n                \n                    \n                        \n                                Defined in src/services/shop.service.ts:75\n                        \n                    \n\n            \n                \n                    Базовый URL сервиса\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { firstValueFrom } from 'rxjs';\nimport { modelInterface } from '../components/scene/scene.component';\n\n/**\n * Интерфейс объекта фильтров, отправляемых на сервер.\n*/\nexport interface queryData {\n  /** Любое ключ:значение */\n  [key: string]: optionSelectQueryData | optionRangeQueryData;\n}\n\n/**\n * Фильтр типа \"выбор из списка\".\n */\ninterface optionSelectQueryData {\n  /** Тип фильтра */\n  type: 'select';\n  /** Выбранные значения */\n  value: string[];\n}\n\n/**\n * Фильтр типа \"диапазон значений\".\n*/\ninterface optionRangeQueryData {\n  /** Тип фильтра */\n  type: 'range';\n  /** Минимум в диапазоне */\n  min: number;\n  /** Максимум в диапазоне */\n  max: number;\n}\n\n/**\n * Интерфейс данных о мебели, получаемых из магазина.\n */\nexport interface furnitureShopData {\n  /** Название */\n  name: string;\n  /** Стоимость мебели */\n  cost: number;\n  /** Неполный Url превью (вначало надо вставить baseUrl сервера) */\n  previewUrl: string;\n  /** Id мебели */\n  furnitureCardId: string;\n  /** Массив цветов мебели */\n  colors: string[];\n  /** Габариты мебели */\n  proportions: modelInterface;\n}\n\n/**\n * Интерфейс клиентских фильтров, значения которых формируются на основе ответа от сервера.\n */\nexport interface clientFilters {\n  /** Цвета мебели */\n  colors: string[];\n  /** Минимальная стоимость */\n  minCost: number;\n  /** Максимальная стоимость */\n  maxCost: number;\n}\n\n/**\n * Сервис для получения данных о мебели из магазина, с учетом фильтрации и пагинации.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ShopService {\n  /** Базовый URL сервиса */\n  private baseServiceUrl = baseUrl + 'shop';\n\n  /** Активный AbortController для отмены предыдущих запросов */\n  private abortController: AbortController | null = null;\n\n  constructor(private httpModule: HttpClient) { }\n\n  /**\n   * Выполняет GET-запрос на получение данных по категории мебели.\n   * Поддерживает фильтрацию и стартовую позицию для пагинации.\n   * При повторном вызове отменяет предыдущий запрос.\n   *\n   * @param categoryName - Название категории мебели.\n   * @param startRange - Начальный индекс (offset) выборки.\n   * @param queryData - Объект фильтров (опционально).\n   *\n   * @returns Промис с объектом, содержащим:\n   * - `resultsArray`: массив карточек мебели с обновлёнными URL превью\n   * - `resultsClientFiltersData`: агрегированные данные фильтров для клиента\n   *\n   * @throws {Error} В случае сетевой ошибки или отмены запроса.\n   */\n  async GETgetCategoryData(categoryName: string, startRange: number, queryData?: queryData) {\n    if (this.abortController) {\n      this.abortController.abort();\n    }\n\n    this.abortController = new AbortController();\n\n    try {\n      let requestUrl = `${this.baseServiceUrl}?category=${categoryName}&startRange=${startRange}`;\n\n      if (queryData && Object.keys(queryData).length > 0) {\n        const params = new URLSearchParams();\n        params.append('filters', JSON.stringify(queryData));\n        requestUrl += `&${new URLSearchParams(params).toString()}`;\n      }\n\n      const response = await fetch(\n        requestUrl,\n        { signal: this.abortController.signal }\n      );\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Ошибка: ${response.status} — ${errorText}`);\n      }\n\n      const RESPONSE = await response.json() as { resultsArray: furnitureShopData[] };\n      const RESULTS_ARRAY = RESPONSE.resultsArray;\n\n      const UPDATED_RESULTS = RESULTS_ARRAY.map(furniture => ({\n        ...furniture,\n        previewUrl: baseUrl + furniture.previewUrl\n      }));\n\n      return {\n        resultsArray: UPDATED_RESULTS,\n        resultsClientFiltersData: this.getFindOptionsByResult(UPDATED_RESULTS)\n      };\n\n    } catch (error: any) {\n      if (error.name === 'AbortError') {\n      } else {\n        console.error('Ошибка запроса:', error);\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Формирует объект фильтров на основе полученных данных о мебели.\n   *\n   * @param resultsArray - Массив карточек мебели\n   * @returns Объект клиентских фильтров (цвета, минимальная и максимальная цена)\n   */\n  private getFindOptionsByResult(resultsArray: furnitureShopData[]) {\n    let filtersObject: clientFilters = {\n      colors: [],\n      minCost: Infinity,\n      maxCost: -Infinity\n    };\n\n    resultsArray.forEach(furnitureData => {\n      if (furnitureData.cost  filtersObject.maxCost) filtersObject.maxCost = furnitureData.cost;\n\n      filtersObject.colors.push(...furnitureData.colors);\n    });\n\n    filtersObject.minCost = filtersObject.minCost!== Infinity ? filtersObject.minCost : 0;\n    filtersObject.maxCost = filtersObject.maxCost!== -Infinity ? filtersObject.maxCost : 0;\n\n    filtersObject.colors = [...new Set(filtersObject.colors)];\n    return filtersObject;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UploadEntry.html":{"url":"interfaces/UploadEntry.html","title":"interface - UploadEntry","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UploadEntry\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/upload.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            progress\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        progress\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        progress:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         uploadStatus\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         uploadStatus\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport Uppy from '@uppy/core';\nimport XHRUpload from '@uppy/xhr-upload';\nimport { BehaviorSubject } from 'rxjs';\nimport { baseUrl } from '.';\nimport { FurnitureCardControlService } from './furniture-card-control.service';\nimport { ServerImageControlService } from './server-image-control.service';\nimport { AccountCookieService } from './account-cookie.service';\nimport { NotificationService } from './notification.service';\n\ntype uploadStatus = 'uploading' | 'success' | 'error';\nexport type uploadType = 'create' | 'update';\nexport interface UploadEntry {\n  id: string;\n  name: string;\n  progress: number;\n  status: uploadStatus;\n}\ninterface MyXhrUploadOptions {\n  endpoint: string;\n  fieldName?: string;\n  formData?: boolean;\n  getResponseError?: (responseText: string, response: Response) => Error | null;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class UploadService {\n  private uppy: Uppy;\n  public uploads$ = new BehaviorSubject([]);\n  private baseServiceUrl = baseUrl + 'furniture/model';\n\n  constructor(\n    private furnitureCardService: FurnitureCardControlService,\n    private serverImageControl: ServerImageControlService,\n    private accountCookieService: AccountCookieService,\n    private notification: NotificationService\n  ) {\n    this.uppy = new Uppy({ autoProceed: true });\n\n    this.uppy.use(XHRUpload, {\n      endpoint: this.baseServiceUrl,\n      fieldName: 'file',\n      formData: true,\n      getResponseError: (responseText, response) => {\n        return new Error(`Ошибка: ${response.statusText}`);\n      }\n    } as MyXhrUploadOptions);\n\n    this.uppy.on('upload-progress', (file, progress) => {\n      if (file === undefined || file.meta.name === undefined) return;\n\n      const NAME = file.data instanceof File ? file.data.name : 'file'\n      this.updateUpload(file.id, NAME, file.progress.percentage ?? 50, 'uploading');\n    });\n\n    this.uppy.on('upload-success', (file) => {\n      if (file === undefined || file.meta.name === undefined) return;\n\n      const NAME = file.data instanceof File ? file.data.name : 'file'\n      this.updateUpload(file.id, NAME, 100, 'success');\n      this.notification.setSuccess('Модель обновлена', 2500);\n    });\n\n    this.uppy.on('upload-error', (file, error) => {\n      if (file === undefined || file.meta.name === undefined) return;\n\n      const NAME = file.data instanceof File ? file.data.name : 'file'\n      this.updateUpload(file.id, NAME, 100, 'error');\n      this.cancelUpload(file.id);\n    });\n  }\n\n  addFile(file: File, jwt: string, furnitureCardId: string, uploadType: uploadType) {\n    const UNIQUE_ID = Date.now().toString();\n    this.uppy.addFile({\n      name: UNIQUE_ID + this.getFileExtension(file.name),\n      type: file.type,\n      data: file,\n      meta: {\n        furnitureCardId: furnitureCardId,\n        jwt: jwt,\n        uploadType: uploadType\n      }\n    });\n  }\n\n  async cancelUpload(fileID: string) {\n    const file = this.uppy.getFile(fileID);\n    if (file) {\n      this.uppy.removeFile(fileID);\n      const JWT = this.accountCookieService.getJwt()\n      const FURNITURE_CARD_ID = file.meta['furnitureCardId'] as string;\n      const UPLOAD_TYPE = file.meta['uploadType'] as string;\n\n\n      if (JWT && FURNITURE_CARD_ID && UPLOAD_TYPE === 'create') {\n        await this.serverImageControl.DELETEproject(JWT, FURNITURE_CARD_ID)\n        this.furnitureCardService.DELETEfurnitureCard(JWT, FURNITURE_CARD_ID)\n      }\n    }\n  }\n  private getFileExtension(fileName: string): string | null {\n    const parts = fileName.split('.');\n    const EXTENSION = parts.length > 1 ? parts.pop()?.toLowerCase() : \"obj\"\n    return `.${EXTENSION}`\n  }\n  removeFileFromQueue(fileID: string) {\n    const updatedQueue = this.uploads$.value.filter(file => file.id !== fileID);\n    this.uploads$.next(updatedQueue);\n  }\n\n  private updateUpload(id: string, name: string, progress: number, status: uploadStatus) {\n    const current = this.uploads$.value.filter(file => file.id !== id);\n    this.uploads$.next([...current, { id, name, progress, status }]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/UploadOverlayComponent.html":{"url":"components/UploadOverlayComponent.html","title":"component - UploadOverlayComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  UploadOverlayComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/components/upload-overlay/upload-overlay.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-upload-overlay\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            NgFor\n                            AsyncPipe\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./upload-overlay.component.html\n            \n\n\n\n            \n                styleUrl\n                ./upload-overlay.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                checkDesktop\n                            \n                            \n                                    Protected\n                                circumference\n                            \n                            \n                                    Public\n                                uploadService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                cancelUpload\n                            \n                            \n                                    Protected\n                                removeFromQueue\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(uploadService: UploadService)\n                    \n                \n                        \n                            \n                                Defined in src/components/upload-overlay/upload-overlay.component.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        uploadService\n                                                  \n                                                        \n                                                                        UploadService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        cancelUpload\n                        \n                    \n                \n            \n            \n                \n                        \n                    cancelUpload(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/upload-overlay/upload-overlay.component.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        removeFromQueue\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeFromQueue(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/upload-overlay/upload-overlay.component.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        checkDesktop\n                        \n                    \n                \n            \n                \n                    \n                        Default value : checkDesktop\n                    \n                \n                    \n                        \n                                Defined in src/components/upload-overlay/upload-overlay.component.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        circumference\n                        \n                    \n                \n            \n                \n                    \n                        Default value : 2 * Math.PI * 18\n                    \n                \n                    \n                        \n                                Defined in src/components/upload-overlay/upload-overlay.component.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        uploadService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UploadService\n\n                    \n                \n                    \n                        \n                                Defined in src/components/upload-overlay/upload-overlay.component.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { AsyncPipe, NgFor, NgIf } from '@angular/common';\nimport { Component } from '@angular/core';\nimport { UploadEntry, UploadService } from '../../services/upload.service';\nimport { checkDesktop } from '../../usable/reusable-functions.used';\n\n@Component({\n  selector: 'app-upload-overlay',\n  imports: [NgFor, AsyncPipe],\n  standalone:true,\n  templateUrl: './upload-overlay.component.html',\n  styleUrl: './upload-overlay.component.scss'\n})\nexport class UploadOverlayComponent {\n  constructor(public uploadService: UploadService) { }\n  \n  protected circumference = 2 * Math.PI * 18;\n\n  protected cancelUpload(id: string) {\n    this.uploadService.cancelUpload(id)\n    this.uploadService.removeFileFromQueue(id)\n  }\n  protected removeFromQueue(id: string) {\n    this.uploadService.removeFileFromQueue(id)\n  }\n  protected checkDesktop = checkDesktop\n}\n\n    \n\n    \n        \n  \n      \n        {{ file.name }}\n        {{ file.status }}\n      \n\n      \n        \n          \n          \n        \n\n        \n          \n        \n      \n  \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                {{ file.name }}        {{ file.status }}                                                                                  '\n    var COMPONENTS = [{'name': 'AccountPageComponent', 'selector': 'app-account-page'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreateFurnitureComponent', 'selector': 'app-create-furniture'},{'name': 'CreateFurniturePageComponent', 'selector': 'app-create-furniture-page'},{'name': 'FinderComponent', 'selector': 'app-finder'},{'name': 'ImageSliderComponent', 'selector': 'app-image-slider'},{'name': 'LoginPageComponent', 'selector': 'app-login-page'},{'name': 'MainPageComponent', 'selector': 'app-main-page'},{'name': 'NavigationPanelComponent', 'selector': 'app-navigation-panel'},{'name': 'NotificationComponent', 'selector': 'app-notification'},{'name': 'PlanHouseComponent', 'selector': 'app-plan-house'},{'name': 'PlanHousePageComponent', 'selector': 'app-plan-house-page'},{'name': 'SceneComponent', 'selector': 'app-scene'},{'name': 'ShopPageComponent', 'selector': 'app-shop-page'},{'name': 'UploadOverlayComponent', 'selector': 'app-upload-overlay'},{'name': 'ViewFurnitureComponent', 'selector': 'app-view-furniture'}];\n    var DIRECTIVES = [{'name': 'AutoHeightDirective', 'selector': '[appAutoHeight]'}];\n    var ACTUAL_COMPONENT = {'name': 'UploadOverlayComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UploadService.html":{"url":"injectables/UploadService.html","title":"injectable - UploadService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UploadService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/upload.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseServiceUrl\n                            \n                            \n                                    Public\n                                uploads$\n                            \n                            \n                                    Private\n                                uppy\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addFile\n                            \n                            \n                                    Async\n                                cancelUpload\n                            \n                            \n                                    Private\n                                getFileExtension\n                            \n                            \n                                removeFileFromQueue\n                            \n                            \n                                    Private\n                                updateUpload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(furnitureCardService: FurnitureCardControlService, serverImageControl: ServerImageControlService, accountCookieService: AccountCookieService, notification: NotificationService)\n                    \n                \n                        \n                            \n                                Defined in src/services/upload.service.ts:30\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        furnitureCardService\n                                                  \n                                                        \n                                                                        FurnitureCardControlService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        serverImageControl\n                                                  \n                                                        \n                                                                        ServerImageControlService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accountCookieService\n                                                  \n                                                        \n                                                                        AccountCookieService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        notification\n                                                  \n                                                        \n                                                                        NotificationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addFile\n                        \n                    \n                \n            \n            \n                \naddFile(file: File, jwt: string, furnitureCardId: string, uploadType: uploadType)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/upload.service.ts:73\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                furnitureCardId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                uploadType\n                                            \n                                                            uploadType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        cancelUpload\n                        \n                    \n                \n            \n            \n                \n                        \n                    cancelUpload(fileID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/upload.service.ts:87\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fileID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getFileExtension\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFileExtension(fileName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/upload.service.ts:102\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fileName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeFileFromQueue\n                        \n                    \n                \n            \n            \n                \nremoveFileFromQueue(fileID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/upload.service.ts:107\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fileID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        updateUpload\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUpload(id: string, name: string, progress: number, status: uploadStatus)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/upload.service.ts:112\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                progress\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                status\n                                            \n                                                            uploadStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseServiceUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : baseUrl + 'furniture/model'\n                    \n                \n                    \n                        \n                                Defined in src/services/upload.service.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        uploads$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject([])\n                    \n                \n                    \n                        \n                                Defined in src/services/upload.service.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        uppy\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Uppy\n\n                    \n                \n                    \n                        \n                                Defined in src/services/upload.service.ts:28\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport Uppy from '@uppy/core';\nimport XHRUpload from '@uppy/xhr-upload';\nimport { BehaviorSubject } from 'rxjs';\nimport { baseUrl } from '.';\nimport { FurnitureCardControlService } from './furniture-card-control.service';\nimport { ServerImageControlService } from './server-image-control.service';\nimport { AccountCookieService } from './account-cookie.service';\nimport { NotificationService } from './notification.service';\n\ntype uploadStatus = 'uploading' | 'success' | 'error';\nexport type uploadType = 'create' | 'update';\nexport interface UploadEntry {\n  id: string;\n  name: string;\n  progress: number;\n  status: uploadStatus;\n}\ninterface MyXhrUploadOptions {\n  endpoint: string;\n  fieldName?: string;\n  formData?: boolean;\n  getResponseError?: (responseText: string, response: Response) => Error | null;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class UploadService {\n  private uppy: Uppy;\n  public uploads$ = new BehaviorSubject([]);\n  private baseServiceUrl = baseUrl + 'furniture/model';\n\n  constructor(\n    private furnitureCardService: FurnitureCardControlService,\n    private serverImageControl: ServerImageControlService,\n    private accountCookieService: AccountCookieService,\n    private notification: NotificationService\n  ) {\n    this.uppy = new Uppy({ autoProceed: true });\n\n    this.uppy.use(XHRUpload, {\n      endpoint: this.baseServiceUrl,\n      fieldName: 'file',\n      formData: true,\n      getResponseError: (responseText, response) => {\n        return new Error(`Ошибка: ${response.statusText}`);\n      }\n    } as MyXhrUploadOptions);\n\n    this.uppy.on('upload-progress', (file, progress) => {\n      if (file === undefined || file.meta.name === undefined) return;\n\n      const NAME = file.data instanceof File ? file.data.name : 'file'\n      this.updateUpload(file.id, NAME, file.progress.percentage ?? 50, 'uploading');\n    });\n\n    this.uppy.on('upload-success', (file) => {\n      if (file === undefined || file.meta.name === undefined) return;\n\n      const NAME = file.data instanceof File ? file.data.name : 'file'\n      this.updateUpload(file.id, NAME, 100, 'success');\n      this.notification.setSuccess('Модель обновлена', 2500);\n    });\n\n    this.uppy.on('upload-error', (file, error) => {\n      if (file === undefined || file.meta.name === undefined) return;\n\n      const NAME = file.data instanceof File ? file.data.name : 'file'\n      this.updateUpload(file.id, NAME, 100, 'error');\n      this.cancelUpload(file.id);\n    });\n  }\n\n  addFile(file: File, jwt: string, furnitureCardId: string, uploadType: uploadType) {\n    const UNIQUE_ID = Date.now().toString();\n    this.uppy.addFile({\n      name: UNIQUE_ID + this.getFileExtension(file.name),\n      type: file.type,\n      data: file,\n      meta: {\n        furnitureCardId: furnitureCardId,\n        jwt: jwt,\n        uploadType: uploadType\n      }\n    });\n  }\n\n  async cancelUpload(fileID: string) {\n    const file = this.uppy.getFile(fileID);\n    if (file) {\n      this.uppy.removeFile(fileID);\n      const JWT = this.accountCookieService.getJwt()\n      const FURNITURE_CARD_ID = file.meta['furnitureCardId'] as string;\n      const UPLOAD_TYPE = file.meta['uploadType'] as string;\n\n\n      if (JWT && FURNITURE_CARD_ID && UPLOAD_TYPE === 'create') {\n        await this.serverImageControl.DELETEproject(JWT, FURNITURE_CARD_ID)\n        this.furnitureCardService.DELETEfurnitureCard(JWT, FURNITURE_CARD_ID)\n      }\n    }\n  }\n  private getFileExtension(fileName: string): string | null {\n    const parts = fileName.split('.');\n    const EXTENSION = parts.length > 1 ? parts.pop()?.toLowerCase() : \"obj\"\n    return `.${EXTENSION}`\n  }\n  removeFileFromQueue(fileID: string) {\n    const updatedQueue = this.uploads$.value.filter(file => file.id !== fileID);\n    this.uploads$.next(updatedQueue);\n  }\n\n  private updateUpload(id: string, name: string, progress: number, status: uploadStatus) {\n    const current = this.uploads$.value.filter(file => file.id !== id);\n    this.uploads$.next([...current, { id, name, progress, status }]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ViewFurnitureComponent.html":{"url":"components/ViewFurnitureComponent.html","title":"component - ViewFurnitureComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ViewFurnitureComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/components/view-furniture/view-furniture.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-view-furniture\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                                ImageSliderComponent\n                            NgFor\n                            NgIf\n                            ReactiveFormsModule\n                            CostFormatPipe\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./view-furniture.component.html\n            \n\n\n\n            \n                styleUrl\n                ./view-furniture.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                currentColorId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                copyShopLink\n                            \n                            \n                                    Async\n                                ngOnChanges\n                            \n                            \n                                    Protected\n                                openFurnitureVariant\n                            \n                            \n                                    Protected\n                                proccessDescription\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                furnitureCardId\n                            \n                            \n                                furnitureData\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(elementRef: ElementRef, clipboardService: ClipboardService, furnitureCardService: FurnitureCardControlService, notification: NotificationService)\n                    \n                \n                        \n                            \n                                Defined in src/components/view-furniture/view-furniture.component.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        elementRef\n                                                  \n                                                        \n                                                                    ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        clipboardService\n                                                  \n                                                        \n                                                                    ClipboardService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        furnitureCardService\n                                                  \n                                                        \n                                                                        FurnitureCardControlService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        notification\n                                                  \n                                                        \n                                                                        NotificationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        furnitureCardId\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/components/view-furniture/view-furniture.component.ts:30\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        furnitureData\n                    \n                \n                \n                    \n                        Type :         furnitureFromServerData\n\n                    \n                \n                        \n                            \n                                    Defined in src/components/view-furniture/view-furniture.component.ts:34\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        copyShopLink\n                        \n                    \n                \n            \n            \n                \n                        \n                    copyShopLink(furnitureUrl: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/view-furniture/view-furniture.component.ts:77\n                        \n                    \n\n\n            \n                \n                        Копирование ссылки на магазин\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                furnitureUrl\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnChanges()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/view-furniture/view-furniture.component.ts:36\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        openFurnitureVariant\n                        \n                    \n                \n            \n            \n                \n                        \n                    openFurnitureVariant(colorButton: EventTarget)\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/view-furniture/view-furniture.component.ts:46\n                        \n                    \n\n\n            \n                \n                        Смена цвета мебели на выбранный вариант\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                colorButton\n                                            \n                                                        EventTarget\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        proccessDescription\n                        \n                    \n                \n            \n            \n                \n                        \n                    proccessDescription(description: string, proportions: furnitureProportions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/view-furniture/view-furniture.component.ts:73\n                        \n                    \n\n\n            \n                \n                        Добавление габаритов к описанию мебели\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                description\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                proportions\n                                            \n                                                            furnitureProportions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        currentColorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/components/view-furniture/view-furniture.component.ts:26\n                        \n                    \n\n            \n                \n                    Текущий индекс выбранного цвета\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, ElementRef, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { ImageSliderComponent } from '../image-slider/image-slider.component';\nimport { NgFor, NgIf } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ClipboardService } from 'ngx-clipboard';\nimport { FurnitureCardControlService, furnitureFromServerData, furnitureProportions } from '../../services/furniture-card-control.service';\nimport { NotificationService } from '../../services/notification.service';\nimport { CostFormatPipe } from '../../pipes/cost-format.pipe';\n\n@Component({\n  selector: 'app-view-furniture',\n  standalone: true,\n  imports: [ImageSliderComponent, NgFor, NgIf, ReactiveFormsModule, CostFormatPipe],\n  templateUrl: './view-furniture.component.html',\n  styleUrl: './view-furniture.component.scss'\n})\nexport class ViewFurnitureComponent implements OnChanges {\n  constructor(\n    private elementRef: ElementRef,\n    private clipboardService: ClipboardService,\n    private furnitureCardService: FurnitureCardControlService,\n    private notification: NotificationService\n  ) { }\n\n  /** Текущий индекс выбранного цвета */\n  protected currentColorId: number = 0\n\n  @Input()\n  /** ID карточки мебели, передаваемый как входной параметр */\n  furnitureCardId?: string\n\n  @Input()\n  /** Данные карточки мебели, загружаемые из сервиса */\n  furnitureData?: furnitureFromServerData;\n\n  async ngOnChanges() {\n    if (this.furnitureCardId === undefined) return\n    try {\n      this.furnitureData = (await this.furnitureCardService.GETfurnitureCard(this.furnitureCardId)).furnitureCard\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  /** Смена цвета мебели на выбранный вариант */\n  protected openFurnitureVariant(colorButton: EventTarget) {\n    const COLOR_BUTTON_ELEMENT = colorButton as HTMLButtonElement;\n    const COLORS_ELEMENT = this.elementRef.nativeElement.querySelector('.colors') as HTMLSpanElement;\n    const idColor = COLOR_BUTTON_ELEMENT.getAttribute('data-idcolor');\n    if (!idColor) return;\n\n    const COLORS_VARIANTS = COLORS_ELEMENT.querySelectorAll('.colorVariant')\n    let beforeColors: HTMLButtonElement[] = [], afterColors: HTMLButtonElement[] = []\n    COLORS_VARIANTS.forEach((colorVariant, indexVariant) => {\n      if (indexVariant > +idColor) {\n        afterColors = [...afterColors, colorVariant as HTMLButtonElement]\n      } else if (indexVariant  {\n      (colorVariant as HTMLButtonElement).style.setProperty('--index', (newIndex + 1).toString())\n    })\n    setTimeout(() => {\n      COLOR_BUTTON_ELEMENT.style.setProperty('margin-right', '115px')\n    }, 500)\n    setTimeout(() => {\n      this.currentColorId = +idColor\n      COLOR_BUTTON_ELEMENT.style.setProperty('margin-right', '0')\n    }, 1250)\n  }\n  /** Добавление габаритов к описанию мебели */\n  protected proccessDescription(description: string, proportions: furnitureProportions) {\n    return `Ширина: ${proportions.width} см\\nДлина: ${proportions.length} см\\nВысота: ${proportions.height} см\\n${description}`;\n  }\n  /** Копирование ссылки на магазин */\n  protected copyShopLink(furnitureUrl: string) {\n    this.clipboardService.copyFromContent(furnitureUrl)\n  }\n}\n\n    \n\n    \n        \n    {{furnitureData.name}}\n    \n    \n        \n        \n    \n    \n        \n            \n            \n                \n            \n        \n        \n            \n                Описание\n                {{proccessDescription(furnitureData.description,furnitureData.proportions)}}\n            \n            \n                Магазины\n                \n                    \n                        {{shopData.cost | costFormat}}\n                        \n                            \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    {{furnitureData.name}}                                                                                                                                        Описание                {{proccessDescription(furnitureData.description,furnitureData.proportions)}}                                        Магазины                                                            {{shopData.cost | costFormat}}                                                                                                                                        '\n    var COMPONENTS = [{'name': 'AccountPageComponent', 'selector': 'app-account-page'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreateFurnitureComponent', 'selector': 'app-create-furniture'},{'name': 'CreateFurniturePageComponent', 'selector': 'app-create-furniture-page'},{'name': 'FinderComponent', 'selector': 'app-finder'},{'name': 'ImageSliderComponent', 'selector': 'app-image-slider'},{'name': 'LoginPageComponent', 'selector': 'app-login-page'},{'name': 'MainPageComponent', 'selector': 'app-main-page'},{'name': 'NavigationPanelComponent', 'selector': 'app-navigation-panel'},{'name': 'NotificationComponent', 'selector': 'app-notification'},{'name': 'PlanHouseComponent', 'selector': 'app-plan-house'},{'name': 'PlanHousePageComponent', 'selector': 'app-plan-house-page'},{'name': 'SceneComponent', 'selector': 'app-scene'},{'name': 'ShopPageComponent', 'selector': 'app-shop-page'},{'name': 'UploadOverlayComponent', 'selector': 'app-upload-overlay'},{'name': 'ViewFurnitureComponent', 'selector': 'app-view-furniture'}];\n    var DIRECTIVES = [{'name': 'AutoHeightDirective', 'selector': '[appAutoHeight]'}];\n    var ACTUAL_COMPONENT = {'name': 'ViewFurnitureComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/accountFullData.html":{"url":"interfaces/accountFullData.html","title":"interface - accountFullData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  accountFullData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/account.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Полные данные аккаунта пользователя\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            avatarUrl\n                                        \n                                \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            furnitures\n                                        \n                                \n                                \n                                        \n                                            nickname\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            password\n                                        \n                                \n                                \n                                        \n                                            projects\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        avatarUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        avatarUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    URL аватара\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Email пользователя\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        furnitures\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        furnitures:         furnitureAccountData[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         furnitureAccountData[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Массив мебели, связанной с аккаунтом\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nickname\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nickname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Никнейм пользователя\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Пароль пользователя (необязательный)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        projects\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        projects:         projectInformation[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         projectInformation[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Массив проектов пользователя\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { projectInformation, projectServerInformation } from './project.service';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { AccountCookieService } from './account-cookie.service';\nimport { baseUrl } from '.';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные для изменения аккаунта с email\n */\nexport interface changeAccountDataEmail {\n  /** JWT токен */\n  jwt: string;\n  /** Тип аккаунта (email) */\n  accountType: 'email';\n  /** Пароль пользователя */\n  password: string;\n}\n\n/**\n * Полные данные аккаунта пользователя\n */\nexport interface accountFullData {\n  /** URL аватара */\n  avatarUrl: string;\n  /** Никнейм пользователя */\n  nickname: string;\n  /** Email пользователя */\n  email: string;\n  /** Массив проектов пользователя */\n  projects: projectInformation[];\n  /** Массив мебели, связанной с аккаунтом */\n  furnitures: furnitureAccountData[];\n  /** Пароль пользователя (необязательный) */\n  password?: string;\n}\n\n/**\n * Данные для изменения вторичных данных аккаунта\n */\nexport interface changeSecondaryData {\n  /** JWT токен */\n  jwt: string;\n  /** Новый никнейм */\n  nickname: string;\n}\n\n/**\n * Данные по мебели, связанной с аккаунтом\n */\nexport interface furnitureAccountData {\n  /** Идентификатор мебели */\n  _id: string;\n  /** Название мебели */\n  name: string;\n  /** URL превью изображения мебели */\n  previewUrl: string;\n}\n\n/** Тип аккаунта */\nexport type accountType = 'google' | 'email';\n\n/** Тип данных для изменения аккаунта (на данный момент только email) */\nexport type changeAccountData = changeAccountDataEmail;\n\n/**\n * Данные для создания аккаунта с email\n */\ninterface createEmailAccountData {\n  /** Email */\n  email: string;\n  /** Пароль */\n  password: string;\n  /** Никнейм */\n  nickname: string;\n  /** Тип аккаунта (email) */\n  accountType: 'email';\n}\n\n/** Тип данных для создания аккаунта */\nexport type createAccountData = createEmailAccountData;\n\n/**\n * Функция-помощник для проверки, что аккаунт с типом email\n * @param account Объект аккаунта\n * @returns true, если аккаунт с типом email\n */\nexport function isEmailAccount(account: { accountType: accountType }): account is changeAccountDataEmail {\n  return account.accountType === 'email';\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccountService {\n  /** Базовый URL для аккаунт-сервисов */\n  private baseServiceUrl = baseUrl + 'account';\n\n  constructor(\n    private httpModule: HttpClient,\n    private accountCookieService: AccountCookieService\n  ) { }\n\n  /**\n   * Создание нового пользователя\n   * @param createAccountData Основная информация о пользователе (никнейм, email, пароль)\n   * @returns Promise с сообщением об успешном создании пользователя\n   */\n  POSTcreateAccount(createAccountData: createAccountData) {\n    let HTTP_PARAMS = new HttpParams()\n      .set('accountType', createAccountData.accountType)\n      .set('nickname', createAccountData.nickname);\n\n    if (isEmailAccount(createAccountData)) {\n      HTTP_PARAMS = HTTP_PARAMS\n        .set('email', createAccountData.email)\n        .set('password', createAccountData.password);\n    }\n\n    return firstValueFrom(this.httpModule.post(this.baseServiceUrl, HTTP_PARAMS)) as Promise;\n  }\n\n  /**\n   * Удаление JWT токена пользователя\n   * @param jwt JWT токен\n   * @returns Promise с сообщением об успешном удалении токена\n   */\n  DELETEaccountJwt(jwt: string) {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt);\n    return firstValueFrom(this.httpModule.delete(this.baseServiceUrl + '/jwt/delete', { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Обновление вторичных данных аккаунта (например, никнейм)\n   * @param changeData Данные для изменения\n   * @returns Promise с сообщением об успешном обновлении\n   */\n  PUTupdateSecondaryAccountData(changeData: changeSecondaryData) {\n    const HTTP_PARAMS = new HttpParams({\n      fromObject: {\n        nickname: changeData.nickname,\n        jwt: changeData.jwt\n      }\n    });\n    return firstValueFrom(this.httpModule.put(this.baseServiceUrl, null, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Удаление аккаунта пользователя\n   * @param jwt JWT токен\n   * @returns Promise с сообщением об успешном удалении пользователя\n   */\n  DELETEaccount(jwt: string) {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt);\n    return firstValueFrom(this.httpModule.delete(this.baseServiceUrl, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Получение полной информации об аккаунте пользователя\n   * @param jwt JWT токен\n   * @returns Promise с данными аккаунта (включая проекты и мебель)\n   */\n  async GETaccount(jwt: string) {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt);\n    try {\n      let { accountData } = await firstValueFrom(this.httpModule.get(this.baseServiceUrl, { params: HTTP_PARAMS })) as { accountData: accountFullData & { projects: projectServerInformation[] } };\n      accountData.furnitures = accountData.furnitures.map(furnitureData => {\n        return {\n          ...furnitureData,\n          previewUrl: baseUrl + furnitureData.previewUrl\n        };\n      });\n      return { accountData: accountData };\n    } catch (error) {\n      console.error('Error in GETfurnitureCard:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Проверка наличия JWT токена в куках\n   * @returns true, если JWT токен найден, иначе false\n   */\n  checkJwt(): boolean {\n    return this.accountCookieService.getJwt() ? true : false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/additionalData.html":{"url":"interfaces/additionalData.html","title":"interface - additionalData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  additionalData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/furniture-card-control.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Дополнительные данные мебели с динамическими ключами\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            category\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    string | undefined\n\n                    \n                \n                        \n                            \n                                Defined in src/services/furniture-card-control.service.ts:59\n                            \n                        \n                \n                    \n                        Другие динамические свойства\n\n                    \n                \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        category\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        category:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Категория мебели (опционально)\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { imageSliderClientData, imageSliderFromServerData } from '../components/image-slider/image-slider.component';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные магазина с ценой и URL\n * @interface shopData\n */\nexport interface shopData {\n  /** Цена мебели */\n  cost: number;\n  /** URL магазина или товара */\n  url: string;\n}\n\n/**\n * Пропорции мебели (ширина, длина, высота)\n * @interface furnitureProportions\n */\nexport interface furnitureProportions {\n  /** Ширина мебели (или null, если не задана) */\n  width: number | null;\n  /** Длина мебели (или null, если не задана) */\n  length: number | null;\n  /** Высота мебели (или null, если не задана) */\n  height: number | null;\n}\n\n/**\n * Данные цвета на клиенте, включая слайдер изображений\n * @interface colorClientData\n */\nexport interface colorClientData {\n  /** Цвет мебели */\n  color: string;\n  /** Данные для слайдера изображений */\n  imagesData: imageSliderClientData;\n}\n\n/**\n * Данные цвета с сервера, включая слайдер изображений\n * @interface colorFromServerData\n */\nexport interface colorFromServerData {\n  /** Цвет мебели */\n  color: string;\n  /** Данные для слайдера изображений */\n  imagesData: imageSliderFromServerData;\n}\n\n/**\n * Дополнительные данные мебели с динамическими ключами\n * @interface additionalData\n */\nexport interface additionalData {\n  /** Категория мебели (опционально) */\n  category?: string;\n  /** Другие динамические свойства */\n  [key: string]: string | undefined;\n}\n\n/**\n * Базовые данные мебели, общие для клиента и сервера\n * @interface furnitureBaseData\n */\ninterface furnitureBaseData {\n  /** Название мебели */\n  name: string;\n  /** Описание мебели */\n  description: string;\n  /** Пропорции мебели */\n  proportions: furnitureProportions;\n  /** Список магазинов с ценами и URL */\n  shops: shopData[];\n  /** Дополнительные данные */\n  additionalData: additionalData;\n}\n\n/**\n * Данные мебели на клиенте с цветами\n * @interface furnitureClientData\n * @extends furnitureBaseData\n */\nexport interface furnitureClientData extends furnitureBaseData {\n  /** Список цветов с данными для клиента */\n  colors: colorClientData[];\n}\n\n/**\n * Данные мебели с сервера с цветами\n * @interface furnitureFromServerData\n * @extends furnitureBaseData\n */\nexport interface furnitureFromServerData extends furnitureBaseData {\n  /** Список цветов с данными с сервера */\n  colors: colorFromServerData[];\n}\n\n/**\n * Сервис для управления карточками мебели\n * @class FurnitureCardControlService\n * @injectable\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class FurnitureCardControlService {\n\n  /** Базовый URL для запросов к API мебели */\n  private baseServiceUrl = baseUrl + 'furniture/card';\n\n  /**\n   * Конструктор сервиса\n   * @param httpModule HTTP клиент для запросов\n   */\n  constructor(private httpModule: HttpClient) { }\n\n  /**\n   * Получение карточки мебели по ID и опциональному JWT токену\n   * @param furnitureCardId - ID карточки мебели\n   * @param [jwt] - JWT токен пользователя (опционально)\n   * @returns Promise с объектом, содержащим данные карточки и флаг совпадения автора\n   * @throws Ошибка при некорректной структуре ответа или при ошибках запроса\n   */\n  async GETfurnitureCard(\n    furnitureCardId: string,\n    jwt?: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams().set('furnitureCardId', furnitureCardId);\n\n    if (jwt !== undefined) {\n      HTTP_PARAMS = HTTP_PARAMS.set('jwt', jwt);\n    }\n\n    try {\n      const response = await firstValueFrom(\n        this.httpModule.get(this.baseServiceUrl, { params: HTTP_PARAMS })\n      ) as {\n        furnitureCard: furnitureFromServerData;\n        authorMatched: boolean;\n      };\n\n      if (!response?.furnitureCard) {\n        throw new Error('Invalid response structure: furnitureCard missing');\n      }\n\n      // Добавляем полный URL к изображениям\n      const transformedFurnitureCard = {\n        ...response.furnitureCard,\n        colors: response.furnitureCard.colors.map(colorData => ({\n          color: colorData.color,\n          imagesData: {\n            idMainImage: colorData.imagesData.idMainImage,\n            images: colorData.imagesData.images.map(url => baseUrl + url)\n          }\n        }))\n      };\n\n      return {\n        furnitureCard: transformedFurnitureCard,\n        authorMatched: response.authorMatched\n      };\n\n    } catch (error) {\n      console.error('Error in GETfurnitureCard:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Создание новой карточки мебели\n   * @param furnitureData - Данные новой карточки мебели\n   * @param jwt - JWT токен пользователя\n   * @returns Promise с данными созданной карточки, включая её ID\n   */\n  POSTcreateFurnitureCard(\n    furnitureData: furnitureFromServerData,\n    jwt: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams().set('jwt', jwt);\n    return firstValueFrom(\n      this.httpModule.post(this.baseServiceUrl, furnitureData, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n\n  /**\n   * Обновление существующей карточки мебели\n   * @param furnitureCardUpdateData - Обновленные данные карточки мебели\n   * @param furnitureCardId - ID карточки мебели для обновления\n   * @param jwt - JWT токен пользователя\n   * @returns Promise с сообщением результата обновления\n   */\n  PUTupdateFurnitureCard(\n    furnitureCardUpdateData: furnitureFromServerData,\n    furnitureCardId: string,\n    jwt: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId);\n    return firstValueFrom(\n      this.httpModule.put(this.baseServiceUrl, furnitureCardUpdateData, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n\n  /**\n   * Удаление карточки мебели по ID и JWT токену\n   * @param jwt - JWT токен пользователя\n   * @param furnitureCardId - ID карточки мебели для удаления\n   * @returns Promise с сообщением результата удаления\n   */\n  DELETEfurnitureCard(jwt: string, furnitureCardId: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId);\n    return firstValueFrom(\n      this.httpModule.delete(this.baseServiceUrl, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/baseFilter.html":{"url":"interfaces/baseFilter.html","title":"interface - baseFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  baseFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/category.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Базовый фильтр\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            field\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        field\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        field:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Поле, по которому фильтр\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Имя фильтра\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные категории\n */\nexport interface categoryData {\n  /** Название категории */\n  name: string;\n  /** Перевод категории в единственном числе */\n  translateOne: string;\n  /** Перевод категории во множественном числе */\n  translateMany: string;\n  /** Массив фильтров категории */\n  filters: filter[];\n}\n\n/**\n * Базовый фильтр\n */\ninterface baseFilter {\n  /** Имя фильтра */\n  name: string;\n  /** Поле, по которому фильтр */\n  field: string;\n}\n\n/**\n * Опция для select-фильтра\n */\nexport interface option {\n  /** Название опции */\n  name: string;\n  /** Значение опции для запроса */\n  queryValue: string;\n}\n\n/**\n * Фильтр типа select\n */\ninterface selectFilter extends baseFilter {\n  /** Тип фильтра */\n  type: 'select';\n  /** Варианты выбора */\n  options: option[];\n}\n\n/**\n * Фильтр типа range\n */\ninterface rangeFilter extends baseFilter {\n  /** Тип фильтра */\n  type: 'range';\n  /** Минимальное значение */\n  minValue: number;\n  /** Максимальное значение */\n  maxValue: number;\n}\n\n/**\n * Тип фильтра: select или range\n */\nexport type filter = rangeFilter | selectFilter;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CategoryService {\n  /** Базовый URL для работы с категориями */\n  private baseServiceUrl = baseUrl + 'category';\n\n  constructor(\n    private httpModule: HttpClient\n  ) { }\n\n  /**\n   * Получение всех категорий\n   * @returns Promise с массивом категорий\n   */\n  GETgetAllCategories() {\n    return firstValueFrom(this.httpModule.get(this.baseServiceUrl)) as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/categoryData.html":{"url":"interfaces/categoryData.html","title":"interface - categoryData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  categoryData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/category.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Данные категории\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            filters\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            translateMany\n                                        \n                                \n                                \n                                        \n                                            translateOne\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        filters\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        filters:         filter[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         filter[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Массив фильтров категории\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Название категории\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        translateMany\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        translateMany:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Перевод категории во множественном числе\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        translateOne\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        translateOne:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Перевод категории в единственном числе\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные категории\n */\nexport interface categoryData {\n  /** Название категории */\n  name: string;\n  /** Перевод категории в единственном числе */\n  translateOne: string;\n  /** Перевод категории во множественном числе */\n  translateMany: string;\n  /** Массив фильтров категории */\n  filters: filter[];\n}\n\n/**\n * Базовый фильтр\n */\ninterface baseFilter {\n  /** Имя фильтра */\n  name: string;\n  /** Поле, по которому фильтр */\n  field: string;\n}\n\n/**\n * Опция для select-фильтра\n */\nexport interface option {\n  /** Название опции */\n  name: string;\n  /** Значение опции для запроса */\n  queryValue: string;\n}\n\n/**\n * Фильтр типа select\n */\ninterface selectFilter extends baseFilter {\n  /** Тип фильтра */\n  type: 'select';\n  /** Варианты выбора */\n  options: option[];\n}\n\n/**\n * Фильтр типа range\n */\ninterface rangeFilter extends baseFilter {\n  /** Тип фильтра */\n  type: 'range';\n  /** Минимальное значение */\n  minValue: number;\n  /** Максимальное значение */\n  maxValue: number;\n}\n\n/**\n * Тип фильтра: select или range\n */\nexport type filter = rangeFilter | selectFilter;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CategoryService {\n  /** Базовый URL для работы с категориями */\n  private baseServiceUrl = baseUrl + 'category';\n\n  constructor(\n    private httpModule: HttpClient\n  ) { }\n\n  /**\n   * Получение всех категорий\n   * @returns Promise с массивом категорий\n   */\n  GETgetAllCategories() {\n    return firstValueFrom(this.httpModule.get(this.baseServiceUrl)) as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/changeAccountDataEmail.html":{"url":"interfaces/changeAccountDataEmail.html","title":"interface - changeAccountDataEmail","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  changeAccountDataEmail\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/account.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Данные для изменения аккаунта с email\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            accountType\n                                        \n                                \n                                \n                                        \n                                            jwt\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accountType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accountType:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                            \n                                \n                                    Тип аккаунта (email)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        jwt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        jwt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    JWT токен\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Пароль пользователя\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { projectInformation, projectServerInformation } from './project.service';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { AccountCookieService } from './account-cookie.service';\nimport { baseUrl } from '.';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные для изменения аккаунта с email\n */\nexport interface changeAccountDataEmail {\n  /** JWT токен */\n  jwt: string;\n  /** Тип аккаунта (email) */\n  accountType: 'email';\n  /** Пароль пользователя */\n  password: string;\n}\n\n/**\n * Полные данные аккаунта пользователя\n */\nexport interface accountFullData {\n  /** URL аватара */\n  avatarUrl: string;\n  /** Никнейм пользователя */\n  nickname: string;\n  /** Email пользователя */\n  email: string;\n  /** Массив проектов пользователя */\n  projects: projectInformation[];\n  /** Массив мебели, связанной с аккаунтом */\n  furnitures: furnitureAccountData[];\n  /** Пароль пользователя (необязательный) */\n  password?: string;\n}\n\n/**\n * Данные для изменения вторичных данных аккаунта\n */\nexport interface changeSecondaryData {\n  /** JWT токен */\n  jwt: string;\n  /** Новый никнейм */\n  nickname: string;\n}\n\n/**\n * Данные по мебели, связанной с аккаунтом\n */\nexport interface furnitureAccountData {\n  /** Идентификатор мебели */\n  _id: string;\n  /** Название мебели */\n  name: string;\n  /** URL превью изображения мебели */\n  previewUrl: string;\n}\n\n/** Тип аккаунта */\nexport type accountType = 'google' | 'email';\n\n/** Тип данных для изменения аккаунта (на данный момент только email) */\nexport type changeAccountData = changeAccountDataEmail;\n\n/**\n * Данные для создания аккаунта с email\n */\ninterface createEmailAccountData {\n  /** Email */\n  email: string;\n  /** Пароль */\n  password: string;\n  /** Никнейм */\n  nickname: string;\n  /** Тип аккаунта (email) */\n  accountType: 'email';\n}\n\n/** Тип данных для создания аккаунта */\nexport type createAccountData = createEmailAccountData;\n\n/**\n * Функция-помощник для проверки, что аккаунт с типом email\n * @param account Объект аккаунта\n * @returns true, если аккаунт с типом email\n */\nexport function isEmailAccount(account: { accountType: accountType }): account is changeAccountDataEmail {\n  return account.accountType === 'email';\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccountService {\n  /** Базовый URL для аккаунт-сервисов */\n  private baseServiceUrl = baseUrl + 'account';\n\n  constructor(\n    private httpModule: HttpClient,\n    private accountCookieService: AccountCookieService\n  ) { }\n\n  /**\n   * Создание нового пользователя\n   * @param createAccountData Основная информация о пользователе (никнейм, email, пароль)\n   * @returns Promise с сообщением об успешном создании пользователя\n   */\n  POSTcreateAccount(createAccountData: createAccountData) {\n    let HTTP_PARAMS = new HttpParams()\n      .set('accountType', createAccountData.accountType)\n      .set('nickname', createAccountData.nickname);\n\n    if (isEmailAccount(createAccountData)) {\n      HTTP_PARAMS = HTTP_PARAMS\n        .set('email', createAccountData.email)\n        .set('password', createAccountData.password);\n    }\n\n    return firstValueFrom(this.httpModule.post(this.baseServiceUrl, HTTP_PARAMS)) as Promise;\n  }\n\n  /**\n   * Удаление JWT токена пользователя\n   * @param jwt JWT токен\n   * @returns Promise с сообщением об успешном удалении токена\n   */\n  DELETEaccountJwt(jwt: string) {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt);\n    return firstValueFrom(this.httpModule.delete(this.baseServiceUrl + '/jwt/delete', { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Обновление вторичных данных аккаунта (например, никнейм)\n   * @param changeData Данные для изменения\n   * @returns Promise с сообщением об успешном обновлении\n   */\n  PUTupdateSecondaryAccountData(changeData: changeSecondaryData) {\n    const HTTP_PARAMS = new HttpParams({\n      fromObject: {\n        nickname: changeData.nickname,\n        jwt: changeData.jwt\n      }\n    });\n    return firstValueFrom(this.httpModule.put(this.baseServiceUrl, null, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Удаление аккаунта пользователя\n   * @param jwt JWT токен\n   * @returns Promise с сообщением об успешном удалении пользователя\n   */\n  DELETEaccount(jwt: string) {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt);\n    return firstValueFrom(this.httpModule.delete(this.baseServiceUrl, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Получение полной информации об аккаунте пользователя\n   * @param jwt JWT токен\n   * @returns Promise с данными аккаунта (включая проекты и мебель)\n   */\n  async GETaccount(jwt: string) {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt);\n    try {\n      let { accountData } = await firstValueFrom(this.httpModule.get(this.baseServiceUrl, { params: HTTP_PARAMS })) as { accountData: accountFullData & { projects: projectServerInformation[] } };\n      accountData.furnitures = accountData.furnitures.map(furnitureData => {\n        return {\n          ...furnitureData,\n          previewUrl: baseUrl + furnitureData.previewUrl\n        };\n      });\n      return { accountData: accountData };\n    } catch (error) {\n      console.error('Error in GETfurnitureCard:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Проверка наличия JWT токена в куках\n   * @returns true, если JWT токен найден, иначе false\n   */\n  checkJwt(): boolean {\n    return this.accountCookieService.getJwt() ? true : false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/changeSecondaryData.html":{"url":"interfaces/changeSecondaryData.html","title":"interface - changeSecondaryData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  changeSecondaryData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/account.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Данные для изменения вторичных данных аккаунта\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            jwt\n                                        \n                                \n                                \n                                        \n                                            nickname\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        jwt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        jwt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    JWT токен\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nickname\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nickname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Новый никнейм\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { projectInformation, projectServerInformation } from './project.service';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { AccountCookieService } from './account-cookie.service';\nimport { baseUrl } from '.';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные для изменения аккаунта с email\n */\nexport interface changeAccountDataEmail {\n  /** JWT токен */\n  jwt: string;\n  /** Тип аккаунта (email) */\n  accountType: 'email';\n  /** Пароль пользователя */\n  password: string;\n}\n\n/**\n * Полные данные аккаунта пользователя\n */\nexport interface accountFullData {\n  /** URL аватара */\n  avatarUrl: string;\n  /** Никнейм пользователя */\n  nickname: string;\n  /** Email пользователя */\n  email: string;\n  /** Массив проектов пользователя */\n  projects: projectInformation[];\n  /** Массив мебели, связанной с аккаунтом */\n  furnitures: furnitureAccountData[];\n  /** Пароль пользователя (необязательный) */\n  password?: string;\n}\n\n/**\n * Данные для изменения вторичных данных аккаунта\n */\nexport interface changeSecondaryData {\n  /** JWT токен */\n  jwt: string;\n  /** Новый никнейм */\n  nickname: string;\n}\n\n/**\n * Данные по мебели, связанной с аккаунтом\n */\nexport interface furnitureAccountData {\n  /** Идентификатор мебели */\n  _id: string;\n  /** Название мебели */\n  name: string;\n  /** URL превью изображения мебели */\n  previewUrl: string;\n}\n\n/** Тип аккаунта */\nexport type accountType = 'google' | 'email';\n\n/** Тип данных для изменения аккаунта (на данный момент только email) */\nexport type changeAccountData = changeAccountDataEmail;\n\n/**\n * Данные для создания аккаунта с email\n */\ninterface createEmailAccountData {\n  /** Email */\n  email: string;\n  /** Пароль */\n  password: string;\n  /** Никнейм */\n  nickname: string;\n  /** Тип аккаунта (email) */\n  accountType: 'email';\n}\n\n/** Тип данных для создания аккаунта */\nexport type createAccountData = createEmailAccountData;\n\n/**\n * Функция-помощник для проверки, что аккаунт с типом email\n * @param account Объект аккаунта\n * @returns true, если аккаунт с типом email\n */\nexport function isEmailAccount(account: { accountType: accountType }): account is changeAccountDataEmail {\n  return account.accountType === 'email';\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccountService {\n  /** Базовый URL для аккаунт-сервисов */\n  private baseServiceUrl = baseUrl + 'account';\n\n  constructor(\n    private httpModule: HttpClient,\n    private accountCookieService: AccountCookieService\n  ) { }\n\n  /**\n   * Создание нового пользователя\n   * @param createAccountData Основная информация о пользователе (никнейм, email, пароль)\n   * @returns Promise с сообщением об успешном создании пользователя\n   */\n  POSTcreateAccount(createAccountData: createAccountData) {\n    let HTTP_PARAMS = new HttpParams()\n      .set('accountType', createAccountData.accountType)\n      .set('nickname', createAccountData.nickname);\n\n    if (isEmailAccount(createAccountData)) {\n      HTTP_PARAMS = HTTP_PARAMS\n        .set('email', createAccountData.email)\n        .set('password', createAccountData.password);\n    }\n\n    return firstValueFrom(this.httpModule.post(this.baseServiceUrl, HTTP_PARAMS)) as Promise;\n  }\n\n  /**\n   * Удаление JWT токена пользователя\n   * @param jwt JWT токен\n   * @returns Promise с сообщением об успешном удалении токена\n   */\n  DELETEaccountJwt(jwt: string) {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt);\n    return firstValueFrom(this.httpModule.delete(this.baseServiceUrl + '/jwt/delete', { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Обновление вторичных данных аккаунта (например, никнейм)\n   * @param changeData Данные для изменения\n   * @returns Promise с сообщением об успешном обновлении\n   */\n  PUTupdateSecondaryAccountData(changeData: changeSecondaryData) {\n    const HTTP_PARAMS = new HttpParams({\n      fromObject: {\n        nickname: changeData.nickname,\n        jwt: changeData.jwt\n      }\n    });\n    return firstValueFrom(this.httpModule.put(this.baseServiceUrl, null, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Удаление аккаунта пользователя\n   * @param jwt JWT токен\n   * @returns Promise с сообщением об успешном удалении пользователя\n   */\n  DELETEaccount(jwt: string) {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt);\n    return firstValueFrom(this.httpModule.delete(this.baseServiceUrl, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Получение полной информации об аккаунте пользователя\n   * @param jwt JWT токен\n   * @returns Promise с данными аккаунта (включая проекты и мебель)\n   */\n  async GETaccount(jwt: string) {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt);\n    try {\n      let { accountData } = await firstValueFrom(this.httpModule.get(this.baseServiceUrl, { params: HTTP_PARAMS })) as { accountData: accountFullData & { projects: projectServerInformation[] } };\n      accountData.furnitures = accountData.furnitures.map(furnitureData => {\n        return {\n          ...furnitureData,\n          previewUrl: baseUrl + furnitureData.previewUrl\n        };\n      });\n      return { accountData: accountData };\n    } catch (error) {\n      console.error('Error in GETfurnitureCard:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Проверка наличия JWT токена в куках\n   * @returns true, если JWT токен найден, иначе false\n   */\n  checkJwt(): boolean {\n    return this.accountCookieService.getJwt() ? true : false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/clientFilters.html":{"url":"interfaces/clientFilters.html","title":"interface - clientFilters","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  clientFilters\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/shop.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс клиентских фильтров, значения которых формируются на основе ответа от сервера.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            colors\n                                        \n                                \n                                \n                                        \n                                            maxCost\n                                        \n                                \n                                \n                                        \n                                            minCost\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        colors\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        colors:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Цвета мебели\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxCost\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        maxCost:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Максимальная стоимость\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        minCost\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        minCost:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Минимальная стоимость\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { firstValueFrom } from 'rxjs';\nimport { modelInterface } from '../components/scene/scene.component';\n\n/**\n * Интерфейс объекта фильтров, отправляемых на сервер.\n*/\nexport interface queryData {\n  /** Любое ключ:значение */\n  [key: string]: optionSelectQueryData | optionRangeQueryData;\n}\n\n/**\n * Фильтр типа \"выбор из списка\".\n */\ninterface optionSelectQueryData {\n  /** Тип фильтра */\n  type: 'select';\n  /** Выбранные значения */\n  value: string[];\n}\n\n/**\n * Фильтр типа \"диапазон значений\".\n*/\ninterface optionRangeQueryData {\n  /** Тип фильтра */\n  type: 'range';\n  /** Минимум в диапазоне */\n  min: number;\n  /** Максимум в диапазоне */\n  max: number;\n}\n\n/**\n * Интерфейс данных о мебели, получаемых из магазина.\n */\nexport interface furnitureShopData {\n  /** Название */\n  name: string;\n  /** Стоимость мебели */\n  cost: number;\n  /** Неполный Url превью (вначало надо вставить baseUrl сервера) */\n  previewUrl: string;\n  /** Id мебели */\n  furnitureCardId: string;\n  /** Массив цветов мебели */\n  colors: string[];\n  /** Габариты мебели */\n  proportions: modelInterface;\n}\n\n/**\n * Интерфейс клиентских фильтров, значения которых формируются на основе ответа от сервера.\n */\nexport interface clientFilters {\n  /** Цвета мебели */\n  colors: string[];\n  /** Минимальная стоимость */\n  minCost: number;\n  /** Максимальная стоимость */\n  maxCost: number;\n}\n\n/**\n * Сервис для получения данных о мебели из магазина, с учетом фильтрации и пагинации.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ShopService {\n  /** Базовый URL сервиса */\n  private baseServiceUrl = baseUrl + 'shop';\n\n  /** Активный AbortController для отмены предыдущих запросов */\n  private abortController: AbortController | null = null;\n\n  constructor(private httpModule: HttpClient) { }\n\n  /**\n   * Выполняет GET-запрос на получение данных по категории мебели.\n   * Поддерживает фильтрацию и стартовую позицию для пагинации.\n   * При повторном вызове отменяет предыдущий запрос.\n   *\n   * @param categoryName - Название категории мебели.\n   * @param startRange - Начальный индекс (offset) выборки.\n   * @param queryData - Объект фильтров (опционально).\n   *\n   * @returns Промис с объектом, содержащим:\n   * - `resultsArray`: массив карточек мебели с обновлёнными URL превью\n   * - `resultsClientFiltersData`: агрегированные данные фильтров для клиента\n   *\n   * @throws {Error} В случае сетевой ошибки или отмены запроса.\n   */\n  async GETgetCategoryData(categoryName: string, startRange: number, queryData?: queryData) {\n    if (this.abortController) {\n      this.abortController.abort();\n    }\n\n    this.abortController = new AbortController();\n\n    try {\n      let requestUrl = `${this.baseServiceUrl}?category=${categoryName}&startRange=${startRange}`;\n\n      if (queryData && Object.keys(queryData).length > 0) {\n        const params = new URLSearchParams();\n        params.append('filters', JSON.stringify(queryData));\n        requestUrl += `&${new URLSearchParams(params).toString()}`;\n      }\n\n      const response = await fetch(\n        requestUrl,\n        { signal: this.abortController.signal }\n      );\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Ошибка: ${response.status} — ${errorText}`);\n      }\n\n      const RESPONSE = await response.json() as { resultsArray: furnitureShopData[] };\n      const RESULTS_ARRAY = RESPONSE.resultsArray;\n\n      const UPDATED_RESULTS = RESULTS_ARRAY.map(furniture => ({\n        ...furniture,\n        previewUrl: baseUrl + furniture.previewUrl\n      }));\n\n      return {\n        resultsArray: UPDATED_RESULTS,\n        resultsClientFiltersData: this.getFindOptionsByResult(UPDATED_RESULTS)\n      };\n\n    } catch (error: any) {\n      if (error.name === 'AbortError') {\n      } else {\n        console.error('Ошибка запроса:', error);\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Формирует объект фильтров на основе полученных данных о мебели.\n   *\n   * @param resultsArray - Массив карточек мебели\n   * @returns Объект клиентских фильтров (цвета, минимальная и максимальная цена)\n   */\n  private getFindOptionsByResult(resultsArray: furnitureShopData[]) {\n    let filtersObject: clientFilters = {\n      colors: [],\n      minCost: Infinity,\n      maxCost: -Infinity\n    };\n\n    resultsArray.forEach(furnitureData => {\n      if (furnitureData.cost  filtersObject.maxCost) filtersObject.maxCost = furnitureData.cost;\n\n      filtersObject.colors.push(...furnitureData.colors);\n    });\n\n    filtersObject.minCost = filtersObject.minCost!== Infinity ? filtersObject.minCost : 0;\n    filtersObject.maxCost = filtersObject.maxCost!== -Infinity ? filtersObject.maxCost : 0;\n\n    filtersObject.colors = [...new Set(filtersObject.colors)];\n    return filtersObject;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/clientProportions.html":{"url":"interfaces/clientProportions.html","title":"interface - clientProportions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  clientProportions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/create-furniture-page/create-furniture-page.component.ts\n        \n\n\n            \n                Description\n            \n            \n                Данные для формы габаритов мебели на клиенте.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            height\n                                        \n                                \n                                \n                                        \n                                            length\n                                        \n                                \n                                \n                                        \n                                            width\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        height:     number | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        length\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        length:     number | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        width:     number | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ChangeDetectorRef, Component, DoCheck, ElementRef, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { NavigationPanelComponent } from '../navigation-panel/navigation-panel.component';\nimport { CreateFurnitureComponent } from '../create-furnitre/create-furniture.component';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AccountCookieService } from '../../services/account-cookie.service';\nimport { FurnitureCardControlService, furnitureFromServerData } from '../../services/furniture-card-control.service';\nimport { ServerImageControlService } from '../../services/server-image-control.service';\nimport { NgIf } from '@angular/common';\nimport { FurnitureModelControlService } from '../../services/furniture-model-control.service';\nimport { NotificationService } from '../../services/notification.service';\nimport { imageSliderClientData } from '../image-slider/image-slider.component';\nimport { Subscription } from 'rxjs';\n\n/** Данные для формы габаритов мебели на клиенте.*/\ninterface clientProportions {\n  width: number | null;\n  height: number | null;\n  length: number | null;\n}\n\n/**\n * Компонент страницы создания и редактирования мебели.\n * Отвечает за загрузку данных, валидацию, сохранение и удаление мебели.\n */\n@Component({\n  selector: 'app-create-furniture-page',\n  standalone: true,\n  imports: [NavigationPanelComponent, CreateFurnitureComponent, NgIf],\n  templateUrl: './create-furniture-page.component.html',\n  styleUrl: './create-furniture-page.component.scss'\n})\nexport class CreateFurniturePageComponent implements OnInit, OnDestroy {\n  /** Подписка на изменения маршрута в приложении.*/\n  private routeSub: Subscription = new Subscription();\n  /** Id страницы.*/\n  protected idPage!: string;\n  \n  @ViewChild(CreateFurnitureComponent)\n  /** Переменная для взаимодействия с методами дочернего компонента.*/\n  private createFurnitureComponent!: CreateFurnitureComponent;\n  \n  @ViewChild(CreateFurnitureComponent, { read: ElementRef })\n  /** Переменная для взаимодействия с html дочернего компонента.*/\n  private createFurnitureComponentRef!: ElementRef;\n\n  /**\n   * Данные мебели с дополнительным полем пропорций клиента.\n   */\n  protected furnitureData: furnitureFromServerData & { proportions: clientProportions } = {\n    name: '',\n    description: '',\n    colors: [],\n    shops: [],\n    additionalData: {},\n    proportions: {\n      width: null,\n      height: null,\n      length: null\n    }\n  };\n\n  constructor(\n    private route: ActivatedRoute,\n    private cookieService: AccountCookieService,\n    private furnitureCardService: FurnitureCardControlService,\n    private serverImageControl: ServerImageControlService,\n    private router: Router,\n    private furnitureModelService: FurnitureModelControlService,\n    private notification: NotificationService\n  ) { }\n\n  /**\n   * Инициализация компонента:\n   * - проверяет JWT,\n   * - подписывается на изменения параметров маршрута,\n   * - загружает мебель, если id не \"new\".\n   */\n  ngOnInit(): void {\n    const JWT = this.cookieService.getJwt();\n    if (!JWT) {\n      this.router.navigateByUrl('/login');\n      return;\n    }\n\n    this.routeSub = this.route.paramMap.subscribe(params => {\n      this.idPage = params.get('id') ?? 'new';\n      this.clearFurnitureCard();\n      if (this.idPage !== 'new') this.pageInit(JWT);\n    });\n  }\n\n  /**\n   * Отписка от подписки при уничтожении компонента.\n   */\n  ngOnDestroy() {\n    if(this.routeSub)this.routeSub.unsubscribe();\n  }\n\n  /**\n   * Загружает данные мебели по id и JWT.\n   * Если автор не совпадает, происходит перенаправление на создание новой мебели.\n   * @param jwt - JWT токен пользователя.\n   */\n  private async pageInit(jwt: string) {\n    try {\n      const RESPONSE = await this.furnitureCardService.GETfurnitureCard(this.idPage, jwt);\n      if (RESPONSE.authorMatched === false) {\n        this.router.navigateByUrl('/create/new');\n        return;\n      }\n      this.furnitureData = RESPONSE.furnitureCard;\n      this.createFurnitureComponent.currentColorId = 0;\n    } catch (error) {\n      this.router.navigateByUrl('/create/new');\n      console.error(error);\n    }\n  }\n\n  /**\n   * Преобразует массив URL строк изображений в массив Blob объектов.\n   * @param imagesArray - массив URL строк изображений.\n   * @returns Promise с массивом Blob объектов.\n   */\n  private async transformUrlArrayToBlob(imagesArray: string[]): Promise {\n    const IMAGES_BLOB_ARRAY: Blob[] = await Promise.all(\n      imagesArray.map(async (blobUrl): Promise => {\n        const RESPONSE = await fetch(blobUrl.toString());\n        const BLOB = await RESPONSE.blob();\n        return BLOB;\n      })\n    );\n    return IMAGES_BLOB_ARRAY;\n  }\n\n  /**\n   * Удаляет мебель, 3D модель и связанные изображения с сервера.\n   */\n  protected async deleteFurnitureCard() {\n    const JWT = this.cookieService.getJwt();\n    if (!JWT) return;\n\n    const operations = [\n      () => this.furnitureModelService.DELETEfurnitureModel(JWT, this.idPage),\n      () => this.serverImageControl.DELETEproject(JWT, this.idPage),\n      () => this.furnitureCardService.DELETEfurnitureCard(JWT, this.idPage)\n    ];\n\nfor (const op of operations) {\n  try {\n    await op();\n  } catch (error) {\n  }\n}\n\n    this.router.navigateByUrl('/account');\n  }\n\n  /**\n   * Создаёт новую мебель:\n   * - проверяет валидность,\n   * - создаёт карточку,\n   * - загружает изображения по цветам,\n   * - загружает 3D модель,\n   * - показывает уведомление и перенаправляет пользователя.\n   */\n  protected async createFurnitureCard() {\n    const JWT = this.cookieService.getJwt();\n    if (!this.checkValid('create') || !JWT) return;\n    try {\n      const FURNITURE_DATA = this.createFurnitureComponent.furnitureData;\n      const FURNITURE_ID = (await this.furnitureCardService.POSTcreateFurnitureCard(FURNITURE_DATA, JWT)).furnitureData._id;\n\n\n      FURNITURE_DATA.colors.forEach(async (colorData) => {\n        const imagesBlobArray = await this.transformUrlArrayToBlob(colorData.imagesData.images);\n        const imagesData: imageSliderClientData = {\n          images: imagesBlobArray,\n          idMainImage: colorData.imagesData.idMainImage\n        };\n        await this.serverImageControl.POSTuploadProjectImages(colorData.color, imagesData, JWT, FURNITURE_ID);\n      });\n\n\n      const FURNITURE_MODEL_BLOB = this.createFurnitureComponent.furnitureModelInput.files![0];\n      this.furnitureModelService.POSTuploadFurnitureModel(FURNITURE_MODEL_BLOB, JWT, FURNITURE_ID, 'create');\n\n      this.notification.setSuccess('Мебель добавлена', 5000);\n      this.router.navigateByUrl('/account');\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  /**\n   * Обновляет данные мебели:\n   * - проверяет валидность,\n   * - обновляет карточку мебели,\n   * - обновляет изображения,\n   * - при необходимости загружает новую 3D модель,\n   * - показывает уведомление об успешном обновлении.\n   */\n  protected async updateFurnitureCard() {\n    const JWT = this.cookieService.getJwt();\n    if (!this.checkValid('update') || !JWT) return;\n    try {\n      const FURNITURE_DATA = this.createFurnitureComponent.furnitureData;\n      await this.furnitureCardService.PUTupdateFurnitureCard(FURNITURE_DATA, this.idPage, JWT);\n      this.notification.setSuccess('Карточка обновлена', 2500);\n\n      let changeImagesCounter = 0\n      FURNITURE_DATA.colors.forEach(async (colorData) => {\n        if (colorData.imagesData.images.length === 0) return;\n        const IMAGES_BLOB_ARRAY = await this.transformUrlArrayToBlob(colorData.imagesData.images);\n        const IMAGES_DATA: imageSliderClientData = {\n          images: IMAGES_BLOB_ARRAY,\n          idMainImage: colorData.imagesData.idMainImage\n        };\n        await this.serverImageControl.POSTuploadProjectImages(colorData.color, IMAGES_DATA, JWT, this.idPage);\n        changeImagesCounter++;\n      });\n      if(changeImagesCounter > 0)this.notification.setSuccess('Изображения обновлены', 2500);\n\n      const FURNITURE_MODEL_BLOB = this.createFurnitureComponent.furnitureModelInput.files!;\n      if (FURNITURE_MODEL_BLOB[0]) {\n        this.furnitureModelService.POSTuploadFurnitureModel(FURNITURE_MODEL_BLOB[0], JWT, this.idPage, 'update');\n      }\n\n      \n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  /**\n   * Проверяет валидность данных мебели.\n   * @param typeRequest - тип операции ('create' или 'update').\n   * @param action - если true, то при ошибке вызываются уведомления и открываются необходимые модули.\n   * @returns true, если данные валидны, иначе false.\n   */\n  protected checkValid(typeRequest: 'update' | 'create'): boolean {\n    const { colors, shops, proportions, name } = this.furnitureData;\n    const FURNITURE_MODEL_BLOB = this.createFurnitureComponent.furnitureModelInput.files![0];\n\n    if (colors.length == 0) {\n      this.createFurnitureComponent.openColorModule();\n      return false;\n    }\n    if (name.length == 0) {\n      const nameInput = this.createFurnitureComponentRef.nativeElement.querySelector(\n        '.furnitureTitle'\n      ) as HTMLInputElement;\n\n      if (nameInput) {\n        nameInput.focus();\n      }\n      this.notification.setError('Заполните название мебели', 5000);\n      return false;\n    }\n    if (!proportions.height || !proportions.width || !proportions.length) {\n      this.createFurnitureComponent.openAdditional();\n      this.notification.setError('Заполните параметры', 5000);\n      return false;\n    }\n    if (!FURNITURE_MODEL_BLOB && typeRequest === 'create') {\n      const uploadInput = this.createFurnitureComponentRef.nativeElement.querySelector(\n        '.furnitureModelInput'\n      ) as HTMLInputElement;\n\n      if (uploadInput) {\n        uploadInput.click();\n      }\n      this.notification.setError('Загрузите 3D модель', 5000);\n      return false;\n    }\n    if (shops.length == 0) {\n      this.createFurnitureComponent.openShopsModule();\n      this.notification.setError('Добавьте магазины', 5000);\n      return false;\n    }\n    for (let colorData of colors) {\n      if (colorData.imagesData.images.length == 0 && typeRequest === 'create') {\n        const uploadInput = this.createFurnitureComponentRef.nativeElement.querySelector(\n          '.uploadImagesInput'\n        ) as HTMLInputElement;\n\n        if (uploadInput) {\n          uploadInput.click();\n        }\n        this.notification.setError('Загрузите изображения', 5000);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Очищает данные мебели в компоненте.\n   */\n  protected clearFurnitureCard() {\n    if (this.createFurnitureComponent) this.createFurnitureComponent.currentColorId = undefined;\n    this.furnitureData = {\n      name: '',\n      description: '',\n      colors: [],\n      shops: [],\n      additionalData: {},\n      proportions: {\n        width: null,\n        height: null,\n        length: null\n      }\n    };\n  }\n\n  /**\n   * Возвращает цвет, который планируется удалить (для расчётов и логирования).\n   * @returns цвет (строка) текущего выделенного цвета или undefined.\n   */\n  protected deleteColorCalculate(): string | undefined {\n    if (!this.createFurnitureComponent || this.createFurnitureComponent.currentColorId === undefined) return undefined;\n    return this.createFurnitureComponent.furnitureData.colors[this.createFurnitureComponent.currentColorId].color;\n  }\n\n  /**\n   * Удаляет текущий цвет, если цветов больше одного.\n   * Если цветов один — показывает ошибку.\n   */\n  protected deleteColor() {\n    if (this.createFurnitureComponent.furnitureData.colors.length \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/colorClientData.html":{"url":"interfaces/colorClientData.html","title":"interface - colorClientData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  colorClientData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/furniture-card-control.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Данные цвета на клиенте, включая слайдер изображений\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            color\n                                        \n                                \n                                \n                                        \n                                            imagesData\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        color:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Цвет мебели\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        imagesData\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        imagesData:         imageSliderClientData\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         imageSliderClientData\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Данные для слайдера изображений\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { imageSliderClientData, imageSliderFromServerData } from '../components/image-slider/image-slider.component';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные магазина с ценой и URL\n * @interface shopData\n */\nexport interface shopData {\n  /** Цена мебели */\n  cost: number;\n  /** URL магазина или товара */\n  url: string;\n}\n\n/**\n * Пропорции мебели (ширина, длина, высота)\n * @interface furnitureProportions\n */\nexport interface furnitureProportions {\n  /** Ширина мебели (или null, если не задана) */\n  width: number | null;\n  /** Длина мебели (или null, если не задана) */\n  length: number | null;\n  /** Высота мебели (или null, если не задана) */\n  height: number | null;\n}\n\n/**\n * Данные цвета на клиенте, включая слайдер изображений\n * @interface colorClientData\n */\nexport interface colorClientData {\n  /** Цвет мебели */\n  color: string;\n  /** Данные для слайдера изображений */\n  imagesData: imageSliderClientData;\n}\n\n/**\n * Данные цвета с сервера, включая слайдер изображений\n * @interface colorFromServerData\n */\nexport interface colorFromServerData {\n  /** Цвет мебели */\n  color: string;\n  /** Данные для слайдера изображений */\n  imagesData: imageSliderFromServerData;\n}\n\n/**\n * Дополнительные данные мебели с динамическими ключами\n * @interface additionalData\n */\nexport interface additionalData {\n  /** Категория мебели (опционально) */\n  category?: string;\n  /** Другие динамические свойства */\n  [key: string]: string | undefined;\n}\n\n/**\n * Базовые данные мебели, общие для клиента и сервера\n * @interface furnitureBaseData\n */\ninterface furnitureBaseData {\n  /** Название мебели */\n  name: string;\n  /** Описание мебели */\n  description: string;\n  /** Пропорции мебели */\n  proportions: furnitureProportions;\n  /** Список магазинов с ценами и URL */\n  shops: shopData[];\n  /** Дополнительные данные */\n  additionalData: additionalData;\n}\n\n/**\n * Данные мебели на клиенте с цветами\n * @interface furnitureClientData\n * @extends furnitureBaseData\n */\nexport interface furnitureClientData extends furnitureBaseData {\n  /** Список цветов с данными для клиента */\n  colors: colorClientData[];\n}\n\n/**\n * Данные мебели с сервера с цветами\n * @interface furnitureFromServerData\n * @extends furnitureBaseData\n */\nexport interface furnitureFromServerData extends furnitureBaseData {\n  /** Список цветов с данными с сервера */\n  colors: colorFromServerData[];\n}\n\n/**\n * Сервис для управления карточками мебели\n * @class FurnitureCardControlService\n * @injectable\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class FurnitureCardControlService {\n\n  /** Базовый URL для запросов к API мебели */\n  private baseServiceUrl = baseUrl + 'furniture/card';\n\n  /**\n   * Конструктор сервиса\n   * @param httpModule HTTP клиент для запросов\n   */\n  constructor(private httpModule: HttpClient) { }\n\n  /**\n   * Получение карточки мебели по ID и опциональному JWT токену\n   * @param furnitureCardId - ID карточки мебели\n   * @param [jwt] - JWT токен пользователя (опционально)\n   * @returns Promise с объектом, содержащим данные карточки и флаг совпадения автора\n   * @throws Ошибка при некорректной структуре ответа или при ошибках запроса\n   */\n  async GETfurnitureCard(\n    furnitureCardId: string,\n    jwt?: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams().set('furnitureCardId', furnitureCardId);\n\n    if (jwt !== undefined) {\n      HTTP_PARAMS = HTTP_PARAMS.set('jwt', jwt);\n    }\n\n    try {\n      const response = await firstValueFrom(\n        this.httpModule.get(this.baseServiceUrl, { params: HTTP_PARAMS })\n      ) as {\n        furnitureCard: furnitureFromServerData;\n        authorMatched: boolean;\n      };\n\n      if (!response?.furnitureCard) {\n        throw new Error('Invalid response structure: furnitureCard missing');\n      }\n\n      // Добавляем полный URL к изображениям\n      const transformedFurnitureCard = {\n        ...response.furnitureCard,\n        colors: response.furnitureCard.colors.map(colorData => ({\n          color: colorData.color,\n          imagesData: {\n            idMainImage: colorData.imagesData.idMainImage,\n            images: colorData.imagesData.images.map(url => baseUrl + url)\n          }\n        }))\n      };\n\n      return {\n        furnitureCard: transformedFurnitureCard,\n        authorMatched: response.authorMatched\n      };\n\n    } catch (error) {\n      console.error('Error in GETfurnitureCard:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Создание новой карточки мебели\n   * @param furnitureData - Данные новой карточки мебели\n   * @param jwt - JWT токен пользователя\n   * @returns Promise с данными созданной карточки, включая её ID\n   */\n  POSTcreateFurnitureCard(\n    furnitureData: furnitureFromServerData,\n    jwt: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams().set('jwt', jwt);\n    return firstValueFrom(\n      this.httpModule.post(this.baseServiceUrl, furnitureData, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n\n  /**\n   * Обновление существующей карточки мебели\n   * @param furnitureCardUpdateData - Обновленные данные карточки мебели\n   * @param furnitureCardId - ID карточки мебели для обновления\n   * @param jwt - JWT токен пользователя\n   * @returns Promise с сообщением результата обновления\n   */\n  PUTupdateFurnitureCard(\n    furnitureCardUpdateData: furnitureFromServerData,\n    furnitureCardId: string,\n    jwt: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId);\n    return firstValueFrom(\n      this.httpModule.put(this.baseServiceUrl, furnitureCardUpdateData, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n\n  /**\n   * Удаление карточки мебели по ID и JWT токену\n   * @param jwt - JWT токен пользователя\n   * @param furnitureCardId - ID карточки мебели для удаления\n   * @returns Promise с сообщением результата удаления\n   */\n  DELETEfurnitureCard(jwt: string, furnitureCardId: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId);\n    return firstValueFrom(\n      this.httpModule.delete(this.baseServiceUrl, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/colorFromServerData.html":{"url":"interfaces/colorFromServerData.html","title":"interface - colorFromServerData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  colorFromServerData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/furniture-card-control.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Данные цвета с сервера, включая слайдер изображений\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            color\n                                        \n                                \n                                \n                                        \n                                            imagesData\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        color:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Цвет мебели\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        imagesData\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        imagesData:         imageSliderFromServerData\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         imageSliderFromServerData\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Данные для слайдера изображений\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { imageSliderClientData, imageSliderFromServerData } from '../components/image-slider/image-slider.component';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные магазина с ценой и URL\n * @interface shopData\n */\nexport interface shopData {\n  /** Цена мебели */\n  cost: number;\n  /** URL магазина или товара */\n  url: string;\n}\n\n/**\n * Пропорции мебели (ширина, длина, высота)\n * @interface furnitureProportions\n */\nexport interface furnitureProportions {\n  /** Ширина мебели (или null, если не задана) */\n  width: number | null;\n  /** Длина мебели (или null, если не задана) */\n  length: number | null;\n  /** Высота мебели (или null, если не задана) */\n  height: number | null;\n}\n\n/**\n * Данные цвета на клиенте, включая слайдер изображений\n * @interface colorClientData\n */\nexport interface colorClientData {\n  /** Цвет мебели */\n  color: string;\n  /** Данные для слайдера изображений */\n  imagesData: imageSliderClientData;\n}\n\n/**\n * Данные цвета с сервера, включая слайдер изображений\n * @interface colorFromServerData\n */\nexport interface colorFromServerData {\n  /** Цвет мебели */\n  color: string;\n  /** Данные для слайдера изображений */\n  imagesData: imageSliderFromServerData;\n}\n\n/**\n * Дополнительные данные мебели с динамическими ключами\n * @interface additionalData\n */\nexport interface additionalData {\n  /** Категория мебели (опционально) */\n  category?: string;\n  /** Другие динамические свойства */\n  [key: string]: string | undefined;\n}\n\n/**\n * Базовые данные мебели, общие для клиента и сервера\n * @interface furnitureBaseData\n */\ninterface furnitureBaseData {\n  /** Название мебели */\n  name: string;\n  /** Описание мебели */\n  description: string;\n  /** Пропорции мебели */\n  proportions: furnitureProportions;\n  /** Список магазинов с ценами и URL */\n  shops: shopData[];\n  /** Дополнительные данные */\n  additionalData: additionalData;\n}\n\n/**\n * Данные мебели на клиенте с цветами\n * @interface furnitureClientData\n * @extends furnitureBaseData\n */\nexport interface furnitureClientData extends furnitureBaseData {\n  /** Список цветов с данными для клиента */\n  colors: colorClientData[];\n}\n\n/**\n * Данные мебели с сервера с цветами\n * @interface furnitureFromServerData\n * @extends furnitureBaseData\n */\nexport interface furnitureFromServerData extends furnitureBaseData {\n  /** Список цветов с данными с сервера */\n  colors: colorFromServerData[];\n}\n\n/**\n * Сервис для управления карточками мебели\n * @class FurnitureCardControlService\n * @injectable\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class FurnitureCardControlService {\n\n  /** Базовый URL для запросов к API мебели */\n  private baseServiceUrl = baseUrl + 'furniture/card';\n\n  /**\n   * Конструктор сервиса\n   * @param httpModule HTTP клиент для запросов\n   */\n  constructor(private httpModule: HttpClient) { }\n\n  /**\n   * Получение карточки мебели по ID и опциональному JWT токену\n   * @param furnitureCardId - ID карточки мебели\n   * @param [jwt] - JWT токен пользователя (опционально)\n   * @returns Promise с объектом, содержащим данные карточки и флаг совпадения автора\n   * @throws Ошибка при некорректной структуре ответа или при ошибках запроса\n   */\n  async GETfurnitureCard(\n    furnitureCardId: string,\n    jwt?: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams().set('furnitureCardId', furnitureCardId);\n\n    if (jwt !== undefined) {\n      HTTP_PARAMS = HTTP_PARAMS.set('jwt', jwt);\n    }\n\n    try {\n      const response = await firstValueFrom(\n        this.httpModule.get(this.baseServiceUrl, { params: HTTP_PARAMS })\n      ) as {\n        furnitureCard: furnitureFromServerData;\n        authorMatched: boolean;\n      };\n\n      if (!response?.furnitureCard) {\n        throw new Error('Invalid response structure: furnitureCard missing');\n      }\n\n      // Добавляем полный URL к изображениям\n      const transformedFurnitureCard = {\n        ...response.furnitureCard,\n        colors: response.furnitureCard.colors.map(colorData => ({\n          color: colorData.color,\n          imagesData: {\n            idMainImage: colorData.imagesData.idMainImage,\n            images: colorData.imagesData.images.map(url => baseUrl + url)\n          }\n        }))\n      };\n\n      return {\n        furnitureCard: transformedFurnitureCard,\n        authorMatched: response.authorMatched\n      };\n\n    } catch (error) {\n      console.error('Error in GETfurnitureCard:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Создание новой карточки мебели\n   * @param furnitureData - Данные новой карточки мебели\n   * @param jwt - JWT токен пользователя\n   * @returns Promise с данными созданной карточки, включая её ID\n   */\n  POSTcreateFurnitureCard(\n    furnitureData: furnitureFromServerData,\n    jwt: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams().set('jwt', jwt);\n    return firstValueFrom(\n      this.httpModule.post(this.baseServiceUrl, furnitureData, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n\n  /**\n   * Обновление существующей карточки мебели\n   * @param furnitureCardUpdateData - Обновленные данные карточки мебели\n   * @param furnitureCardId - ID карточки мебели для обновления\n   * @param jwt - JWT токен пользователя\n   * @returns Promise с сообщением результата обновления\n   */\n  PUTupdateFurnitureCard(\n    furnitureCardUpdateData: furnitureFromServerData,\n    furnitureCardId: string,\n    jwt: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId);\n    return firstValueFrom(\n      this.httpModule.put(this.baseServiceUrl, furnitureCardUpdateData, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n\n  /**\n   * Удаление карточки мебели по ID и JWT токену\n   * @param jwt - JWT токен пользователя\n   * @param furnitureCardId - ID карточки мебели для удаления\n   * @returns Promise с сообщением результата удаления\n   */\n  DELETEfurnitureCard(jwt: string, furnitureCardId: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId);\n    return firstValueFrom(\n      this.httpModule.delete(this.baseServiceUrl, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.component.ts\n            \n            component\n            AppComponent\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/app.config.server.ts\n            \n            variable\n            config\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app.config.server.ts\n            \n            variable\n            serverConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app.config.ts\n            \n            variable\n            appConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/account-page/account-page.component.ts\n            \n            component\n            AccountPageComponent\n            \n                94 %\n                (16/17)\n            \n        \n        \n            \n                \n                src/components/account-page/account-page.component.ts\n            \n            interface\n            editForm\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/components/create-furnitre/create-furniture.component.ts\n            \n            component\n            CreateFurnitureComponent\n            \n                97 %\n                (36/37)\n            \n        \n        \n            \n                \n                src/components/create-furniture-page/create-furniture-page.component.ts\n            \n            component\n            CreateFurniturePageComponent\n            \n                84 %\n                (16/19)\n            \n        \n        \n            \n                \n                src/components/create-furniture-page/create-furniture-page.component.ts\n            \n            interface\n            clientProportions\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/components/finder/finder.component.ts\n            \n            component\n            FinderComponent\n            \n                93 %\n                (15/16)\n            \n        \n        \n            \n                \n                src/components/finder/finder.component.ts\n            \n            interface\n            foundFurniture\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/components/image-slider/image-slider.component.ts\n            \n            component\n            ImageSliderComponent\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/components/image-slider/image-slider.component.ts\n            \n            interface\n            imageSliderClientData\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/components/image-slider/image-slider.component.ts\n            \n            interface\n            imageSliderFromServerData\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/components/login-page/login-page.component.ts\n            \n            component\n            LoginPageComponent\n            \n                96 %\n                (25/26)\n            \n        \n        \n            \n                \n                src/components/main-page/main-page.component.ts\n            \n            component\n            MainPageComponent\n            \n                92 %\n                (13/14)\n            \n        \n        \n            \n                \n                src/components/navigation-panel/navigation-panel.component.ts\n            \n            component\n            NavigationPanelComponent\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/components/notification/notification.component.ts\n            \n            component\n            NotificationComponent\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/components/plan-house-page/plan-house-page.component.ts\n            \n            component\n            PlanHousePageComponent\n            \n                91 %\n                (21/23)\n            \n        \n        \n            \n                \n                src/components/plan-house/plan-house.component.ts\n            \n            component\n            PlanHouseComponent\n            \n                43 %\n                (32/74)\n            \n        \n        \n            \n                \n                src/components/plan-house/plan-house.component.ts\n            \n            interface\n            roomSpanSettings\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                        src/components/scene/loaders/index.ts\n            \n            function\n            loadModel\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/components/scene/loaders/loaders/fbx.loader.ts\n            \n            function\n            loadFBXModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/components/scene/loaders/loaders/gltf-glb.loader.ts\n            \n            function\n            loadGLTFModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/components/scene/loaders/loaders/obj.loader.ts\n            \n            function\n            loadOBJModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/scene/scene.component.ts\n            \n            component\n            SceneComponent\n            \n                78 %\n                (39/50)\n            \n        \n        \n            \n                \n                src/components/scene/scene.component.ts\n            \n            interface\n            modelInterface\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/components/scene/scene.component.ts\n            \n            interface\n            objectLoadInterface\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/components/scene/scene.component.ts\n            \n            interface\n            objectSceneInterface\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/components/scene/scene.component.ts\n            \n            interface\n            roomData\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/components/shop-page/shop-page.component.ts\n            \n            component\n            ShopPageComponent\n            \n                95 %\n                (38/40)\n            \n        \n        \n            \n                \n                src/components/upload-overlay/upload-overlay.component.ts\n            \n            component\n            UploadOverlayComponent\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/components/view-furniture/view-furniture.component.ts\n            \n            component\n            ViewFurnitureComponent\n            \n                44 %\n                (4/9)\n            \n        \n        \n            \n                \n                src/directives/auto-height.directive.ts\n            \n            directive\n            AutoHeightDirective\n            \n                66 %\n                (4/6)\n            \n        \n        \n            \n                \n                src/interceptors/http-error.interceptor.ts\n            \n            interceptor\n            HttpErrorInterceptor\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                        src/main.server.ts\n            \n            variable\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/pipes/cost-format.pipe.ts\n            \n            pipe\n            CostFormatPipe\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/services/account-cookie.service.ts\n            \n            injectable\n            AccountCookieService\n            \n                81 %\n                (9/11)\n            \n        \n        \n            \n                \n                src/services/account.service.ts\n            \n            injectable\n            AccountService\n            \n                77 %\n                (7/9)\n            \n        \n        \n            \n                \n                src/services/account.service.ts\n            \n            interface\n            accountFullData\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/services/account.service.ts\n            \n            interface\n            changeAccountDataEmail\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/services/account.service.ts\n            \n            interface\n            changeSecondaryData\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/services/account.service.ts\n            \n            interface\n            createEmailAccountData\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/services/account.service.ts\n            \n            interface\n            furnitureAccountData\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                        src/services/account.service.ts\n            \n            function\n            isEmailAccount\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/services/account.service.ts\n            \n            type alias\n            accountType\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/services/account.service.ts\n            \n            type alias\n            changeAccountData\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/services/account.service.ts\n            \n            type alias\n            createAccountData\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/services/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                71 %\n                (5/7)\n            \n        \n        \n            \n                \n                src/services/auth.service.ts\n            \n            interface\n            emailAuthData\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/services/auth.service.ts\n            \n            interface\n            googleAuthData\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                        src/services/auth.service.ts\n            \n            type alias\n            authData\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/services/category.service.ts\n            \n            injectable\n            CategoryService\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                src/services/category.service.ts\n            \n            interface\n            baseFilter\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/services/category.service.ts\n            \n            interface\n            categoryData\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/services/category.service.ts\n            \n            interface\n            option\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/services/category.service.ts\n            \n            interface\n            rangeFilter\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/services/category.service.ts\n            \n            interface\n            selectFilter\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                        src/services/category.service.ts\n            \n            type alias\n            filter\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/services/client-image-control.service.ts\n            \n            injectable\n            ClientImageControlService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/services/finder.service.ts\n            \n            injectable\n            FinderService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/services/furniture-card-control.service.ts\n            \n            injectable\n            FurnitureCardControlService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/services/furniture-card-control.service.ts\n            \n            interface\n            additionalData\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/services/furniture-card-control.service.ts\n            \n            interface\n            colorClientData\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/services/furniture-card-control.service.ts\n            \n            interface\n            colorFromServerData\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/services/furniture-card-control.service.ts\n            \n            interface\n            furnitureBaseData\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/services/furniture-card-control.service.ts\n            \n            interface\n            furnitureClientData\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/services/furniture-card-control.service.ts\n            \n            interface\n            furnitureFromServerData\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/services/furniture-card-control.service.ts\n            \n            interface\n            furnitureProportions\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/services/furniture-card-control.service.ts\n            \n            interface\n            shopData\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/services/furniture-model-control.service.ts\n            \n            injectable\n            FurnitureModelControlService\n            \n                66 %\n                (4/6)\n            \n        \n        \n            \n                \n                        src/services/index.ts\n            \n            variable\n            baseClientUrl\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/services/index.ts\n            \n            variable\n            baseUrl\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/services/notification.service.ts\n            \n            injectable\n            NotificationService\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/services/project.service.ts\n            \n            injectable\n            ProjectService\n            \n                87 %\n                (7/8)\n            \n        \n        \n            \n                \n                src/services/project.service.ts\n            \n            interface\n            projectInformation\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/services/project.service.ts\n            \n            interface\n            projectServerInformation\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/services/project.service.ts\n            \n            interface\n            roomData\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/services/report.service.ts\n            \n            injectable\n            ReportService\n            \n                87 %\n                (7/8)\n            \n        \n        \n            \n                \n                src/services/report.service.ts\n            \n            interface\n            reportResponse\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/services/server-image-control.service.ts\n            \n            injectable\n            ServerImageControlService\n            \n                70 %\n                (7/10)\n            \n        \n        \n            \n                \n                src/services/shop.service.ts\n            \n            injectable\n            ShopService\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/services/shop.service.ts\n            \n            interface\n            clientFilters\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/services/shop.service.ts\n            \n            interface\n            furnitureShopData\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/services/shop.service.ts\n            \n            interface\n            optionRangeQueryData\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/services/shop.service.ts\n            \n            interface\n            optionSelectQueryData\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/services/shop.service.ts\n            \n            interface\n            queryData\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/services/upload.service.ts\n            \n            injectable\n            UploadService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/services/upload.service.ts\n            \n            interface\n            MyXhrUploadOptions\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/services/upload.service.ts\n            \n            interface\n            UploadEntry\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/services/upload.service.ts\n            \n            type alias\n            uploadStatus\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/services/upload.service.ts\n            \n            type alias\n            uploadType\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/usable/reusable-functions.used.ts\n            \n            function\n            checkDesktop\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/createEmailAccountData.html":{"url":"interfaces/createEmailAccountData.html","title":"interface - createEmailAccountData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  createEmailAccountData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/account.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Данные для создания аккаунта с email\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            accountType\n                                        \n                                \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            nickname\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accountType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accountType:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                            \n                                \n                                    Тип аккаунта (email)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Email\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nickname\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nickname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Никнейм\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Пароль\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { projectInformation, projectServerInformation } from './project.service';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { AccountCookieService } from './account-cookie.service';\nimport { baseUrl } from '.';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные для изменения аккаунта с email\n */\nexport interface changeAccountDataEmail {\n  /** JWT токен */\n  jwt: string;\n  /** Тип аккаунта (email) */\n  accountType: 'email';\n  /** Пароль пользователя */\n  password: string;\n}\n\n/**\n * Полные данные аккаунта пользователя\n */\nexport interface accountFullData {\n  /** URL аватара */\n  avatarUrl: string;\n  /** Никнейм пользователя */\n  nickname: string;\n  /** Email пользователя */\n  email: string;\n  /** Массив проектов пользователя */\n  projects: projectInformation[];\n  /** Массив мебели, связанной с аккаунтом */\n  furnitures: furnitureAccountData[];\n  /** Пароль пользователя (необязательный) */\n  password?: string;\n}\n\n/**\n * Данные для изменения вторичных данных аккаунта\n */\nexport interface changeSecondaryData {\n  /** JWT токен */\n  jwt: string;\n  /** Новый никнейм */\n  nickname: string;\n}\n\n/**\n * Данные по мебели, связанной с аккаунтом\n */\nexport interface furnitureAccountData {\n  /** Идентификатор мебели */\n  _id: string;\n  /** Название мебели */\n  name: string;\n  /** URL превью изображения мебели */\n  previewUrl: string;\n}\n\n/** Тип аккаунта */\nexport type accountType = 'google' | 'email';\n\n/** Тип данных для изменения аккаунта (на данный момент только email) */\nexport type changeAccountData = changeAccountDataEmail;\n\n/**\n * Данные для создания аккаунта с email\n */\ninterface createEmailAccountData {\n  /** Email */\n  email: string;\n  /** Пароль */\n  password: string;\n  /** Никнейм */\n  nickname: string;\n  /** Тип аккаунта (email) */\n  accountType: 'email';\n}\n\n/** Тип данных для создания аккаунта */\nexport type createAccountData = createEmailAccountData;\n\n/**\n * Функция-помощник для проверки, что аккаунт с типом email\n * @param account Объект аккаунта\n * @returns true, если аккаунт с типом email\n */\nexport function isEmailAccount(account: { accountType: accountType }): account is changeAccountDataEmail {\n  return account.accountType === 'email';\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccountService {\n  /** Базовый URL для аккаунт-сервисов */\n  private baseServiceUrl = baseUrl + 'account';\n\n  constructor(\n    private httpModule: HttpClient,\n    private accountCookieService: AccountCookieService\n  ) { }\n\n  /**\n   * Создание нового пользователя\n   * @param createAccountData Основная информация о пользователе (никнейм, email, пароль)\n   * @returns Promise с сообщением об успешном создании пользователя\n   */\n  POSTcreateAccount(createAccountData: createAccountData) {\n    let HTTP_PARAMS = new HttpParams()\n      .set('accountType', createAccountData.accountType)\n      .set('nickname', createAccountData.nickname);\n\n    if (isEmailAccount(createAccountData)) {\n      HTTP_PARAMS = HTTP_PARAMS\n        .set('email', createAccountData.email)\n        .set('password', createAccountData.password);\n    }\n\n    return firstValueFrom(this.httpModule.post(this.baseServiceUrl, HTTP_PARAMS)) as Promise;\n  }\n\n  /**\n   * Удаление JWT токена пользователя\n   * @param jwt JWT токен\n   * @returns Promise с сообщением об успешном удалении токена\n   */\n  DELETEaccountJwt(jwt: string) {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt);\n    return firstValueFrom(this.httpModule.delete(this.baseServiceUrl + '/jwt/delete', { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Обновление вторичных данных аккаунта (например, никнейм)\n   * @param changeData Данные для изменения\n   * @returns Promise с сообщением об успешном обновлении\n   */\n  PUTupdateSecondaryAccountData(changeData: changeSecondaryData) {\n    const HTTP_PARAMS = new HttpParams({\n      fromObject: {\n        nickname: changeData.nickname,\n        jwt: changeData.jwt\n      }\n    });\n    return firstValueFrom(this.httpModule.put(this.baseServiceUrl, null, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Удаление аккаунта пользователя\n   * @param jwt JWT токен\n   * @returns Promise с сообщением об успешном удалении пользователя\n   */\n  DELETEaccount(jwt: string) {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt);\n    return firstValueFrom(this.httpModule.delete(this.baseServiceUrl, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Получение полной информации об аккаунте пользователя\n   * @param jwt JWT токен\n   * @returns Promise с данными аккаунта (включая проекты и мебель)\n   */\n  async GETaccount(jwt: string) {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt);\n    try {\n      let { accountData } = await firstValueFrom(this.httpModule.get(this.baseServiceUrl, { params: HTTP_PARAMS })) as { accountData: accountFullData & { projects: projectServerInformation[] } };\n      accountData.furnitures = accountData.furnitures.map(furnitureData => {\n        return {\n          ...furnitureData,\n          previewUrl: baseUrl + furnitureData.previewUrl\n        };\n      });\n      return { accountData: accountData };\n    } catch (error) {\n      console.error('Error in GETfurnitureCard:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Проверка наличия JWT токена в куках\n   * @returns true, если JWT токен найден, иначе false\n   */\n  checkJwt(): boolean {\n    return this.accountCookieService.getJwt() ? true : false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^19.2.9\n        \n            @angular/common : ^19.2.9\n        \n            @angular/core : ^19.2.9\n        \n            @angular/forms : ^19.2.9\n        \n            @angular/platform-browser : ^19.2.9\n        \n            @angular/router : ^19.2.9\n        \n            @angular/service-worker : ^19.2.9\n        \n            @taiga-ui/cdk : ^4.36.0\n        \n            @taiga-ui/core : ^4.36.0\n        \n            @taiga-ui/event-plugins : ^4.0.2\n        \n            @taiga-ui/kit : ^4.37.0\n        \n            @taiga-ui/legacy : ^4.37.0\n        \n            @uppy/angular : ^0.8.0\n        \n            @uppy/xhr-upload : ^4.3.3\n        \n            compressorjs : ^1.2.1\n        \n            html2canvas : ^1.4.1\n        \n            html2pdf.js : ^0.10.3\n        \n            idb : ^8.0.3\n        \n            jspdf : ^3.0.1\n        \n            lodash : ^4.17.21\n        \n            ngx-clipboard : ^16.0.0\n        \n            ngx-cookie-service : ^19.1.2\n        \n            ngx-spinner : ^19.0.0\n        \n            puppeteer : ^24.8.2\n        \n            rxjs : ~7.8.2\n        \n            three : ^0.176.0\n        \n            workbox-core : ^7.3.0\n        \n            workbox-routing : ^7.3.0\n        \n            workbox-strategies : ^7.3.0\n        \n            zone.js : ~0.15.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/editForm.html":{"url":"interfaces/editForm.html","title":"interface - editForm","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  editForm\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/account-page/account-page.component.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс для формы редактирования аккаунта\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            nickname\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            password\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        nickname\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nickname:     FormControl\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     FormControl\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Контрол для редактирования никнейма\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:     FormControl\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     FormControl\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Контрол для редактирования пароля (необязательный)\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { NavigationPanelComponent } from '../navigation-panel/navigation-panel.component';\nimport { CommonModule, NgFor, NgIf } from '@angular/common';\nimport { accountFullData, AccountService, accountType } from '../../services/account.service';\nimport { FormGroup, ReactiveFormsModule, FormControl, Validators, AbstractControl } from '@angular/forms';\nimport { Router, RouterLink } from '@angular/router';\nimport { AccountCookieService } from '../../services/account-cookie.service';\nimport { ServerImageControlService } from '../../services/server-image-control.service';\nimport { ClientImageControlService } from '../../services/client-image-control.service';\nimport { AuthService } from '../../services/auth.service';\nimport { NotificationService } from '../../services/notification.service';\n/**\n * Интерфейс для формы редактирования аккаунта\n */\ninterface editForm {\n  /** Контрол для редактирования никнейма */\n  nickname: FormControl;\n  /** Контрол для редактирования пароля (необязательный) */\n  password?: FormControl;\n}\n\n/**\n * Компонент страницы аккаунта пользователя\n */\n@Component({\n  selector: 'app-account-page',\n  standalone: true,\n  imports: [NavigationPanelComponent, NgFor, NgIf, ReactiveFormsModule, CommonModule, RouterLink],\n  templateUrl: './account-page.component.html',\n  styleUrls: ['./account-page.component.scss']\n})\nexport class AccountPageComponent implements OnInit {\n  /**\n   * Данные аккаунта пользователя\n   */\n  protected accountData?: accountFullData;\n\n  /**\n   * Флаг открытия формы редактирования\n   */\n  protected isEditFormOpen = false;\n\n  /**\n   * Группа контролов формы редактирования\n   */\n  protected editForm!: FormGroup;\n\n  constructor(\n    private accountService: AccountService,\n    private router: Router,\n    private accountCookieService: AccountCookieService,\n    private imageServerControlService: ServerImageControlService,\n    private imageClientControlService: ClientImageControlService,\n    private authService: AuthService,\n    private notification: NotificationService\n  ) { }\n\n  /**\n   * Инициализация компонента\n   * Проверяет авторизацию и загружает данные пользователя,\n   * инициализирует форму редактирования\n   */\n  ngOnInit(): void {\n    this.checkAuthAndLoadData();\n    this.initEditForm();\n  }\n\n  /**\n   * Обновляет вторичные данные аккаунта (например, никнейм)\n   * @param jwt JWT токен пользователя\n   */\n  private async updateSecondaryAccountData(jwt: string) {\n    if (!this.accountData) return;\n\n    const CHANGE_DATA = {\n      jwt: jwt,\n      nickname: this.editForm.value.nickname!\n    };\n\n    try {\n      await this.accountService.PUTupdateSecondaryAccountData(CHANGE_DATA);\n      this.accountData.nickname = this.editForm.value.nickname!;\n      this.notification.setSuccess('Данные обновлены', 5000);\n    } catch (error) {\n      this.notification.setError('Ошибка обновления никнейма', 5000);\n      console.error(error);\n      throw error;\n    }\n  }\n\n  /**\n   * Сохраняет изменения данных аккаунта\n   */\n  protected async saveChanges() {\n    if (!this.accountData || !this.editForm.valid) {\n      this.notification.setError('Некорректные данные формы', 5000);\n      return;\n    }\n\n    const JWT = this.accountCookieService.getJwt();\n    const ACCOUNT_TYPE = this.accountCookieService.getUserType() as accountType;\n    if (!JWT || !ACCOUNT_TYPE) {\n      this.notification.setError('Ошибка аутентификации', 5000);\n      return;\n    }\n\n    try {\n      await this.updateSecondaryAccountData(JWT);\n      await this.updateBaseDataIfNeeded(JWT, ACCOUNT_TYPE);\n      this.closeEditForm();\n      this.notification.setSuccess('Данные обновлены', 5000);\n    } catch (error) {\n      this.notification.setError('Ошибка сохранения данных', 5000);\n      console.error(error);\n    }\n  }\n\n  /**\n   * Обновляет основные данные аккаунта, если это необходимо\n   * @param jwt JWT токен пользователя\n   * @param accountType Тип аккаунта ('email' или 'google')\n   */\n  private async updateBaseDataIfNeeded(jwt: string, accountType: accountType) {\n    if (this.accountData?.password === undefined || !this.editForm.value.password || accountType === 'google') return;\n\n    const CHANGE_DATA = {\n      jwt: jwt,\n      accountType: accountType,\n      password: this.editForm.value.password\n    };\n\n    try {\n      await this.authService.PUTupdateBaseData(CHANGE_DATA);\n      this.accountData.password = this.editForm.value.password;\n    } catch (error) {\n      this.notification.setError('Ошибка обновления пароля', 5000);\n      console.error(error);\n      throw error;\n    }\n  }\n\n  /**\n   * Загружает данные пользователя с сервера по JWT\n   * @param jwt JWT токен пользователя\n   */\n  private async loadUserData(jwt: string) {\n    try {\n      const ACCOUNT_DATA = (await this.accountService.GETaccount(jwt)).accountData;\n      this.accountData = {\n        email: ACCOUNT_DATA.email,\n        nickname: ACCOUNT_DATA.nickname,\n        projects: ACCOUNT_DATA.projects,\n        avatarUrl: this.imageServerControlService.GETaccountAvatar(jwt),\n        furnitures: ACCOUNT_DATA.furnitures\n      };\n\n      if (ACCOUNT_DATA.password !== undefined) {\n        this.accountData.password = ACCOUNT_DATA.password;\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  /**\n   * Обработка загрузки аватара пользователя\n   * @param event Событие выбора файла\n   */\n  protected async uploadAvatar(event: Event) {\n    const JWT = this.accountCookieService.getJwt();\n    if (!JWT || !this.accountData) {\n      return;\n    }\n\n    const TARGET = event.target as HTMLInputElement;\n    const FILE = TARGET.files?.[0];\n    if (!FILE) {\n      this.notification.setError('Файл не выбран', 5000);\n      return;\n    }\n\n    try {\n      const COMPRESSED_IMAGE = await this.imageClientControlService.compressImage(FILE);\n      if (!COMPRESSED_IMAGE) {\n        this.notification.setError('Ошибка сжатия изображения', 5000);\n        return;\n      }\n\n      await this.imageServerControlService.POSTuploadUserAvatar(COMPRESSED_IMAGE, JWT);\n      this.accountData.avatarUrl = URL.createObjectURL(COMPRESSED_IMAGE);\n      this.notification.setSuccess('Аватар обновлен', 5000);\n    } catch (error) {\n      this.notification.setError('Ошибка загрузки аватара', 5000);\n      console.error(error);\n    }\n  }\n\n  /**\n   * Проверяет авторизацию пользователя и загружает данные аккаунта\n   */\n  private checkAuthAndLoadData() {\n    const JWT = this.accountCookieService.getJwt();\n    if (!JWT) {\n      this.router.navigateByUrl('/login');\n      return;\n    }\n    this.loadUserData(JWT);\n  }\n\n  /**\n   * Инициализирует форму редактирования с валидаторами\n   */\n  private initEditForm() {\n    this.editForm = new FormGroup({\n      nickname: new FormControl(this.accountData?.nickname, [\n        Validators.required,\n        Validators.minLength(3),\n        Validators.maxLength(30)\n      ])\n    });\n\n    if (this.accountCookieService.getUserType() === 'email') {\n      this.editForm.addControl('password', new FormControl(this.accountData?.password, [\n        Validators.required,\n        Validators.minLength(6)\n      ]));\n    }\n  }\n\n  /**\n   * Открывает форму редактирования\n   */\n  protected openEditForm() {\n    if (!this.accountData) {\n      this.notification.setError('Данные пользователя не загружены', 5000);\n      return;\n    }\n    this.isEditFormOpen = true;\n  }\n\n  /**\n   * Закрывает форму редактирования и сбрасывает изменения\n   */\n  protected closeEditForm() {\n    this.isEditFormOpen = false;\n    if (this.accountData) {\n      // Важно: здесь не происходит обновления значений, а скорее попытка сравнить (исправить можно)\n      this.accountData.nickname != this.editForm.value.nickname;\n      if (this.accountData.password) {\n        this.accountData.password != this.editForm.value.password;\n      }\n    }\n    this.editForm.reset();\n  }\n\n  /**\n   * Открывает страницу проекта по id\n   * @param projectId ID проекта\n   */\n  protected openProject(projectId: number) {\n    this.router.navigateByUrl('/plan/' + projectId);\n  }\n\n  /**\n   * Выход из аккаунта:\n   * удаляет JWT и тип аккаунта из куков, вызывает удаление JWT на сервере,\n   * и перенаправляет на главную страницу\n   */\n  protected logout() {\n    const JWT = this.accountCookieService.getJwt();\n    if (JWT) this.accountService.DELETEaccountJwt(JWT);\n    this.accountCookieService.deleteJwt();\n    this.accountCookieService.deleteAccountType();\n    this.router.navigateByUrl('/');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/emailAuthData.html":{"url":"interfaces/emailAuthData.html","title":"interface - emailAuthData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  emailAuthData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Данные для аутентификации через email\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            accountType\n                                        \n                                \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accountType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accountType:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                            \n                                \n                                    Тип аккаунта - 'email'\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Email пользователя\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Пароль пользователя\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { accountType, changeAccountDataEmail, changeAccountData } from './account.service';\nimport { baseUrl } from '.';\nimport { isEmailAccount } from './account.service';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные для аутентификации через email\n */\nexport interface emailAuthData {\n  /** Email пользователя */\n  email: string;\n  /** Пароль пользователя */\n  password: string;\n  /** Тип аккаунта - 'email' */\n  accountType: 'email';\n}\n\n/**\n * Данные для аутентификации через Google\n */\nexport interface googleAuthData {\n  /** Тип аккаунта - 'google' */\n  accountType: 'google';\n}\n\n/**\n * Объединённый тип данных для аутентификации\n */\nexport type authData = googleAuthData | emailAuthData;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  /** Базовый URL для auth-роутов */\n  private baseServiceUrl = baseUrl + 'auth/';\n\n  constructor(\n    private httpModule: HttpClient\n  ) { }\n\n  /**\n   * Создание длинного JWT токена\n   * @param authData Данные для входа (email+пароль или google)\n   * @returns Promise с JWT токеном\n   */\n  POSTcreateLongJWT(authData: authData) {\n    let HTTP_PARAMS = new HttpParams()\n      .set('accountType', authData.accountType);\n\n    if (isEmailAccount(authData)) {\n      HTTP_PARAMS = HTTP_PARAMS\n        .set('email', authData.email)\n        .set('password', authData.password);\n    }\n\n    return firstValueFrom(this.httpModule.post(this.baseServiceUrl + 'jwt/long', HTTP_PARAMS)) as Promise;\n  }\n\n  /**\n   * Создание короткого (временного) JWT токена\n   * @param email Email пользователя\n   * @returns Promise с временным JWT токеном\n   */\n  POSTcreateShortJWT(email: string) {\n    let HTTP_PARAMS = new HttpParams()\n      .set('email', email);\n\n    return firstValueFrom(this.httpModule.post(this.baseServiceUrl + 'jwt/temporary',null, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Обновление базовой информации о пользователе\n   * @param changeData Новые данные для обновления аккаунта\n   * @returns Promise с сообщением об успехе обновления\n   */\n  PUTupdateBaseData(changeData: changeAccountData) {\n    const paramObject: any = {\n      accountType: changeData.accountType,\n      jwt: changeData.jwt\n    };\n\n    if (isEmailAccount(changeData)) {\n      paramObject.password = changeData.password;\n    }\n\n    const HTTP_PARAMS = new HttpParams({ fromObject: paramObject });\n    return firstValueFrom(this.httpModule.put(this.baseServiceUrl + 'account', changeData)) as Promise;\n  }\n\n  /**\n   * Запрос кода сброса пароля по email\n   * @param email Email пользователя\n   * @returns Promise с кодом для сброса пароля\n   */\n  GETrequestPasswordCode(email: string) {\n    let HTTP_PARAMS = new HttpParams()\n      .set('email', email);\n\n    return firstValueFrom(this.httpModule.get(this.baseServiceUrl + 'account/code', { params: HTTP_PARAMS })) as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/foundFurniture.html":{"url":"interfaces/foundFurniture.html","title":"interface - foundFurniture","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  foundFurniture\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/finder/finder.component.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс, описывающий найденную мебель.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            category\n                                        \n                                \n                                \n                                        \n                                            colorRequest\n                                        \n                                \n                                \n                                        \n                                            cost\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        category\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        category:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Категория мебели\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        colorRequest\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        colorRequest:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Цвет, указанный в запросе\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cost\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cost:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Цена мебели\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Уникальный идентификатор мебели\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Название мебели\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { NgClass, NgFor, NgIf } from '@angular/common';\nimport { AfterViewInit, Component, ElementRef, Renderer2 } from '@angular/core';\nimport { FinderService } from '../../services/finder.service';\nimport { ServerImageControlService } from '../../services/server-image-control.service';\nimport { ActivatedRoute, RouterLink } from '@angular/router';\nimport { checkDesktop } from '../../usable/reusable-functions.used';\nimport { CostFormatPipe } from '../../pipes/cost-format.pipe';\n\n/**\n * Интерфейс, описывающий найденную мебель.\n */\ninterface foundFurniture {\n  /** Название мебели */\n  name: string;\n  /** Цена мебели */\n  cost: number;\n  /** Цвет, указанный в запросе */\n  colorRequest: string;\n  /** Уникальный идентификатор мебели */\n  id: string;\n  /** Категория мебели */\n  category: string;\n}\n\n/**\n * Компонент поиска мебели.\n * Позволяет искать мебель по названию и отображать результаты.\n */\n@Component({\n  selector: 'app-finder',\n  standalone: true,\n  imports: [NgClass, NgFor, NgIf, RouterLink, CostFormatPipe, RouterLink],\n  templateUrl: './finder.component.html',\n  styleUrl: './finder.component.scss'\n})\nexport class FinderComponent implements AfterViewInit {\n  /**\n   * Ссылка на HTML-элемент с результатами поиска (список вариантов).\n   */\n  private variantsSpan!: HTMLSpanElement;\n\n  /**\n   * Ссылка на HTML-элемент текстового поля ввода.\n   */\n  private inputElement!: HTMLInputElement;\n\n  /**\n   * Массив найденных объектов мебели.\n   */\n  protected foundFurniture?: foundFurniture[];\n\n  /**\n   * Таймер для реализации дебаунса ввода.\n   */\n  private debounceTimer: any = null;\n\n  constructor(\n    private finderService: FinderService,\n    private elementRef: ElementRef,\n    private renderer: Renderer2,\n    private imageService: ServerImageControlService,\n    private route: ActivatedRoute\n  ) { }\n\n  /**\n   * Инициализация после рендера компонента:\n   * Получение необходимых DOM-элементов для управления поиском.\n   */\n  ngAfterViewInit(): void {\n    this.variantsSpan = this.elementRef.nativeElement.querySelector('.variantsSpan') as HTMLSpanElement;\n    this.inputElement = this.elementRef.nativeElement.querySelector('.finderInput') as HTMLInputElement;\n  }\n\n  /**\n   * Выполняет поиск мебели на сервере по заданной строке.\n   * @param findString Строка для поиска мебели\n   */\n  private async findFurnitures(findString: string) {\n    const RECEIVED_DATA = await this.finderService.GETfindFurnitures(findString) as foundFurniture[];\n    this.openFoundResultsList();\n\n    if (RECEIVED_DATA.length > 0) {\n      this.closeFoundResultsList();\n      setTimeout(() => {\n        this.foundFurniture = RECEIVED_DATA;\n        this.openFoundResultsList();\n      }, 400);\n    } else {\n      // Если результатов нет, очищаем массив foundFurniture\n      this.foundFurniture !== undefined ? this.foundFurniture.length = 0 : this.foundFurniture = [];\n    }\n  }\n\n  /**\n   * Открывает список найденных результатов (добавляет CSS класс).\n   */\n  private openFoundResultsList() {\n    if (!this.variantsSpan) return;\n    this.renderer.addClass(this.variantsSpan, 'variantsSpanOpen');\n  }\n\n  /**\n   * Закрывает список найденных результатов (удаляет CSS класс).\n   */\n  private closeFoundResultsList() {\n    if (!this.variantsSpan) return;\n    this.renderer.removeClass(this.variantsSpan, 'variantsSpanOpen');\n  }\n\n  /**\n   * Утилитная функция проверки, запущено ли приложение на десктопе.\n   */\n  protected checkDesktop = checkDesktop;\n\n  /**\n   * Очищает поле ввода и скрывает список результатов.\n   */\n  protected clearInput() {\n    this.inputElement.value = '';\n    this.inputProcess();\n    this.closeFoundResultsList();\n  }\n\n  /**\n   * Проверяет, находится ли пользователь на странице магазина.\n   * Если да, устанавливает в сервисе имя мебели.\n   * @param name Имя мебели для поиска\n   * @returns true если на странице магазина, иначе false\n   */\n  private checkShopPage(name: string): boolean {\n    let CURRENT_ROUTE = this.route.root;\n    while (CURRENT_ROUTE.firstChild) {\n      CURRENT_ROUTE = CURRENT_ROUTE.firstChild;\n    }\n    const pageName = CURRENT_ROUTE.snapshot.data['pageName'];\n    if (pageName === 'shop') {\n      this.finderService.setFurnitureName(name);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Обрабатывает ввод пользователя с задержкой (debounce).\n   * Запускает поиск, если введена строка.\n   */\n  protected inputProcess() {\n    const VALUE = this.inputElement.value;\n    clearTimeout(this.debounceTimer);\n    this.debounceTimer = setTimeout(() => {\n      if (VALUE.length === 0) {\n        if (this.checkShopPage(VALUE)) this.closeFoundResultsList();\n        return;\n      }\n      if (this.checkShopPage(VALUE)) return;\n\n      this.findFurnitures(VALUE);\n    }, 300);\n  }\n\n  /**\n   * Возвращает URL главного изображения мебели по id и цвету.\n   * @param idFurniture Идентификатор мебели\n   * @param color Цвет мебели\n   * @returns URL изображения\n   */\n  protected getImage(idFurniture: string, color: string): string {\n    return this.imageService.GETmainImage(idFurniture, color);\n  }\n\n  /**\n   * Формирует URL для перехода на страницу мебели.\n   * @param idFurniture Идентификатор мебели\n   * @param category Категория мебели\n   * @returns URL для маршрутизации\n   */\n  protected getUrl(idFurniture: string, category: string): string {\n    return `/shop/${category ?? 'all'}/${idFurniture}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            checkDesktop   (src/.../reusable-functions.used.ts)\n                        \n                        \n                            isEmailAccount   (src/.../account.service.ts)\n                        \n                        \n                            loadFBXModel   (src/.../fbx.loader.ts)\n                        \n                        \n                            loadGLTFModel   (src/.../gltf-glb.loader.ts)\n                        \n                        \n                            loadModel   (src/.../index.ts)\n                        \n                        \n                            loadOBJModel   (src/.../obj.loader.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/usable/reusable-functions.used.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        checkDesktop\n                        \n                    \n                \n            \n            \n                \ncheckDesktop()\n                \n            \n\n\n\n\n            \n                \n                        Проверяет, является ли устройство десктопом или нет\n\n\n                \n            \n        \n    \n    src/services/account.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isEmailAccount\n                        \n                    \n                \n            \n            \n                \nisEmailAccount(account)\n                \n            \n\n\n\n\n            \n                \n                        Функция-помощник для проверки, что аккаунт с типом email\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                account\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Объект аккаунта\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         changeAccountDataEmail\n\n                        \n                            \n                                true, если аккаунт с типом email\n\n                            \n                \n            \n        \n    \n    src/components/scene/loaders/loaders/fbx.loader.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        loadFBXModel\n                        \n                    \n                \n            \n            \n                \nloadFBXModel(url: string, manager?: LoadingManager)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                manager\n                                            \n                                                        LoadingManager\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/components/scene/loaders/loaders/gltf-glb.loader.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        loadGLTFModel\n                        \n                    \n                \n            \n            \n                \nloadGLTFModel(url: string, manager?: LoadingManager)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                manager\n                                            \n                                                        LoadingManager\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/components/scene/loaders/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        loadModel\n                        \n                    \n                \n            \n            \n                \nloadModel(blob: Blob, manager?: LoadingManager)\n                \n            \n\n\n\n\n            \n                \n                        Загружает 3D-модель из Blob-объекта, определяя её формат по MIME-типу.\nПоддерживаются форматы: glTF/glb, FBX, OBJ.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                blob\n                                            \n                                                        Blob\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nФайл модели в виде Blob.\n\n\n                                            \n                                        \n                                        \n                                                manager\n                                            \n                                                        LoadingManager\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nНеобязательный менеджер загрузки для отслеживания прогресса.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Загруженная 3D-модель как объект Three.js.\n\n                            \n                \n            \n        \n    \n    src/components/scene/loaders/loaders/obj.loader.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        loadOBJModel\n                        \n                    \n                \n            \n            \n                \nloadOBJModel(url: string, manager?: LoadingManager)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                manager\n                                            \n                                                        LoadingManager\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/furnitureAccountData.html":{"url":"interfaces/furnitureAccountData.html","title":"interface - furnitureAccountData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  furnitureAccountData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/account.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Данные по мебели, связанной с аккаунтом\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            _id\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            previewUrl\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        _id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        _id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Идентификатор мебели\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Название мебели\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        previewUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        previewUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    URL превью изображения мебели\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { projectInformation, projectServerInformation } from './project.service';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { AccountCookieService } from './account-cookie.service';\nimport { baseUrl } from '.';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные для изменения аккаунта с email\n */\nexport interface changeAccountDataEmail {\n  /** JWT токен */\n  jwt: string;\n  /** Тип аккаунта (email) */\n  accountType: 'email';\n  /** Пароль пользователя */\n  password: string;\n}\n\n/**\n * Полные данные аккаунта пользователя\n */\nexport interface accountFullData {\n  /** URL аватара */\n  avatarUrl: string;\n  /** Никнейм пользователя */\n  nickname: string;\n  /** Email пользователя */\n  email: string;\n  /** Массив проектов пользователя */\n  projects: projectInformation[];\n  /** Массив мебели, связанной с аккаунтом */\n  furnitures: furnitureAccountData[];\n  /** Пароль пользователя (необязательный) */\n  password?: string;\n}\n\n/**\n * Данные для изменения вторичных данных аккаунта\n */\nexport interface changeSecondaryData {\n  /** JWT токен */\n  jwt: string;\n  /** Новый никнейм */\n  nickname: string;\n}\n\n/**\n * Данные по мебели, связанной с аккаунтом\n */\nexport interface furnitureAccountData {\n  /** Идентификатор мебели */\n  _id: string;\n  /** Название мебели */\n  name: string;\n  /** URL превью изображения мебели */\n  previewUrl: string;\n}\n\n/** Тип аккаунта */\nexport type accountType = 'google' | 'email';\n\n/** Тип данных для изменения аккаунта (на данный момент только email) */\nexport type changeAccountData = changeAccountDataEmail;\n\n/**\n * Данные для создания аккаунта с email\n */\ninterface createEmailAccountData {\n  /** Email */\n  email: string;\n  /** Пароль */\n  password: string;\n  /** Никнейм */\n  nickname: string;\n  /** Тип аккаунта (email) */\n  accountType: 'email';\n}\n\n/** Тип данных для создания аккаунта */\nexport type createAccountData = createEmailAccountData;\n\n/**\n * Функция-помощник для проверки, что аккаунт с типом email\n * @param account Объект аккаунта\n * @returns true, если аккаунт с типом email\n */\nexport function isEmailAccount(account: { accountType: accountType }): account is changeAccountDataEmail {\n  return account.accountType === 'email';\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccountService {\n  /** Базовый URL для аккаунт-сервисов */\n  private baseServiceUrl = baseUrl + 'account';\n\n  constructor(\n    private httpModule: HttpClient,\n    private accountCookieService: AccountCookieService\n  ) { }\n\n  /**\n   * Создание нового пользователя\n   * @param createAccountData Основная информация о пользователе (никнейм, email, пароль)\n   * @returns Promise с сообщением об успешном создании пользователя\n   */\n  POSTcreateAccount(createAccountData: createAccountData) {\n    let HTTP_PARAMS = new HttpParams()\n      .set('accountType', createAccountData.accountType)\n      .set('nickname', createAccountData.nickname);\n\n    if (isEmailAccount(createAccountData)) {\n      HTTP_PARAMS = HTTP_PARAMS\n        .set('email', createAccountData.email)\n        .set('password', createAccountData.password);\n    }\n\n    return firstValueFrom(this.httpModule.post(this.baseServiceUrl, HTTP_PARAMS)) as Promise;\n  }\n\n  /**\n   * Удаление JWT токена пользователя\n   * @param jwt JWT токен\n   * @returns Promise с сообщением об успешном удалении токена\n   */\n  DELETEaccountJwt(jwt: string) {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt);\n    return firstValueFrom(this.httpModule.delete(this.baseServiceUrl + '/jwt/delete', { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Обновление вторичных данных аккаунта (например, никнейм)\n   * @param changeData Данные для изменения\n   * @returns Promise с сообщением об успешном обновлении\n   */\n  PUTupdateSecondaryAccountData(changeData: changeSecondaryData) {\n    const HTTP_PARAMS = new HttpParams({\n      fromObject: {\n        nickname: changeData.nickname,\n        jwt: changeData.jwt\n      }\n    });\n    return firstValueFrom(this.httpModule.put(this.baseServiceUrl, null, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Удаление аккаунта пользователя\n   * @param jwt JWT токен\n   * @returns Promise с сообщением об успешном удалении пользователя\n   */\n  DELETEaccount(jwt: string) {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt);\n    return firstValueFrom(this.httpModule.delete(this.baseServiceUrl, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Получение полной информации об аккаунте пользователя\n   * @param jwt JWT токен\n   * @returns Promise с данными аккаунта (включая проекты и мебель)\n   */\n  async GETaccount(jwt: string) {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt);\n    try {\n      let { accountData } = await firstValueFrom(this.httpModule.get(this.baseServiceUrl, { params: HTTP_PARAMS })) as { accountData: accountFullData & { projects: projectServerInformation[] } };\n      accountData.furnitures = accountData.furnitures.map(furnitureData => {\n        return {\n          ...furnitureData,\n          previewUrl: baseUrl + furnitureData.previewUrl\n        };\n      });\n      return { accountData: accountData };\n    } catch (error) {\n      console.error('Error in GETfurnitureCard:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Проверка наличия JWT токена в куках\n   * @returns true, если JWT токен найден, иначе false\n   */\n  checkJwt(): boolean {\n    return this.accountCookieService.getJwt() ? true : false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/furnitureBaseData.html":{"url":"interfaces/furnitureBaseData.html","title":"interface - furnitureBaseData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  furnitureBaseData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/furniture-card-control.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Базовые данные мебели, общие для клиента и сервера\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            additionalData\n                                        \n                                \n                                \n                                        \n                                            description\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            proportions\n                                        \n                                \n                                \n                                        \n                                            shops\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        additionalData\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        additionalData:         additionalData\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         additionalData\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Дополнительные данные\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Описание мебели\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Название мебели\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        proportions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        proportions:         furnitureProportions\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         furnitureProportions\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Пропорции мебели\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        shops\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        shops:         shopData[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         shopData[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Список магазинов с ценами и URL\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { imageSliderClientData, imageSliderFromServerData } from '../components/image-slider/image-slider.component';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные магазина с ценой и URL\n * @interface shopData\n */\nexport interface shopData {\n  /** Цена мебели */\n  cost: number;\n  /** URL магазина или товара */\n  url: string;\n}\n\n/**\n * Пропорции мебели (ширина, длина, высота)\n * @interface furnitureProportions\n */\nexport interface furnitureProportions {\n  /** Ширина мебели (или null, если не задана) */\n  width: number | null;\n  /** Длина мебели (или null, если не задана) */\n  length: number | null;\n  /** Высота мебели (или null, если не задана) */\n  height: number | null;\n}\n\n/**\n * Данные цвета на клиенте, включая слайдер изображений\n * @interface colorClientData\n */\nexport interface colorClientData {\n  /** Цвет мебели */\n  color: string;\n  /** Данные для слайдера изображений */\n  imagesData: imageSliderClientData;\n}\n\n/**\n * Данные цвета с сервера, включая слайдер изображений\n * @interface colorFromServerData\n */\nexport interface colorFromServerData {\n  /** Цвет мебели */\n  color: string;\n  /** Данные для слайдера изображений */\n  imagesData: imageSliderFromServerData;\n}\n\n/**\n * Дополнительные данные мебели с динамическими ключами\n * @interface additionalData\n */\nexport interface additionalData {\n  /** Категория мебели (опционально) */\n  category?: string;\n  /** Другие динамические свойства */\n  [key: string]: string | undefined;\n}\n\n/**\n * Базовые данные мебели, общие для клиента и сервера\n * @interface furnitureBaseData\n */\ninterface furnitureBaseData {\n  /** Название мебели */\n  name: string;\n  /** Описание мебели */\n  description: string;\n  /** Пропорции мебели */\n  proportions: furnitureProportions;\n  /** Список магазинов с ценами и URL */\n  shops: shopData[];\n  /** Дополнительные данные */\n  additionalData: additionalData;\n}\n\n/**\n * Данные мебели на клиенте с цветами\n * @interface furnitureClientData\n * @extends furnitureBaseData\n */\nexport interface furnitureClientData extends furnitureBaseData {\n  /** Список цветов с данными для клиента */\n  colors: colorClientData[];\n}\n\n/**\n * Данные мебели с сервера с цветами\n * @interface furnitureFromServerData\n * @extends furnitureBaseData\n */\nexport interface furnitureFromServerData extends furnitureBaseData {\n  /** Список цветов с данными с сервера */\n  colors: colorFromServerData[];\n}\n\n/**\n * Сервис для управления карточками мебели\n * @class FurnitureCardControlService\n * @injectable\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class FurnitureCardControlService {\n\n  /** Базовый URL для запросов к API мебели */\n  private baseServiceUrl = baseUrl + 'furniture/card';\n\n  /**\n   * Конструктор сервиса\n   * @param httpModule HTTP клиент для запросов\n   */\n  constructor(private httpModule: HttpClient) { }\n\n  /**\n   * Получение карточки мебели по ID и опциональному JWT токену\n   * @param furnitureCardId - ID карточки мебели\n   * @param [jwt] - JWT токен пользователя (опционально)\n   * @returns Promise с объектом, содержащим данные карточки и флаг совпадения автора\n   * @throws Ошибка при некорректной структуре ответа или при ошибках запроса\n   */\n  async GETfurnitureCard(\n    furnitureCardId: string,\n    jwt?: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams().set('furnitureCardId', furnitureCardId);\n\n    if (jwt !== undefined) {\n      HTTP_PARAMS = HTTP_PARAMS.set('jwt', jwt);\n    }\n\n    try {\n      const response = await firstValueFrom(\n        this.httpModule.get(this.baseServiceUrl, { params: HTTP_PARAMS })\n      ) as {\n        furnitureCard: furnitureFromServerData;\n        authorMatched: boolean;\n      };\n\n      if (!response?.furnitureCard) {\n        throw new Error('Invalid response structure: furnitureCard missing');\n      }\n\n      // Добавляем полный URL к изображениям\n      const transformedFurnitureCard = {\n        ...response.furnitureCard,\n        colors: response.furnitureCard.colors.map(colorData => ({\n          color: colorData.color,\n          imagesData: {\n            idMainImage: colorData.imagesData.idMainImage,\n            images: colorData.imagesData.images.map(url => baseUrl + url)\n          }\n        }))\n      };\n\n      return {\n        furnitureCard: transformedFurnitureCard,\n        authorMatched: response.authorMatched\n      };\n\n    } catch (error) {\n      console.error('Error in GETfurnitureCard:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Создание новой карточки мебели\n   * @param furnitureData - Данные новой карточки мебели\n   * @param jwt - JWT токен пользователя\n   * @returns Promise с данными созданной карточки, включая её ID\n   */\n  POSTcreateFurnitureCard(\n    furnitureData: furnitureFromServerData,\n    jwt: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams().set('jwt', jwt);\n    return firstValueFrom(\n      this.httpModule.post(this.baseServiceUrl, furnitureData, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n\n  /**\n   * Обновление существующей карточки мебели\n   * @param furnitureCardUpdateData - Обновленные данные карточки мебели\n   * @param furnitureCardId - ID карточки мебели для обновления\n   * @param jwt - JWT токен пользователя\n   * @returns Promise с сообщением результата обновления\n   */\n  PUTupdateFurnitureCard(\n    furnitureCardUpdateData: furnitureFromServerData,\n    furnitureCardId: string,\n    jwt: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId);\n    return firstValueFrom(\n      this.httpModule.put(this.baseServiceUrl, furnitureCardUpdateData, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n\n  /**\n   * Удаление карточки мебели по ID и JWT токену\n   * @param jwt - JWT токен пользователя\n   * @param furnitureCardId - ID карточки мебели для удаления\n   * @returns Promise с сообщением результата удаления\n   */\n  DELETEfurnitureCard(jwt: string, furnitureCardId: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId);\n    return firstValueFrom(\n      this.httpModule.delete(this.baseServiceUrl, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/furnitureClientData.html":{"url":"interfaces/furnitureClientData.html","title":"interface - furnitureClientData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  furnitureClientData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/furniture-card-control.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Данные мебели на клиенте с цветами\n\n            \n\n            \n                Extends\n            \n            \n                            furnitureBaseData\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            colors\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        colors\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        colors:         colorClientData[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         colorClientData[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Список цветов с данными для клиента\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { imageSliderClientData, imageSliderFromServerData } from '../components/image-slider/image-slider.component';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные магазина с ценой и URL\n * @interface shopData\n */\nexport interface shopData {\n  /** Цена мебели */\n  cost: number;\n  /** URL магазина или товара */\n  url: string;\n}\n\n/**\n * Пропорции мебели (ширина, длина, высота)\n * @interface furnitureProportions\n */\nexport interface furnitureProportions {\n  /** Ширина мебели (или null, если не задана) */\n  width: number | null;\n  /** Длина мебели (или null, если не задана) */\n  length: number | null;\n  /** Высота мебели (или null, если не задана) */\n  height: number | null;\n}\n\n/**\n * Данные цвета на клиенте, включая слайдер изображений\n * @interface colorClientData\n */\nexport interface colorClientData {\n  /** Цвет мебели */\n  color: string;\n  /** Данные для слайдера изображений */\n  imagesData: imageSliderClientData;\n}\n\n/**\n * Данные цвета с сервера, включая слайдер изображений\n * @interface colorFromServerData\n */\nexport interface colorFromServerData {\n  /** Цвет мебели */\n  color: string;\n  /** Данные для слайдера изображений */\n  imagesData: imageSliderFromServerData;\n}\n\n/**\n * Дополнительные данные мебели с динамическими ключами\n * @interface additionalData\n */\nexport interface additionalData {\n  /** Категория мебели (опционально) */\n  category?: string;\n  /** Другие динамические свойства */\n  [key: string]: string | undefined;\n}\n\n/**\n * Базовые данные мебели, общие для клиента и сервера\n * @interface furnitureBaseData\n */\ninterface furnitureBaseData {\n  /** Название мебели */\n  name: string;\n  /** Описание мебели */\n  description: string;\n  /** Пропорции мебели */\n  proportions: furnitureProportions;\n  /** Список магазинов с ценами и URL */\n  shops: shopData[];\n  /** Дополнительные данные */\n  additionalData: additionalData;\n}\n\n/**\n * Данные мебели на клиенте с цветами\n * @interface furnitureClientData\n * @extends furnitureBaseData\n */\nexport interface furnitureClientData extends furnitureBaseData {\n  /** Список цветов с данными для клиента */\n  colors: colorClientData[];\n}\n\n/**\n * Данные мебели с сервера с цветами\n * @interface furnitureFromServerData\n * @extends furnitureBaseData\n */\nexport interface furnitureFromServerData extends furnitureBaseData {\n  /** Список цветов с данными с сервера */\n  colors: colorFromServerData[];\n}\n\n/**\n * Сервис для управления карточками мебели\n * @class FurnitureCardControlService\n * @injectable\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class FurnitureCardControlService {\n\n  /** Базовый URL для запросов к API мебели */\n  private baseServiceUrl = baseUrl + 'furniture/card';\n\n  /**\n   * Конструктор сервиса\n   * @param httpModule HTTP клиент для запросов\n   */\n  constructor(private httpModule: HttpClient) { }\n\n  /**\n   * Получение карточки мебели по ID и опциональному JWT токену\n   * @param furnitureCardId - ID карточки мебели\n   * @param [jwt] - JWT токен пользователя (опционально)\n   * @returns Promise с объектом, содержащим данные карточки и флаг совпадения автора\n   * @throws Ошибка при некорректной структуре ответа или при ошибках запроса\n   */\n  async GETfurnitureCard(\n    furnitureCardId: string,\n    jwt?: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams().set('furnitureCardId', furnitureCardId);\n\n    if (jwt !== undefined) {\n      HTTP_PARAMS = HTTP_PARAMS.set('jwt', jwt);\n    }\n\n    try {\n      const response = await firstValueFrom(\n        this.httpModule.get(this.baseServiceUrl, { params: HTTP_PARAMS })\n      ) as {\n        furnitureCard: furnitureFromServerData;\n        authorMatched: boolean;\n      };\n\n      if (!response?.furnitureCard) {\n        throw new Error('Invalid response structure: furnitureCard missing');\n      }\n\n      // Добавляем полный URL к изображениям\n      const transformedFurnitureCard = {\n        ...response.furnitureCard,\n        colors: response.furnitureCard.colors.map(colorData => ({\n          color: colorData.color,\n          imagesData: {\n            idMainImage: colorData.imagesData.idMainImage,\n            images: colorData.imagesData.images.map(url => baseUrl + url)\n          }\n        }))\n      };\n\n      return {\n        furnitureCard: transformedFurnitureCard,\n        authorMatched: response.authorMatched\n      };\n\n    } catch (error) {\n      console.error('Error in GETfurnitureCard:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Создание новой карточки мебели\n   * @param furnitureData - Данные новой карточки мебели\n   * @param jwt - JWT токен пользователя\n   * @returns Promise с данными созданной карточки, включая её ID\n   */\n  POSTcreateFurnitureCard(\n    furnitureData: furnitureFromServerData,\n    jwt: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams().set('jwt', jwt);\n    return firstValueFrom(\n      this.httpModule.post(this.baseServiceUrl, furnitureData, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n\n  /**\n   * Обновление существующей карточки мебели\n   * @param furnitureCardUpdateData - Обновленные данные карточки мебели\n   * @param furnitureCardId - ID карточки мебели для обновления\n   * @param jwt - JWT токен пользователя\n   * @returns Promise с сообщением результата обновления\n   */\n  PUTupdateFurnitureCard(\n    furnitureCardUpdateData: furnitureFromServerData,\n    furnitureCardId: string,\n    jwt: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId);\n    return firstValueFrom(\n      this.httpModule.put(this.baseServiceUrl, furnitureCardUpdateData, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n\n  /**\n   * Удаление карточки мебели по ID и JWT токену\n   * @param jwt - JWT токен пользователя\n   * @param furnitureCardId - ID карточки мебели для удаления\n   * @returns Promise с сообщением результата удаления\n   */\n  DELETEfurnitureCard(jwt: string, furnitureCardId: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId);\n    return firstValueFrom(\n      this.httpModule.delete(this.baseServiceUrl, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/furnitureFromServerData.html":{"url":"interfaces/furnitureFromServerData.html","title":"interface - furnitureFromServerData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  furnitureFromServerData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/furniture-card-control.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Данные мебели с сервера с цветами\n\n            \n\n            \n                Extends\n            \n            \n                            furnitureBaseData\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            colors\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        colors\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        colors:         colorFromServerData[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         colorFromServerData[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Список цветов с данными с сервера\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { imageSliderClientData, imageSliderFromServerData } from '../components/image-slider/image-slider.component';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные магазина с ценой и URL\n * @interface shopData\n */\nexport interface shopData {\n  /** Цена мебели */\n  cost: number;\n  /** URL магазина или товара */\n  url: string;\n}\n\n/**\n * Пропорции мебели (ширина, длина, высота)\n * @interface furnitureProportions\n */\nexport interface furnitureProportions {\n  /** Ширина мебели (или null, если не задана) */\n  width: number | null;\n  /** Длина мебели (или null, если не задана) */\n  length: number | null;\n  /** Высота мебели (или null, если не задана) */\n  height: number | null;\n}\n\n/**\n * Данные цвета на клиенте, включая слайдер изображений\n * @interface colorClientData\n */\nexport interface colorClientData {\n  /** Цвет мебели */\n  color: string;\n  /** Данные для слайдера изображений */\n  imagesData: imageSliderClientData;\n}\n\n/**\n * Данные цвета с сервера, включая слайдер изображений\n * @interface colorFromServerData\n */\nexport interface colorFromServerData {\n  /** Цвет мебели */\n  color: string;\n  /** Данные для слайдера изображений */\n  imagesData: imageSliderFromServerData;\n}\n\n/**\n * Дополнительные данные мебели с динамическими ключами\n * @interface additionalData\n */\nexport interface additionalData {\n  /** Категория мебели (опционально) */\n  category?: string;\n  /** Другие динамические свойства */\n  [key: string]: string | undefined;\n}\n\n/**\n * Базовые данные мебели, общие для клиента и сервера\n * @interface furnitureBaseData\n */\ninterface furnitureBaseData {\n  /** Название мебели */\n  name: string;\n  /** Описание мебели */\n  description: string;\n  /** Пропорции мебели */\n  proportions: furnitureProportions;\n  /** Список магазинов с ценами и URL */\n  shops: shopData[];\n  /** Дополнительные данные */\n  additionalData: additionalData;\n}\n\n/**\n * Данные мебели на клиенте с цветами\n * @interface furnitureClientData\n * @extends furnitureBaseData\n */\nexport interface furnitureClientData extends furnitureBaseData {\n  /** Список цветов с данными для клиента */\n  colors: colorClientData[];\n}\n\n/**\n * Данные мебели с сервера с цветами\n * @interface furnitureFromServerData\n * @extends furnitureBaseData\n */\nexport interface furnitureFromServerData extends furnitureBaseData {\n  /** Список цветов с данными с сервера */\n  colors: colorFromServerData[];\n}\n\n/**\n * Сервис для управления карточками мебели\n * @class FurnitureCardControlService\n * @injectable\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class FurnitureCardControlService {\n\n  /** Базовый URL для запросов к API мебели */\n  private baseServiceUrl = baseUrl + 'furniture/card';\n\n  /**\n   * Конструктор сервиса\n   * @param httpModule HTTP клиент для запросов\n   */\n  constructor(private httpModule: HttpClient) { }\n\n  /**\n   * Получение карточки мебели по ID и опциональному JWT токену\n   * @param furnitureCardId - ID карточки мебели\n   * @param [jwt] - JWT токен пользователя (опционально)\n   * @returns Promise с объектом, содержащим данные карточки и флаг совпадения автора\n   * @throws Ошибка при некорректной структуре ответа или при ошибках запроса\n   */\n  async GETfurnitureCard(\n    furnitureCardId: string,\n    jwt?: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams().set('furnitureCardId', furnitureCardId);\n\n    if (jwt !== undefined) {\n      HTTP_PARAMS = HTTP_PARAMS.set('jwt', jwt);\n    }\n\n    try {\n      const response = await firstValueFrom(\n        this.httpModule.get(this.baseServiceUrl, { params: HTTP_PARAMS })\n      ) as {\n        furnitureCard: furnitureFromServerData;\n        authorMatched: boolean;\n      };\n\n      if (!response?.furnitureCard) {\n        throw new Error('Invalid response structure: furnitureCard missing');\n      }\n\n      // Добавляем полный URL к изображениям\n      const transformedFurnitureCard = {\n        ...response.furnitureCard,\n        colors: response.furnitureCard.colors.map(colorData => ({\n          color: colorData.color,\n          imagesData: {\n            idMainImage: colorData.imagesData.idMainImage,\n            images: colorData.imagesData.images.map(url => baseUrl + url)\n          }\n        }))\n      };\n\n      return {\n        furnitureCard: transformedFurnitureCard,\n        authorMatched: response.authorMatched\n      };\n\n    } catch (error) {\n      console.error('Error in GETfurnitureCard:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Создание новой карточки мебели\n   * @param furnitureData - Данные новой карточки мебели\n   * @param jwt - JWT токен пользователя\n   * @returns Promise с данными созданной карточки, включая её ID\n   */\n  POSTcreateFurnitureCard(\n    furnitureData: furnitureFromServerData,\n    jwt: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams().set('jwt', jwt);\n    return firstValueFrom(\n      this.httpModule.post(this.baseServiceUrl, furnitureData, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n\n  /**\n   * Обновление существующей карточки мебели\n   * @param furnitureCardUpdateData - Обновленные данные карточки мебели\n   * @param furnitureCardId - ID карточки мебели для обновления\n   * @param jwt - JWT токен пользователя\n   * @returns Promise с сообщением результата обновления\n   */\n  PUTupdateFurnitureCard(\n    furnitureCardUpdateData: furnitureFromServerData,\n    furnitureCardId: string,\n    jwt: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId);\n    return firstValueFrom(\n      this.httpModule.put(this.baseServiceUrl, furnitureCardUpdateData, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n\n  /**\n   * Удаление карточки мебели по ID и JWT токену\n   * @param jwt - JWT токен пользователя\n   * @param furnitureCardId - ID карточки мебели для удаления\n   * @returns Promise с сообщением результата удаления\n   */\n  DELETEfurnitureCard(jwt: string, furnitureCardId: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId);\n    return firstValueFrom(\n      this.httpModule.delete(this.baseServiceUrl, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/furnitureProportions.html":{"url":"interfaces/furnitureProportions.html","title":"interface - furnitureProportions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  furnitureProportions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/furniture-card-control.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Пропорции мебели (ширина, длина, высота)\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            height\n                                        \n                                \n                                \n                                        \n                                            length\n                                        \n                                \n                                \n                                        \n                                            width\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        height:     number | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | null\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Высота мебели (или null, если не задана)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        length\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        length:     number | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | null\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Длина мебели (или null, если не задана)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        width:     number | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | null\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Ширина мебели (или null, если не задана)\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { imageSliderClientData, imageSliderFromServerData } from '../components/image-slider/image-slider.component';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные магазина с ценой и URL\n * @interface shopData\n */\nexport interface shopData {\n  /** Цена мебели */\n  cost: number;\n  /** URL магазина или товара */\n  url: string;\n}\n\n/**\n * Пропорции мебели (ширина, длина, высота)\n * @interface furnitureProportions\n */\nexport interface furnitureProportions {\n  /** Ширина мебели (или null, если не задана) */\n  width: number | null;\n  /** Длина мебели (или null, если не задана) */\n  length: number | null;\n  /** Высота мебели (или null, если не задана) */\n  height: number | null;\n}\n\n/**\n * Данные цвета на клиенте, включая слайдер изображений\n * @interface colorClientData\n */\nexport interface colorClientData {\n  /** Цвет мебели */\n  color: string;\n  /** Данные для слайдера изображений */\n  imagesData: imageSliderClientData;\n}\n\n/**\n * Данные цвета с сервера, включая слайдер изображений\n * @interface colorFromServerData\n */\nexport interface colorFromServerData {\n  /** Цвет мебели */\n  color: string;\n  /** Данные для слайдера изображений */\n  imagesData: imageSliderFromServerData;\n}\n\n/**\n * Дополнительные данные мебели с динамическими ключами\n * @interface additionalData\n */\nexport interface additionalData {\n  /** Категория мебели (опционально) */\n  category?: string;\n  /** Другие динамические свойства */\n  [key: string]: string | undefined;\n}\n\n/**\n * Базовые данные мебели, общие для клиента и сервера\n * @interface furnitureBaseData\n */\ninterface furnitureBaseData {\n  /** Название мебели */\n  name: string;\n  /** Описание мебели */\n  description: string;\n  /** Пропорции мебели */\n  proportions: furnitureProportions;\n  /** Список магазинов с ценами и URL */\n  shops: shopData[];\n  /** Дополнительные данные */\n  additionalData: additionalData;\n}\n\n/**\n * Данные мебели на клиенте с цветами\n * @interface furnitureClientData\n * @extends furnitureBaseData\n */\nexport interface furnitureClientData extends furnitureBaseData {\n  /** Список цветов с данными для клиента */\n  colors: colorClientData[];\n}\n\n/**\n * Данные мебели с сервера с цветами\n * @interface furnitureFromServerData\n * @extends furnitureBaseData\n */\nexport interface furnitureFromServerData extends furnitureBaseData {\n  /** Список цветов с данными с сервера */\n  colors: colorFromServerData[];\n}\n\n/**\n * Сервис для управления карточками мебели\n * @class FurnitureCardControlService\n * @injectable\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class FurnitureCardControlService {\n\n  /** Базовый URL для запросов к API мебели */\n  private baseServiceUrl = baseUrl + 'furniture/card';\n\n  /**\n   * Конструктор сервиса\n   * @param httpModule HTTP клиент для запросов\n   */\n  constructor(private httpModule: HttpClient) { }\n\n  /**\n   * Получение карточки мебели по ID и опциональному JWT токену\n   * @param furnitureCardId - ID карточки мебели\n   * @param [jwt] - JWT токен пользователя (опционально)\n   * @returns Promise с объектом, содержащим данные карточки и флаг совпадения автора\n   * @throws Ошибка при некорректной структуре ответа или при ошибках запроса\n   */\n  async GETfurnitureCard(\n    furnitureCardId: string,\n    jwt?: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams().set('furnitureCardId', furnitureCardId);\n\n    if (jwt !== undefined) {\n      HTTP_PARAMS = HTTP_PARAMS.set('jwt', jwt);\n    }\n\n    try {\n      const response = await firstValueFrom(\n        this.httpModule.get(this.baseServiceUrl, { params: HTTP_PARAMS })\n      ) as {\n        furnitureCard: furnitureFromServerData;\n        authorMatched: boolean;\n      };\n\n      if (!response?.furnitureCard) {\n        throw new Error('Invalid response structure: furnitureCard missing');\n      }\n\n      // Добавляем полный URL к изображениям\n      const transformedFurnitureCard = {\n        ...response.furnitureCard,\n        colors: response.furnitureCard.colors.map(colorData => ({\n          color: colorData.color,\n          imagesData: {\n            idMainImage: colorData.imagesData.idMainImage,\n            images: colorData.imagesData.images.map(url => baseUrl + url)\n          }\n        }))\n      };\n\n      return {\n        furnitureCard: transformedFurnitureCard,\n        authorMatched: response.authorMatched\n      };\n\n    } catch (error) {\n      console.error('Error in GETfurnitureCard:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Создание новой карточки мебели\n   * @param furnitureData - Данные новой карточки мебели\n   * @param jwt - JWT токен пользователя\n   * @returns Promise с данными созданной карточки, включая её ID\n   */\n  POSTcreateFurnitureCard(\n    furnitureData: furnitureFromServerData,\n    jwt: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams().set('jwt', jwt);\n    return firstValueFrom(\n      this.httpModule.post(this.baseServiceUrl, furnitureData, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n\n  /**\n   * Обновление существующей карточки мебели\n   * @param furnitureCardUpdateData - Обновленные данные карточки мебели\n   * @param furnitureCardId - ID карточки мебели для обновления\n   * @param jwt - JWT токен пользователя\n   * @returns Promise с сообщением результата обновления\n   */\n  PUTupdateFurnitureCard(\n    furnitureCardUpdateData: furnitureFromServerData,\n    furnitureCardId: string,\n    jwt: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId);\n    return firstValueFrom(\n      this.httpModule.put(this.baseServiceUrl, furnitureCardUpdateData, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n\n  /**\n   * Удаление карточки мебели по ID и JWT токену\n   * @param jwt - JWT токен пользователя\n   * @param furnitureCardId - ID карточки мебели для удаления\n   * @returns Promise с сообщением результата удаления\n   */\n  DELETEfurnitureCard(jwt: string, furnitureCardId: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId);\n    return firstValueFrom(\n      this.httpModule.delete(this.baseServiceUrl, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/furnitureShopData.html":{"url":"interfaces/furnitureShopData.html","title":"interface - furnitureShopData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  furnitureShopData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/shop.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс данных о мебели, получаемых из магазина.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            colors\n                                        \n                                \n                                \n                                        \n                                            cost\n                                        \n                                \n                                \n                                        \n                                            furnitureCardId\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            previewUrl\n                                        \n                                \n                                \n                                        \n                                            proportions\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        colors\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        colors:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Массив цветов мебели\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cost\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cost:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Стоимость мебели\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        furnitureCardId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        furnitureCardId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Id мебели\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Название\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        previewUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        previewUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Неполный Url превью (вначало надо вставить baseUrl сервера)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        proportions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        proportions:         modelInterface\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         modelInterface\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Габариты мебели\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { firstValueFrom } from 'rxjs';\nimport { modelInterface } from '../components/scene/scene.component';\n\n/**\n * Интерфейс объекта фильтров, отправляемых на сервер.\n*/\nexport interface queryData {\n  /** Любое ключ:значение */\n  [key: string]: optionSelectQueryData | optionRangeQueryData;\n}\n\n/**\n * Фильтр типа \"выбор из списка\".\n */\ninterface optionSelectQueryData {\n  /** Тип фильтра */\n  type: 'select';\n  /** Выбранные значения */\n  value: string[];\n}\n\n/**\n * Фильтр типа \"диапазон значений\".\n*/\ninterface optionRangeQueryData {\n  /** Тип фильтра */\n  type: 'range';\n  /** Минимум в диапазоне */\n  min: number;\n  /** Максимум в диапазоне */\n  max: number;\n}\n\n/**\n * Интерфейс данных о мебели, получаемых из магазина.\n */\nexport interface furnitureShopData {\n  /** Название */\n  name: string;\n  /** Стоимость мебели */\n  cost: number;\n  /** Неполный Url превью (вначало надо вставить baseUrl сервера) */\n  previewUrl: string;\n  /** Id мебели */\n  furnitureCardId: string;\n  /** Массив цветов мебели */\n  colors: string[];\n  /** Габариты мебели */\n  proportions: modelInterface;\n}\n\n/**\n * Интерфейс клиентских фильтров, значения которых формируются на основе ответа от сервера.\n */\nexport interface clientFilters {\n  /** Цвета мебели */\n  colors: string[];\n  /** Минимальная стоимость */\n  minCost: number;\n  /** Максимальная стоимость */\n  maxCost: number;\n}\n\n/**\n * Сервис для получения данных о мебели из магазина, с учетом фильтрации и пагинации.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ShopService {\n  /** Базовый URL сервиса */\n  private baseServiceUrl = baseUrl + 'shop';\n\n  /** Активный AbortController для отмены предыдущих запросов */\n  private abortController: AbortController | null = null;\n\n  constructor(private httpModule: HttpClient) { }\n\n  /**\n   * Выполняет GET-запрос на получение данных по категории мебели.\n   * Поддерживает фильтрацию и стартовую позицию для пагинации.\n   * При повторном вызове отменяет предыдущий запрос.\n   *\n   * @param categoryName - Название категории мебели.\n   * @param startRange - Начальный индекс (offset) выборки.\n   * @param queryData - Объект фильтров (опционально).\n   *\n   * @returns Промис с объектом, содержащим:\n   * - `resultsArray`: массив карточек мебели с обновлёнными URL превью\n   * - `resultsClientFiltersData`: агрегированные данные фильтров для клиента\n   *\n   * @throws {Error} В случае сетевой ошибки или отмены запроса.\n   */\n  async GETgetCategoryData(categoryName: string, startRange: number, queryData?: queryData) {\n    if (this.abortController) {\n      this.abortController.abort();\n    }\n\n    this.abortController = new AbortController();\n\n    try {\n      let requestUrl = `${this.baseServiceUrl}?category=${categoryName}&startRange=${startRange}`;\n\n      if (queryData && Object.keys(queryData).length > 0) {\n        const params = new URLSearchParams();\n        params.append('filters', JSON.stringify(queryData));\n        requestUrl += `&${new URLSearchParams(params).toString()}`;\n      }\n\n      const response = await fetch(\n        requestUrl,\n        { signal: this.abortController.signal }\n      );\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Ошибка: ${response.status} — ${errorText}`);\n      }\n\n      const RESPONSE = await response.json() as { resultsArray: furnitureShopData[] };\n      const RESULTS_ARRAY = RESPONSE.resultsArray;\n\n      const UPDATED_RESULTS = RESULTS_ARRAY.map(furniture => ({\n        ...furniture,\n        previewUrl: baseUrl + furniture.previewUrl\n      }));\n\n      return {\n        resultsArray: UPDATED_RESULTS,\n        resultsClientFiltersData: this.getFindOptionsByResult(UPDATED_RESULTS)\n      };\n\n    } catch (error: any) {\n      if (error.name === 'AbortError') {\n      } else {\n        console.error('Ошибка запроса:', error);\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Формирует объект фильтров на основе полученных данных о мебели.\n   *\n   * @param resultsArray - Массив карточек мебели\n   * @returns Объект клиентских фильтров (цвета, минимальная и максимальная цена)\n   */\n  private getFindOptionsByResult(resultsArray: furnitureShopData[]) {\n    let filtersObject: clientFilters = {\n      colors: [],\n      minCost: Infinity,\n      maxCost: -Infinity\n    };\n\n    resultsArray.forEach(furnitureData => {\n      if (furnitureData.cost  filtersObject.maxCost) filtersObject.maxCost = furnitureData.cost;\n\n      filtersObject.colors.push(...furnitureData.colors);\n    });\n\n    filtersObject.minCost = filtersObject.minCost!== Infinity ? filtersObject.minCost : 0;\n    filtersObject.maxCost = filtersObject.maxCost!== -Infinity ? filtersObject.maxCost : 0;\n\n    filtersObject.colors = [...new Set(filtersObject.colors)];\n    return filtersObject;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/googleAuthData.html":{"url":"interfaces/googleAuthData.html","title":"interface - googleAuthData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  googleAuthData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Данные для аутентификации через Google\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            accountType\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accountType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accountType:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                            \n                                \n                                    Тип аккаунта - 'google'\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { accountType, changeAccountDataEmail, changeAccountData } from './account.service';\nimport { baseUrl } from '.';\nimport { isEmailAccount } from './account.service';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные для аутентификации через email\n */\nexport interface emailAuthData {\n  /** Email пользователя */\n  email: string;\n  /** Пароль пользователя */\n  password: string;\n  /** Тип аккаунта - 'email' */\n  accountType: 'email';\n}\n\n/**\n * Данные для аутентификации через Google\n */\nexport interface googleAuthData {\n  /** Тип аккаунта - 'google' */\n  accountType: 'google';\n}\n\n/**\n * Объединённый тип данных для аутентификации\n */\nexport type authData = googleAuthData | emailAuthData;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  /** Базовый URL для auth-роутов */\n  private baseServiceUrl = baseUrl + 'auth/';\n\n  constructor(\n    private httpModule: HttpClient\n  ) { }\n\n  /**\n   * Создание длинного JWT токена\n   * @param authData Данные для входа (email+пароль или google)\n   * @returns Promise с JWT токеном\n   */\n  POSTcreateLongJWT(authData: authData) {\n    let HTTP_PARAMS = new HttpParams()\n      .set('accountType', authData.accountType);\n\n    if (isEmailAccount(authData)) {\n      HTTP_PARAMS = HTTP_PARAMS\n        .set('email', authData.email)\n        .set('password', authData.password);\n    }\n\n    return firstValueFrom(this.httpModule.post(this.baseServiceUrl + 'jwt/long', HTTP_PARAMS)) as Promise;\n  }\n\n  /**\n   * Создание короткого (временного) JWT токена\n   * @param email Email пользователя\n   * @returns Promise с временным JWT токеном\n   */\n  POSTcreateShortJWT(email: string) {\n    let HTTP_PARAMS = new HttpParams()\n      .set('email', email);\n\n    return firstValueFrom(this.httpModule.post(this.baseServiceUrl + 'jwt/temporary',null, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Обновление базовой информации о пользователе\n   * @param changeData Новые данные для обновления аккаунта\n   * @returns Promise с сообщением об успехе обновления\n   */\n  PUTupdateBaseData(changeData: changeAccountData) {\n    const paramObject: any = {\n      accountType: changeData.accountType,\n      jwt: changeData.jwt\n    };\n\n    if (isEmailAccount(changeData)) {\n      paramObject.password = changeData.password;\n    }\n\n    const HTTP_PARAMS = new HttpParams({ fromObject: paramObject });\n    return firstValueFrom(this.httpModule.put(this.baseServiceUrl + 'account', changeData)) as Promise;\n  }\n\n  /**\n   * Запрос кода сброса пароля по email\n   * @param email Email пользователя\n   * @returns Promise с кодом для сброса пароля\n   */\n  GETrequestPasswordCode(email: string) {\n    let HTTP_PARAMS = new HttpParams()\n      .set('email', email);\n\n    return firstValueFrom(this.httpModule.get(this.baseServiceUrl + 'account/code', { params: HTTP_PARAMS })) as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/imageSliderClientData.html":{"url":"interfaces/imageSliderClientData.html","title":"interface - imageSliderClientData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  imageSliderClientData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/image-slider/image-slider.component.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс данных для слайдера с клиентскими изображениями в формате Blob.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            idMainImage\n                                        \n                                \n                                \n                                        \n                                            images\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        idMainImage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        idMainImage:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Индекс главного (выбранного) изображения\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        images\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        images:     Blob[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Blob[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Массив изображений в формате Blob\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Component, HostListener, Input, OnInit } from '@angular/core';\nimport { NgIf, NgFor } from '@angular/common';\nimport { TuiCarousel } from '@taiga-ui/kit';\n\n/**\n * Интерфейс данных для слайдера с клиентскими изображениями в формате Blob.\n */\nexport interface imageSliderClientData {\n  /** Массив изображений в формате Blob */\n  images: Blob[];\n  /** Индекс главного (выбранного) изображения */\n  idMainImage: number;\n}\n\n/**\n * Интерфейс данных для слайдера с изображениями с сервера в виде URL-строк.\n */\nexport interface imageSliderFromServerData {\n  /** Массив URL-строк изображений */\n  images: string[];\n  /** Индекс главного (выбранного) изображения */\n  idMainImage: number;\n}\n\n/**\n * Компонент слайдера изображений.\n * Отображает изображения с возможностью выбора главного изображения.\n */\n@Component({\n  selector: 'app-image-slider',\n  standalone: true,\n  imports: [NgIf, NgFor, TuiCarousel],\n  templateUrl: './image-slider.component.html',\n  styleUrl: './image-slider.component.scss'\n})\nexport class ImageSliderComponent implements OnInit {\n  /**\n   * Текущий индекс выбранного слайда (используется для локального отслеживания).\n   */\n  protected index: number = 0;\n\n  /**\n   * Флаг, указывающий, находится ли текущее отображение в мобильном виде (ширина \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/imageSliderFromServerData.html":{"url":"interfaces/imageSliderFromServerData.html","title":"interface - imageSliderFromServerData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  imageSliderFromServerData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/image-slider/image-slider.component.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс данных для слайдера с изображениями с сервера в виде URL-строк.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            idMainImage\n                                        \n                                \n                                \n                                        \n                                            images\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        idMainImage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        idMainImage:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Индекс главного (выбранного) изображения\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        images\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        images:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Массив URL-строк изображений\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Component, HostListener, Input, OnInit } from '@angular/core';\nimport { NgIf, NgFor } from '@angular/common';\nimport { TuiCarousel } from '@taiga-ui/kit';\n\n/**\n * Интерфейс данных для слайдера с клиентскими изображениями в формате Blob.\n */\nexport interface imageSliderClientData {\n  /** Массив изображений в формате Blob */\n  images: Blob[];\n  /** Индекс главного (выбранного) изображения */\n  idMainImage: number;\n}\n\n/**\n * Интерфейс данных для слайдера с изображениями с сервера в виде URL-строк.\n */\nexport interface imageSliderFromServerData {\n  /** Массив URL-строк изображений */\n  images: string[];\n  /** Индекс главного (выбранного) изображения */\n  idMainImage: number;\n}\n\n/**\n * Компонент слайдера изображений.\n * Отображает изображения с возможностью выбора главного изображения.\n */\n@Component({\n  selector: 'app-image-slider',\n  standalone: true,\n  imports: [NgIf, NgFor, TuiCarousel],\n  templateUrl: './image-slider.component.html',\n  styleUrl: './image-slider.component.scss'\n})\nexport class ImageSliderComponent implements OnInit {\n  /**\n   * Текущий индекс выбранного слайда (используется для локального отслеживания).\n   */\n  protected index: number = 0;\n\n  /**\n   * Флаг, указывающий, находится ли текущее отображение в мобильном виде (ширина \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    16 Components\n                \n            \n        \n        \n            \n                \n                    \n                    1 Directive\n                \n            \n        \n        \n            \n                \n                    \n                    14 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    1 Pipe\n                \n            \n        \n        \n            \n                \n                    \n                    41 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/modelInterface.html":{"url":"interfaces/modelInterface.html","title":"interface - modelInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  modelInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/scene/scene.component.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс для описания размеров модели.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            height\n                                        \n                                \n                                \n                                        \n                                            length\n                                        \n                                \n                                \n                                        \n                                            width\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        height:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Высота модели\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        length\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        length:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Длина модели\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        width:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Ширина модели\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Component, AfterViewInit, ElementRef, HostListener, Input, SimpleChanges, Output, EventEmitter, OnChanges, OnDestroy, Renderer2 } from '@angular/core';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { ProjectService, roomData as roomDataPlan } from '../../services/project.service';\nimport { loadModel } from './loaders';\nimport { FurnitureModelControlService } from '../../services/furniture-model-control.service';\nimport { AccountCookieService } from '../../services/account-cookie.service';\nimport { FurnitureCardControlService } from '../../services/furniture-card-control.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { NotificationService } from '../../services/notification.service';\nimport { Location, NgIf } from '@angular/common';\nimport { PlanHouseComponent } from '../plan-house/plan-house.component';\n\n/**\n * Интерфейс для описания размеров модели.\n */\nexport interface modelInterface {\n  /** Ширина модели */\n  width: number;\n  /** Высота модели */\n  height: number;\n  /** Длина модели */\n  length: number;\n}\n\n/**\n * Интерфейс для описания объекта сцены.\n */\nexport interface objectSceneInterface {\n  /** ID объекта */\n  objectId: string;\n  /** Расстояние по оси X в метрах */\n  xMetersDistance: number;\n  /** Расстояние по оси Z в метрах */\n  zMetersDistance: number;\n  /** Угол поворота по оси Y */\n  yRotate: number;\n}\n\n/**\n * Интерфейс для описания данных загрузки объекта.\n */\ninterface objectLoadInterface {\n  /** Расстояние по оси X */\n  xDistance: number;\n  /** Расстояние по оси Z */\n  zDistance: number;\n  /** Угол поворота по оси Y */\n  yRotate: number;\n}\n\n/**\n * Интерфейс для описания данных комнаты.\n */\ninterface roomData extends modelInterface {\n  /** Массив объектов в комнате */\n  objects: objectSceneInterface[];\n}\n\n@Component({\n  selector: 'app-scene',\n  standalone: true,\n  imports: [NgIf],\n  templateUrl: './scene.component.html',\n  styleUrls: ['./scene.component.scss']\n})\nexport class SceneComponent implements AfterViewInit, OnChanges {\n  constructor(\n    private elementRef: ElementRef,\n    private furnitureModelService: FurnitureModelControlService,\n    private furnitureCardService: FurnitureCardControlService,\n    private accountCookieService: AccountCookieService,\n    private projectService: ProjectService,\n    private route: ActivatedRoute,\n    private notification: NotificationService,\n    private location: Location,\n    private planHouseComponent: PlanHouseComponent,\n    private router: Router\n  ) { }\n\n\n  @Input()\n  /** Данные комнаты */\n  roomData!: roomDataPlan | undefined;\n\n  @Output()\n  /** Событие для сохранения объектов */\n  saveObjectsEmitter = new EventEmitter();\n\n  /** Рендерер Three.js */\n  private renderer!: THREE.WebGLRenderer;\n\n  /** Камера Three.js */\n  private camera!: THREE.PerspectiveCamera;\n\n  /** Сцена Three.js */\n  private scene!: THREE.Scene;\n\n  /** Контроллеры OrbitControls */\n  private controls!: OrbitControls;\n\n  /** ID текущего кадра анимации */\n  private animationFrameId: number | null = null;\n\n  /** Соотношение размеров холста */\n  private canvasRatioOfWindow = 1.5;\n\n  /** Пропорции комнаты */\n  private roomProportions!: modelInterface;\n\n  /** Луч для определения пересечений */\n  private raycaster = new THREE.Raycaster();\n\n  /** Координаты мыши */\n  private mouse = new THREE.Vector2();\n\n  /** Прямоугольная сетка комнаты */\n  private rectangleMesh!: THREE.Mesh;\n\n  /** Прямоугольная сетка комнаты */\n  private abortConroller: AbortController = new AbortController();\n\n  /** Целевой объект для взаимодействия */\n  protected targetobject: THREE.Object3D | undefined = undefined;\n\n  /** Отображается ли loader */\n  protected isShowLoader: boolean = false\n\n  /** Были ли изменения roomData */\n  public hasBeenChanged: boolean = false\n\n\n  ngAfterViewInit(): void {\n    this.initThreeJs();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.roomData = changes['roomData'].currentValue as roomDataPlan\n\n    if (!this.roomData || this.scene === undefined) return\n    if (changes['roomData'].previousValue !== undefined) { this.clearRoom() }\n\n    this.camera.position.set(0, 5, 0)\n    this.camera.rotation.set(THREE.MathUtils.degToRad(-90), 0, 0)\n    this.roomProportions = this.roomData.roomProportions\n    this.createRoom();\n    this.rectangleMesh.rotation.x = THREE.MathUtils.degToRad(-90)\n\n    if (this.getObjectSize(this.rectangleMesh).width === 0) return\n    if (!this.planHouseComponent.sceneOpenToggle) {\n      this.hasBeenChanged = true\n      return\n    }\n\n    this.loadRoom()\n\n    const FURNITURE_ID = this.route.snapshot.params['furnitureCardId']\n    if (!FURNITURE_ID || changes['roomData'].previousValue) return\n\n    this.fixPath()\n\n    this.addModel(FURNITURE_ID, true, this.abortConroller)\n  }\n\n  private async loadFurnitureModel(fileModel: Blob, furnitureSize: modelInterface, furnitureCardId: string, saveRoom: boolean, moveData?: objectLoadInterface) {\n    try {\n      const LOAD_OBJECT = await loadModel(fileModel)\n      if (moveData) { this.addObjectToScene(LOAD_OBJECT, furnitureSize, furnitureCardId, moveData) } else { this.addObjectToScene(LOAD_OBJECT, furnitureSize, furnitureCardId) }\n      if (saveRoom) this.saveRoom()\n    } catch (error) {\n    }\n  }\n  private async addModel(furnitureCardId: string, saveRoom: boolean, controller: AbortController, moveData?: objectLoadInterface) {\n    const JWT = this.accountCookieService.getJwt()\n    if (!JWT) return\n    try {\n      if (saveRoom) this.showLoader()\n      const PROPORTIONS = (await this.furnitureCardService.GETfurnitureCard(furnitureCardId)).furnitureCard.proportions as modelInterface\n      const MODEL = await this.furnitureModelService.GETfurnitureModel(JWT, furnitureCardId, controller)\n      await this.loadFurnitureModel(MODEL, PROPORTIONS, furnitureCardId, saveRoom, moveData)\n      this.closeLoader()\n    } catch (error) {\n      this.closeLoader()\n      this.notification.setError('Ошибка загрузки модели', 5000)\n      console.log(error)\n    }\n  }\n\n  private fixPath() {\n    const NEW_URL = this.location.path().split('/').slice(0, -1).join('/')\n    this.location.replaceState(NEW_URL)\n  }\n  /**\n   * Инициализация Three.js сцены.\n   */\n  private initThreeJs(): void {\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const HEMISPHERE_LIGHT = new THREE.HemisphereLight(0xaaaaaa, 0x000000, 2);\n    this.scene.add(HEMISPHERE_LIGHT);\n    this.renderer = new THREE.WebGLRenderer({ antialias: true, alpha: false });\n    const CANVAS_CONTAINER = this.elementRef.nativeElement.querySelector('#canvasContainer');\n    this.camera.position.z = 5;\n    this.renderer.setSize(window.innerWidth / this.canvasRatioOfWindow, window.innerHeight / this.canvasRatioOfWindow);\n    CANVAS_CONTAINER.appendChild(this.renderer.domElement);\n    this.animationFrameId = requestAnimationFrame(() => this.animate());\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  /**\n   * Анимация сцены.\n   */\n  private animate(): void {\n    this.animationFrameId = requestAnimationFrame(() => this.animate());\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  /**\n   * Создает геометрию прямоугольника с закругленными углами.\n   * @param width Ширина прямоугольника.\n   * @param height Высота прямоугольника.\n   * @param radius Радиус закругления.\n   * @param segments Количество сегментов.\n   * @returns Геометрия прямоугольника.\n   */\n  private createRoundedRectangleGeometry(width: number, height: number, radius: number, segments: number): THREE.BufferGeometry {\n    const SHAPE = new THREE.Shape();\n    SHAPE.moveTo(-width / 2 + radius, -height / 2);\n    SHAPE.lineTo(width / 2 - radius, -height / 2);\n    SHAPE.quadraticCurveTo(width / 2, -height / 2, width / 2, -height / 2 + radius);\n    SHAPE.lineTo(width / 2, height / 2 - radius);\n    SHAPE.quadraticCurveTo(width / 2, height / 2, width / 2 - radius, height / 2);\n    SHAPE.lineTo(-width / 2 + radius, height / 2);\n    SHAPE.quadraticCurveTo(-width / 2, height / 2, -width / 2, height / 2 - radius);\n    SHAPE.lineTo(-width / 2, -height / 2 + radius);\n    SHAPE.quadraticCurveTo(-width / 2, -height / 2, -width / 2 + radius, -height / 2);\n\n    const geometry = new THREE.ShapeGeometry(SHAPE, segments);\n\n    return geometry;\n  }\n\n  /**\n   * Создает комнату на сцене.\n   */\n  private createRoom(): void {\n    if (!this.roomData) return\n    const ROOM_PROPORTIONS = this.roomData.roomProportions\n    const RADIUS = 0.1\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n    this.controls.enableDamping = true;\n    this.controls.dampingFactor = 0.15;\n    this.controls.enableZoom = true;\n    this.controls.minDistance = 1;\n    this.controls.maxDistance = 10;\n    const paddingPolarAngle = 5;\n    this.controls.maxPolarAngle = THREE.MathUtils.degToRad(90 - paddingPolarAngle);\n    this.createRoomShape(ROOM_PROPORTIONS.width, ROOM_PROPORTIONS.length, RADIUS);\n    this.rectangleMesh.name = 'roomFloorBase';\n    this.rectangleMesh\n  }\n\n  /**\n   * Рассчитывает данные для сохранения объекта.\n   * @param object Объект сцены.\n   * @returns Данные для сохранения объекта.\n   */\n  private calculateObjectSaveData(object: THREE.Object3D): objectSceneInterface {\n    const FLOOR_SIZE = this.getObjectSize(this.rectangleMesh)\n    const OBJECT_POSITION = object.position\n    const objectSaveData: objectSceneInterface = {\n      objectId: (object.userData as any).id,\n      xMetersDistance: OBJECT_POSITION.x / FLOOR_SIZE.width * this.roomProportions.width,\n      zMetersDistance: OBJECT_POSITION.z / FLOOR_SIZE.length * this.roomProportions.length,\n      yRotate: object.rotation.y\n    }\n    return objectSaveData\n  }\n\n  /**\n   * Рассчитывает данные для перемещения объекта.\n   * @param objectSaveData Данные сохраненного объекта.\n   * @returns Данные для перемещения объекта.\n   */\n  private calculateMoveObjectData(objectSaveData: objectSceneInterface): objectLoadInterface {\n    const FLOOR_SIZE = this.getObjectSize(this.rectangleMesh)\n    return {\n      xDistance: objectSaveData.xMetersDistance * FLOOR_SIZE.width / this.roomProportions.width,\n      zDistance: objectSaveData.zMetersDistance * FLOOR_SIZE.length / this.roomProportions.length,\n      yRotate: objectSaveData.yRotate\n    }\n  }\n\n  /**\n   * Создает форму комнаты.\n   * @param widthRatio Соотношение ширины.\n   * @param heightRatio Соотношение высоты.\n   * @param radius Радиус закругления.\n   */\n  private createRoomShape(widthRatio: number, heightRatio: number, radius: number): void {\n    const CAMERA_FRUSTUM_BOUNDS = this.calculateFrustumBounds();\n    const SHAPE_RATIO = widthRatio / heightRatio;\n    let width: number, height: number;\n\n    if (SHAPE_RATIO  UPLOAD_OBJECT_SIZE.length ? RECTANGLE_SIZE.width / UPLOAD_OBJECT_SIZE.width : RECTANGLE_SIZE.length / UPLOAD_OBJECT_SIZE.length;\n    const REAL_PROPORTIONS_COEFFICIENT = UPLOAD_OBJECT_SIZE.width > UPLOAD_OBJECT_SIZE.length ? width / this.roomProportions.width : length / length;\n    const GENERAL_COEFFICIENT = REAL_PROPORTIONS_COEFFICIENT * SCENE_PROPORTIONS_COEFFICIENT;\n    object.scale.set(GENERAL_COEFFICIENT, GENERAL_COEFFICIENT, GENERAL_COEFFICIENT);\n  }\n\n  /**\n   * Загружает комнату с объектами.\n   */\n  public async loadRoom(): Promise {\n    const JWT = this.accountCookieService.getJwt()\n    if (!JWT || !this.roomData) return\n    const roomData: roomData = {\n      objects: this.roomData.objects,\n      ...this.roomData.roomProportions\n    }\n\n    this.showLoader()\n    for (const object of roomData.objects) {\n      await this.addModel(object.objectId, false, this.abortConroller, this.calculateMoveObjectData(object));\n    }\n    this.closeLoader()\n    this.hasBeenChanged = false\n  }\n\n  private showLoader() {\n    this.isShowLoader = true\n  }\n  private closeLoader() {\n    this.isShowLoader = false\n  }\n  /**\n   * Очищает комнату от объектов.\n   */\n  private clearRoom(): void {\n    for (let i = this.scene.children.length - 1; i >= 0; i--) {\n      const OBJECT = this.scene.children[i];\n      if (OBJECT.type !== 'Scene' && OBJECT.type !== 'HemisphereLight') {\n        this.scene.remove(OBJECT);\n      }\n    }\n  }\n\n  /**\n   * Обрабатывает изменение размера окна.\n   * @param event Событие изменения размера.\n   */\n  @HostListener('window:resize', ['$event'])\n  private onResize(event: Event): void {\n    this.renderer.setSize(window.innerWidth / this.canvasRatioOfWindow, window.innerHeight / this.canvasRatioOfWindow);\n    this.camera.aspect = window.innerWidth / window.innerHeight;\n    this.camera.updateProjectionMatrix();\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  /**\n   * Обрабатывает клик мыши.\n   * @param event Событие клика.\n   */\n  @HostListener('click', ['$event'])\n  private onMouseClick(event: MouseEvent): void {\n    if (this.targetobject) {\n      this.targetobject = undefined;\n      return;\n    }\n    const RECT = (event.target as HTMLCanvasElement).getBoundingClientRect();\n    const X = (event.clientX - RECT.left) / RECT.width * 2 - 1;\n    const Y = -(event.clientY - RECT.top) / RECT.height * 2 + 1;\n\n    this.mouse.x = X;\n    this.mouse.y = Y;\n    this.raycaster.setFromCamera(this.mouse, this.camera);\n\n    const INTERSECTIONS = this.raycaster.intersectObjects(this.scene.children);\n\n    const FOUND_INTERSECTION = INTERSECTIONS.find(intersect => {\n      return intersect.object.name !== 'roomFloorBase' && intersect.object.type !== 'Scene' && intersect.object.type !== 'HemisphereLight'\n    })?.object\n    if (!FOUND_INTERSECTION) return\n    this.targetobject = FOUND_INTERSECTION.parent ? FOUND_INTERSECTION.parent : FOUND_INTERSECTION\n  }\n\n  /**\n   * Поворачивает целевой объект.\n   * @param event Событие нажатия клавиши.\n   */\n  @HostListener('window:keydown', ['$event'])\n  private rotateTargetObject(event: KeyboardEvent): void {\n    if (!this.targetobject) return\n    let rotateAngle = -0.05\n\n    switch (event.key) {\n      case 'q':\n      case 'й':\n        this.targetobject.rotation.y -= rotateAngle\n        break\n      case 'e':\n      case 'у':\n        this.targetobject.rotation.y += rotateAngle\n    }\n  }\n\n  /**\n   * Обрабатывает перемещение мыши.\n   * @param event Событие перемещения мыши.\n   */\n  @HostListener('mousemove', ['$event'])\n  private onMousemove(event: MouseEvent): void {\n    if (!this.targetobject) return;\n\n    const RECT = (event.target as HTMLCanvasElement).getBoundingClientRect();\n    const X = (event.clientX - RECT.left) / RECT.width * 2 - 1;\n    const Y = -(event.clientY - RECT.top) / RECT.height * 2 + 1;\n\n    this.mouse.x = X;\n    this.mouse.y = Y;\n    this.raycaster.setFromCamera(this.mouse, this.camera);\n\n    const INTERSECTIONS = this.raycaster.intersectObject(this.rectangleMesh);\n    if (INTERSECTIONS.length === 0) return;\n\n    const INTERSECTIONS_X = INTERSECTIONS[0].point.x;\n    const INTERSECTION_Z = INTERSECTIONS[0].point.z;\n    const RECTANGLE_MESH_SIZE = this.getObjectSize(this.rectangleMesh);\n    const objectSize = this.getObjectSize(this.targetobject);\n\n    const minX = -RECTANGLE_MESH_SIZE.width / 2 + objectSize.width / 2;\n    const maxX = RECTANGLE_MESH_SIZE.width / 2 - objectSize.width / 2;\n\n    let newXObjectPosition = INTERSECTIONS_X;\n    if (newXObjectPosition  maxX) {\n      newXObjectPosition = maxX;\n    }\n\n    const MIN_Z = -RECTANGLE_MESH_SIZE.length / 2 + objectSize.length / 2;\n    const MAX_Z = RECTANGLE_MESH_SIZE.length / 2 - objectSize.length / 2;\n\n    let newZObjectPosition = INTERSECTION_Z;\n    if (newZObjectPosition  MAX_Z) {\n      newZObjectPosition = MAX_Z;\n    }\n\n    this.targetobject.position.set(newXObjectPosition, 0, newZObjectPosition);\n  }\n\n  /**\n   * Генерирует отчет по комнате.\n   */\n  protected abortLoadRoom() {\n    this.abortConroller.abort()\n    this.abortConroller = new AbortController()\n\n    this.planHouseComponent.sceneOpenToggle = false\n    this.planHouseComponent.closeViewRoom()\n\n    const PLAN_ID = this.route.snapshot.params['planId']\n    this.router.navigateByUrl('/plan/' + PLAN_ID)\n  }\n\n  /**\n   * Генерирует отчет по комнате.\n   */\n  protected async getReport(): Promise {\n    const JWT = this.accountCookieService.getJwt()\n    if (!JWT || !this.roomData?._id) return\n\n    const oldCameraPosition = this.camera.position.clone();\n    const oldCameraRotation = this.camera.rotation.clone();\n\n    this.camera.position.set(0, 7, 0)\n    this.camera.rotation.set(THREE.MathUtils.degToRad(-90), 0, 0)\n    this.renderer.render(this.scene, this.camera);\n    const imageDataURL = this.renderer.domElement.toDataURL('image/png')\n    const imageDataResponse = await fetch(imageDataURL)\n\n    this.camera.position.copy(oldCameraPosition);\n    this.camera.rotation.copy(oldCameraRotation);\n\n    if (!imageDataResponse.ok) {\n      this.notification.setError('Ошибка при рендере', 5000)\n    }\n    const imageDataBlob = await imageDataResponse.blob()\n\n    this.projectService.GETgetReportOfRoom(JWT, this.roomData?._id, imageDataBlob)\n  }\n\n  /**\n   * Удаляет выбранную модель.\n   */\n  protected deleteModel(): void {\n    if (!this.targetobject) return\n    this.scene.remove(this.targetobject)\n    this.saveRoom()\n  }\n\n  /**\n   * Сохраняет текущее состояние комнаты.\n   */\n  public saveRoom(): void {\n    if (!this.roomData) return\n    const OBJECTS_SCENE_ARRAY = this.scene.children.filter(object => {\n      if (\n        object.name !== 'roomFloorBase' &&\n        object.type !== 'Scene' &&\n        object.type !== 'HemisphereLight'\n      ) {\n        return true;\n      }\n      return false;\n    })\n      .map(object => {\n        return this.calculateObjectSaveData(object)\n      })\n    const ROOM_OBJECTS_DATA = OBJECTS_SCENE_ARRAY\n    this.roomData.objects = OBJECTS_SCENE_ARRAY\n    this.saveObjectsEmitter.emit(ROOM_OBJECTS_DATA)\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/objectLoadInterface.html":{"url":"interfaces/objectLoadInterface.html","title":"interface - objectLoadInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  objectLoadInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/scene/scene.component.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс для описания данных загрузки объекта.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            xDistance\n                                        \n                                \n                                \n                                        \n                                            yRotate\n                                        \n                                \n                                \n                                        \n                                            zDistance\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        xDistance\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        xDistance:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Расстояние по оси X\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        yRotate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        yRotate:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Угол поворота по оси Y\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        zDistance\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        zDistance:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Расстояние по оси Z\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Component, AfterViewInit, ElementRef, HostListener, Input, SimpleChanges, Output, EventEmitter, OnChanges, OnDestroy, Renderer2 } from '@angular/core';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { ProjectService, roomData as roomDataPlan } from '../../services/project.service';\nimport { loadModel } from './loaders';\nimport { FurnitureModelControlService } from '../../services/furniture-model-control.service';\nimport { AccountCookieService } from '../../services/account-cookie.service';\nimport { FurnitureCardControlService } from '../../services/furniture-card-control.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { NotificationService } from '../../services/notification.service';\nimport { Location, NgIf } from '@angular/common';\nimport { PlanHouseComponent } from '../plan-house/plan-house.component';\n\n/**\n * Интерфейс для описания размеров модели.\n */\nexport interface modelInterface {\n  /** Ширина модели */\n  width: number;\n  /** Высота модели */\n  height: number;\n  /** Длина модели */\n  length: number;\n}\n\n/**\n * Интерфейс для описания объекта сцены.\n */\nexport interface objectSceneInterface {\n  /** ID объекта */\n  objectId: string;\n  /** Расстояние по оси X в метрах */\n  xMetersDistance: number;\n  /** Расстояние по оси Z в метрах */\n  zMetersDistance: number;\n  /** Угол поворота по оси Y */\n  yRotate: number;\n}\n\n/**\n * Интерфейс для описания данных загрузки объекта.\n */\ninterface objectLoadInterface {\n  /** Расстояние по оси X */\n  xDistance: number;\n  /** Расстояние по оси Z */\n  zDistance: number;\n  /** Угол поворота по оси Y */\n  yRotate: number;\n}\n\n/**\n * Интерфейс для описания данных комнаты.\n */\ninterface roomData extends modelInterface {\n  /** Массив объектов в комнате */\n  objects: objectSceneInterface[];\n}\n\n@Component({\n  selector: 'app-scene',\n  standalone: true,\n  imports: [NgIf],\n  templateUrl: './scene.component.html',\n  styleUrls: ['./scene.component.scss']\n})\nexport class SceneComponent implements AfterViewInit, OnChanges {\n  constructor(\n    private elementRef: ElementRef,\n    private furnitureModelService: FurnitureModelControlService,\n    private furnitureCardService: FurnitureCardControlService,\n    private accountCookieService: AccountCookieService,\n    private projectService: ProjectService,\n    private route: ActivatedRoute,\n    private notification: NotificationService,\n    private location: Location,\n    private planHouseComponent: PlanHouseComponent,\n    private router: Router\n  ) { }\n\n\n  @Input()\n  /** Данные комнаты */\n  roomData!: roomDataPlan | undefined;\n\n  @Output()\n  /** Событие для сохранения объектов */\n  saveObjectsEmitter = new EventEmitter();\n\n  /** Рендерер Three.js */\n  private renderer!: THREE.WebGLRenderer;\n\n  /** Камера Three.js */\n  private camera!: THREE.PerspectiveCamera;\n\n  /** Сцена Three.js */\n  private scene!: THREE.Scene;\n\n  /** Контроллеры OrbitControls */\n  private controls!: OrbitControls;\n\n  /** ID текущего кадра анимации */\n  private animationFrameId: number | null = null;\n\n  /** Соотношение размеров холста */\n  private canvasRatioOfWindow = 1.5;\n\n  /** Пропорции комнаты */\n  private roomProportions!: modelInterface;\n\n  /** Луч для определения пересечений */\n  private raycaster = new THREE.Raycaster();\n\n  /** Координаты мыши */\n  private mouse = new THREE.Vector2();\n\n  /** Прямоугольная сетка комнаты */\n  private rectangleMesh!: THREE.Mesh;\n\n  /** Прямоугольная сетка комнаты */\n  private abortConroller: AbortController = new AbortController();\n\n  /** Целевой объект для взаимодействия */\n  protected targetobject: THREE.Object3D | undefined = undefined;\n\n  /** Отображается ли loader */\n  protected isShowLoader: boolean = false\n\n  /** Были ли изменения roomData */\n  public hasBeenChanged: boolean = false\n\n\n  ngAfterViewInit(): void {\n    this.initThreeJs();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.roomData = changes['roomData'].currentValue as roomDataPlan\n\n    if (!this.roomData || this.scene === undefined) return\n    if (changes['roomData'].previousValue !== undefined) { this.clearRoom() }\n\n    this.camera.position.set(0, 5, 0)\n    this.camera.rotation.set(THREE.MathUtils.degToRad(-90), 0, 0)\n    this.roomProportions = this.roomData.roomProportions\n    this.createRoom();\n    this.rectangleMesh.rotation.x = THREE.MathUtils.degToRad(-90)\n\n    if (this.getObjectSize(this.rectangleMesh).width === 0) return\n    if (!this.planHouseComponent.sceneOpenToggle) {\n      this.hasBeenChanged = true\n      return\n    }\n\n    this.loadRoom()\n\n    const FURNITURE_ID = this.route.snapshot.params['furnitureCardId']\n    if (!FURNITURE_ID || changes['roomData'].previousValue) return\n\n    this.fixPath()\n\n    this.addModel(FURNITURE_ID, true, this.abortConroller)\n  }\n\n  private async loadFurnitureModel(fileModel: Blob, furnitureSize: modelInterface, furnitureCardId: string, saveRoom: boolean, moveData?: objectLoadInterface) {\n    try {\n      const LOAD_OBJECT = await loadModel(fileModel)\n      if (moveData) { this.addObjectToScene(LOAD_OBJECT, furnitureSize, furnitureCardId, moveData) } else { this.addObjectToScene(LOAD_OBJECT, furnitureSize, furnitureCardId) }\n      if (saveRoom) this.saveRoom()\n    } catch (error) {\n    }\n  }\n  private async addModel(furnitureCardId: string, saveRoom: boolean, controller: AbortController, moveData?: objectLoadInterface) {\n    const JWT = this.accountCookieService.getJwt()\n    if (!JWT) return\n    try {\n      if (saveRoom) this.showLoader()\n      const PROPORTIONS = (await this.furnitureCardService.GETfurnitureCard(furnitureCardId)).furnitureCard.proportions as modelInterface\n      const MODEL = await this.furnitureModelService.GETfurnitureModel(JWT, furnitureCardId, controller)\n      await this.loadFurnitureModel(MODEL, PROPORTIONS, furnitureCardId, saveRoom, moveData)\n      this.closeLoader()\n    } catch (error) {\n      this.closeLoader()\n      this.notification.setError('Ошибка загрузки модели', 5000)\n      console.log(error)\n    }\n  }\n\n  private fixPath() {\n    const NEW_URL = this.location.path().split('/').slice(0, -1).join('/')\n    this.location.replaceState(NEW_URL)\n  }\n  /**\n   * Инициализация Three.js сцены.\n   */\n  private initThreeJs(): void {\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const HEMISPHERE_LIGHT = new THREE.HemisphereLight(0xaaaaaa, 0x000000, 2);\n    this.scene.add(HEMISPHERE_LIGHT);\n    this.renderer = new THREE.WebGLRenderer({ antialias: true, alpha: false });\n    const CANVAS_CONTAINER = this.elementRef.nativeElement.querySelector('#canvasContainer');\n    this.camera.position.z = 5;\n    this.renderer.setSize(window.innerWidth / this.canvasRatioOfWindow, window.innerHeight / this.canvasRatioOfWindow);\n    CANVAS_CONTAINER.appendChild(this.renderer.domElement);\n    this.animationFrameId = requestAnimationFrame(() => this.animate());\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  /**\n   * Анимация сцены.\n   */\n  private animate(): void {\n    this.animationFrameId = requestAnimationFrame(() => this.animate());\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  /**\n   * Создает геометрию прямоугольника с закругленными углами.\n   * @param width Ширина прямоугольника.\n   * @param height Высота прямоугольника.\n   * @param radius Радиус закругления.\n   * @param segments Количество сегментов.\n   * @returns Геометрия прямоугольника.\n   */\n  private createRoundedRectangleGeometry(width: number, height: number, radius: number, segments: number): THREE.BufferGeometry {\n    const SHAPE = new THREE.Shape();\n    SHAPE.moveTo(-width / 2 + radius, -height / 2);\n    SHAPE.lineTo(width / 2 - radius, -height / 2);\n    SHAPE.quadraticCurveTo(width / 2, -height / 2, width / 2, -height / 2 + radius);\n    SHAPE.lineTo(width / 2, height / 2 - radius);\n    SHAPE.quadraticCurveTo(width / 2, height / 2, width / 2 - radius, height / 2);\n    SHAPE.lineTo(-width / 2 + radius, height / 2);\n    SHAPE.quadraticCurveTo(-width / 2, height / 2, -width / 2, height / 2 - radius);\n    SHAPE.lineTo(-width / 2, -height / 2 + radius);\n    SHAPE.quadraticCurveTo(-width / 2, -height / 2, -width / 2 + radius, -height / 2);\n\n    const geometry = new THREE.ShapeGeometry(SHAPE, segments);\n\n    return geometry;\n  }\n\n  /**\n   * Создает комнату на сцене.\n   */\n  private createRoom(): void {\n    if (!this.roomData) return\n    const ROOM_PROPORTIONS = this.roomData.roomProportions\n    const RADIUS = 0.1\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n    this.controls.enableDamping = true;\n    this.controls.dampingFactor = 0.15;\n    this.controls.enableZoom = true;\n    this.controls.minDistance = 1;\n    this.controls.maxDistance = 10;\n    const paddingPolarAngle = 5;\n    this.controls.maxPolarAngle = THREE.MathUtils.degToRad(90 - paddingPolarAngle);\n    this.createRoomShape(ROOM_PROPORTIONS.width, ROOM_PROPORTIONS.length, RADIUS);\n    this.rectangleMesh.name = 'roomFloorBase';\n    this.rectangleMesh\n  }\n\n  /**\n   * Рассчитывает данные для сохранения объекта.\n   * @param object Объект сцены.\n   * @returns Данные для сохранения объекта.\n   */\n  private calculateObjectSaveData(object: THREE.Object3D): objectSceneInterface {\n    const FLOOR_SIZE = this.getObjectSize(this.rectangleMesh)\n    const OBJECT_POSITION = object.position\n    const objectSaveData: objectSceneInterface = {\n      objectId: (object.userData as any).id,\n      xMetersDistance: OBJECT_POSITION.x / FLOOR_SIZE.width * this.roomProportions.width,\n      zMetersDistance: OBJECT_POSITION.z / FLOOR_SIZE.length * this.roomProportions.length,\n      yRotate: object.rotation.y\n    }\n    return objectSaveData\n  }\n\n  /**\n   * Рассчитывает данные для перемещения объекта.\n   * @param objectSaveData Данные сохраненного объекта.\n   * @returns Данные для перемещения объекта.\n   */\n  private calculateMoveObjectData(objectSaveData: objectSceneInterface): objectLoadInterface {\n    const FLOOR_SIZE = this.getObjectSize(this.rectangleMesh)\n    return {\n      xDistance: objectSaveData.xMetersDistance * FLOOR_SIZE.width / this.roomProportions.width,\n      zDistance: objectSaveData.zMetersDistance * FLOOR_SIZE.length / this.roomProportions.length,\n      yRotate: objectSaveData.yRotate\n    }\n  }\n\n  /**\n   * Создает форму комнаты.\n   * @param widthRatio Соотношение ширины.\n   * @param heightRatio Соотношение высоты.\n   * @param radius Радиус закругления.\n   */\n  private createRoomShape(widthRatio: number, heightRatio: number, radius: number): void {\n    const CAMERA_FRUSTUM_BOUNDS = this.calculateFrustumBounds();\n    const SHAPE_RATIO = widthRatio / heightRatio;\n    let width: number, height: number;\n\n    if (SHAPE_RATIO  UPLOAD_OBJECT_SIZE.length ? RECTANGLE_SIZE.width / UPLOAD_OBJECT_SIZE.width : RECTANGLE_SIZE.length / UPLOAD_OBJECT_SIZE.length;\n    const REAL_PROPORTIONS_COEFFICIENT = UPLOAD_OBJECT_SIZE.width > UPLOAD_OBJECT_SIZE.length ? width / this.roomProportions.width : length / length;\n    const GENERAL_COEFFICIENT = REAL_PROPORTIONS_COEFFICIENT * SCENE_PROPORTIONS_COEFFICIENT;\n    object.scale.set(GENERAL_COEFFICIENT, GENERAL_COEFFICIENT, GENERAL_COEFFICIENT);\n  }\n\n  /**\n   * Загружает комнату с объектами.\n   */\n  public async loadRoom(): Promise {\n    const JWT = this.accountCookieService.getJwt()\n    if (!JWT || !this.roomData) return\n    const roomData: roomData = {\n      objects: this.roomData.objects,\n      ...this.roomData.roomProportions\n    }\n\n    this.showLoader()\n    for (const object of roomData.objects) {\n      await this.addModel(object.objectId, false, this.abortConroller, this.calculateMoveObjectData(object));\n    }\n    this.closeLoader()\n    this.hasBeenChanged = false\n  }\n\n  private showLoader() {\n    this.isShowLoader = true\n  }\n  private closeLoader() {\n    this.isShowLoader = false\n  }\n  /**\n   * Очищает комнату от объектов.\n   */\n  private clearRoom(): void {\n    for (let i = this.scene.children.length - 1; i >= 0; i--) {\n      const OBJECT = this.scene.children[i];\n      if (OBJECT.type !== 'Scene' && OBJECT.type !== 'HemisphereLight') {\n        this.scene.remove(OBJECT);\n      }\n    }\n  }\n\n  /**\n   * Обрабатывает изменение размера окна.\n   * @param event Событие изменения размера.\n   */\n  @HostListener('window:resize', ['$event'])\n  private onResize(event: Event): void {\n    this.renderer.setSize(window.innerWidth / this.canvasRatioOfWindow, window.innerHeight / this.canvasRatioOfWindow);\n    this.camera.aspect = window.innerWidth / window.innerHeight;\n    this.camera.updateProjectionMatrix();\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  /**\n   * Обрабатывает клик мыши.\n   * @param event Событие клика.\n   */\n  @HostListener('click', ['$event'])\n  private onMouseClick(event: MouseEvent): void {\n    if (this.targetobject) {\n      this.targetobject = undefined;\n      return;\n    }\n    const RECT = (event.target as HTMLCanvasElement).getBoundingClientRect();\n    const X = (event.clientX - RECT.left) / RECT.width * 2 - 1;\n    const Y = -(event.clientY - RECT.top) / RECT.height * 2 + 1;\n\n    this.mouse.x = X;\n    this.mouse.y = Y;\n    this.raycaster.setFromCamera(this.mouse, this.camera);\n\n    const INTERSECTIONS = this.raycaster.intersectObjects(this.scene.children);\n\n    const FOUND_INTERSECTION = INTERSECTIONS.find(intersect => {\n      return intersect.object.name !== 'roomFloorBase' && intersect.object.type !== 'Scene' && intersect.object.type !== 'HemisphereLight'\n    })?.object\n    if (!FOUND_INTERSECTION) return\n    this.targetobject = FOUND_INTERSECTION.parent ? FOUND_INTERSECTION.parent : FOUND_INTERSECTION\n  }\n\n  /**\n   * Поворачивает целевой объект.\n   * @param event Событие нажатия клавиши.\n   */\n  @HostListener('window:keydown', ['$event'])\n  private rotateTargetObject(event: KeyboardEvent): void {\n    if (!this.targetobject) return\n    let rotateAngle = -0.05\n\n    switch (event.key) {\n      case 'q':\n      case 'й':\n        this.targetobject.rotation.y -= rotateAngle\n        break\n      case 'e':\n      case 'у':\n        this.targetobject.rotation.y += rotateAngle\n    }\n  }\n\n  /**\n   * Обрабатывает перемещение мыши.\n   * @param event Событие перемещения мыши.\n   */\n  @HostListener('mousemove', ['$event'])\n  private onMousemove(event: MouseEvent): void {\n    if (!this.targetobject) return;\n\n    const RECT = (event.target as HTMLCanvasElement).getBoundingClientRect();\n    const X = (event.clientX - RECT.left) / RECT.width * 2 - 1;\n    const Y = -(event.clientY - RECT.top) / RECT.height * 2 + 1;\n\n    this.mouse.x = X;\n    this.mouse.y = Y;\n    this.raycaster.setFromCamera(this.mouse, this.camera);\n\n    const INTERSECTIONS = this.raycaster.intersectObject(this.rectangleMesh);\n    if (INTERSECTIONS.length === 0) return;\n\n    const INTERSECTIONS_X = INTERSECTIONS[0].point.x;\n    const INTERSECTION_Z = INTERSECTIONS[0].point.z;\n    const RECTANGLE_MESH_SIZE = this.getObjectSize(this.rectangleMesh);\n    const objectSize = this.getObjectSize(this.targetobject);\n\n    const minX = -RECTANGLE_MESH_SIZE.width / 2 + objectSize.width / 2;\n    const maxX = RECTANGLE_MESH_SIZE.width / 2 - objectSize.width / 2;\n\n    let newXObjectPosition = INTERSECTIONS_X;\n    if (newXObjectPosition  maxX) {\n      newXObjectPosition = maxX;\n    }\n\n    const MIN_Z = -RECTANGLE_MESH_SIZE.length / 2 + objectSize.length / 2;\n    const MAX_Z = RECTANGLE_MESH_SIZE.length / 2 - objectSize.length / 2;\n\n    let newZObjectPosition = INTERSECTION_Z;\n    if (newZObjectPosition  MAX_Z) {\n      newZObjectPosition = MAX_Z;\n    }\n\n    this.targetobject.position.set(newXObjectPosition, 0, newZObjectPosition);\n  }\n\n  /**\n   * Генерирует отчет по комнате.\n   */\n  protected abortLoadRoom() {\n    this.abortConroller.abort()\n    this.abortConroller = new AbortController()\n\n    this.planHouseComponent.sceneOpenToggle = false\n    this.planHouseComponent.closeViewRoom()\n\n    const PLAN_ID = this.route.snapshot.params['planId']\n    this.router.navigateByUrl('/plan/' + PLAN_ID)\n  }\n\n  /**\n   * Генерирует отчет по комнате.\n   */\n  protected async getReport(): Promise {\n    const JWT = this.accountCookieService.getJwt()\n    if (!JWT || !this.roomData?._id) return\n\n    const oldCameraPosition = this.camera.position.clone();\n    const oldCameraRotation = this.camera.rotation.clone();\n\n    this.camera.position.set(0, 7, 0)\n    this.camera.rotation.set(THREE.MathUtils.degToRad(-90), 0, 0)\n    this.renderer.render(this.scene, this.camera);\n    const imageDataURL = this.renderer.domElement.toDataURL('image/png')\n    const imageDataResponse = await fetch(imageDataURL)\n\n    this.camera.position.copy(oldCameraPosition);\n    this.camera.rotation.copy(oldCameraRotation);\n\n    if (!imageDataResponse.ok) {\n      this.notification.setError('Ошибка при рендере', 5000)\n    }\n    const imageDataBlob = await imageDataResponse.blob()\n\n    this.projectService.GETgetReportOfRoom(JWT, this.roomData?._id, imageDataBlob)\n  }\n\n  /**\n   * Удаляет выбранную модель.\n   */\n  protected deleteModel(): void {\n    if (!this.targetobject) return\n    this.scene.remove(this.targetobject)\n    this.saveRoom()\n  }\n\n  /**\n   * Сохраняет текущее состояние комнаты.\n   */\n  public saveRoom(): void {\n    if (!this.roomData) return\n    const OBJECTS_SCENE_ARRAY = this.scene.children.filter(object => {\n      if (\n        object.name !== 'roomFloorBase' &&\n        object.type !== 'Scene' &&\n        object.type !== 'HemisphereLight'\n      ) {\n        return true;\n      }\n      return false;\n    })\n      .map(object => {\n        return this.calculateObjectSaveData(object)\n      })\n    const ROOM_OBJECTS_DATA = OBJECTS_SCENE_ARRAY\n    this.roomData.objects = OBJECTS_SCENE_ARRAY\n    this.saveObjectsEmitter.emit(ROOM_OBJECTS_DATA)\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/objectSceneInterface.html":{"url":"interfaces/objectSceneInterface.html","title":"interface - objectSceneInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  objectSceneInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/scene/scene.component.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс для описания объекта сцены.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            objectId\n                                        \n                                \n                                \n                                        \n                                            xMetersDistance\n                                        \n                                \n                                \n                                        \n                                            yRotate\n                                        \n                                \n                                \n                                        \n                                            zMetersDistance\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        objectId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        objectId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    ID объекта\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        xMetersDistance\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        xMetersDistance:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Расстояние по оси X в метрах\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        yRotate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        yRotate:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Угол поворота по оси Y\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        zMetersDistance\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        zMetersDistance:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Расстояние по оси Z в метрах\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Component, AfterViewInit, ElementRef, HostListener, Input, SimpleChanges, Output, EventEmitter, OnChanges, OnDestroy, Renderer2 } from '@angular/core';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { ProjectService, roomData as roomDataPlan } from '../../services/project.service';\nimport { loadModel } from './loaders';\nimport { FurnitureModelControlService } from '../../services/furniture-model-control.service';\nimport { AccountCookieService } from '../../services/account-cookie.service';\nimport { FurnitureCardControlService } from '../../services/furniture-card-control.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { NotificationService } from '../../services/notification.service';\nimport { Location, NgIf } from '@angular/common';\nimport { PlanHouseComponent } from '../plan-house/plan-house.component';\n\n/**\n * Интерфейс для описания размеров модели.\n */\nexport interface modelInterface {\n  /** Ширина модели */\n  width: number;\n  /** Высота модели */\n  height: number;\n  /** Длина модели */\n  length: number;\n}\n\n/**\n * Интерфейс для описания объекта сцены.\n */\nexport interface objectSceneInterface {\n  /** ID объекта */\n  objectId: string;\n  /** Расстояние по оси X в метрах */\n  xMetersDistance: number;\n  /** Расстояние по оси Z в метрах */\n  zMetersDistance: number;\n  /** Угол поворота по оси Y */\n  yRotate: number;\n}\n\n/**\n * Интерфейс для описания данных загрузки объекта.\n */\ninterface objectLoadInterface {\n  /** Расстояние по оси X */\n  xDistance: number;\n  /** Расстояние по оси Z */\n  zDistance: number;\n  /** Угол поворота по оси Y */\n  yRotate: number;\n}\n\n/**\n * Интерфейс для описания данных комнаты.\n */\ninterface roomData extends modelInterface {\n  /** Массив объектов в комнате */\n  objects: objectSceneInterface[];\n}\n\n@Component({\n  selector: 'app-scene',\n  standalone: true,\n  imports: [NgIf],\n  templateUrl: './scene.component.html',\n  styleUrls: ['./scene.component.scss']\n})\nexport class SceneComponent implements AfterViewInit, OnChanges {\n  constructor(\n    private elementRef: ElementRef,\n    private furnitureModelService: FurnitureModelControlService,\n    private furnitureCardService: FurnitureCardControlService,\n    private accountCookieService: AccountCookieService,\n    private projectService: ProjectService,\n    private route: ActivatedRoute,\n    private notification: NotificationService,\n    private location: Location,\n    private planHouseComponent: PlanHouseComponent,\n    private router: Router\n  ) { }\n\n\n  @Input()\n  /** Данные комнаты */\n  roomData!: roomDataPlan | undefined;\n\n  @Output()\n  /** Событие для сохранения объектов */\n  saveObjectsEmitter = new EventEmitter();\n\n  /** Рендерер Three.js */\n  private renderer!: THREE.WebGLRenderer;\n\n  /** Камера Three.js */\n  private camera!: THREE.PerspectiveCamera;\n\n  /** Сцена Three.js */\n  private scene!: THREE.Scene;\n\n  /** Контроллеры OrbitControls */\n  private controls!: OrbitControls;\n\n  /** ID текущего кадра анимации */\n  private animationFrameId: number | null = null;\n\n  /** Соотношение размеров холста */\n  private canvasRatioOfWindow = 1.5;\n\n  /** Пропорции комнаты */\n  private roomProportions!: modelInterface;\n\n  /** Луч для определения пересечений */\n  private raycaster = new THREE.Raycaster();\n\n  /** Координаты мыши */\n  private mouse = new THREE.Vector2();\n\n  /** Прямоугольная сетка комнаты */\n  private rectangleMesh!: THREE.Mesh;\n\n  /** Прямоугольная сетка комнаты */\n  private abortConroller: AbortController = new AbortController();\n\n  /** Целевой объект для взаимодействия */\n  protected targetobject: THREE.Object3D | undefined = undefined;\n\n  /** Отображается ли loader */\n  protected isShowLoader: boolean = false\n\n  /** Были ли изменения roomData */\n  public hasBeenChanged: boolean = false\n\n\n  ngAfterViewInit(): void {\n    this.initThreeJs();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.roomData = changes['roomData'].currentValue as roomDataPlan\n\n    if (!this.roomData || this.scene === undefined) return\n    if (changes['roomData'].previousValue !== undefined) { this.clearRoom() }\n\n    this.camera.position.set(0, 5, 0)\n    this.camera.rotation.set(THREE.MathUtils.degToRad(-90), 0, 0)\n    this.roomProportions = this.roomData.roomProportions\n    this.createRoom();\n    this.rectangleMesh.rotation.x = THREE.MathUtils.degToRad(-90)\n\n    if (this.getObjectSize(this.rectangleMesh).width === 0) return\n    if (!this.planHouseComponent.sceneOpenToggle) {\n      this.hasBeenChanged = true\n      return\n    }\n\n    this.loadRoom()\n\n    const FURNITURE_ID = this.route.snapshot.params['furnitureCardId']\n    if (!FURNITURE_ID || changes['roomData'].previousValue) return\n\n    this.fixPath()\n\n    this.addModel(FURNITURE_ID, true, this.abortConroller)\n  }\n\n  private async loadFurnitureModel(fileModel: Blob, furnitureSize: modelInterface, furnitureCardId: string, saveRoom: boolean, moveData?: objectLoadInterface) {\n    try {\n      const LOAD_OBJECT = await loadModel(fileModel)\n      if (moveData) { this.addObjectToScene(LOAD_OBJECT, furnitureSize, furnitureCardId, moveData) } else { this.addObjectToScene(LOAD_OBJECT, furnitureSize, furnitureCardId) }\n      if (saveRoom) this.saveRoom()\n    } catch (error) {\n    }\n  }\n  private async addModel(furnitureCardId: string, saveRoom: boolean, controller: AbortController, moveData?: objectLoadInterface) {\n    const JWT = this.accountCookieService.getJwt()\n    if (!JWT) return\n    try {\n      if (saveRoom) this.showLoader()\n      const PROPORTIONS = (await this.furnitureCardService.GETfurnitureCard(furnitureCardId)).furnitureCard.proportions as modelInterface\n      const MODEL = await this.furnitureModelService.GETfurnitureModel(JWT, furnitureCardId, controller)\n      await this.loadFurnitureModel(MODEL, PROPORTIONS, furnitureCardId, saveRoom, moveData)\n      this.closeLoader()\n    } catch (error) {\n      this.closeLoader()\n      this.notification.setError('Ошибка загрузки модели', 5000)\n      console.log(error)\n    }\n  }\n\n  private fixPath() {\n    const NEW_URL = this.location.path().split('/').slice(0, -1).join('/')\n    this.location.replaceState(NEW_URL)\n  }\n  /**\n   * Инициализация Three.js сцены.\n   */\n  private initThreeJs(): void {\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const HEMISPHERE_LIGHT = new THREE.HemisphereLight(0xaaaaaa, 0x000000, 2);\n    this.scene.add(HEMISPHERE_LIGHT);\n    this.renderer = new THREE.WebGLRenderer({ antialias: true, alpha: false });\n    const CANVAS_CONTAINER = this.elementRef.nativeElement.querySelector('#canvasContainer');\n    this.camera.position.z = 5;\n    this.renderer.setSize(window.innerWidth / this.canvasRatioOfWindow, window.innerHeight / this.canvasRatioOfWindow);\n    CANVAS_CONTAINER.appendChild(this.renderer.domElement);\n    this.animationFrameId = requestAnimationFrame(() => this.animate());\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  /**\n   * Анимация сцены.\n   */\n  private animate(): void {\n    this.animationFrameId = requestAnimationFrame(() => this.animate());\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  /**\n   * Создает геометрию прямоугольника с закругленными углами.\n   * @param width Ширина прямоугольника.\n   * @param height Высота прямоугольника.\n   * @param radius Радиус закругления.\n   * @param segments Количество сегментов.\n   * @returns Геометрия прямоугольника.\n   */\n  private createRoundedRectangleGeometry(width: number, height: number, radius: number, segments: number): THREE.BufferGeometry {\n    const SHAPE = new THREE.Shape();\n    SHAPE.moveTo(-width / 2 + radius, -height / 2);\n    SHAPE.lineTo(width / 2 - radius, -height / 2);\n    SHAPE.quadraticCurveTo(width / 2, -height / 2, width / 2, -height / 2 + radius);\n    SHAPE.lineTo(width / 2, height / 2 - radius);\n    SHAPE.quadraticCurveTo(width / 2, height / 2, width / 2 - radius, height / 2);\n    SHAPE.lineTo(-width / 2 + radius, height / 2);\n    SHAPE.quadraticCurveTo(-width / 2, height / 2, -width / 2, height / 2 - radius);\n    SHAPE.lineTo(-width / 2, -height / 2 + radius);\n    SHAPE.quadraticCurveTo(-width / 2, -height / 2, -width / 2 + radius, -height / 2);\n\n    const geometry = new THREE.ShapeGeometry(SHAPE, segments);\n\n    return geometry;\n  }\n\n  /**\n   * Создает комнату на сцене.\n   */\n  private createRoom(): void {\n    if (!this.roomData) return\n    const ROOM_PROPORTIONS = this.roomData.roomProportions\n    const RADIUS = 0.1\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n    this.controls.enableDamping = true;\n    this.controls.dampingFactor = 0.15;\n    this.controls.enableZoom = true;\n    this.controls.minDistance = 1;\n    this.controls.maxDistance = 10;\n    const paddingPolarAngle = 5;\n    this.controls.maxPolarAngle = THREE.MathUtils.degToRad(90 - paddingPolarAngle);\n    this.createRoomShape(ROOM_PROPORTIONS.width, ROOM_PROPORTIONS.length, RADIUS);\n    this.rectangleMesh.name = 'roomFloorBase';\n    this.rectangleMesh\n  }\n\n  /**\n   * Рассчитывает данные для сохранения объекта.\n   * @param object Объект сцены.\n   * @returns Данные для сохранения объекта.\n   */\n  private calculateObjectSaveData(object: THREE.Object3D): objectSceneInterface {\n    const FLOOR_SIZE = this.getObjectSize(this.rectangleMesh)\n    const OBJECT_POSITION = object.position\n    const objectSaveData: objectSceneInterface = {\n      objectId: (object.userData as any).id,\n      xMetersDistance: OBJECT_POSITION.x / FLOOR_SIZE.width * this.roomProportions.width,\n      zMetersDistance: OBJECT_POSITION.z / FLOOR_SIZE.length * this.roomProportions.length,\n      yRotate: object.rotation.y\n    }\n    return objectSaveData\n  }\n\n  /**\n   * Рассчитывает данные для перемещения объекта.\n   * @param objectSaveData Данные сохраненного объекта.\n   * @returns Данные для перемещения объекта.\n   */\n  private calculateMoveObjectData(objectSaveData: objectSceneInterface): objectLoadInterface {\n    const FLOOR_SIZE = this.getObjectSize(this.rectangleMesh)\n    return {\n      xDistance: objectSaveData.xMetersDistance * FLOOR_SIZE.width / this.roomProportions.width,\n      zDistance: objectSaveData.zMetersDistance * FLOOR_SIZE.length / this.roomProportions.length,\n      yRotate: objectSaveData.yRotate\n    }\n  }\n\n  /**\n   * Создает форму комнаты.\n   * @param widthRatio Соотношение ширины.\n   * @param heightRatio Соотношение высоты.\n   * @param radius Радиус закругления.\n   */\n  private createRoomShape(widthRatio: number, heightRatio: number, radius: number): void {\n    const CAMERA_FRUSTUM_BOUNDS = this.calculateFrustumBounds();\n    const SHAPE_RATIO = widthRatio / heightRatio;\n    let width: number, height: number;\n\n    if (SHAPE_RATIO  UPLOAD_OBJECT_SIZE.length ? RECTANGLE_SIZE.width / UPLOAD_OBJECT_SIZE.width : RECTANGLE_SIZE.length / UPLOAD_OBJECT_SIZE.length;\n    const REAL_PROPORTIONS_COEFFICIENT = UPLOAD_OBJECT_SIZE.width > UPLOAD_OBJECT_SIZE.length ? width / this.roomProportions.width : length / length;\n    const GENERAL_COEFFICIENT = REAL_PROPORTIONS_COEFFICIENT * SCENE_PROPORTIONS_COEFFICIENT;\n    object.scale.set(GENERAL_COEFFICIENT, GENERAL_COEFFICIENT, GENERAL_COEFFICIENT);\n  }\n\n  /**\n   * Загружает комнату с объектами.\n   */\n  public async loadRoom(): Promise {\n    const JWT = this.accountCookieService.getJwt()\n    if (!JWT || !this.roomData) return\n    const roomData: roomData = {\n      objects: this.roomData.objects,\n      ...this.roomData.roomProportions\n    }\n\n    this.showLoader()\n    for (const object of roomData.objects) {\n      await this.addModel(object.objectId, false, this.abortConroller, this.calculateMoveObjectData(object));\n    }\n    this.closeLoader()\n    this.hasBeenChanged = false\n  }\n\n  private showLoader() {\n    this.isShowLoader = true\n  }\n  private closeLoader() {\n    this.isShowLoader = false\n  }\n  /**\n   * Очищает комнату от объектов.\n   */\n  private clearRoom(): void {\n    for (let i = this.scene.children.length - 1; i >= 0; i--) {\n      const OBJECT = this.scene.children[i];\n      if (OBJECT.type !== 'Scene' && OBJECT.type !== 'HemisphereLight') {\n        this.scene.remove(OBJECT);\n      }\n    }\n  }\n\n  /**\n   * Обрабатывает изменение размера окна.\n   * @param event Событие изменения размера.\n   */\n  @HostListener('window:resize', ['$event'])\n  private onResize(event: Event): void {\n    this.renderer.setSize(window.innerWidth / this.canvasRatioOfWindow, window.innerHeight / this.canvasRatioOfWindow);\n    this.camera.aspect = window.innerWidth / window.innerHeight;\n    this.camera.updateProjectionMatrix();\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  /**\n   * Обрабатывает клик мыши.\n   * @param event Событие клика.\n   */\n  @HostListener('click', ['$event'])\n  private onMouseClick(event: MouseEvent): void {\n    if (this.targetobject) {\n      this.targetobject = undefined;\n      return;\n    }\n    const RECT = (event.target as HTMLCanvasElement).getBoundingClientRect();\n    const X = (event.clientX - RECT.left) / RECT.width * 2 - 1;\n    const Y = -(event.clientY - RECT.top) / RECT.height * 2 + 1;\n\n    this.mouse.x = X;\n    this.mouse.y = Y;\n    this.raycaster.setFromCamera(this.mouse, this.camera);\n\n    const INTERSECTIONS = this.raycaster.intersectObjects(this.scene.children);\n\n    const FOUND_INTERSECTION = INTERSECTIONS.find(intersect => {\n      return intersect.object.name !== 'roomFloorBase' && intersect.object.type !== 'Scene' && intersect.object.type !== 'HemisphereLight'\n    })?.object\n    if (!FOUND_INTERSECTION) return\n    this.targetobject = FOUND_INTERSECTION.parent ? FOUND_INTERSECTION.parent : FOUND_INTERSECTION\n  }\n\n  /**\n   * Поворачивает целевой объект.\n   * @param event Событие нажатия клавиши.\n   */\n  @HostListener('window:keydown', ['$event'])\n  private rotateTargetObject(event: KeyboardEvent): void {\n    if (!this.targetobject) return\n    let rotateAngle = -0.05\n\n    switch (event.key) {\n      case 'q':\n      case 'й':\n        this.targetobject.rotation.y -= rotateAngle\n        break\n      case 'e':\n      case 'у':\n        this.targetobject.rotation.y += rotateAngle\n    }\n  }\n\n  /**\n   * Обрабатывает перемещение мыши.\n   * @param event Событие перемещения мыши.\n   */\n  @HostListener('mousemove', ['$event'])\n  private onMousemove(event: MouseEvent): void {\n    if (!this.targetobject) return;\n\n    const RECT = (event.target as HTMLCanvasElement).getBoundingClientRect();\n    const X = (event.clientX - RECT.left) / RECT.width * 2 - 1;\n    const Y = -(event.clientY - RECT.top) / RECT.height * 2 + 1;\n\n    this.mouse.x = X;\n    this.mouse.y = Y;\n    this.raycaster.setFromCamera(this.mouse, this.camera);\n\n    const INTERSECTIONS = this.raycaster.intersectObject(this.rectangleMesh);\n    if (INTERSECTIONS.length === 0) return;\n\n    const INTERSECTIONS_X = INTERSECTIONS[0].point.x;\n    const INTERSECTION_Z = INTERSECTIONS[0].point.z;\n    const RECTANGLE_MESH_SIZE = this.getObjectSize(this.rectangleMesh);\n    const objectSize = this.getObjectSize(this.targetobject);\n\n    const minX = -RECTANGLE_MESH_SIZE.width / 2 + objectSize.width / 2;\n    const maxX = RECTANGLE_MESH_SIZE.width / 2 - objectSize.width / 2;\n\n    let newXObjectPosition = INTERSECTIONS_X;\n    if (newXObjectPosition  maxX) {\n      newXObjectPosition = maxX;\n    }\n\n    const MIN_Z = -RECTANGLE_MESH_SIZE.length / 2 + objectSize.length / 2;\n    const MAX_Z = RECTANGLE_MESH_SIZE.length / 2 - objectSize.length / 2;\n\n    let newZObjectPosition = INTERSECTION_Z;\n    if (newZObjectPosition  MAX_Z) {\n      newZObjectPosition = MAX_Z;\n    }\n\n    this.targetobject.position.set(newXObjectPosition, 0, newZObjectPosition);\n  }\n\n  /**\n   * Генерирует отчет по комнате.\n   */\n  protected abortLoadRoom() {\n    this.abortConroller.abort()\n    this.abortConroller = new AbortController()\n\n    this.planHouseComponent.sceneOpenToggle = false\n    this.planHouseComponent.closeViewRoom()\n\n    const PLAN_ID = this.route.snapshot.params['planId']\n    this.router.navigateByUrl('/plan/' + PLAN_ID)\n  }\n\n  /**\n   * Генерирует отчет по комнате.\n   */\n  protected async getReport(): Promise {\n    const JWT = this.accountCookieService.getJwt()\n    if (!JWT || !this.roomData?._id) return\n\n    const oldCameraPosition = this.camera.position.clone();\n    const oldCameraRotation = this.camera.rotation.clone();\n\n    this.camera.position.set(0, 7, 0)\n    this.camera.rotation.set(THREE.MathUtils.degToRad(-90), 0, 0)\n    this.renderer.render(this.scene, this.camera);\n    const imageDataURL = this.renderer.domElement.toDataURL('image/png')\n    const imageDataResponse = await fetch(imageDataURL)\n\n    this.camera.position.copy(oldCameraPosition);\n    this.camera.rotation.copy(oldCameraRotation);\n\n    if (!imageDataResponse.ok) {\n      this.notification.setError('Ошибка при рендере', 5000)\n    }\n    const imageDataBlob = await imageDataResponse.blob()\n\n    this.projectService.GETgetReportOfRoom(JWT, this.roomData?._id, imageDataBlob)\n  }\n\n  /**\n   * Удаляет выбранную модель.\n   */\n  protected deleteModel(): void {\n    if (!this.targetobject) return\n    this.scene.remove(this.targetobject)\n    this.saveRoom()\n  }\n\n  /**\n   * Сохраняет текущее состояние комнаты.\n   */\n  public saveRoom(): void {\n    if (!this.roomData) return\n    const OBJECTS_SCENE_ARRAY = this.scene.children.filter(object => {\n      if (\n        object.name !== 'roomFloorBase' &&\n        object.type !== 'Scene' &&\n        object.type !== 'HemisphereLight'\n      ) {\n        return true;\n      }\n      return false;\n    })\n      .map(object => {\n        return this.calculateObjectSaveData(object)\n      })\n    const ROOM_OBJECTS_DATA = OBJECTS_SCENE_ARRAY\n    this.roomData.objects = OBJECTS_SCENE_ARRAY\n    this.saveObjectsEmitter.emit(ROOM_OBJECTS_DATA)\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/option.html":{"url":"interfaces/option.html","title":"interface - option","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  option\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/category.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Опция для select-фильтра\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            queryValue\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Название опции\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        queryValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        queryValue:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Значение опции для запроса\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные категории\n */\nexport interface categoryData {\n  /** Название категории */\n  name: string;\n  /** Перевод категории в единственном числе */\n  translateOne: string;\n  /** Перевод категории во множественном числе */\n  translateMany: string;\n  /** Массив фильтров категории */\n  filters: filter[];\n}\n\n/**\n * Базовый фильтр\n */\ninterface baseFilter {\n  /** Имя фильтра */\n  name: string;\n  /** Поле, по которому фильтр */\n  field: string;\n}\n\n/**\n * Опция для select-фильтра\n */\nexport interface option {\n  /** Название опции */\n  name: string;\n  /** Значение опции для запроса */\n  queryValue: string;\n}\n\n/**\n * Фильтр типа select\n */\ninterface selectFilter extends baseFilter {\n  /** Тип фильтра */\n  type: 'select';\n  /** Варианты выбора */\n  options: option[];\n}\n\n/**\n * Фильтр типа range\n */\ninterface rangeFilter extends baseFilter {\n  /** Тип фильтра */\n  type: 'range';\n  /** Минимальное значение */\n  minValue: number;\n  /** Максимальное значение */\n  maxValue: number;\n}\n\n/**\n * Тип фильтра: select или range\n */\nexport type filter = rangeFilter | selectFilter;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CategoryService {\n  /** Базовый URL для работы с категориями */\n  private baseServiceUrl = baseUrl + 'category';\n\n  constructor(\n    private httpModule: HttpClient\n  ) { }\n\n  /**\n   * Получение всех категорий\n   * @returns Promise с массивом категорий\n   */\n  GETgetAllCategories() {\n    return firstValueFrom(this.httpModule.get(this.baseServiceUrl)) as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/optionRangeQueryData.html":{"url":"interfaces/optionRangeQueryData.html","title":"interface - optionRangeQueryData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  optionRangeQueryData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/shop.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Фильтр типа \"диапазон значений\".\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            max\n                                        \n                                \n                                \n                                        \n                                            min\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        max\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        max:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Максимум в диапазоне\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        min\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        min:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Минимум в диапазоне\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                            \n                                \n                                    Тип фильтра\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { firstValueFrom } from 'rxjs';\nimport { modelInterface } from '../components/scene/scene.component';\n\n/**\n * Интерфейс объекта фильтров, отправляемых на сервер.\n*/\nexport interface queryData {\n  /** Любое ключ:значение */\n  [key: string]: optionSelectQueryData | optionRangeQueryData;\n}\n\n/**\n * Фильтр типа \"выбор из списка\".\n */\ninterface optionSelectQueryData {\n  /** Тип фильтра */\n  type: 'select';\n  /** Выбранные значения */\n  value: string[];\n}\n\n/**\n * Фильтр типа \"диапазон значений\".\n*/\ninterface optionRangeQueryData {\n  /** Тип фильтра */\n  type: 'range';\n  /** Минимум в диапазоне */\n  min: number;\n  /** Максимум в диапазоне */\n  max: number;\n}\n\n/**\n * Интерфейс данных о мебели, получаемых из магазина.\n */\nexport interface furnitureShopData {\n  /** Название */\n  name: string;\n  /** Стоимость мебели */\n  cost: number;\n  /** Неполный Url превью (вначало надо вставить baseUrl сервера) */\n  previewUrl: string;\n  /** Id мебели */\n  furnitureCardId: string;\n  /** Массив цветов мебели */\n  colors: string[];\n  /** Габариты мебели */\n  proportions: modelInterface;\n}\n\n/**\n * Интерфейс клиентских фильтров, значения которых формируются на основе ответа от сервера.\n */\nexport interface clientFilters {\n  /** Цвета мебели */\n  colors: string[];\n  /** Минимальная стоимость */\n  minCost: number;\n  /** Максимальная стоимость */\n  maxCost: number;\n}\n\n/**\n * Сервис для получения данных о мебели из магазина, с учетом фильтрации и пагинации.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ShopService {\n  /** Базовый URL сервиса */\n  private baseServiceUrl = baseUrl + 'shop';\n\n  /** Активный AbortController для отмены предыдущих запросов */\n  private abortController: AbortController | null = null;\n\n  constructor(private httpModule: HttpClient) { }\n\n  /**\n   * Выполняет GET-запрос на получение данных по категории мебели.\n   * Поддерживает фильтрацию и стартовую позицию для пагинации.\n   * При повторном вызове отменяет предыдущий запрос.\n   *\n   * @param categoryName - Название категории мебели.\n   * @param startRange - Начальный индекс (offset) выборки.\n   * @param queryData - Объект фильтров (опционально).\n   *\n   * @returns Промис с объектом, содержащим:\n   * - `resultsArray`: массив карточек мебели с обновлёнными URL превью\n   * - `resultsClientFiltersData`: агрегированные данные фильтров для клиента\n   *\n   * @throws {Error} В случае сетевой ошибки или отмены запроса.\n   */\n  async GETgetCategoryData(categoryName: string, startRange: number, queryData?: queryData) {\n    if (this.abortController) {\n      this.abortController.abort();\n    }\n\n    this.abortController = new AbortController();\n\n    try {\n      let requestUrl = `${this.baseServiceUrl}?category=${categoryName}&startRange=${startRange}`;\n\n      if (queryData && Object.keys(queryData).length > 0) {\n        const params = new URLSearchParams();\n        params.append('filters', JSON.stringify(queryData));\n        requestUrl += `&${new URLSearchParams(params).toString()}`;\n      }\n\n      const response = await fetch(\n        requestUrl,\n        { signal: this.abortController.signal }\n      );\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Ошибка: ${response.status} — ${errorText}`);\n      }\n\n      const RESPONSE = await response.json() as { resultsArray: furnitureShopData[] };\n      const RESULTS_ARRAY = RESPONSE.resultsArray;\n\n      const UPDATED_RESULTS = RESULTS_ARRAY.map(furniture => ({\n        ...furniture,\n        previewUrl: baseUrl + furniture.previewUrl\n      }));\n\n      return {\n        resultsArray: UPDATED_RESULTS,\n        resultsClientFiltersData: this.getFindOptionsByResult(UPDATED_RESULTS)\n      };\n\n    } catch (error: any) {\n      if (error.name === 'AbortError') {\n      } else {\n        console.error('Ошибка запроса:', error);\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Формирует объект фильтров на основе полученных данных о мебели.\n   *\n   * @param resultsArray - Массив карточек мебели\n   * @returns Объект клиентских фильтров (цвета, минимальная и максимальная цена)\n   */\n  private getFindOptionsByResult(resultsArray: furnitureShopData[]) {\n    let filtersObject: clientFilters = {\n      colors: [],\n      minCost: Infinity,\n      maxCost: -Infinity\n    };\n\n    resultsArray.forEach(furnitureData => {\n      if (furnitureData.cost  filtersObject.maxCost) filtersObject.maxCost = furnitureData.cost;\n\n      filtersObject.colors.push(...furnitureData.colors);\n    });\n\n    filtersObject.minCost = filtersObject.minCost!== Infinity ? filtersObject.minCost : 0;\n    filtersObject.maxCost = filtersObject.maxCost!== -Infinity ? filtersObject.maxCost : 0;\n\n    filtersObject.colors = [...new Set(filtersObject.colors)];\n    return filtersObject;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/optionSelectQueryData.html":{"url":"interfaces/optionSelectQueryData.html","title":"interface - optionSelectQueryData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  optionSelectQueryData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/shop.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Фильтр типа \"выбор из списка\".\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            type\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                            \n                                \n                                    Тип фильтра\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Выбранные значения\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { firstValueFrom } from 'rxjs';\nimport { modelInterface } from '../components/scene/scene.component';\n\n/**\n * Интерфейс объекта фильтров, отправляемых на сервер.\n*/\nexport interface queryData {\n  /** Любое ключ:значение */\n  [key: string]: optionSelectQueryData | optionRangeQueryData;\n}\n\n/**\n * Фильтр типа \"выбор из списка\".\n */\ninterface optionSelectQueryData {\n  /** Тип фильтра */\n  type: 'select';\n  /** Выбранные значения */\n  value: string[];\n}\n\n/**\n * Фильтр типа \"диапазон значений\".\n*/\ninterface optionRangeQueryData {\n  /** Тип фильтра */\n  type: 'range';\n  /** Минимум в диапазоне */\n  min: number;\n  /** Максимум в диапазоне */\n  max: number;\n}\n\n/**\n * Интерфейс данных о мебели, получаемых из магазина.\n */\nexport interface furnitureShopData {\n  /** Название */\n  name: string;\n  /** Стоимость мебели */\n  cost: number;\n  /** Неполный Url превью (вначало надо вставить baseUrl сервера) */\n  previewUrl: string;\n  /** Id мебели */\n  furnitureCardId: string;\n  /** Массив цветов мебели */\n  colors: string[];\n  /** Габариты мебели */\n  proportions: modelInterface;\n}\n\n/**\n * Интерфейс клиентских фильтров, значения которых формируются на основе ответа от сервера.\n */\nexport interface clientFilters {\n  /** Цвета мебели */\n  colors: string[];\n  /** Минимальная стоимость */\n  minCost: number;\n  /** Максимальная стоимость */\n  maxCost: number;\n}\n\n/**\n * Сервис для получения данных о мебели из магазина, с учетом фильтрации и пагинации.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ShopService {\n  /** Базовый URL сервиса */\n  private baseServiceUrl = baseUrl + 'shop';\n\n  /** Активный AbortController для отмены предыдущих запросов */\n  private abortController: AbortController | null = null;\n\n  constructor(private httpModule: HttpClient) { }\n\n  /**\n   * Выполняет GET-запрос на получение данных по категории мебели.\n   * Поддерживает фильтрацию и стартовую позицию для пагинации.\n   * При повторном вызове отменяет предыдущий запрос.\n   *\n   * @param categoryName - Название категории мебели.\n   * @param startRange - Начальный индекс (offset) выборки.\n   * @param queryData - Объект фильтров (опционально).\n   *\n   * @returns Промис с объектом, содержащим:\n   * - `resultsArray`: массив карточек мебели с обновлёнными URL превью\n   * - `resultsClientFiltersData`: агрегированные данные фильтров для клиента\n   *\n   * @throws {Error} В случае сетевой ошибки или отмены запроса.\n   */\n  async GETgetCategoryData(categoryName: string, startRange: number, queryData?: queryData) {\n    if (this.abortController) {\n      this.abortController.abort();\n    }\n\n    this.abortController = new AbortController();\n\n    try {\n      let requestUrl = `${this.baseServiceUrl}?category=${categoryName}&startRange=${startRange}`;\n\n      if (queryData && Object.keys(queryData).length > 0) {\n        const params = new URLSearchParams();\n        params.append('filters', JSON.stringify(queryData));\n        requestUrl += `&${new URLSearchParams(params).toString()}`;\n      }\n\n      const response = await fetch(\n        requestUrl,\n        { signal: this.abortController.signal }\n      );\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Ошибка: ${response.status} — ${errorText}`);\n      }\n\n      const RESPONSE = await response.json() as { resultsArray: furnitureShopData[] };\n      const RESULTS_ARRAY = RESPONSE.resultsArray;\n\n      const UPDATED_RESULTS = RESULTS_ARRAY.map(furniture => ({\n        ...furniture,\n        previewUrl: baseUrl + furniture.previewUrl\n      }));\n\n      return {\n        resultsArray: UPDATED_RESULTS,\n        resultsClientFiltersData: this.getFindOptionsByResult(UPDATED_RESULTS)\n      };\n\n    } catch (error: any) {\n      if (error.name === 'AbortError') {\n      } else {\n        console.error('Ошибка запроса:', error);\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Формирует объект фильтров на основе полученных данных о мебели.\n   *\n   * @param resultsArray - Массив карточек мебели\n   * @returns Объект клиентских фильтров (цвета, минимальная и максимальная цена)\n   */\n  private getFindOptionsByResult(resultsArray: furnitureShopData[]) {\n    let filtersObject: clientFilters = {\n      colors: [],\n      minCost: Infinity,\n      maxCost: -Infinity\n    };\n\n    resultsArray.forEach(furnitureData => {\n      if (furnitureData.cost  filtersObject.maxCost) filtersObject.maxCost = furnitureData.cost;\n\n      filtersObject.colors.push(...furnitureData.colors);\n    });\n\n    filtersObject.minCost = filtersObject.minCost!== Infinity ? filtersObject.minCost : 0;\n    filtersObject.maxCost = filtersObject.maxCost!== -Infinity ? filtersObject.maxCost : 0;\n\n    filtersObject.colors = [...new Set(filtersObject.colors)];\n    return filtersObject;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/projectInformation.html":{"url":"interfaces/projectInformation.html","title":"interface - projectInformation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  projectInformation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/project.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс информации о проекте\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            rooms\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Название проекта\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rooms\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rooms:     roomData[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     roomData[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Список комнат в проекте\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { baseUrl } from '.';\nimport { modelInterface, objectSceneInterface } from '../components/scene/scene.component';\nimport { firstValueFrom } from 'rxjs';\nimport { reportResponse } from './report.service';\nimport { ReportService } from './report.service';\n\n/**\n * Интерфейс описания комнаты\n */\nexport interface roomData {\n  /** Название комнаты */\n  name: string;\n  /** Сетка размещения (например, '1 / 2 / 3 / 4') */\n  gridArea: string;\n  /** Пропорции комнаты (ширина, высота, глубина) */\n  roomProportions: modelInterface;\n  /** Список объектов, размещённых в комнате */\n  objects: objectSceneInterface[];\n  /** (Необязательно) ID комнаты */\n  _id?: string;\n}\n\n/**\n * Интерфейс информации о проекте\n */\nexport interface projectInformation {\n  /** Название проекта */\n  name: string;\n  /** Список комнат в проекте */\n  rooms: roomData[];\n}\n\n/**\n * Интерфейс информации о проекте, получаемой с сервера\n */\nexport interface projectServerInformation extends projectInformation {\n  /** ID проекта */\n  _id: string;\n  /** ID автора проекта */\n  authorId: string;\n}\n\n/**\n * Сервис для управления проектами: создание, удаление, получение, обновление и генерация отчетов\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProjectService {\n  /** Базовый URL для API запросов к проектам */\n  private baseServiceUrl = baseUrl + 'project';\n\n  constructor(\n    private httpModule: HttpClient,\n    private reportService: ReportService\n  ) {}\n\n  /**\n   * Создание нового проекта\n   * @param jwt JWT токен для авторизации\n   * @param name Название проекта\n   * @returns Промис с объектом, содержащим данные проекта\n   */\n  POSTcreateProject(jwt: string, name: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('name', name);\n    return firstValueFrom(this.httpModule.post(this.baseServiceUrl, HTTP_PARAMS)) as Promise;\n  }\n\n  /**\n   * Удаление проекта\n   * @param jwt JWT токен для авторизации\n   * @param projectId ID проекта, который нужно удалить\n   * @returns Промис с сообщением об удалении\n   */\n  DELETEdeleteProject(jwt: string, projectId: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('projectId', projectId);\n    return firstValueFrom(this.httpModule.delete(this.baseServiceUrl, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Получение проекта по ID\n   * @param jwt JWT токен для авторизации\n   * @param projectId ID проекта, который нужно получить\n   * @returns Промис с данными проекта\n   */\n  GETgetProject(jwt: string, projectId: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('projectId', projectId);\n    return firstValueFrom(this.httpModule.get(this.baseServiceUrl, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Обновление данных проекта\n   * @param jwt JWT токен для авторизации\n   * @param projectId ID проекта, который нужно обновить\n   * @param projectInformation Новые данные проекта\n   * @returns Промис с сообщением об успешном обновлении\n   */\n  PUTupdateProject(jwt: string, projectId: string, projectInformation: projectInformation): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('projectId', projectId);\n    return firstValueFrom(this.httpModule.put(this.baseServiceUrl, projectInformation, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Получение отчета о комнате и генерация PDF отчета\n   * @param jwt JWT токен для авторизации\n   * @param roomId ID комнаты, по которой нужно получить отчет\n   * @param renderImage Изображение рендера комнаты в формате Blob\n   * @returns Промис, завершающийся после создания отчета\n   */\n  async GETgetReportOfRoom(jwt: string, roomId: string, renderImage: Blob): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('roomId', roomId);\n\n    const RESPONSE = await firstValueFrom(this.httpModule.get(this.baseServiceUrl + '/room', { params: HTTP_PARAMS })) as reportResponse;\n\n    RESPONSE.furnitures = RESPONSE.furnitures.map(furnitureData => {\n      furnitureData.previewUrl = baseUrl + furnitureData.previewUrl;\n      return furnitureData;\n    });\n\n    this.reportService.createReport(RESPONSE, renderImage);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/projectServerInformation.html":{"url":"interfaces/projectServerInformation.html","title":"interface - projectServerInformation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  projectServerInformation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/project.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс информации о проекте, получаемой с сервера\n\n            \n\n            \n                Extends\n            \n            \n                            projectInformation\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            _id\n                                        \n                                \n                                \n                                        \n                                            authorId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        _id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        _id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    ID проекта\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        authorId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        authorId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    ID автора проекта\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { baseUrl } from '.';\nimport { modelInterface, objectSceneInterface } from '../components/scene/scene.component';\nimport { firstValueFrom } from 'rxjs';\nimport { reportResponse } from './report.service';\nimport { ReportService } from './report.service';\n\n/**\n * Интерфейс описания комнаты\n */\nexport interface roomData {\n  /** Название комнаты */\n  name: string;\n  /** Сетка размещения (например, '1 / 2 / 3 / 4') */\n  gridArea: string;\n  /** Пропорции комнаты (ширина, высота, глубина) */\n  roomProportions: modelInterface;\n  /** Список объектов, размещённых в комнате */\n  objects: objectSceneInterface[];\n  /** (Необязательно) ID комнаты */\n  _id?: string;\n}\n\n/**\n * Интерфейс информации о проекте\n */\nexport interface projectInformation {\n  /** Название проекта */\n  name: string;\n  /** Список комнат в проекте */\n  rooms: roomData[];\n}\n\n/**\n * Интерфейс информации о проекте, получаемой с сервера\n */\nexport interface projectServerInformation extends projectInformation {\n  /** ID проекта */\n  _id: string;\n  /** ID автора проекта */\n  authorId: string;\n}\n\n/**\n * Сервис для управления проектами: создание, удаление, получение, обновление и генерация отчетов\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProjectService {\n  /** Базовый URL для API запросов к проектам */\n  private baseServiceUrl = baseUrl + 'project';\n\n  constructor(\n    private httpModule: HttpClient,\n    private reportService: ReportService\n  ) {}\n\n  /**\n   * Создание нового проекта\n   * @param jwt JWT токен для авторизации\n   * @param name Название проекта\n   * @returns Промис с объектом, содержащим данные проекта\n   */\n  POSTcreateProject(jwt: string, name: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('name', name);\n    return firstValueFrom(this.httpModule.post(this.baseServiceUrl, HTTP_PARAMS)) as Promise;\n  }\n\n  /**\n   * Удаление проекта\n   * @param jwt JWT токен для авторизации\n   * @param projectId ID проекта, который нужно удалить\n   * @returns Промис с сообщением об удалении\n   */\n  DELETEdeleteProject(jwt: string, projectId: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('projectId', projectId);\n    return firstValueFrom(this.httpModule.delete(this.baseServiceUrl, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Получение проекта по ID\n   * @param jwt JWT токен для авторизации\n   * @param projectId ID проекта, который нужно получить\n   * @returns Промис с данными проекта\n   */\n  GETgetProject(jwt: string, projectId: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('projectId', projectId);\n    return firstValueFrom(this.httpModule.get(this.baseServiceUrl, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Обновление данных проекта\n   * @param jwt JWT токен для авторизации\n   * @param projectId ID проекта, который нужно обновить\n   * @param projectInformation Новые данные проекта\n   * @returns Промис с сообщением об успешном обновлении\n   */\n  PUTupdateProject(jwt: string, projectId: string, projectInformation: projectInformation): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('projectId', projectId);\n    return firstValueFrom(this.httpModule.put(this.baseServiceUrl, projectInformation, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Получение отчета о комнате и генерация PDF отчета\n   * @param jwt JWT токен для авторизации\n   * @param roomId ID комнаты, по которой нужно получить отчет\n   * @param renderImage Изображение рендера комнаты в формате Blob\n   * @returns Промис, завершающийся после создания отчета\n   */\n  async GETgetReportOfRoom(jwt: string, roomId: string, renderImage: Blob): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('roomId', roomId);\n\n    const RESPONSE = await firstValueFrom(this.httpModule.get(this.baseServiceUrl + '/room', { params: HTTP_PARAMS })) as reportResponse;\n\n    RESPONSE.furnitures = RESPONSE.furnitures.map(furnitureData => {\n      furnitureData.previewUrl = baseUrl + furnitureData.previewUrl;\n      return furnitureData;\n    });\n\n    this.reportService.createReport(RESPONSE, renderImage);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/queryData.html":{"url":"interfaces/queryData.html","title":"interface - queryData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  queryData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/shop.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс объекта фильтров, отправляемых на сервер.\n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    optionSelectQueryData | optionRangeQueryData\n\n                    \n                \n                        \n                            \n                                Defined in src/services/shop.service.ts:10\n                            \n                        \n                \n                    \n                        Любое ключ:значение\n\n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { firstValueFrom } from 'rxjs';\nimport { modelInterface } from '../components/scene/scene.component';\n\n/**\n * Интерфейс объекта фильтров, отправляемых на сервер.\n*/\nexport interface queryData {\n  /** Любое ключ:значение */\n  [key: string]: optionSelectQueryData | optionRangeQueryData;\n}\n\n/**\n * Фильтр типа \"выбор из списка\".\n */\ninterface optionSelectQueryData {\n  /** Тип фильтра */\n  type: 'select';\n  /** Выбранные значения */\n  value: string[];\n}\n\n/**\n * Фильтр типа \"диапазон значений\".\n*/\ninterface optionRangeQueryData {\n  /** Тип фильтра */\n  type: 'range';\n  /** Минимум в диапазоне */\n  min: number;\n  /** Максимум в диапазоне */\n  max: number;\n}\n\n/**\n * Интерфейс данных о мебели, получаемых из магазина.\n */\nexport interface furnitureShopData {\n  /** Название */\n  name: string;\n  /** Стоимость мебели */\n  cost: number;\n  /** Неполный Url превью (вначало надо вставить baseUrl сервера) */\n  previewUrl: string;\n  /** Id мебели */\n  furnitureCardId: string;\n  /** Массив цветов мебели */\n  colors: string[];\n  /** Габариты мебели */\n  proportions: modelInterface;\n}\n\n/**\n * Интерфейс клиентских фильтров, значения которых формируются на основе ответа от сервера.\n */\nexport interface clientFilters {\n  /** Цвета мебели */\n  colors: string[];\n  /** Минимальная стоимость */\n  minCost: number;\n  /** Максимальная стоимость */\n  maxCost: number;\n}\n\n/**\n * Сервис для получения данных о мебели из магазина, с учетом фильтрации и пагинации.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ShopService {\n  /** Базовый URL сервиса */\n  private baseServiceUrl = baseUrl + 'shop';\n\n  /** Активный AbortController для отмены предыдущих запросов */\n  private abortController: AbortController | null = null;\n\n  constructor(private httpModule: HttpClient) { }\n\n  /**\n   * Выполняет GET-запрос на получение данных по категории мебели.\n   * Поддерживает фильтрацию и стартовую позицию для пагинации.\n   * При повторном вызове отменяет предыдущий запрос.\n   *\n   * @param categoryName - Название категории мебели.\n   * @param startRange - Начальный индекс (offset) выборки.\n   * @param queryData - Объект фильтров (опционально).\n   *\n   * @returns Промис с объектом, содержащим:\n   * - `resultsArray`: массив карточек мебели с обновлёнными URL превью\n   * - `resultsClientFiltersData`: агрегированные данные фильтров для клиента\n   *\n   * @throws {Error} В случае сетевой ошибки или отмены запроса.\n   */\n  async GETgetCategoryData(categoryName: string, startRange: number, queryData?: queryData) {\n    if (this.abortController) {\n      this.abortController.abort();\n    }\n\n    this.abortController = new AbortController();\n\n    try {\n      let requestUrl = `${this.baseServiceUrl}?category=${categoryName}&startRange=${startRange}`;\n\n      if (queryData && Object.keys(queryData).length > 0) {\n        const params = new URLSearchParams();\n        params.append('filters', JSON.stringify(queryData));\n        requestUrl += `&${new URLSearchParams(params).toString()}`;\n      }\n\n      const response = await fetch(\n        requestUrl,\n        { signal: this.abortController.signal }\n      );\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Ошибка: ${response.status} — ${errorText}`);\n      }\n\n      const RESPONSE = await response.json() as { resultsArray: furnitureShopData[] };\n      const RESULTS_ARRAY = RESPONSE.resultsArray;\n\n      const UPDATED_RESULTS = RESULTS_ARRAY.map(furniture => ({\n        ...furniture,\n        previewUrl: baseUrl + furniture.previewUrl\n      }));\n\n      return {\n        resultsArray: UPDATED_RESULTS,\n        resultsClientFiltersData: this.getFindOptionsByResult(UPDATED_RESULTS)\n      };\n\n    } catch (error: any) {\n      if (error.name === 'AbortError') {\n      } else {\n        console.error('Ошибка запроса:', error);\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Формирует объект фильтров на основе полученных данных о мебели.\n   *\n   * @param resultsArray - Массив карточек мебели\n   * @returns Объект клиентских фильтров (цвета, минимальная и максимальная цена)\n   */\n  private getFindOptionsByResult(resultsArray: furnitureShopData[]) {\n    let filtersObject: clientFilters = {\n      colors: [],\n      minCost: Infinity,\n      maxCost: -Infinity\n    };\n\n    resultsArray.forEach(furnitureData => {\n      if (furnitureData.cost  filtersObject.maxCost) filtersObject.maxCost = furnitureData.cost;\n\n      filtersObject.colors.push(...furnitureData.colors);\n    });\n\n    filtersObject.minCost = filtersObject.minCost!== Infinity ? filtersObject.minCost : 0;\n    filtersObject.maxCost = filtersObject.maxCost!== -Infinity ? filtersObject.maxCost : 0;\n\n    filtersObject.colors = [...new Set(filtersObject.colors)];\n    return filtersObject;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/rangeFilter.html":{"url":"interfaces/rangeFilter.html","title":"interface - rangeFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  rangeFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/category.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Фильтр типа range\n\n            \n\n            \n                Extends\n            \n            \n                            baseFilter\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            maxValue\n                                        \n                                \n                                \n                                        \n                                            minValue\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        maxValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        maxValue:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Максимальное значение\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        minValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        minValue:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Минимальное значение\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                            \n                                \n                                    Тип фильтра\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные категории\n */\nexport interface categoryData {\n  /** Название категории */\n  name: string;\n  /** Перевод категории в единственном числе */\n  translateOne: string;\n  /** Перевод категории во множественном числе */\n  translateMany: string;\n  /** Массив фильтров категории */\n  filters: filter[];\n}\n\n/**\n * Базовый фильтр\n */\ninterface baseFilter {\n  /** Имя фильтра */\n  name: string;\n  /** Поле, по которому фильтр */\n  field: string;\n}\n\n/**\n * Опция для select-фильтра\n */\nexport interface option {\n  /** Название опции */\n  name: string;\n  /** Значение опции для запроса */\n  queryValue: string;\n}\n\n/**\n * Фильтр типа select\n */\ninterface selectFilter extends baseFilter {\n  /** Тип фильтра */\n  type: 'select';\n  /** Варианты выбора */\n  options: option[];\n}\n\n/**\n * Фильтр типа range\n */\ninterface rangeFilter extends baseFilter {\n  /** Тип фильтра */\n  type: 'range';\n  /** Минимальное значение */\n  minValue: number;\n  /** Максимальное значение */\n  maxValue: number;\n}\n\n/**\n * Тип фильтра: select или range\n */\nexport type filter = rangeFilter | selectFilter;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CategoryService {\n  /** Базовый URL для работы с категориями */\n  private baseServiceUrl = baseUrl + 'category';\n\n  constructor(\n    private httpModule: HttpClient\n  ) { }\n\n  /**\n   * Получение всех категорий\n   * @returns Promise с массивом категорий\n   */\n  GETgetAllCategories() {\n    return firstValueFrom(this.httpModule.get(this.baseServiceUrl)) as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/reportResponse.html":{"url":"interfaces/reportResponse.html","title":"interface - reportResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  reportResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/report.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            furnitures\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            proportions\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        furnitures\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        furnitures:     literal type[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        proportions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        proportions:         modelInterface\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         modelInterface\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { baseClientUrl } from '.';\nimport { modelInterface } from '../components/scene/scene.component';\nimport { shopData } from './furniture-card-control.service';\n\nexport interface reportResponse {\n    name: string;\n    proportions: modelInterface,\n    furnitures: {\n        name: string;\n        furnitureCardId: string;\n        previewUrl: string;\n        proportions: modelInterface;\n        shops: shopData[];\n        category: string;\n    }[]\n}\n\n/**\n * Сервис для генерации HTML-отчёта по комнате и мебели.\n * Открывает отчет в новой вкладке и скачивает его.\n *\n * @export\n * @class ReportService\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class ReportService {\n    constructor() { }\n\n    /**\n     * Инициирует создание HTML-отчета.\n     *\n     * @param {reportResponse} roomData - Данные комнаты и мебели\n     * @param {Blob} renderImage - Изображение визуализации комнаты\n     * @memberof ReportService\n     */\n    createReport(roomData: reportResponse, renderImage: Blob): void {\n        this.createReportHTML(roomData, renderImage);\n    }\n\n    /**\n     * Создаёт HTML-страницу отчета и открывает её.\n     *\n     * @private\n     * @param {reportResponse} roomData - Данные комнаты\n     * @param {Blob} renderImage - Рендер комнаты\n     * @memberof ReportService\n     */\n    private createReportHTML(roomData: reportResponse, renderImage: Blob): void {\n        const reader = new FileReader();\n\n        reader.onload = () => {\n            const imageUrl = reader.result as string;\n            const htmlContent = this.generateHtmlContent(roomData, imageUrl);\n            this.openHtmlInNewTab(roomData.name, htmlContent);\n        };\n\n        reader.readAsDataURL(renderImage);\n    }\n\n    /**\n     * Генерирует HTML-содержимое отчета.\n     *\n     * @private\n     * @param {reportResponse} roomData - Данные комнаты и мебели\n     * @param {string} renderUrl - URL рендер-изображения\n     * @returns {string} HTML-контент отчета\n     * @memberof ReportService\n     */\n    private generateHtmlContent(roomData: reportResponse, renderUrl: string): string {\n        return `\n      \n\n\n\n    \n    \n    Отчет по комнате ${roomData.name}\n    \n        @font-face {\n            font-family: 'Calypso';\n            src: url('${baseClientUrl}assets/fonts/Calypso.ttf') format('truetype');\n        }\n\n        @font-face {\n            font-family: 'Courier New';\n            src: url('${baseClientUrl}assets/fonts/Courier New.ttf') format('truetype');\n        }\n\n        body {\n            margin: 0;\n            padding: 40px;\n            background-color: black;\n            color: #DAD7CD;\n            font-family: 'Courier New', monospace;\n            line-height: 1.6;\n            display: flex;\n            flex-direction: column;\n        }\n\n        .title {\n            font-family: 'Calypso', 'Courier New', monospace;\n            text-align: center;\n            font-size: 3rem;\n            margin-bottom: 40px;\n            color: #A3B18A;\n            text-transform: uppercase;\n            letter-spacing: 2px;\n        }\n\n        .renderTitle {\n            font-family: 'Courier New', 'Courier New', monospace;\n            font-weight: 400;\n            font-size: 1.5rem;\n            margin: 30px 0 15px;\n            color: #A3B18A;\n            border-bottom: 2px solid #A3B18A;\n            padding-bottom: 8px;\n            width:fit-content;\n            align-self: center;\n        }\n\n        .furnituresSpanTitle {\n            font-family: 'Calypso', 'Courier New', monospace;\n            font-size: 2rem;\n            margin: 40px 0 20px;\n            color: #A3B18A;\n            display: block;\n            text-align: center;\n        }\n\n        .furniture {\n            display: flex;\n            flex-direction: column;\n            border-radius: 15px;\n            padding: 25px;\n            margin-bottom: 30px;\n            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);\n            transition: transform 0.3s ease;\n        }\n\n        .furnitureTitle {\n            font-family: 'Courier New', monospace;\n            font-weight: 400;\n            margin: 0 auto 15px;\n            font-size: 1.3rem;\n            color: #DAD7CD;\n        }\n\n        .furnitureImage {\n            margin: 0 auto;\n            max-width: 100%;\n            border-radius: 10px;\n            margin-bottom: 20px;\n        }\n\n        .furnitureFooter {\n            display: flex;\n            gap: 30px;\n            flex-direction: row;\n            justify-content: center;\n            flex-wrap: wrap;\n        }\n\n        .paramsTitle,\n        .shopsTitle {\n            font-family: 'Calypso', 'Courier New', monospace;\n            font-size: 1.2rem;\n            color: #A3B18A;\n            margin-bottom: 15px;\n        }\n\n        .paramsSpan {\n            width: fit-content;\n        }\n\n        .paramsList {\n            list-style-type: none;\n            padding: 0;\n            margin: 0;\n        }\n\n        .paramsItem {\n            margin-bottom: 8px;\n            position: relative;\n            padding-left: 20px;\n        }\n\n\n        a {\n            display: inline-block;\n            background-color: white;\n            color: black;\n            text-decoration: none;\n            border-radius: 10px;\n            transition: all 0.3s ease;\n            border: 2px solid transparent;\n            width:250px;\n            max-width: 250px;\n            text-align: center;\n            font-family: 'Courier New', monospace;\n            font-weight: 400;\n            font-size: 0.8rem;\n            height:40px;\n            align-content:center;\n            box-sizing:border-box;\n        }\n\n        a:hover {\n            background-color: transparent;\n            color: white;\n            border-color: white;\n        }\n\n        img {\n            width: 100%;\n            max-height: 500px;\n            object-fit: contain;\n            border-radius: 10px;\n            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);\n            margin-bottom: 30px;\n        }\n\n        .openLink {\n            width:250px;\n            max-width: 250px;\n            margin: 0 auto;\n            margin-top: 20px;\n        }\n        .furnitureLink{\n            background-color: #A3B18A;\n            color:white;\n            &:hover{\n                background-color: #344E41;\n                border: 2px solid #344E41;\n            }\n        }\n\n        @media (max-width: 768px) {\n            .furnitureFooter {\n                flex-direction: column;\n                align-items: center;\n                gap: 20px;\n                width: 100%;\n            }\n\n            .paramsSpan,\n            .shopsSpan {\n                width: 90%;\n            }\n\n            .openLink,.shopLink {\n                width: 100%;\n            }\n\n            .title {\n                font-size: 2rem;\n            }\n\n            body {\n                padding: 20px;\n            }\n            .paramsItem{\n                padding-left:0;\n            }\n                \n        }\n    \n\nОтчет по комнате${roomData.name}\nВид сверху\n\n\nДобавленная мебель\n${roomData.furnitures.map(furniture => `\n    \n    ${furniture.name}\n    \n    \n    \n     Параметры \n    \n     Ширина: ${furniture.proportions.width}cм \n     Высота: ${furniture.proportions.height}cм \n     Длина: ${furniture.proportions.length}cм \n    \n    \n    \n    ${furniture.shops.map(shopData => `\n         Магазины \n        \n      \n      ${this.costPipe(shopData.cost)}\n      \n      \n      `).join('')\n            }\n    \n    \n     Посмотреть мебель \n    \n    `).join('')}\nПосмотреть проект\n\n\n    `;\n    }\n\n    /**\n     * Форматирует цену с разделителями тысяч.\n     *\n     * @private\n     * @param {number} cost - Стоимость\n     * @returns {string} Отформатированная строка с ценой\n     * @memberof ReportService\n     */\n    private costPipe(cost: number): string {\n        return cost.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.');\n    }\n\n    /**\n     * Открывает HTML-контент в новой вкладке и запускает загрузку.\n     *\n     * @private\n     * @param {string} roomName - Название комнаты (используется для имени файла)\n     * @param {string} htmlContent - Содержимое HTML\n     * @memberof ReportService\n     */\n    private openHtmlInNewTab(roomName: string, htmlContent: string): void {\n        const blob = new Blob([htmlContent], { type: 'text/html' });\n        const url = URL.createObjectURL(blob);\n        window.open(url, '_blank');\n        this.downloadHtml(roomName, url);\n    }\n\n    /**\n     * Загружает HTML-файл отчета.\n     *\n     * @private\n     * @param {string} roomName - Название комнаты (для имени файла)\n     * @param {string} htmlUrl - URL HTML-файла\n     * @memberof ReportService\n     */\n    private downloadHtml(roomName: string, htmlUrl: string): void {\n        const downloadButton = document.createElement('a');\n        downloadButton.href = htmlUrl;\n        downloadButton.download = `${roomName}-report.html`;\n        downloadButton.click();\n        URL.revokeObjectURL(htmlUrl);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/roomData.html":{"url":"interfaces/roomData.html","title":"interface - roomData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  roomData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/project.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс описания комнаты\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            _id\n                                        \n                                \n                                \n                                        \n                                            gridArea\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            objects\n                                        \n                                \n                                \n                                        \n                                            roomProportions\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        _id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        _id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    (Необязательно) ID комнаты\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        gridArea\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        gridArea:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Сетка размещения (например, '1 / 2 / 3 / 4')\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Название комнаты\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        objects\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        objects:         objectSceneInterface[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         objectSceneInterface[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Список объектов, размещённых в комнате\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        roomProportions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        roomProportions:         modelInterface\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         modelInterface\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Пропорции комнаты (ширина, высота, глубина)\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { baseUrl } from '.';\nimport { modelInterface, objectSceneInterface } from '../components/scene/scene.component';\nimport { firstValueFrom } from 'rxjs';\nimport { reportResponse } from './report.service';\nimport { ReportService } from './report.service';\n\n/**\n * Интерфейс описания комнаты\n */\nexport interface roomData {\n  /** Название комнаты */\n  name: string;\n  /** Сетка размещения (например, '1 / 2 / 3 / 4') */\n  gridArea: string;\n  /** Пропорции комнаты (ширина, высота, глубина) */\n  roomProportions: modelInterface;\n  /** Список объектов, размещённых в комнате */\n  objects: objectSceneInterface[];\n  /** (Необязательно) ID комнаты */\n  _id?: string;\n}\n\n/**\n * Интерфейс информации о проекте\n */\nexport interface projectInformation {\n  /** Название проекта */\n  name: string;\n  /** Список комнат в проекте */\n  rooms: roomData[];\n}\n\n/**\n * Интерфейс информации о проекте, получаемой с сервера\n */\nexport interface projectServerInformation extends projectInformation {\n  /** ID проекта */\n  _id: string;\n  /** ID автора проекта */\n  authorId: string;\n}\n\n/**\n * Сервис для управления проектами: создание, удаление, получение, обновление и генерация отчетов\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProjectService {\n  /** Базовый URL для API запросов к проектам */\n  private baseServiceUrl = baseUrl + 'project';\n\n  constructor(\n    private httpModule: HttpClient,\n    private reportService: ReportService\n  ) {}\n\n  /**\n   * Создание нового проекта\n   * @param jwt JWT токен для авторизации\n   * @param name Название проекта\n   * @returns Промис с объектом, содержащим данные проекта\n   */\n  POSTcreateProject(jwt: string, name: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('name', name);\n    return firstValueFrom(this.httpModule.post(this.baseServiceUrl, HTTP_PARAMS)) as Promise;\n  }\n\n  /**\n   * Удаление проекта\n   * @param jwt JWT токен для авторизации\n   * @param projectId ID проекта, который нужно удалить\n   * @returns Промис с сообщением об удалении\n   */\n  DELETEdeleteProject(jwt: string, projectId: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('projectId', projectId);\n    return firstValueFrom(this.httpModule.delete(this.baseServiceUrl, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Получение проекта по ID\n   * @param jwt JWT токен для авторизации\n   * @param projectId ID проекта, который нужно получить\n   * @returns Промис с данными проекта\n   */\n  GETgetProject(jwt: string, projectId: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('projectId', projectId);\n    return firstValueFrom(this.httpModule.get(this.baseServiceUrl, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Обновление данных проекта\n   * @param jwt JWT токен для авторизации\n   * @param projectId ID проекта, который нужно обновить\n   * @param projectInformation Новые данные проекта\n   * @returns Промис с сообщением об успешном обновлении\n   */\n  PUTupdateProject(jwt: string, projectId: string, projectInformation: projectInformation): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('projectId', projectId);\n    return firstValueFrom(this.httpModule.put(this.baseServiceUrl, projectInformation, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Получение отчета о комнате и генерация PDF отчета\n   * @param jwt JWT токен для авторизации\n   * @param roomId ID комнаты, по которой нужно получить отчет\n   * @param renderImage Изображение рендера комнаты в формате Blob\n   * @returns Промис, завершающийся после создания отчета\n   */\n  async GETgetReportOfRoom(jwt: string, roomId: string, renderImage: Blob): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('roomId', roomId);\n\n    const RESPONSE = await firstValueFrom(this.httpModule.get(this.baseServiceUrl + '/room', { params: HTTP_PARAMS })) as reportResponse;\n\n    RESPONSE.furnitures = RESPONSE.furnitures.map(furnitureData => {\n      furnitureData.previewUrl = baseUrl + furnitureData.previewUrl;\n      return furnitureData;\n    });\n\n    this.reportService.createReport(RESPONSE, renderImage);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/roomData-1.html":{"url":"interfaces/roomData-1.html","title":"interface - roomData-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  roomData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/scene/scene.component.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс для описания данных комнаты.\n\n            \n\n            \n                Extends\n            \n            \n                            modelInterface\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            objects\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        objects\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        objects:         objectSceneInterface[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         objectSceneInterface[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Массив объектов в комнате\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Component, AfterViewInit, ElementRef, HostListener, Input, SimpleChanges, Output, EventEmitter, OnChanges, OnDestroy, Renderer2 } from '@angular/core';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { ProjectService, roomData as roomDataPlan } from '../../services/project.service';\nimport { loadModel } from './loaders';\nimport { FurnitureModelControlService } from '../../services/furniture-model-control.service';\nimport { AccountCookieService } from '../../services/account-cookie.service';\nimport { FurnitureCardControlService } from '../../services/furniture-card-control.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { NotificationService } from '../../services/notification.service';\nimport { Location, NgIf } from '@angular/common';\nimport { PlanHouseComponent } from '../plan-house/plan-house.component';\n\n/**\n * Интерфейс для описания размеров модели.\n */\nexport interface modelInterface {\n  /** Ширина модели */\n  width: number;\n  /** Высота модели */\n  height: number;\n  /** Длина модели */\n  length: number;\n}\n\n/**\n * Интерфейс для описания объекта сцены.\n */\nexport interface objectSceneInterface {\n  /** ID объекта */\n  objectId: string;\n  /** Расстояние по оси X в метрах */\n  xMetersDistance: number;\n  /** Расстояние по оси Z в метрах */\n  zMetersDistance: number;\n  /** Угол поворота по оси Y */\n  yRotate: number;\n}\n\n/**\n * Интерфейс для описания данных загрузки объекта.\n */\ninterface objectLoadInterface {\n  /** Расстояние по оси X */\n  xDistance: number;\n  /** Расстояние по оси Z */\n  zDistance: number;\n  /** Угол поворота по оси Y */\n  yRotate: number;\n}\n\n/**\n * Интерфейс для описания данных комнаты.\n */\ninterface roomData extends modelInterface {\n  /** Массив объектов в комнате */\n  objects: objectSceneInterface[];\n}\n\n@Component({\n  selector: 'app-scene',\n  standalone: true,\n  imports: [NgIf],\n  templateUrl: './scene.component.html',\n  styleUrls: ['./scene.component.scss']\n})\nexport class SceneComponent implements AfterViewInit, OnChanges {\n  constructor(\n    private elementRef: ElementRef,\n    private furnitureModelService: FurnitureModelControlService,\n    private furnitureCardService: FurnitureCardControlService,\n    private accountCookieService: AccountCookieService,\n    private projectService: ProjectService,\n    private route: ActivatedRoute,\n    private notification: NotificationService,\n    private location: Location,\n    private planHouseComponent: PlanHouseComponent,\n    private router: Router\n  ) { }\n\n\n  @Input()\n  /** Данные комнаты */\n  roomData!: roomDataPlan | undefined;\n\n  @Output()\n  /** Событие для сохранения объектов */\n  saveObjectsEmitter = new EventEmitter();\n\n  /** Рендерер Three.js */\n  private renderer!: THREE.WebGLRenderer;\n\n  /** Камера Three.js */\n  private camera!: THREE.PerspectiveCamera;\n\n  /** Сцена Three.js */\n  private scene!: THREE.Scene;\n\n  /** Контроллеры OrbitControls */\n  private controls!: OrbitControls;\n\n  /** ID текущего кадра анимации */\n  private animationFrameId: number | null = null;\n\n  /** Соотношение размеров холста */\n  private canvasRatioOfWindow = 1.5;\n\n  /** Пропорции комнаты */\n  private roomProportions!: modelInterface;\n\n  /** Луч для определения пересечений */\n  private raycaster = new THREE.Raycaster();\n\n  /** Координаты мыши */\n  private mouse = new THREE.Vector2();\n\n  /** Прямоугольная сетка комнаты */\n  private rectangleMesh!: THREE.Mesh;\n\n  /** Прямоугольная сетка комнаты */\n  private abortConroller: AbortController = new AbortController();\n\n  /** Целевой объект для взаимодействия */\n  protected targetobject: THREE.Object3D | undefined = undefined;\n\n  /** Отображается ли loader */\n  protected isShowLoader: boolean = false\n\n  /** Были ли изменения roomData */\n  public hasBeenChanged: boolean = false\n\n\n  ngAfterViewInit(): void {\n    this.initThreeJs();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.roomData = changes['roomData'].currentValue as roomDataPlan\n\n    if (!this.roomData || this.scene === undefined) return\n    if (changes['roomData'].previousValue !== undefined) { this.clearRoom() }\n\n    this.camera.position.set(0, 5, 0)\n    this.camera.rotation.set(THREE.MathUtils.degToRad(-90), 0, 0)\n    this.roomProportions = this.roomData.roomProportions\n    this.createRoom();\n    this.rectangleMesh.rotation.x = THREE.MathUtils.degToRad(-90)\n\n    if (this.getObjectSize(this.rectangleMesh).width === 0) return\n    if (!this.planHouseComponent.sceneOpenToggle) {\n      this.hasBeenChanged = true\n      return\n    }\n\n    this.loadRoom()\n\n    const FURNITURE_ID = this.route.snapshot.params['furnitureCardId']\n    if (!FURNITURE_ID || changes['roomData'].previousValue) return\n\n    this.fixPath()\n\n    this.addModel(FURNITURE_ID, true, this.abortConroller)\n  }\n\n  private async loadFurnitureModel(fileModel: Blob, furnitureSize: modelInterface, furnitureCardId: string, saveRoom: boolean, moveData?: objectLoadInterface) {\n    try {\n      const LOAD_OBJECT = await loadModel(fileModel)\n      if (moveData) { this.addObjectToScene(LOAD_OBJECT, furnitureSize, furnitureCardId, moveData) } else { this.addObjectToScene(LOAD_OBJECT, furnitureSize, furnitureCardId) }\n      if (saveRoom) this.saveRoom()\n    } catch (error) {\n    }\n  }\n  private async addModel(furnitureCardId: string, saveRoom: boolean, controller: AbortController, moveData?: objectLoadInterface) {\n    const JWT = this.accountCookieService.getJwt()\n    if (!JWT) return\n    try {\n      if (saveRoom) this.showLoader()\n      const PROPORTIONS = (await this.furnitureCardService.GETfurnitureCard(furnitureCardId)).furnitureCard.proportions as modelInterface\n      const MODEL = await this.furnitureModelService.GETfurnitureModel(JWT, furnitureCardId, controller)\n      await this.loadFurnitureModel(MODEL, PROPORTIONS, furnitureCardId, saveRoom, moveData)\n      this.closeLoader()\n    } catch (error) {\n      this.closeLoader()\n      this.notification.setError('Ошибка загрузки модели', 5000)\n      console.log(error)\n    }\n  }\n\n  private fixPath() {\n    const NEW_URL = this.location.path().split('/').slice(0, -1).join('/')\n    this.location.replaceState(NEW_URL)\n  }\n  /**\n   * Инициализация Three.js сцены.\n   */\n  private initThreeJs(): void {\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const HEMISPHERE_LIGHT = new THREE.HemisphereLight(0xaaaaaa, 0x000000, 2);\n    this.scene.add(HEMISPHERE_LIGHT);\n    this.renderer = new THREE.WebGLRenderer({ antialias: true, alpha: false });\n    const CANVAS_CONTAINER = this.elementRef.nativeElement.querySelector('#canvasContainer');\n    this.camera.position.z = 5;\n    this.renderer.setSize(window.innerWidth / this.canvasRatioOfWindow, window.innerHeight / this.canvasRatioOfWindow);\n    CANVAS_CONTAINER.appendChild(this.renderer.domElement);\n    this.animationFrameId = requestAnimationFrame(() => this.animate());\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  /**\n   * Анимация сцены.\n   */\n  private animate(): void {\n    this.animationFrameId = requestAnimationFrame(() => this.animate());\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  /**\n   * Создает геометрию прямоугольника с закругленными углами.\n   * @param width Ширина прямоугольника.\n   * @param height Высота прямоугольника.\n   * @param radius Радиус закругления.\n   * @param segments Количество сегментов.\n   * @returns Геометрия прямоугольника.\n   */\n  private createRoundedRectangleGeometry(width: number, height: number, radius: number, segments: number): THREE.BufferGeometry {\n    const SHAPE = new THREE.Shape();\n    SHAPE.moveTo(-width / 2 + radius, -height / 2);\n    SHAPE.lineTo(width / 2 - radius, -height / 2);\n    SHAPE.quadraticCurveTo(width / 2, -height / 2, width / 2, -height / 2 + radius);\n    SHAPE.lineTo(width / 2, height / 2 - radius);\n    SHAPE.quadraticCurveTo(width / 2, height / 2, width / 2 - radius, height / 2);\n    SHAPE.lineTo(-width / 2 + radius, height / 2);\n    SHAPE.quadraticCurveTo(-width / 2, height / 2, -width / 2, height / 2 - radius);\n    SHAPE.lineTo(-width / 2, -height / 2 + radius);\n    SHAPE.quadraticCurveTo(-width / 2, -height / 2, -width / 2 + radius, -height / 2);\n\n    const geometry = new THREE.ShapeGeometry(SHAPE, segments);\n\n    return geometry;\n  }\n\n  /**\n   * Создает комнату на сцене.\n   */\n  private createRoom(): void {\n    if (!this.roomData) return\n    const ROOM_PROPORTIONS = this.roomData.roomProportions\n    const RADIUS = 0.1\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n    this.controls.enableDamping = true;\n    this.controls.dampingFactor = 0.15;\n    this.controls.enableZoom = true;\n    this.controls.minDistance = 1;\n    this.controls.maxDistance = 10;\n    const paddingPolarAngle = 5;\n    this.controls.maxPolarAngle = THREE.MathUtils.degToRad(90 - paddingPolarAngle);\n    this.createRoomShape(ROOM_PROPORTIONS.width, ROOM_PROPORTIONS.length, RADIUS);\n    this.rectangleMesh.name = 'roomFloorBase';\n    this.rectangleMesh\n  }\n\n  /**\n   * Рассчитывает данные для сохранения объекта.\n   * @param object Объект сцены.\n   * @returns Данные для сохранения объекта.\n   */\n  private calculateObjectSaveData(object: THREE.Object3D): objectSceneInterface {\n    const FLOOR_SIZE = this.getObjectSize(this.rectangleMesh)\n    const OBJECT_POSITION = object.position\n    const objectSaveData: objectSceneInterface = {\n      objectId: (object.userData as any).id,\n      xMetersDistance: OBJECT_POSITION.x / FLOOR_SIZE.width * this.roomProportions.width,\n      zMetersDistance: OBJECT_POSITION.z / FLOOR_SIZE.length * this.roomProportions.length,\n      yRotate: object.rotation.y\n    }\n    return objectSaveData\n  }\n\n  /**\n   * Рассчитывает данные для перемещения объекта.\n   * @param objectSaveData Данные сохраненного объекта.\n   * @returns Данные для перемещения объекта.\n   */\n  private calculateMoveObjectData(objectSaveData: objectSceneInterface): objectLoadInterface {\n    const FLOOR_SIZE = this.getObjectSize(this.rectangleMesh)\n    return {\n      xDistance: objectSaveData.xMetersDistance * FLOOR_SIZE.width / this.roomProportions.width,\n      zDistance: objectSaveData.zMetersDistance * FLOOR_SIZE.length / this.roomProportions.length,\n      yRotate: objectSaveData.yRotate\n    }\n  }\n\n  /**\n   * Создает форму комнаты.\n   * @param widthRatio Соотношение ширины.\n   * @param heightRatio Соотношение высоты.\n   * @param radius Радиус закругления.\n   */\n  private createRoomShape(widthRatio: number, heightRatio: number, radius: number): void {\n    const CAMERA_FRUSTUM_BOUNDS = this.calculateFrustumBounds();\n    const SHAPE_RATIO = widthRatio / heightRatio;\n    let width: number, height: number;\n\n    if (SHAPE_RATIO  UPLOAD_OBJECT_SIZE.length ? RECTANGLE_SIZE.width / UPLOAD_OBJECT_SIZE.width : RECTANGLE_SIZE.length / UPLOAD_OBJECT_SIZE.length;\n    const REAL_PROPORTIONS_COEFFICIENT = UPLOAD_OBJECT_SIZE.width > UPLOAD_OBJECT_SIZE.length ? width / this.roomProportions.width : length / length;\n    const GENERAL_COEFFICIENT = REAL_PROPORTIONS_COEFFICIENT * SCENE_PROPORTIONS_COEFFICIENT;\n    object.scale.set(GENERAL_COEFFICIENT, GENERAL_COEFFICIENT, GENERAL_COEFFICIENT);\n  }\n\n  /**\n   * Загружает комнату с объектами.\n   */\n  public async loadRoom(): Promise {\n    const JWT = this.accountCookieService.getJwt()\n    if (!JWT || !this.roomData) return\n    const roomData: roomData = {\n      objects: this.roomData.objects,\n      ...this.roomData.roomProportions\n    }\n\n    this.showLoader()\n    for (const object of roomData.objects) {\n      await this.addModel(object.objectId, false, this.abortConroller, this.calculateMoveObjectData(object));\n    }\n    this.closeLoader()\n    this.hasBeenChanged = false\n  }\n\n  private showLoader() {\n    this.isShowLoader = true\n  }\n  private closeLoader() {\n    this.isShowLoader = false\n  }\n  /**\n   * Очищает комнату от объектов.\n   */\n  private clearRoom(): void {\n    for (let i = this.scene.children.length - 1; i >= 0; i--) {\n      const OBJECT = this.scene.children[i];\n      if (OBJECT.type !== 'Scene' && OBJECT.type !== 'HemisphereLight') {\n        this.scene.remove(OBJECT);\n      }\n    }\n  }\n\n  /**\n   * Обрабатывает изменение размера окна.\n   * @param event Событие изменения размера.\n   */\n  @HostListener('window:resize', ['$event'])\n  private onResize(event: Event): void {\n    this.renderer.setSize(window.innerWidth / this.canvasRatioOfWindow, window.innerHeight / this.canvasRatioOfWindow);\n    this.camera.aspect = window.innerWidth / window.innerHeight;\n    this.camera.updateProjectionMatrix();\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  /**\n   * Обрабатывает клик мыши.\n   * @param event Событие клика.\n   */\n  @HostListener('click', ['$event'])\n  private onMouseClick(event: MouseEvent): void {\n    if (this.targetobject) {\n      this.targetobject = undefined;\n      return;\n    }\n    const RECT = (event.target as HTMLCanvasElement).getBoundingClientRect();\n    const X = (event.clientX - RECT.left) / RECT.width * 2 - 1;\n    const Y = -(event.clientY - RECT.top) / RECT.height * 2 + 1;\n\n    this.mouse.x = X;\n    this.mouse.y = Y;\n    this.raycaster.setFromCamera(this.mouse, this.camera);\n\n    const INTERSECTIONS = this.raycaster.intersectObjects(this.scene.children);\n\n    const FOUND_INTERSECTION = INTERSECTIONS.find(intersect => {\n      return intersect.object.name !== 'roomFloorBase' && intersect.object.type !== 'Scene' && intersect.object.type !== 'HemisphereLight'\n    })?.object\n    if (!FOUND_INTERSECTION) return\n    this.targetobject = FOUND_INTERSECTION.parent ? FOUND_INTERSECTION.parent : FOUND_INTERSECTION\n  }\n\n  /**\n   * Поворачивает целевой объект.\n   * @param event Событие нажатия клавиши.\n   */\n  @HostListener('window:keydown', ['$event'])\n  private rotateTargetObject(event: KeyboardEvent): void {\n    if (!this.targetobject) return\n    let rotateAngle = -0.05\n\n    switch (event.key) {\n      case 'q':\n      case 'й':\n        this.targetobject.rotation.y -= rotateAngle\n        break\n      case 'e':\n      case 'у':\n        this.targetobject.rotation.y += rotateAngle\n    }\n  }\n\n  /**\n   * Обрабатывает перемещение мыши.\n   * @param event Событие перемещения мыши.\n   */\n  @HostListener('mousemove', ['$event'])\n  private onMousemove(event: MouseEvent): void {\n    if (!this.targetobject) return;\n\n    const RECT = (event.target as HTMLCanvasElement).getBoundingClientRect();\n    const X = (event.clientX - RECT.left) / RECT.width * 2 - 1;\n    const Y = -(event.clientY - RECT.top) / RECT.height * 2 + 1;\n\n    this.mouse.x = X;\n    this.mouse.y = Y;\n    this.raycaster.setFromCamera(this.mouse, this.camera);\n\n    const INTERSECTIONS = this.raycaster.intersectObject(this.rectangleMesh);\n    if (INTERSECTIONS.length === 0) return;\n\n    const INTERSECTIONS_X = INTERSECTIONS[0].point.x;\n    const INTERSECTION_Z = INTERSECTIONS[0].point.z;\n    const RECTANGLE_MESH_SIZE = this.getObjectSize(this.rectangleMesh);\n    const objectSize = this.getObjectSize(this.targetobject);\n\n    const minX = -RECTANGLE_MESH_SIZE.width / 2 + objectSize.width / 2;\n    const maxX = RECTANGLE_MESH_SIZE.width / 2 - objectSize.width / 2;\n\n    let newXObjectPosition = INTERSECTIONS_X;\n    if (newXObjectPosition  maxX) {\n      newXObjectPosition = maxX;\n    }\n\n    const MIN_Z = -RECTANGLE_MESH_SIZE.length / 2 + objectSize.length / 2;\n    const MAX_Z = RECTANGLE_MESH_SIZE.length / 2 - objectSize.length / 2;\n\n    let newZObjectPosition = INTERSECTION_Z;\n    if (newZObjectPosition  MAX_Z) {\n      newZObjectPosition = MAX_Z;\n    }\n\n    this.targetobject.position.set(newXObjectPosition, 0, newZObjectPosition);\n  }\n\n  /**\n   * Генерирует отчет по комнате.\n   */\n  protected abortLoadRoom() {\n    this.abortConroller.abort()\n    this.abortConroller = new AbortController()\n\n    this.planHouseComponent.sceneOpenToggle = false\n    this.planHouseComponent.closeViewRoom()\n\n    const PLAN_ID = this.route.snapshot.params['planId']\n    this.router.navigateByUrl('/plan/' + PLAN_ID)\n  }\n\n  /**\n   * Генерирует отчет по комнате.\n   */\n  protected async getReport(): Promise {\n    const JWT = this.accountCookieService.getJwt()\n    if (!JWT || !this.roomData?._id) return\n\n    const oldCameraPosition = this.camera.position.clone();\n    const oldCameraRotation = this.camera.rotation.clone();\n\n    this.camera.position.set(0, 7, 0)\n    this.camera.rotation.set(THREE.MathUtils.degToRad(-90), 0, 0)\n    this.renderer.render(this.scene, this.camera);\n    const imageDataURL = this.renderer.domElement.toDataURL('image/png')\n    const imageDataResponse = await fetch(imageDataURL)\n\n    this.camera.position.copy(oldCameraPosition);\n    this.camera.rotation.copy(oldCameraRotation);\n\n    if (!imageDataResponse.ok) {\n      this.notification.setError('Ошибка при рендере', 5000)\n    }\n    const imageDataBlob = await imageDataResponse.blob()\n\n    this.projectService.GETgetReportOfRoom(JWT, this.roomData?._id, imageDataBlob)\n  }\n\n  /**\n   * Удаляет выбранную модель.\n   */\n  protected deleteModel(): void {\n    if (!this.targetobject) return\n    this.scene.remove(this.targetobject)\n    this.saveRoom()\n  }\n\n  /**\n   * Сохраняет текущее состояние комнаты.\n   */\n  public saveRoom(): void {\n    if (!this.roomData) return\n    const OBJECTS_SCENE_ARRAY = this.scene.children.filter(object => {\n      if (\n        object.name !== 'roomFloorBase' &&\n        object.type !== 'Scene' &&\n        object.type !== 'HemisphereLight'\n      ) {\n        return true;\n      }\n      return false;\n    })\n      .map(object => {\n        return this.calculateObjectSaveData(object)\n      })\n    const ROOM_OBJECTS_DATA = OBJECTS_SCENE_ARRAY\n    this.roomData.objects = OBJECTS_SCENE_ARRAY\n    this.saveObjectsEmitter.emit(ROOM_OBJECTS_DATA)\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/roomSpanSettings.html":{"url":"interfaces/roomSpanSettings.html","title":"interface - roomSpanSettings","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  roomSpanSettings\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/plan-house/plan-house.component.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс для настроек сетки комнаты.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            endX\n                                        \n                                \n                                \n                                        \n                                            endY\n                                        \n                                \n                                \n                                        \n                                            gap\n                                        \n                                \n                                \n                                        \n                                            startX\n                                        \n                                \n                                \n                                        \n                                            startY\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        endX\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        endX:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Конечная координата X\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        endY\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        endY:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Конечная координата Y\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        gap\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        gap:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Расстояние между элементами\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        startX\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        startX:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Начальная координата X\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        startY\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        startY:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Начальная координата Y\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { AfterViewInit, Component, Input, Renderer2, ElementRef, HostListener, EventEmitter, Output, ViewChild, OnInit, TemplateRef, ChangeDetectorRef } from '@angular/core';\nimport { modelInterface, SceneComponent } from '../scene/scene.component';\nimport { Location, NgFor, NgIf, NgTemplateOutlet } from '@angular/common';\nimport { FormGroup, FormControl, ReactiveFormsModule, Validators, ValidatorFn, AbstractControl, ValidationErrors } from '@angular/forms';\nimport { throttle } from 'lodash';\nimport { objectSceneInterface } from '../scene/scene.component'\nimport { categoryData, CategoryService } from '../../services/category.service';\nimport { NotificationService } from '../../services/notification.service';\nimport { AccountCookieService } from '../../services/account-cookie.service';\nimport { roomData } from '../../services/project.service';\n\n/**\n * Интерфейс для настроек сетки комнаты.\n */\ninterface roomSpanSettings {\n  /** Начальная координата X */\n  startX: number;\n  /** Начальная координата Y */\n  startY: number;\n  /** Конечная координата X */\n  endX: number;\n  /** Конечная координата Y */\n  endY: number;\n  /** Расстояние между элементами */\n  gap: number;\n}\n\n@Component({\n  selector: 'app-plan-house',\n  standalone: true,\n  imports: [NgTemplateOutlet, NgFor, ReactiveFormsModule, NgIf, SceneComponent],\n  templateUrl: './plan-house.component.html',\n  styleUrls: ['./plan-house.component.scss']\n})\nexport class PlanHouseComponent implements AfterViewInit, OnInit {\n  constructor(\n    private renderer: Renderer2,\n    private elementRef: ElementRef,\n    private categoryService: CategoryService,\n    private location: Location,\n    private notification: NotificationService,\n    private cdr: ChangeDetectorRef,\n    private accountCookieService: AccountCookieService\n  ) { }\n\n  /** Предыдущее значение grid-area для комнаты */\n  private previousGridArea!: string;\n\n  /** HTML-элемент для отображения комнаты */\n  private roomSpan!: HTMLSpanElement;\n\n  /** Настройки сетки комнаты */\n  private roomSpanSettings!: roomSpanSettings;\n\n  /** Флаг для отслеживания состояния перетаскивания */\n  private isDragging = false;\n\n  /** Флаг для отслеживания одиночного клика */\n  private isClick = false;\n\n  /** Таймер для обработки кликов */\n  private clickTimer: any;\n\n  /** Флаг для отслеживания двойного клика */\n  private isDoubleClick = false;\n\n  /** Кнопка для переключения модуля */\n  private toggleModuleButton!: HTMLButtonElement;\n\n  /** HTML-форма для ввода данных комнаты */\n  private formElement!: HTMLFormElement;\n\n  /** Старый размер комнаты при просмотре */\n  private oldSizeViewRoom: {\n    height: number;\n    width: number;\n  } | undefined = undefined;\n\n  /** Последний план дома */\n  protected lastPlanHouse: roomData | undefined = undefined;\n\n  /** Массив категорий */\n  protected categoryArray: categoryData[] = [];\n\n  /** Флаг для включения руководства */\n  protected isGuideIncluded: boolean = false;\n\n  /** Флаг для отображения руководства */\n  protected isGuideVisible: boolean = true;\n\n  /** Текущая комната для просмотра */\n  public currentViewRoom: undefined | number = undefined;\n\n  /** Флаг для переключения сцены */\n  public sceneOpenToggle: boolean = false;\n\n  /** ID текущей выбранной комнаты */\n  public currentIdClickedRoom: number | undefined = undefined;\n\n  /** Шаблон для руководства */\n  public guideTemplate!: TemplateRef;\n\n  @Input()\n  /** План дома */\n  planHouse!: roomData[];\n\n  @ViewChild('scene') \n  /** Компонент сцены */\n  sceneComponent!: SceneComponent;\n\n  @Output() \n  /** Событие инициализации */\n  initialized = new EventEmitter();\n\n  @Output()\n  /** Событие для передачи плана дома */\n  planHouseEmitter = new EventEmitter();\n\n  @Output()\n  /** Событие для сохранения */\n  callSaveEmitter = new EventEmitter();\n\n  @ViewChild('roomsGuideTemplate1', { static: true })\n  /** Шаблон руководства для комнат (1) */\n  roomsGuideTemplate1!: TemplateRef;\n\n  @ViewChild('roomsGuideTemplate2', { static: true })\n  /** Шаблон руководства для комнат (2) */\n  roomsGuideTemplate2!: TemplateRef;\n\n  @ViewChild('roomGuideTemplate', { static: true })\n  /** Шаблон руководства для комнаты */\n  roomGuideTemplate!: TemplateRef;\n\n  ngOnInit(): void {\n    this.checkGuideInclude();\n    this.initCategories();\n  }\n\n  ngAfterViewInit(): void {\n    const PARENT_ELEMENT = this.elementRef.nativeElement.parentElement;\n    if (PARENT_ELEMENT.classList.contains('projectPreviewSpan')) this.isGuideIncluded = false;\n\n    this.guideTemplate = this.roomsGuideTemplate1;\n    this.cdr.detectChanges();\n    this.roomSpan = this.elementRef.nativeElement.querySelector('.roomSpan') as HTMLSpanElement;\n    this.calculateRoomSpanSettings();\n    this.formElement = this.elementRef.nativeElement.querySelector('form') as HTMLFormElement;\n    this.toggleModuleButton = this.elementRef.nativeElement.querySelector('.addModuleBtn');\n    this.initialized.emit();\n  }\n\n  /**\n   * Инициализация категорий.\n   */\n  private async initCategories() {\n    this.categoryArray = (await this.categoryService.GETgetAllCategories()).categoryArray;\n  }\n\n  /**\n   * Отображение руководства.\n   */\n  private showGuide() {\n    this.isGuideVisible = true;\n  }\n\n  /**\n   * Проверка включения руководства.\n   */\n  private checkGuideInclude() {\n    this.isGuideIncluded = this.accountCookieService.getGuideRule() === 'false' ? false : true;\n    this.isGuideVisible = this.isGuideIncluded;\n  }\n\n  /**\n   * Эмитирует текущее состояние плана дома.\n   */\n  private emitPlanHouse() {\n    this.planHouseEmitter.emit(this.planHouse);\n  }\n\n  /**\n   * Сохраняет текущий план дома.\n   */\n  private saveHouse() {\n    this.callSaveEmitter.emit();\n  }\n\n  /**\n   * Находит свободное место для комнаты.\n   * @param roomProportions Пропорции комнаты.\n   * @returns Строка grid-area или false, если места нет.\n   */\n  private findFreeSpace(roomProportions: modelInterface): string | false {\n    const GRID_SIZE = 10;\n    const GRID_OCCUPIED: boolean[][] = Array.from({ length: GRID_SIZE }, () => Array(GRID_SIZE).fill(false));\n\n    this.planHouse.forEach(room => {\n      const [startRow, startColumn, endRow, endColumn] = room.gridArea.split('/').map(Number);\n\n      for (let row = startRow - 1; row  otherStartRow &&\n        startColumn  otherStartColumn\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n  /**\n   * Рассчитывает область сетки для объекта.\n   * @param objectX Координата X объекта.\n   * @param objectY Координата Y объекта.\n   * @returns Строка grid-area или undefined.\n   */\n  private calculateGridArea(objectX: number, objectY: number): string | undefined {\n    if (this.currentIdClickedRoom === undefined) return;\n    const ROOM_PROPORTIONS = this.planHouse[this.currentIdClickedRoom].roomProportions;\n    const RELATIVE_X = objectX - this.roomSpanSettings.startX;\n    const RELATIVE_Y = objectY - this.roomSpanSettings.startY - document.documentElement.scrollTop\n    const SIDE_AREA = (this.roomSpanSettings.endX - this.roomSpanSettings.startX) / 10 + this.roomSpanSettings.gap;\n    const START_COLUMN = Math.floor(RELATIVE_X / SIDE_AREA) + 1;\n    const START_ROW = Math.floor(RELATIVE_Y / SIDE_AREA) + 1;\n\n    const END_COLUMN = START_COLUMN + Math.round(ROOM_PROPORTIONS.width) - 1;\n    const END_ROW = START_ROW + Math.round(ROOM_PROPORTIONS.length) - 1;\n\n    if (END_COLUMN > 10 || END_ROW > 10) {\n      return undefined;\n    }\n\n    return `${START_ROW} / ${START_COLUMN} / ${END_ROW + 1} / ${END_COLUMN + 1}`;\n  }\n  /**\n   * Сбрасывает позицию комнаты.\n   * @param clientX Координата X.\n   * @param clientY Координата Y.\n   */\n  private resetRoomPosition(clientX: number, clientY: number) {\n    const TARGET_ELEMENT = this.roomSpan.querySelector(`[data-index=\"${this.currentIdClickedRoom}\"]`) as HTMLDivElement;\n    if (TARGET_ELEMENT) {\n      const GRID_AREA = this.calculateGridArea(clientX, clientY);\n\n      if (GRID_AREA && !this.isAreaOccupied(GRID_AREA, this.currentIdClickedRoom!)) {\n        this.renderer.setStyle(TARGET_ELEMENT, 'grid-area', GRID_AREA);\n        this.planHouse[this.currentIdClickedRoom!].gridArea = GRID_AREA;\n      } else {\n        this.renderer.setStyle(TARGET_ELEMENT, 'grid-area', this.previousGridArea);\n      }\n\n      this.renderer.removeStyle(TARGET_ELEMENT, 'background-color');\n      this.renderer.removeStyle(TARGET_ELEMENT, 'z-index');\n\n      this.currentIdClickedRoom = undefined;\n    }\n  }\n  @HostListener('document:mouseleave', ['$event'])\n  private onMouseLeave(event: MouseEvent) {\n    if (this.isDragging && this.currentIdClickedRoom !== undefined) {\n      this.onMouseUp(event);\n    }\n  }\n  @HostListener('document:touchend', ['$event'])\n  @HostListener('document:keyup.Enter', ['$event'])\n  @HostListener('document:mouseup', ['$event'])\n  private onMouseUp(event: MouseEvent | KeyboardEvent | TouchEvent) {\n    if (this.sceneOpenToggle === true) return\n    if (this.currentViewRoom !== undefined) return\n    if (this.isDragging && this.currentIdClickedRoom !== undefined) {\n      this.isDragging = false;\n      if (event instanceof MouseEvent) {\n\n        this.resetRoomPosition(event.clientX, event.clientY);\n      }\n      if (typeof TouchEvent !== 'undefined' && event instanceof TouchEvent) {\n        const touch = event.changedTouches[0];\n        this.resetRoomPosition(touch.clientX, touch.clientY);\n      }\n      const DRAGGED_ELEMENT = this.elementRef.nativeElement.querySelector('[style*=\"cursor: grabbing\"]');\n      if (DRAGGED_ELEMENT) {\n        this.renderer.removeStyle(DRAGGED_ELEMENT, 'cursor');\n        this.renderer.removeStyle(DRAGGED_ELEMENT, 'background-color')\n      }\n      this.currentIdClickedRoom = undefined\n      this.emitPlanHouse()\n    }\n    this.clickTimer = setTimeout(() => {\n      if (this.isClick && !this.isDragging) {\n        if (this.currentIdClickedRoom == undefined) return\n        this.toggleOpenRoomModule(this.currentIdClickedRoom)\n      }\n      this.isClick = false\n      this.isDoubleClick = false\n      this.isDragging = false\n      clearTimeout(this.clickTimer)\n    }, 250)\n\n  }\n  /**\n   * Обрабатывает событие перемещения мыши.\n   * @param event Событие мыши или касания.\n   */\n  @HostListener('document:mousemove', ['$event'])\n  @HostListener('document:touchmove', ['$event'])\n  private onMouseMove(event: MouseEvent | TouchEvent) {\n    event.preventDefault();\n    if (this.isDragging && this.currentIdClickedRoom !== undefined) {\n      const TARGET_ELEMENT = this.roomSpan.querySelector(`[data-index=\"${this.currentIdClickedRoom}\"]`) as HTMLDivElement;\n      if (!TARGET_ELEMENT) return;\n      const gridArea = event instanceof MouseEvent ? this.calculateGridArea(event.clientX, event.clientY) : this.calculateGridArea(event.changedTouches[0].clientX, event.changedTouches[0].clientY)\n      this.renderer.setStyle(TARGET_ELEMENT, 'z-index', '4');\n      if (gridArea) {\n        this.renderer.setStyle(TARGET_ELEMENT, 'grid-area', gridArea);\n\n        const isOccupied = this.isAreaOccupied(gridArea, this.currentIdClickedRoom);\n\n        if (isOccupied) {\n          this.renderer.setStyle(TARGET_ELEMENT, 'background-color', '#F18DC4');\n        } else {\n          this.renderer.setStyle(TARGET_ELEMENT, 'background-color', '#A3B18A');\n        }\n      }\n    }\n  }\n  @HostListener('document:keydown.ArrowUp', ['$event'])\n  @HostListener('document:keydown.ArrowDown', ['$event'])\n  @HostListener('document:keydown.ArrowRight', ['$event'])\n  @HostListener('document:keydown.ArrowLeft', ['$event'])\n  private moveRoom(event: KeyboardEvent) {\n    if (this.currentIdClickedRoom === undefined || !this.isDragging) return\n    const MOVE_ROOM_ELEMENT = this.elementRef.nativeElement.querySelector(`[data-index=\"${this.currentIdClickedRoom}\"]`) as HTMLDivElement;\n    let [startRow, startColumn, endRow, endColumn] = this.planHouse[this.currentIdClickedRoom].gridArea.split('/').map(Number);\n    switch (event.key) {\n      case 'ArrowUp':\n        startRow -= 1\n        endRow -= 1\n        break\n      case 'ArrowDown':\n        startRow += 1\n        endRow += 1\n        break\n      case 'ArrowRight':\n        startColumn += 1\n        endColumn += 1\n        break\n      case 'ArrowLeft':\n        startColumn -= 1\n        endColumn -= 1\n        break\n    }\n    if (startRow  11 || endColumn > 11) return\n    const NEW_GRID_AREA = `${startRow} / ${startColumn} / ${endRow} / ${endColumn}`\n    if (this.isAreaOccupied(NEW_GRID_AREA, this.currentIdClickedRoom)) return\n    this.renderer.setStyle(MOVE_ROOM_ELEMENT, 'grid-area', NEW_GRID_AREA)\n    this.planHouse[this.currentIdClickedRoom].gridArea = NEW_GRID_AREA\n  }\n  @HostListener('document:contextmenu', ['$event'])\n  private onContextMenu(event: MouseEvent): void {\n    event.preventDefault();\n  }\n  @HostListener('window:scroll')\n  private onScroll = throttle(() => {\n    if (this.currentIdClickedRoom === undefined) return\n    this.calculateRoomSpanSettings()\n  }, 100)\n  @HostListener('document:keydown.Escape')\n  private escapeDraggingMode() {\n    this.isDragging = false\n    this.currentIdClickedRoom = undefined\n    const DRAGGED_ELEMENT = this.elementRef.nativeElement.querySelector('[style*=\"cursor: grabbing\"]');\n    if (DRAGGED_ELEMENT) {\n      this.renderer.removeStyle(DRAGGED_ELEMENT, 'background-color')\n      this.renderer.removeStyle(DRAGGED_ELEMENT, 'cursor');\n    }\n  }\n  protected clickRoom(event: Event, indexRoom: number) {\n    if (this.currentViewRoom !== undefined) return;\n    this.currentIdClickedRoom = indexRoom;\n\n    const EVENT_TARGET = event.target as HTMLDivElement;\n    this.previousGridArea = window.getComputedStyle(EVENT_TARGET).getPropertyValue('grid-area');\n\n    if (this.isClick && !this.isDragging) {\n      this.isDoubleClick = true;\n      this.isClick = false;\n      this.openViewRoom(this.currentIdClickedRoom);\n    } else {\n      this.isClick = true;\n    }\n\n    setTimeout(() => {\n      if (this.isDoubleClick || !this.isClick) return;\n      this.calculateRoomSpanSettings()\n      this.renderer.setStyle(EVENT_TARGET, 'cursor', 'grabbing');\n      this.isDragging = true;\n      this.renderer.setStyle(EVENT_TARGET, 'background-color', '#A3B18A');\n      this.currentIdClickedRoom = indexRoom;\n      this.isClick = false;\n    }, 350);\n  }\n\n  protected closeGuide() {\n    this.accountCookieService.setGuideRule()\n    this.isGuideVisible = false;\n    if (this.guideTemplate == this.roomsGuideTemplate1) {\n      this.guideTemplate = this.roomsGuideTemplate2\n      this.showGuide()\n    }\n  }\n  protected turnoffGuides(turnoff: boolean) {\n    if (turnoff) {\n      this.accountCookieService.setGuideRule()\n      if (this.sceneOpenToggle === true && this.currentViewRoom !== undefined) {\n        this.guideTemplate = this.roomGuideTemplate\n      }\n    } else {\n      this.accountCookieService.deleteGuideRule()\n    }\n    this.checkGuideInclude()\n  }\n  protected updateRoomObjects(objects: objectSceneInterface[]) {\n    if (this.currentViewRoom === undefined) return\n    this.planHouse[this.currentViewRoom].objects = objects\n    this.emitPlanHouse()\n    this.saveHouse()\n  }\n  protected openScene() {\n    if (this.isGuideIncluded) {\n      this.guideTemplate = this.roomGuideTemplate\n      this.showGuide()\n    }\n    const NEW_URL = this.location.path() + '/' + this.currentViewRoom\n    this.location.replaceState(NEW_URL)\n    this.sceneOpenToggle = true\n    \n    if(this.sceneComponent.hasBeenChanged)this.sceneComponent.loadRoom()\n  }\n  protected closeScene() {\n    const NEW_URL = this.location.path().split('/').slice(0, -1).join('/')\n    this.location.replaceState(NEW_URL)\n    this.sceneComponent.saveRoom()\n    this.sceneOpenToggle = false\n  }\n  protected updateRoom() {\n    if (this.currentIdClickedRoom === undefined || !this.roomForm.value.name) return\n    if (this.roomForm.value.name === this.planHouse[this.currentIdClickedRoom].name) {\n      this.toggleOpenRoomModule()\n      return\n    }\n    this.planHouse[this.currentIdClickedRoom].name = this.roomForm.value.name\n\n    this.roomForm.patchValue({\n      width: null,\n      height: null,\n      length: null,\n      name: ''\n    });\n\n    this.emitPlanHouse()\n    this.toggleOpenRoomModule()\n    this.saveHouse()\n  }\n  protected addRoom() {\n    const { width, length, height, name } = this.roomForm.value\n    this.toggleOpenRoomModule()\n    const NEW_ROOM: roomData = {\n      name: name!,\n      roomProportions: {\n        width: +width!,\n        height: +height!,\n        length: +length!\n      },\n      objects: [],\n      gridArea: ''\n    }\n    const GRID_AREA = this.findFreeSpace(NEW_ROOM.roomProportions)\n    if (!GRID_AREA) {\n      return\n    }\n    NEW_ROOM.gridArea = GRID_AREA\n    this.planHouse = [...this.planHouse, NEW_ROOM]\n    this.emitPlanHouse()\n    this.saveHouse()\n  }\n\n  protected deleteRoom() {\n    if (this.currentIdClickedRoom !== undefined) {\n      this.planHouse.splice(this.currentIdClickedRoom, 1);\n      this.currentIdClickedRoom = undefined;\n      this.toggleOpenRoomModule()\n      this.emitPlanHouse()\n      this.saveHouse()\n      this.toggleControls(true)\n    }\n  }\n  protected toggleControls(enable: boolean): void {\n    if (enable) {\n      this.roomForm.get('width')?.enable();\n      this.roomForm.get('height')?.enable();\n      this.roomForm.get('length')?.enable();\n    } else {\n      this.roomForm.get('width')?.disable();\n      this.roomForm.get('height')?.disable();\n      this.roomForm.get('length')?.disable();\n    }\n  }\n  protected toggleOpenRoomModule(indexRoom?: number) {\n    if (!this.toggleModuleButton) return;\n    if (indexRoom !== undefined) {\n      const { width, height, length } = this.planHouse[indexRoom].roomProportions;\n      this.roomForm.patchValue({\n        width: width,\n        height: height,\n        length: length,\n        name: this.planHouse[indexRoom].name\n      });\n      this.toggleControls(this.currentIdClickedRoom === undefined)\n      this.formElement.classList.add('openAddModule');\n      this.renderer.setStyle(this.toggleModuleButton, 'rotate', '135deg');\n      return;\n    }\n    if (this.formElement.classList.contains('openAddModule')) {\n      this.formElement.classList.remove('openAddModule');\n      this.renderer.setStyle(this.toggleModuleButton, 'rotate', '0deg');\n      this.currentIdClickedRoom = undefined\n      this.roomForm.patchValue({\n        width: null,\n        height: null,\n        length: null,\n        name: ''\n      });\n    } else {\n      this.formElement.classList.add('openAddModule');\n      this.renderer.setStyle(this.toggleModuleButton, 'rotate', '135deg');\n    }\n  }\n  public closeViewRoom() {\n    const ROOM_ELEMENT = this.roomSpan.querySelector(`[data-index=\"${this.currentViewRoom}\"]`) as HTMLDivElement;\n    if (!ROOM_ELEMENT || !this.oldSizeViewRoom) return;\n    this.currentViewRoom = undefined;\n    this.currentIdClickedRoom = undefined\n    this.renderer.setStyle(ROOM_ELEMENT, 'width', this.oldSizeViewRoom.width + 'px')\n    this.renderer.setStyle(ROOM_ELEMENT, 'height', this.oldSizeViewRoom.height + 'px')\n    this.renderer.removeStyle(ROOM_ELEMENT, 'border');\n    this.renderer.removeClass(ROOM_ELEMENT, 'roomView');\n\n    this.renderer.setStyle(this.roomSpan, 'display', 'grid');\n\n    setTimeout(() => {\n      this.renderer.removeStyle(ROOM_ELEMENT, 'width');\n      this.renderer.removeStyle(ROOM_ELEMENT, 'height');\n    }, 768);\n  }\n  public openViewRoom(indexRoom: number) {\n    this.formElement.classList.remove('openAddModule');\n    this.currentViewRoom = indexRoom\n    this.lastPlanHouse = this.planHouse[indexRoom]\n    const ROOM_ELEMENT = this.roomSpan.querySelector(`[data-index=\"${indexRoom}\"]`) as HTMLDivElement\n    const { width: roomWidth, height: roomHeight } = ROOM_ELEMENT.getBoundingClientRect()\n    const { width: spanWidth, height: spanHeight } = this.roomSpan.getBoundingClientRect()\n    this.oldSizeViewRoom = {\n      height: roomHeight,\n      width: roomWidth\n    }\n\n    this.renderer.setStyle(ROOM_ELEMENT, 'width', roomWidth + 'px')\n    this.renderer.setStyle(ROOM_ELEMENT, 'height', roomHeight + 'px')\n\n    setTimeout(() => {\n      const COEFF_PROPORTIONS = roomWidth > roomHeight ? spanWidth / 2 / roomWidth : spanHeight / 2 / roomHeight\n\n      this.renderer.setStyle(ROOM_ELEMENT, 'width', roomWidth * COEFF_PROPORTIONS + 'px')\n      this.renderer.setStyle(ROOM_ELEMENT, 'height', roomHeight * COEFF_PROPORTIONS + 'px')\n      this.renderer.setStyle(ROOM_ELEMENT, 'border', 'white 3px dashed')\n\n      this.renderer.addClass(ROOM_ELEMENT, 'roomView')\n      this.renderer.setStyle(this.roomSpan, 'display', 'flex')\n    }, 0)\n  }\n  /**\n   * Форма для ввода данных комнаты.\n   */\n  protected roomForm = new FormGroup({\n    width: new FormControl(null, [\n      Validators.required,\n      Validators.min(0.1),\n      Validators.max(10),\n      Validators.pattern(/^\\d*\\.?\\d+$/)\n    ]),\n    height: new FormControl(null, [\n      Validators.required,\n      Validators.min(0.1),\n      Validators.max(10),\n      Validators.pattern(/^\\d*\\.?\\d+$/)\n    ]),\n    length: new FormControl(null, [\n      Validators.required,\n      Validators.min(0.1),\n      Validators.max(10),\n      Validators.pattern(/^\\d*\\.?\\d+$/)\n    ]),\n    name: new FormControl('', [\n      Validators.required,\n      Validators.maxLength(20)\n    ]),\n  });\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/selectFilter.html":{"url":"interfaces/selectFilter.html","title":"interface - selectFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  selectFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/category.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Фильтр типа select\n\n            \n\n            \n                Extends\n            \n            \n                            baseFilter\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            options\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        options\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        options:         option[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         option[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Варианты выбора\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                            \n                                \n                                    Тип фильтра\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные категории\n */\nexport interface categoryData {\n  /** Название категории */\n  name: string;\n  /** Перевод категории в единственном числе */\n  translateOne: string;\n  /** Перевод категории во множественном числе */\n  translateMany: string;\n  /** Массив фильтров категории */\n  filters: filter[];\n}\n\n/**\n * Базовый фильтр\n */\ninterface baseFilter {\n  /** Имя фильтра */\n  name: string;\n  /** Поле, по которому фильтр */\n  field: string;\n}\n\n/**\n * Опция для select-фильтра\n */\nexport interface option {\n  /** Название опции */\n  name: string;\n  /** Значение опции для запроса */\n  queryValue: string;\n}\n\n/**\n * Фильтр типа select\n */\ninterface selectFilter extends baseFilter {\n  /** Тип фильтра */\n  type: 'select';\n  /** Варианты выбора */\n  options: option[];\n}\n\n/**\n * Фильтр типа range\n */\ninterface rangeFilter extends baseFilter {\n  /** Тип фильтра */\n  type: 'range';\n  /** Минимальное значение */\n  minValue: number;\n  /** Максимальное значение */\n  maxValue: number;\n}\n\n/**\n * Тип фильтра: select или range\n */\nexport type filter = rangeFilter | selectFilter;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CategoryService {\n  /** Базовый URL для работы с категориями */\n  private baseServiceUrl = baseUrl + 'category';\n\n  constructor(\n    private httpModule: HttpClient\n  ) { }\n\n  /**\n   * Получение всех категорий\n   * @returns Promise с массивом категорий\n   */\n  GETgetAllCategories() {\n    return firstValueFrom(this.httpModule.get(this.baseServiceUrl)) as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/shopData.html":{"url":"interfaces/shopData.html","title":"interface - shopData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  shopData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/furniture-card-control.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Данные магазина с ценой и URL\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            cost\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cost\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cost:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Цена мебели\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    URL магазина или товара\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { imageSliderClientData, imageSliderFromServerData } from '../components/image-slider/image-slider.component';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные магазина с ценой и URL\n * @interface shopData\n */\nexport interface shopData {\n  /** Цена мебели */\n  cost: number;\n  /** URL магазина или товара */\n  url: string;\n}\n\n/**\n * Пропорции мебели (ширина, длина, высота)\n * @interface furnitureProportions\n */\nexport interface furnitureProportions {\n  /** Ширина мебели (или null, если не задана) */\n  width: number | null;\n  /** Длина мебели (или null, если не задана) */\n  length: number | null;\n  /** Высота мебели (или null, если не задана) */\n  height: number | null;\n}\n\n/**\n * Данные цвета на клиенте, включая слайдер изображений\n * @interface colorClientData\n */\nexport interface colorClientData {\n  /** Цвет мебели */\n  color: string;\n  /** Данные для слайдера изображений */\n  imagesData: imageSliderClientData;\n}\n\n/**\n * Данные цвета с сервера, включая слайдер изображений\n * @interface colorFromServerData\n */\nexport interface colorFromServerData {\n  /** Цвет мебели */\n  color: string;\n  /** Данные для слайдера изображений */\n  imagesData: imageSliderFromServerData;\n}\n\n/**\n * Дополнительные данные мебели с динамическими ключами\n * @interface additionalData\n */\nexport interface additionalData {\n  /** Категория мебели (опционально) */\n  category?: string;\n  /** Другие динамические свойства */\n  [key: string]: string | undefined;\n}\n\n/**\n * Базовые данные мебели, общие для клиента и сервера\n * @interface furnitureBaseData\n */\ninterface furnitureBaseData {\n  /** Название мебели */\n  name: string;\n  /** Описание мебели */\n  description: string;\n  /** Пропорции мебели */\n  proportions: furnitureProportions;\n  /** Список магазинов с ценами и URL */\n  shops: shopData[];\n  /** Дополнительные данные */\n  additionalData: additionalData;\n}\n\n/**\n * Данные мебели на клиенте с цветами\n * @interface furnitureClientData\n * @extends furnitureBaseData\n */\nexport interface furnitureClientData extends furnitureBaseData {\n  /** Список цветов с данными для клиента */\n  colors: colorClientData[];\n}\n\n/**\n * Данные мебели с сервера с цветами\n * @interface furnitureFromServerData\n * @extends furnitureBaseData\n */\nexport interface furnitureFromServerData extends furnitureBaseData {\n  /** Список цветов с данными с сервера */\n  colors: colorFromServerData[];\n}\n\n/**\n * Сервис для управления карточками мебели\n * @class FurnitureCardControlService\n * @injectable\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class FurnitureCardControlService {\n\n  /** Базовый URL для запросов к API мебели */\n  private baseServiceUrl = baseUrl + 'furniture/card';\n\n  /**\n   * Конструктор сервиса\n   * @param httpModule HTTP клиент для запросов\n   */\n  constructor(private httpModule: HttpClient) { }\n\n  /**\n   * Получение карточки мебели по ID и опциональному JWT токену\n   * @param furnitureCardId - ID карточки мебели\n   * @param [jwt] - JWT токен пользователя (опционально)\n   * @returns Promise с объектом, содержащим данные карточки и флаг совпадения автора\n   * @throws Ошибка при некорректной структуре ответа или при ошибках запроса\n   */\n  async GETfurnitureCard(\n    furnitureCardId: string,\n    jwt?: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams().set('furnitureCardId', furnitureCardId);\n\n    if (jwt !== undefined) {\n      HTTP_PARAMS = HTTP_PARAMS.set('jwt', jwt);\n    }\n\n    try {\n      const response = await firstValueFrom(\n        this.httpModule.get(this.baseServiceUrl, { params: HTTP_PARAMS })\n      ) as {\n        furnitureCard: furnitureFromServerData;\n        authorMatched: boolean;\n      };\n\n      if (!response?.furnitureCard) {\n        throw new Error('Invalid response structure: furnitureCard missing');\n      }\n\n      // Добавляем полный URL к изображениям\n      const transformedFurnitureCard = {\n        ...response.furnitureCard,\n        colors: response.furnitureCard.colors.map(colorData => ({\n          color: colorData.color,\n          imagesData: {\n            idMainImage: colorData.imagesData.idMainImage,\n            images: colorData.imagesData.images.map(url => baseUrl + url)\n          }\n        }))\n      };\n\n      return {\n        furnitureCard: transformedFurnitureCard,\n        authorMatched: response.authorMatched\n      };\n\n    } catch (error) {\n      console.error('Error in GETfurnitureCard:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Создание новой карточки мебели\n   * @param furnitureData - Данные новой карточки мебели\n   * @param jwt - JWT токен пользователя\n   * @returns Promise с данными созданной карточки, включая её ID\n   */\n  POSTcreateFurnitureCard(\n    furnitureData: furnitureFromServerData,\n    jwt: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams().set('jwt', jwt);\n    return firstValueFrom(\n      this.httpModule.post(this.baseServiceUrl, furnitureData, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n\n  /**\n   * Обновление существующей карточки мебели\n   * @param furnitureCardUpdateData - Обновленные данные карточки мебели\n   * @param furnitureCardId - ID карточки мебели для обновления\n   * @param jwt - JWT токен пользователя\n   * @returns Promise с сообщением результата обновления\n   */\n  PUTupdateFurnitureCard(\n    furnitureCardUpdateData: furnitureFromServerData,\n    furnitureCardId: string,\n    jwt: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId);\n    return firstValueFrom(\n      this.httpModule.put(this.baseServiceUrl, furnitureCardUpdateData, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n\n  /**\n   * Удаление карточки мебели по ID и JWT токену\n   * @param jwt - JWT токен пользователя\n   * @param furnitureCardId - ID карточки мебели для удаления\n   * @returns Promise с сообщением результата удаления\n   */\n  DELETEfurnitureCard(jwt: string, furnitureCardId: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId);\n    return firstValueFrom(\n      this.httpModule.delete(this.baseServiceUrl, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            accountType   (src/.../account.service.ts)\n                        \n                        \n                            authData   (src/.../auth.service.ts)\n                        \n                        \n                            changeAccountData   (src/.../account.service.ts)\n                        \n                        \n                            createAccountData   (src/.../account.service.ts)\n                        \n                        \n                            filter   (src/.../category.service.ts)\n                        \n                        \n                            uploadStatus   (src/.../upload.service.ts)\n                        \n                        \n                            uploadType   (src/.../upload.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/services/account.service.ts\n    \n    \n        \n            \n                \n                    \n                    accountType\n                \n            \n            \n                \n                    Тип аккаунта\n\n                \n            \n            \n                \n                        \"google\" | \"email\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    changeAccountData\n                \n            \n            \n                \n                    Тип данных для изменения аккаунта (на данный момент только email)\n\n                \n            \n            \n                \n                            changeAccountDataEmail\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    createAccountData\n                \n            \n            \n                \n                    Тип данных для создания аккаунта\n\n                \n            \n            \n                \n                            createEmailAccountData\n\n                \n            \n        \n    \n    src/services/auth.service.ts\n    \n    \n        \n            \n                \n                    \n                    authData\n                \n            \n            \n                \n                    Объединённый тип данных для аутентификации\n\n                \n            \n            \n                \n                        googleAuthData | emailAuthData\n\n                \n            \n        \n    \n    src/services/category.service.ts\n    \n    \n        \n            \n                \n                    \n                    filter\n                \n            \n            \n                \n                    Тип фильтра: select или range\n\n                \n            \n            \n                \n                        rangeFilter | selectFilter\n\n                \n            \n        \n    \n    src/services/upload.service.ts\n    \n    \n        \n            \n                \n                    \n                    uploadStatus\n                \n            \n            \n                \n                        \"uploading\" | \"success\" | \"error\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    uploadType\n                \n            \n            \n                \n                        \"create\" | \"update\"\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            appConfig   (src/.../app.config.ts)\n                        \n                        \n                            baseClientUrl   (src/.../index.ts)\n                        \n                        \n                            baseUrl   (src/.../index.ts)\n                        \n                        \n                            bootstrap   (src/.../main.server.ts)\n                        \n                        \n                            config   (src/.../app.config.server.ts)\n                        \n                        \n                            serverConfig   (src/.../app.config.server.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        appConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ApplicationConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n  providers: [\n    provideRouter(routes),\n    provideClientHydration(),\n    provideAnimations(),\n    provideHttpClient(withInterceptorsFromDi()),\n    provideEventPlugins(),\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: HttpErrorInterceptor,\n      multi: true\n    }\n  ]\n\n}\n                    \n                \n\n\n        \n    \n\n    src/services/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        baseClientUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'http://localhost:4200/'\n                    \n                \n\n            \n                \n                    Базовый URL клиента (фронтенда), по которому доступно Angular-приложение.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : baseClientUrl + 'api/'\n                    \n                \n\n            \n                \n                    Базовый URL для API-запросов к серверу.\nФормируется как базовый URL клиента + 'api/'.\n\n                \n            \n\n        \n    \n\n    src/main.server.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => bootstrapApplication(AppComponent, config)\n                    \n                \n\n\n        \n    \n\n    src/app.config.server.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Default value : mergeApplicationConfig(appConfig, serverConfig)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serverConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ApplicationConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n  providers: []\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
