var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/injectables/AccountCookieService.html",[0,0.243,1,1.291]],["body/injectables/AccountCookieService.html",[0,0.342,1,1.821,2,1.719,3,0.132,4,0.132,5,0.115,6,6.766,7,3.588,8,0.099,9,1.565,10,6.745,11,6.745,12,6.745,13,6.745,14,6.745,15,6.745,16,6.745,17,5.57,18,5.57,19,0.742,20,4.131,21,5.203,22,1.94,23,4.131,24,1.706,25,0.015,26,0.416,27,0.127,28,1.47,29,4.131,30,0.346,31,2.198,32,4.131,33,4.131,34,1.539,35,4.131,36,6.745,37,4.131,38,0.296,39,4.131,40,2.93,41,3.064,42,4.131,43,5.57,44,7.042,45,7.255,46,7.042,47,4.131,48,0.223,49,5.57,50,3.221,51,4.131,52,0.201,53,0.115,54,2.42,55,3.23,56,3.588,57,2.963,58,0.575,59,0.551,60,0.132,61,0.132,62,0.217,63,0.535,64,0.732,65,7.255,66,0.732,67,6.745,68,6.302,69,4.489,70,4.131,71,3.263,72,4.131,73,6.302,74,6.302,75,6.302,76,6.302,77,4.131,78,4.131,79,1.252,80,0.416,81,4.131,82,4.131,83,4.131,84,4.131,85,4.131,86,4.131,87,0.01,88,0.01]],["title/injectables/AccountService.html",[0,0.243,89,1.879]],["body/injectables/AccountService.html",[0,0.297,1,2.291,2,1.402,3,0.107,4,0.107,5,0.094,8,0.081,9,1.359,19,0.644,22,1.802,24,1.842,25,0.015,26,0.462,27,0.147,28,1.587,30,0.337,34,1.557,38,0.32,40,3.405,41,1.531,48,0.261,50,2.84,52,0.217,53,0.094,58,0.469,59,0.449,60,0.233,61,0.107,62,0.344,63,0.577,64,0.717,66,0.759,79,1.712,80,0.473,87,0.009,88,0.009,89,2.3,90,1.769,91,0.234,92,0.969,93,3.845,94,4.834,95,4.834,96,0.969,97,4.834,98,4.834,99,4.834,100,1.769,101,1.059,102,4.834,103,0.829,104,3.37,105,1.215,106,1.495,107,3.01,108,3.37,109,1.245,110,3.01,111,3.37,112,3.01,113,3.37,114,2.927,115,3.01,116,3.767,117,3.37,118,3.01,119,3.418,120,3.37,121,2.967,122,1.102,123,0.847,124,0.976,125,2.137,126,0.618,127,2.196,128,2.1,129,2.098,130,1.912,131,0.555,132,1.239,133,0.578,134,0.469,135,0.285,136,2.456,137,2.821,138,2.413,139,1.974,140,3.617,141,2.676,142,1.769,143,2.676,144,1.682,145,2.011,146,1.603,147,2.537,148,1.974,149,1.974,150,2.098,151,2.129,152,1.769,153,2.098,154,2.098,155,2.098,156,2.098,157,1.769,158,2.098,159,1.769,160,2.098,161,1.402,162,1.779,163,2.3,164,2.098,165,1.387,166,2.098,167,1.769,168,2.098,169,1.769,170,1.769,171,1.464,172,0.729,173,0.757,174,3.418,175,0.578,176,1.06,177,2.098,178,2.098,179,1.021,180,1.682,181,0.757,182,1.133,183,1.344,184,1.344,185,1.021,186,1.531]],["title/components/AppComponent.html",[187,0.921,188,1.879]],["body/components/AppComponent.html",[1,2.088,3,0.163,4,0.163,5,0.142,8,0.122,22,1.282,25,0.015,26,0.46,27,0.103,38,0.204,52,0.261,53,0.142,59,0.851,60,0.163,61,0.163,87,0.011,88,0.011,89,3.039,91,0.309,106,1.547,122,1.667,123,1.282,125,1.667,132,1.875,187,1.627,188,3.478,189,3.189,190,2.677,191,2.546,192,2.677,193,4.43,194,2.426,195,4.43,196,3.169,197,3.478,198,3.742,199,3.353,200,2.902,201,2.782,202,2.782,203,2.171,204,3.189,205,3.353,206,3.977,207,2.987,208,2.693,209,2.793,210,2.088,211,2.171,212,6.388,213,2.171,214,6.388,215,5.454,216,5.548,217,5.1,218,2.122,219,2.216,220,5.1,221,2.677,222,2.987,223,5.1,224,3.988,225,4.43,226,2.426,227,3.175,228,2.349,229,3.03,230,2.987,231,3.536,232,1.667,233,2.677,234,5.1,235,3.988,236,5.1,237,5.1,238,5.1,239,5.1,240,2.677,241,2.658,242,3.353,243,2.216,244,3.838,245,2.677,246,2.426,247,4.032,248,2.677,249,2.426,250,3.189,251,2.677,252,2.317,253,2.171,254,2.317,255,2.677,256,2.216,257,2.677,258,2.546,259,2.677,260,2.426,261,2.677,262,2.216,263,2.426,264,2.677,265,2.677,266,2.658,267,2.677,268,2.426,269,2.426,270,2.677,271,2.546,272,2.034,273,2.426,274,2.677,275,2.546,276,2.546,277,2.677]],["title/injectables/AuthService.html",[0,0.243,198,2.313]],["body/injectables/AuthService.html",[0,0.35,2,1.775,3,0.136,4,0.136,5,0.119,8,0.102,9,1.599,19,0.758,22,1.84,24,1.927,25,0.015,26,0.469,27,0.148,28,1.66,30,0.335,34,1.483,38,0.304,40,3.527,41,3.233,48,0.273,50,2.968,52,0.233,53,0.119,57,4.082,58,0.594,59,0.568,60,0.218,61,0.136,62,0.36,63,0.58,64,0.661,66,0.793,80,0.451,87,0.01,88,0.01,91,0.275,92,1.098,100,2.239,101,1.172,103,0.976,109,1.271,121,3.362,122,1.395,123,1.072,124,1.012,125,1.395,126,0.569,130,2,131,0.703,133,0.731,134,0.594,135,0.248,136,1.853,137,2.129,146,3.25,151,2.161,152,2.239,157,3.362,159,2.239,161,2.368,165,1.278,167,2.239,169,2.239,170,2.239,171,1.853,176,1.342,198,3.333,278,2.839,279,5.691,280,5.691,281,5.691,282,5.691,283,5.691,284,4.45,285,4.266,286,4.45,287,4.873,288,4.266,289,4.45,290,4.266,291,4.45,292,4.266,293,5.342,294,2.839,295,3.543,296,3.543,297,3.335,298,3.335,299,3.335,300,3.335,301,3.335,302,3.335,303,4.45,304,3.335,305,3.335,306,3.335,307,3.335,308,3.335]],["title/directives/AutoHeightDirective.html",[196,1.794,243,1.716]],["body/directives/AutoHeightDirective.html",[3,0.161,4,0.161,5,0.141,8,0.122,9,1.788,19,0.927,22,1.888,24,1.371,25,0.015,26,0.334,27,0.128,28,1.181,30,0.281,31,2.107,48,0.202,52,0.203,53,0.141,60,0.161,61,0.161,62,0.366,63,0.43,64,0.588,79,1.927,80,0.334,87,0.011,88,0.011,91,0.308,105,1.598,106,1.766,122,2.079,123,1.598,194,2.41,196,2.889,208,2.079,210,2.079,243,2.763,275,2.528,276,3.175,309,6.66,310,4.399,311,2.001,312,3.308,313,6.954,314,3.64,315,6.361,316,4.974,317,6.954,318,6.361,319,5.065,320,3.75,321,6.361,322,3.75,323,5.065,324,7.294,325,6.335,326,6.039,327,6.361,328,5.065,329,2.201,330,2.41,331,5.065,332,3.961,333,5.065,334,5.065,335,5.065,336,2.967,337,5.065,338,6.361,339,3.961,340,5.065,341,4.399]],["title/injectables/CategoryService.html",[0,0.243,342,2.073]],["body/injectables/CategoryService.html",[0,0.386,2,2.068,3,0.158,4,0.158,5,0.139,8,0.119,9,1.767,19,0.838,22,1.732,24,1.346,25,0.015,26,0.478,27,0.146,28,1.159,30,0.277,38,0.31,52,0.231,53,0.139,58,0.692,59,0.662,60,0.231,61,0.158,62,0.381,80,0.328,87,0.011,88,0.011,91,0.304,92,1.182,100,2.609,101,1.242,103,1.078,109,1.145,122,1.625,123,1.249,124,1.09,126,0.629,131,0.819,133,0.852,134,0.692,135,0.325,176,1.564,342,3.3,343,2.752,344,4.51,345,6.286,346,4.971,347,2.136,348,2.609,349,3.095,350,3.095,351,3.095,352,3.48,353,3.816,354,3.095,355,3.147,356,3.48,357,3.095,358,3.3,359,1.834,360,3.095,361,2.995,362,3.3,363,3.095,364,0.953,365,3.095]],["title/injectables/ClientImageControlService.html",[0,0.243,366,2.833]],["body/injectables/ClientImageControlService.html",[0,0.445,2,2.312,3,0.177,4,0.177,5,0.219,8,0.133,9,1.893,22,1.397,24,1.505,25,0.015,26,0.367,27,0.112,28,1.296,30,0.297,48,0.269,52,0.215,53,0.155,58,0.774,59,0.741,60,0.177,61,0.215,63,0.472,66,0.782,80,0.367,87,0.012,88,0.012,109,1.191,182,1.35,228,2.77,366,5.198,367,5.85,368,2.414,369,6.735,370,6.735,371,5.557,372,6.735,373,2.622,374,5.557,375,4.827,376,5.557,377,5.557,378,5.557,379,5.557,380,5.557,381,4.827,382,5.557,383,5.557,384,3.255,385,5.557,386,5.557]],["title/pipes/CostFormatPipe.html",[387,2.833,388,2.459]],["body/pipes/CostFormatPipe.html",[3,0.186,4,0.186,5,0.163,9,1.639,22,1.466,24,1.579,25,0.015,26,0.488,27,0.118,28,1.36,30,0.306,38,0.277,48,0.233,52,0.186,53,0.163,60,0.186,61,0.186,63,0.495,80,0.385,87,0.012,88,0.012,123,1.742,194,2.775,311,1.835,364,1.122,387,4.973,388,4.317,389,5.833,390,6.022,391,5.066,392,5.421,393,4.561,394,6.934,395,5.833,396,6.934,397,6.934,398,5.833]],["title/components/CreateFurniturePageComponent.html",[187,0.921,252,1.794]],["body/components/CreateFurniturePageComponent.html",[1,1.664,3,0.073,4,0.073,5,0.064,8,0.055,9,1.018,19,0.483,21,3.217,22,1.866,24,1.378,25,0.015,26,0.452,27,0.129,28,1.187,30,0.319,31,1.678,34,1.468,38,0.269,48,0.246,52,0.222,53,0.064,60,0.073,61,0.073,62,0.4,63,0.432,64,0.883,66,0.683,79,1.989,80,0.486,87,0.006,88,0.006,91,0.175,96,1.241,105,0.911,106,1.424,109,0.875,122,0.752,123,0.578,125,0.752,126,0.509,132,0.845,134,0.32,135,0.1,172,1.508,173,1.143,175,1.241,179,1.359,181,1.143,182,1.02,187,1.046,188,1.094,189,1.809,190,1.207,191,1.148,192,1.207,194,1.094,196,1.045,197,1.094,199,2.672,201,0.917,202,0.917,203,1.729,204,2.54,208,2.428,209,2.504,210,1.185,211,1.231,213,1.231,218,0.957,226,1.094,227,1.432,228,1.649,229,1.948,231,2.006,232,0.752,233,1.207,240,1.207,241,1.866,242,1.902,243,0.999,244,2.672,245,1.207,246,1.094,247,3.088,248,1.207,249,3.123,250,3.647,251,1.207,252,2.312,253,2.742,254,1.045,255,1.207,256,0.999,257,1.207,258,1.148,259,1.207,260,1.094,261,1.207,262,2.211,263,1.724,264,1.207,265,1.207,266,1.508,267,1.207,268,1.094,269,1.094,270,1.207,271,1.148,272,0.917,273,1.094,274,1.207,275,1.148,276,1.148,277,1.207,311,1.14,312,2.134,314,2.54,329,2.406,364,0.772,373,2.092,399,5.847,400,5.847,401,1.432,402,2.792,403,2.412,404,1.585,405,2.412,406,1.646,407,2.412,408,3.895,409,2.761,410,4.81,411,3.895,412,3.624,413,4.421,414,4.421,415,4.421,416,4.421,417,3.98,418,4.485,419,4.421,420,3.147,421,3.624,422,4.421,423,2.299,424,2.672,425,2.627,426,3.895,427,4.098,428,2.792,429,2.037,430,2.03,431,2.299,432,1.902,433,3.147,434,4.81,435,2.299,436,4.421,437,2.299,438,2.299,439,4.709,440,2.299,441,2.299,442,2.066,443,2.299,444,2.299,445,1.329,446,2.299,447,2.299,448,2.834,449,2.299,450,3.147,451,2.299,452,3.147,453,1.997,454,2.412,455,4.421,456,2.299,457,3.147,458,2.299,459,2.036,460,2.211,461,1.948,462,1.556,463,1.798,464,1.798,465,1.948,466,2.299,467,2.299,468,3.895,469,1.997,470,1.798,471,1.997,472,1.649,473,1.347,474,1.53,475,1.649,476,1.798,477,1.508,478,0.781,479,1.045,480,1.649,481,0.845,482,0.999,483,2.599,484,4.421,485,1.649,486,1.997,487,1.798,488,5.541,489,1.997,490,1.997,491,1.798,492,1.997,493,1.14,494,1.997,495,1.094,496,1.997,497,3.507,498,1.094,499,3.895,500,1.716,501,3.98,502,4.421,503,1.997,504,1.997,505,1.997,506,1.997,507,1.997,508,1.997,509,1.997,510,1.997,511,3.147,512,1.997,513,3.147,514,3.147,515,2.792,516,1.997,517,1.997,518,3.147,519,3.895,520,3.147,521,3.147,522,1.574,523,1.508,524,1.508,525,1.724,526,3.147,527,4.421,528,3.147,529,1.997,530,2.599,531,3.232,532,1.997,533,1.997,534,3.147,535,3.147,536,1.997,537,1.997,538,1.997,539,1.997,540,1.997,541,1.997,542,1.997,543,3.147,544,3.895,545,1.649,546,2.985,547,1.997,548,3.244,549,1.798,550,1.798,551,1.798,552,1.997,553,4.421,554,1.997,555,3.147,556,1.997,557,1.997,558,1.997,559,3.147,560,1.997,561,1.997]],["title/components/FinderComponent.html",[187,0.921,254,1.794]],["body/components/FinderComponent.html",[3,0.095,4,0.095,5,0.083,8,0.072,9,1.245,19,0.59,22,1.911,24,1.687,25,0.015,26,0.482,27,0.143,28,1.575,30,0.327,31,1.977,38,0.319,48,0.249,52,0.215,53,0.083,60,0.095,61,0.095,62,0.42,63,0.554,64,0.613,79,1.599,80,0.457,87,0.008,88,0.008,91,0.214,96,0.905,105,1.113,106,1.509,122,1.448,123,1.326,125,0.978,126,0.694,135,0.13,172,0.959,175,0.513,187,1.453,188,1.423,189,2.211,190,1.57,191,2.634,192,1.57,194,1.423,196,1.358,197,1.423,199,3.063,201,1.193,202,1.193,206,4.063,208,2.533,209,2.618,210,1.448,211,1.505,213,1.505,218,1.244,227,1.862,228,1.629,229,1.299,235,2.338,240,1.57,241,2.715,242,2.326,243,1.299,244,3.063,245,1.57,246,1.423,247,3.425,248,1.57,249,1.423,250,2.211,251,1.57,252,1.358,253,1.505,254,2.651,255,1.57,256,1.299,257,1.57,258,1.493,259,1.57,260,1.423,261,1.57,262,1.299,263,1.423,264,1.57,265,1.57,266,1.843,267,1.57,268,1.423,269,1.423,270,1.57,271,1.493,272,1.193,273,1.423,274,1.57,275,1.493,276,1.493,277,1.57,311,1.394,329,2.934,347,2.117,364,0.453,388,3.286,392,3.464,404,1.865,406,2.013,409,2.737,424,3.063,432,2.77,442,0.941,445,1.099,478,1.016,500,1.54,546,3.513,562,2.338,563,2.77,564,3.848,565,3.513,566,2.77,567,4.147,568,3.848,569,3.848,570,4.343,571,4.584,572,4.975,573,4.584,574,4.584,575,4.431,576,5.069,577,5.069,578,4.431,579,4.431,580,4.431,581,5.069,582,3.063,583,5.069,584,2.99,585,2.921,586,4.186,587,4.584,588,4.431,589,3.848,590,2.99,591,2.99,592,2.99,593,5.069,594,3.848,595,2.99,596,3.848,597,3.848,598,2.485,599,2.99,600,5.069,601,3.848,602,2.99,603,2.99,604,3.848,605,2.99,606,2.99,607,2.99,608,2.99,609,2.99,610,3.513,611,2.99,612,2.338,613,2.338,614,2.338,615,2.338,616,1.016,617,2.597,618,4.584,619,2.597,620,2.597,621,2.597,622,3.848,623,2.597,624,3.848,625,2.597,626,4.584,627,2.758,628,4.584,629,2.145,630,2.597,631,2.597,632,3.848,633,2.597,634,3.848,635,2.597,636,3.848,637,2.597,638,3.848,639,2.597,640,2.597,641,2.597,642,2.597,643,2.597,644,2.597,645,2.597,646,3.848,647,2.597,648,2.597,649,2.597,650,2.597,651,2.597,652,4.431,653,4.431]],["title/injectables/FinderService.html",[0,0.243,206,2.459]],["body/injectables/FinderService.html",[0,0.418,2,2.009,3,0.154,4,0.154,5,0.135,8,0.116,9,1.734,19,0.643,22,1.904,24,1.841,25,0.015,26,0.488,27,0.137,28,1.586,30,0.3,31,1.869,38,0.303,48,0.286,52,0.228,53,0.135,58,0.672,59,0.643,60,0.154,61,0.197,62,0.399,63,0.577,66,0.716,71,3.615,80,0.318,87,0.011,88,0.011,91,0.298,92,1.166,100,2.534,101,1.229,103,1.166,109,1.133,122,2.223,123,1.709,124,1.075,126,0.617,131,0.795,133,0.828,134,0.672,176,1.519,206,4.234,654,4.194,655,6.801,656,6.801,657,6.171,658,6.171,659,6.171,660,2.936,661,6.171,662,4.829,663,6.801,664,6.171,665,4.829,666,6.171,667,4.829,668,6.171,669,4.825,670,6.433,671,4.829,672,1.706,673,4.829]],["title/injectables/FurnitureCardControlService.html",[0,0.243,203,1.342]],["body/injectables/FurnitureCardControlService.html",[0,0.336,2,1.321,3,0.101,4,0.101,5,0.089,8,0.076,9,1.301,19,0.423,22,1.676,24,1.729,25,0.015,26,0.44,27,0.129,28,1.49,30,0.311,34,1.564,38,0.323,48,0.275,52,0.204,53,0.089,58,0.442,59,0.423,60,0.225,61,0.148,62,0.288,63,0.62,64,0.635,66,0.741,80,0.396,87,0.008,88,0.008,91,0.224,92,0.937,96,0.937,100,1.667,101,1.03,103,0.937,105,0.798,109,1.241,122,1.038,123,0.798,124,0.95,126,0.706,130,1.536,131,0.523,133,1.095,134,0.442,135,0.337,151,2.022,162,1.457,165,1.349,172,1.442,173,0.713,175,0.545,179,1.82,181,0.713,182,1.096,183,1.267,184,2.396,185,1.403,203,1.857,232,2.25,347,1.079,359,1.753,364,0.911,368,1.38,417,3.621,442,1.457,445,1.56,459,2.009,460,1.38,461,2.61,462,0.892,463,1.122,464,1.122,465,1.216,477,2.993,480,1.702,481,1.168,482,1.38,493,1.457,495,1.511,498,1.511,522,2.374,523,1.321,524,1.321,525,1.511,598,2.18,616,1.079,660,2.203,672,1.122,674,3.275,675,2.869,676,2.869,677,4.631,678,2.431,679,2.143,680,3.176,681,3.176,682,3.176,683,2.483,684,3.176,685,3.176,686,3.176,687,3.176,688,3.153,689,2.431,690,1.847,691,1.927,692,1.585,693,2.374,694,2.483,695,2.6,696,2.6,697,1.267,698,3.172,699,2.203,700,1.267,701,1.667,702,1.667,703,1.585,704,2.869,705,2.431,706,1.667,707,1.667,708,1.667,709,1.667,710,2.431,711,1.667,712,1.667,713,1.667,714,1.585,715,1.585,716,2.203,717,1.667,718,1.585]],["title/injectables/FurnitureModelControlService.html",[0,0.243,204,1.971]],["body/injectables/FurnitureModelControlService.html",[0,0.358,2,1.841,3,0.141,4,0.141,5,0.124,8,0.106,9,1.639,19,0.59,22,1.811,24,1.877,25,0.015,26,0.457,27,0.14,28,1.617,30,0.326,34,1.563,38,0.329,48,0.261,52,0.221,53,0.124,58,0.616,59,0.59,60,0.141,61,0.141,62,0.343,63,0.64,64,0.805,66,0.805,80,0.43,87,0.01,88,0.01,91,0.282,92,1.118,100,2.323,101,1.189,103,1,109,1.254,122,1.447,123,1.112,124,1.031,126,0.583,130,1.948,131,0.729,133,1.189,134,0.616,151,2.079,162,2.052,165,1.465,204,2.911,233,3.884,368,1.923,373,2.563,439,5.307,445,1.629,672,1.564,674,3.52,679,2.262,690,2.326,703,2.209,715,2.209,716,3.103,718,2.209,719,5.832,720,5.832,721,5.832,722,5.065,723,5.832,724,4.426,725,5.832,726,4.426,727,5.832,728,4.426,729,6.933,730,5.832,731,4.426,732,5.665,733,4.426,734,4.426,735,4.426]],["title/interceptors/HttpErrorInterceptor.html",[736,3.43,737,2.833]],["body/interceptors/HttpErrorInterceptor.html",[0,0.406,3,0.171,4,0.171,5,0.15,8,0.129,9,1.856,19,0.88,22,1.659,24,1.788,25,0.015,26,0.435,27,0.133,28,1.54,30,0.291,48,0.264,52,0.244,53,0.15,60,0.171,61,0.171,62,0.283,63,0.606,80,0.435,87,0.012,88,0.012,131,0.886,134,0.749,182,1.079,311,1.693,429,3.246,430,3.05,479,2.444,531,2.824,660,3.84,669,5.979,737,4.736,738,5.38,739,6.205,740,4.672,741,6.603,742,5.38,743,5.38,744,6.603,745,7.45,746,7.45,747,7.45,748,5.38,749,6.603,750,5.38,751,6.603,752,6.603,753,6.603,754,5.38,755,5.38,756,5.38,757,5.38,758,5.38]],["title/components/ImageSliderComponent.html",[187,0.921,256,1.716]],["body/components/ImageSliderComponent.html",[3,0.13,4,0.13,5,0.114,8,0.168,9,1.549,22,1.914,24,1.101,25,0.015,26,0.442,27,0.141,28,0.949,30,0.296,31,1.894,38,0.163,48,0.22,52,0.199,53,0.114,60,0.199,61,0.13,62,0.29,79,1.67,87,0.01,88,0.01,91,0.267,105,1.385,106,1.335,122,2.044,123,1.571,125,1.33,126,0.625,135,0.24,187,1.458,188,1.935,189,2.752,190,2.135,191,2.031,192,2.135,194,1.935,196,1.848,197,1.935,201,1.623,202,1.623,208,2.633,209,2.727,210,1.802,211,1.873,213,1.873,228,2.715,240,2.135,241,2.294,242,2.894,243,1.767,244,3.518,245,2.135,246,1.935,247,3.791,248,2.135,249,1.935,250,2.752,251,2.135,252,1.848,253,1.873,254,1.848,255,2.135,256,2.912,257,2.135,258,2.031,259,2.135,260,1.935,261,2.135,262,1.767,263,1.935,264,2.135,265,2.135,266,2.294,267,2.135,268,1.935,269,1.935,270,2.135,271,2.031,272,1.623,273,1.935,274,2.135,275,2.031,276,2.031,277,2.135,311,1.735,312,2.974,314,3.121,316,4.31,320,2.031,322,2.752,330,1.935,364,1.12,373,2.125,404,2.209,406,2.504,409,2.691,454,2.708,478,1.382,480,1.496,481,2.831,500,1.608,522,2.395,523,2.294,524,2.601,566,3.282,691,2.294,759,5.522,760,2.918,761,4.31,762,4.889,763,4.31,764,4.31,765,5.241,766,5.513,767,4.889,768,6.253,769,5.513,770,4.31,771,4.889,772,4.068,773,4.068,774,3.181,775,5.513,776,4.068,777,4.068,778,2.383,779,4.068,780,3.669,781,1.693,782,4.068,783,4.068,784,4.068,785,2.918,786,2.918,787,5.513]],["title/components/MainPageComponent.html",[187,0.921,260,1.879]],["body/components/MainPageComponent.html",[3,0.108,4,0.108,5,0.095,8,0.081,9,1.364,19,0.647,22,1.923,24,1.535,25,0.015,26,0.45,27,0.125,28,1.322,30,0.31,31,2.175,38,0.194,48,0.227,52,0.229,53,0.095,60,0.108,61,0.108,62,0.345,63,0.287,79,1.47,87,0.009,88,0.009,91,0.235,105,1.219,106,1.175,122,2.024,123,1.556,125,1.107,187,1.322,188,1.612,189,2.422,190,1.778,191,1.691,192,1.778,194,1.612,196,1.539,197,1.612,201,2.469,202,1.351,208,2.576,209,2.665,210,1.586,211,1.649,213,1.649,216,5.92,218,1.409,221,1.778,222,1.984,228,1.245,240,1.778,241,2.019,242,2.547,243,1.472,244,3.249,245,1.778,246,1.612,247,3.578,248,1.778,249,2.945,250,3.702,251,1.778,252,1.539,253,2.103,254,1.539,255,1.778,256,1.472,257,1.778,258,1.691,259,1.778,260,2.945,261,3.685,262,2.689,263,2.308,264,1.778,265,1.778,266,2.575,267,1.778,268,1.612,269,2.308,270,1.778,271,1.691,272,2.261,273,2.945,274,3.578,275,1.691,276,1.691,277,1.778,311,1.527,314,3.09,322,3.27,329,2.961,330,1.612,401,2.109,403,3.229,404,2.003,405,3.229,406,2.204,407,3.229,409,2.806,427,4.672,454,2.255,469,2.942,473,1.984,474,2.255,475,2.43,476,3.794,478,1.151,563,2.976,565,3.773,567,3.773,582,3.249,765,5.614,767,4.84,770,3.794,771,4.433,774,2.649,778,2.842,781,1.409,788,6.695,789,6.695,790,6.817,791,5.669,792,6.817,793,5.669,794,4.852,795,5.669,796,5.669,797,2.942,798,3.388,799,4.852,800,4.852,801,3.388,802,3.388,803,3.388,804,3.388,805,3.388,806,3.388,807,4.852,808,3.794,809,3.388,810,2.942,811,3.388,812,3.388,813,3.388,814,3.388,815,2.649,816,3.388,817,3.388,818,3.388,819,3.388,820,3.388,821,3.388,822,3.388,823,3.388,824,2.649,825,2.942,826,2.942,827,2.109,828,3.229,829,4.852,830,4.852]],["title/components/NavigationPanelComponent.html",[187,0.921,262,1.716]],["body/components/NavigationPanelComponent.html",[3,0.138,4,0.138,5,0.121,8,0.104,9,1.615,22,1.848,24,1.172,25,0.015,26,0.453,28,1.009,30,0.285,31,1.954,48,0.23,52,0.219,53,0.121,60,0.138,61,0.138,62,0.34,63,0.367,79,2.082,87,0.01,88,0.01,91,0.278,106,1.391,122,1.879,123,1.444,125,1.415,187,1.505,188,2.059,189,2.868,190,2.272,191,2.16,192,2.272,194,2.059,196,1.966,197,2.059,201,1.727,202,1.727,208,2.651,209,2.747,210,1.879,211,1.953,213,1.953,218,1.801,228,1.591,240,2.272,241,2.391,242,3.016,243,1.88,244,3.607,245,2.272,246,2.059,247,3.859,248,2.272,249,2.059,250,2.868,251,2.272,252,1.966,253,1.953,254,3.122,255,2.272,256,1.88,257,2.272,258,2.16,259,2.272,260,2.059,261,2.272,262,2.986,263,3.569,264,2.272,265,2.272,266,2.391,267,2.272,268,2.059,269,2.059,270,2.272,271,2.16,272,1.727,273,2.059,274,2.272,275,2.16,276,2.16,277,2.272,311,1.808,312,3.403,314,3.43,322,3.57,330,2.059,404,2.279,406,2.61,409,2.692,454,2.881,473,4.394,478,1.471,567,4.294,765,5.749,767,5.374,770,4.493,771,5.044,774,3.384,778,3.366,825,3.759,826,3.759,827,2.695,831,6.516,832,3.759,833,5.747,834,5.747,835,5.747,836,6.451,837,6.451,838,5.747,839,4.328,840,4.328,841,4.328,842,4.328,843,4.328,844,5.747]],["title/components/NotificationComponent.html",[187,0.921,197,1.879]],["body/components/NotificationComponent.html",[1,2.27,3,0.142,4,0.142,5,0.124,8,0.107,9,1.643,19,0.779,21,4.687,22,1.861,24,1.203,25,0.015,26,0.458,27,0.132,28,1.036,30,0.288,31,2.244,34,1.128,38,0.278,48,0.178,52,0.221,53,0.124,55,4.571,60,0.142,61,0.142,62,0.308,87,0.01,88,0.01,91,0.283,106,1.415,125,1.452,132,1.633,187,1.524,188,2.113,189,2.918,190,2.332,191,2.217,192,2.332,194,2.113,196,2.018,197,3.303,201,1.772,202,1.772,208,2.658,209,2.754,210,1.911,211,1.987,213,1.987,226,2.113,228,1.633,240,2.332,241,2.432,242,3.069,243,1.93,244,3.644,245,2.332,246,2.113,247,3.888,248,2.332,249,2.113,250,2.918,251,2.332,252,2.018,253,1.987,254,2.018,255,2.332,256,1.93,257,2.332,258,2.217,259,2.332,260,2.113,261,2.332,262,1.93,263,2.113,264,2.332,265,2.332,266,2.432,267,2.332,268,2.113,269,2.113,270,2.332,271,2.217,272,1.772,273,2.113,274,2.332,275,2.217,276,2.217,277,2.332,311,1.84,312,3.109,314,3.466,404,2.309,406,2.656,409,2.804,429,2.656,430,3.121,478,1.51,479,2.018,565,4.349,845,3.859,846,5.846,847,5.846,848,7.214,849,6.535,850,6.03,851,6.943,852,4.443,853,4.443,854,4.443,855,4.443,856,4.443,857,4.443,858,4.443,859,4.443,860,4.443,861,5.078,862,4.443,863,4.443,864,4.443,865,4.443,866,4.443,867,4.443,868,5.846]],["title/injectables/NotificationService.html",[0,0.243,430,1.575]],["body/injectables/NotificationService.html",[0,0.36,2,1.854,3,0.142,4,0.142,5,0.124,8,0.107,9,1.646,22,1.899,24,1.586,25,0.015,26,0.386,27,0.118,28,1.366,30,0.289,31,2.246,38,0.296,48,0.262,52,0.187,53,0.124,58,0.62,59,0.594,60,0.142,61,0.142,62,0.408,63,0.59,66,0.807,87,0.01,88,0.01,91,0.283,122,2.273,123,1.747,134,0.62,182,1.312,364,1.124,381,5.684,430,2.337,627,3.647,669,5.435,670,6.736,861,6.038,869,3.87,870,6.544,871,6.544,872,6.952,873,5.858,874,5.858,875,4.456,876,5.858,877,7.828,878,4.456,879,5.858,880,4.456,881,5.858,882,4.456,883,4.456,884,5.858,885,4.456,886,4.456,887,4.456,888,5.858,889,4.456,890,4.456,891,4.456]],["title/components/PlanHousePageComponent.html",[187,0.921,268,1.879]],["body/components/PlanHousePageComponent.html",[1,2.09,3,0.081,4,0.081,5,0.071,8,0.061,9,1.102,19,0.522,22,1.94,24,1.572,25,0.015,26,0.464,27,0.137,28,1.354,30,0.319,31,2.132,34,1.411,38,0.191,48,0.215,52,0.224,53,0.071,60,0.081,61,0.081,62,0.41,63,0.456,64,0.84,66,0.624,79,1.188,80,0.471,87,0.007,88,0.007,89,2.918,91,0.19,96,1.225,106,1.301,122,1.757,123,1.351,125,0.832,126,0.613,128,1.703,132,0.935,138,1.957,141,1.408,172,0.55,173,1.075,174,2.648,175,0.922,181,1.075,182,0.959,186,2.442,187,1.116,188,1.21,189,1.957,190,1.335,191,2.898,192,1.335,194,1.21,196,1.155,197,1.21,200,2.903,201,2.447,202,1.015,207,3.744,208,2.47,209,2.55,210,1.282,211,1.332,213,1.332,218,1.058,221,1.335,222,1.49,224,1.989,226,1.21,228,0.935,230,1.49,240,1.335,241,1.631,242,2.058,243,1.105,244,2.821,245,1.335,246,1.21,247,3.22,248,1.335,249,1.21,250,1.957,251,1.335,252,1.155,253,1.332,254,1.155,255,1.335,256,1.105,257,1.335,258,1.27,259,1.335,260,1.21,261,1.335,262,2.335,263,1.865,264,1.335,265,1.335,266,2.817,267,1.335,268,2.557,269,3.893,270,1.335,271,1.27,272,1.015,273,1.21,274,2.511,275,1.27,276,1.27,277,1.335,311,1.234,312,2.276,314,2.683,329,2.335,364,1.027,401,1.584,403,2.609,404,2.052,405,2.609,406,1.781,407,2.609,409,2.848,420,3.405,424,2.821,427,4.254,429,2.173,430,2.144,432,2.511,442,2.214,448,3.066,453,2.209,454,1.693,472,1.824,473,1.49,474,1.693,478,0.864,479,1.155,485,1.824,487,1.989,491,1.989,500,1.144,530,3.431,531,2.511,563,2.511,565,3.184,566,2.511,570,4.083,582,2.821,585,2.648,586,3.855,610,2.609,612,1.989,613,1.989,627,1.584,781,1.058,808,4.998,810,2.209,892,6.061,893,6.732,894,4.784,895,3.431,896,4.784,897,4.784,898,4.784,899,4.784,900,4.784,901,5.375,902,5.375,903,5.375,904,3.405,905,5.375,906,5.375,907,5.375,908,3.921,909,5.375,910,3.921,911,2.544,912,4.784,913,2.544,914,2.544,915,2.544,916,3.921,917,2.544,918,3.921,919,2.544,920,6.134,921,2.544,922,2.609,923,2.544,924,2.544,925,3.921,926,2.544,927,2.544,928,3.921,929,2.544,930,3.921,931,2.447,932,2.544,933,2.544,934,2.544,935,2.544,936,2.544,937,2.544,938,2.544,939,3.921,940,2.544,941,3.74,942,3.74,943,3.066,944,2.544,945,1.989,946,1.693,947,4.784,948,2.544,949,3.921,950,3.405,951,2.544,952,5.375,953,2.544,954,2.209,955,3.921,956,2.544,957,2.544,958,2.544,959,2.544,960,2.544,961,2.209,962,2.209,963,2.544,964,5.375,965,2.544,966,2.544,967,5.375,968,2.978,969,2.544,970,2.544,971,3.921,972,2.544,973,2.544,974,3.921,975,2.544,976,5.806,977,2.544,978,4.784,979,3.921,980,3.921,981,1.693,982,2.544,983,2.544,984,2.544,985,2.544,986,2.544,987,2.544,988,2.544,989,3.921,990,2.544,991,2.544,992,2.441,993,1.584,994,1.584,995,2.441,996,2.209,997,3.921,998,3.921]],["title/injectables/ProjectService.html",[0,0.243,200,1.794]],["body/injectables/ProjectService.html",[0,0.307,2,1.469,3,0.113,4,0.113,5,0.099,8,0.085,9,1.405,19,0.666,22,1.786,24,1.871,25,0.015,26,0.508,27,0.139,28,1.612,30,0.33,34,1.56,38,0.329,48,0.276,52,0.226,53,0.099,58,0.492,59,0.471,60,0.201,61,0.113,62,0.35,63,0.648,64,0.802,66,0.773,80,0.439,87,0.009,88,0.009,91,0.242,92,0.995,96,0.995,100,1.854,101,1.082,103,0.857,109,1.227,122,1.155,123,0.888,124,0.997,126,0.5,127,3.4,128,1.534,130,1.942,131,0.582,133,0.606,134,0.492,135,0.253,144,2.495,151,2.103,161,1.469,162,2.094,163,1.68,165,1.417,171,1.534,175,0.606,176,1.573,179,1.07,180,2.495,200,2.27,219,1.534,359,1.03,373,2.262,445,1.605,493,1.111,690,1.994,780,2.351,781,1.469,828,3.327,922,4.43,931,1.994,981,2.351,999,2.351,1000,4.998,1001,4.998,1002,4.998,1003,4.998,1004,4.998,1005,3.933,1006,4.998,1007,3.585,1008,5.197,1009,3.532,1010,3.585,1011,3.532,1012,3.585,1013,4.144,1014,3.532,1015,3.585,1016,3.585,1017,3.532,1018,3.585,1019,3.532,1020,1.698,1021,2.378,1022,2.767,1023,3.585,1024,1.854,1025,2.351,1026,2.351,1027,1.854,1028,1.854,1029,2.533,1030,2.533,1031,4.161,1032,2.533,1033,2.533,1034,2.533,1035,2.533,1036,2.533]],["title/injectables/ReportService.html",[0,0.243,1005,2.186]],["body/injectables/ReportService.html",[0,0.274,2,1.252,3,0.096,4,0.096,5,0.084,8,0.072,9,1.251,19,0.706,22,1.701,24,1.771,25,0.015,26,0.458,27,0.14,28,1.526,30,0.307,31,2.105,38,0.323,48,0.271,52,0.187,53,0.084,58,0.419,59,0.401,60,0.169,61,0.142,62,0.412,63,0.621,64,0.759,66,0.786,80,0.294,87,0.008,88,0.008,126,0.654,135,0.131,142,1.58,145,1.252,215,3.481,219,1.308,229,1.308,232,0.984,241,3.226,253,1.513,339,4.143,347,1.023,364,0.888,373,2.411,393,3.481,460,1.308,462,1.251,463,2.587,464,1.573,500,2.204,545,2.159,598,3.013,616,1.513,629,3.8,679,0.846,693,1.934,824,3.481,931,2.609,1005,3.928,1013,4.418,1020,1.8,1022,4.144,1037,2.354,1038,4.452,1039,4.452,1040,4.452,1041,4.452,1042,4.452,1043,4.452,1044,3.01,1045,3.867,1046,3.01,1047,3.867,1048,3.01,1049,3.867,1050,3.01,1051,3.867,1052,5.427,1053,3.01,1054,5.427,1055,3.867,1056,5.085,1057,3.01,1058,3.867,1059,5.682,1060,3.01,1061,2.159,1062,5.682,1063,2.614,1064,2.614,1065,2.614,1066,2.614,1067,3.867,1068,2.614,1069,2.614,1070,2.614,1071,2.614,1072,3.867,1073,6.825,1074,3.867,1075,6.164,1076,5.085,1077,3.867,1078,2.614,1079,3.867,1080,5.427,1081,2.614,1082,2.614,1083,3.867,1084,6.561,1085,5.879,1086,4.602,1087,4.886,1088,3.867,1089,3.867,1090,4.602,1091,2.614,1092,2.614,1093,4.886,1094,5.434,1095,5.085,1096,4.602,1097,4.602,1098,4.602,1099,5.427,1100,5.427,1101,5.682,1102,5.879,1103,2.614,1104,6.036,1105,5.115,1106,2.614,1107,2.614,1108,2.614,1109,5.085,1110,2.614,1111,4.602,1112,2.614,1113,5.085,1114,5.085,1115,5.549,1116,4.602,1117,5.085,1118,2.614,1119,4.602,1120,2.614,1121,2.614,1122,3.867,1123,5.879,1124,3.867,1125,3.645,1126,2.614,1127,5.085,1128,3.867,1129,3.867,1130,3.867,1131,2.614,1132,3.867,1133,3.867,1134,3.867,1135,2.614,1136,2.614,1137,3.459,1138,4.199,1139,4.602,1140,3.867,1141,3.481,1142,2.354,1143,2.614,1144,3.867,1145,2.614,1146,2.614,1147,2.614,1148,3.867,1149,3.867,1150,2.464,1151,3.867,1152,2.614,1153,2.614,1154,2.614,1155,2.614,1156,2.614,1157,2.614,1158,2.614,1159,3.867,1160,2.614,1161,4.143,1162,2.614,1163,2.614,1164,3.867,1165,3.867,1166,3.867,1167,2.614,1168,2.614,1169,2.614,1170,2.614,1171,1.874,1172,2.614,1173,2.614,1174,2.614,1175,2.614,1176,2.614,1177,2.614,1178,2.614,1179,3.867,1180,2.614,1181,2.614,1182,2.614,1183,1.874,1184,2.614,1185,2.614,1186,2.614,1187,2.614,1188,2.614,1189,2.614,1190,2.614,1191,2.614,1192,2.614,1193,3.867,1194,2.614,1195,2.614,1196,2.614,1197,2.614,1198,2.614,1199,2.614,1200,2.614,1201,2.614,1202,2.614,1203,2.614,1204,2.614,1205,2.614,1206,2.614,1207,2.614]],["title/injectables/ServerImageControlService.html",[0,0.243,199,2.073]],["body/injectables/ServerImageControlService.html",[0,0.304,2,1.45,3,0.111,4,0.111,5,0.138,8,0.084,9,1.392,19,0.465,22,1.849,24,1.958,25,0.015,26,0.477,27,0.146,28,1.687,30,0.342,34,1.568,38,0.334,48,0.283,52,0.211,53,0.097,58,0.485,59,0.465,60,0.111,61,0.111,62,0.303,63,0.665,64,0.822,66,0.822,80,0.467,87,0.009,88,0.009,91,0.239,92,0.988,100,1.83,101,1.075,103,0.849,109,1.26,122,1.14,123,0.876,124,0.91,126,0.746,130,1.861,131,0.574,133,0.598,134,0.485,151,2.097,161,1.45,162,1.812,163,2.356,165,1.488,176,1.097,199,2.599,228,2.744,368,1.514,373,2.131,445,1.647,480,2.435,481,1.282,482,1.514,522,2.724,598,3.141,672,1.232,679,2.239,692,1.74,714,1.74,716,2.983,722,4.301,732,5.977,904,4.301,1208,6.482,1209,4.952,1210,4.952,1211,4.952,1212,4.952,1213,4.952,1214,4.952,1215,4.952,1216,3.486,1217,4.952,1218,3.486,1219,4.952,1220,3.486,1221,4.952,1222,3.486,1223,4.952,1224,3.486,1225,4.952,1226,3.486,1227,4.952,1228,3.486,1229,5.76,1230,4.952,1231,3.486,1232,3.486,1233,3.486,1234,3.486,1235,3.486,1236,5.76,1237,3.486,1238,3.486,1239,3.486,1240,3.486,1241,3.486,1242,3.486]],["title/injectables/ShopService.html",[0,0.243,205,2.073]],["body/injectables/ShopService.html",[0,0.312,2,1.505,3,0.115,4,0.115,5,0.101,8,0.087,9,1.428,19,0.482,22,1.688,24,1.591,25,0.015,26,0.42,27,0.14,28,1.37,30,0.281,38,0.301,48,0.235,52,0.214,53,0.101,58,0.504,59,0.482,60,0.203,61,0.115,62,0.391,63,0.541,64,0.808,66,0.78,80,0.335,87,0.009,88,0.009,91,0.246,92,1.008,96,1.008,100,1.898,101,1.093,103,0.871,114,3.141,122,1.661,123,1.477,124,1.062,126,0.696,131,0.596,133,0.62,134,0.504,135,0.292,145,2.114,165,0.812,172,1.379,173,0.812,175,1.008,181,0.812,182,1.346,185,1.54,205,2.668,219,1.571,253,1.229,272,2.027,355,1.571,361,1.571,364,1.107,384,2.118,445,0.753,459,2.16,462,1.016,493,1.599,500,1.714,616,1.229,672,1.278,679,1.016,683,2.828,697,1.442,700,1.442,1020,1.727,1137,2.002,1150,2.002,1243,2.118,1244,4.546,1245,5.082,1246,5.082,1247,5.082,1248,3.164,1249,3.717,1250,3.616,1251,4.454,1252,3.253,1253,3.164,1254,3.968,1255,4.108,1256,3.616,1257,3.968,1258,3.164,1259,3.164,1260,3.616,1261,2.813,1262,2.813,1263,3.164,1264,3.164,1265,3.164,1266,2.251,1267,3.658,1268,2.251,1269,2.251,1270,2.251,1271,2.251,1272,2.251,1273,2.251,1274,2.251,1275,2.251,1276,2.251,1277,2.251,1278,3.164,1279,2.251,1280,2.251,1281,2.251,1282,2.251,1283,2.251,1284,3.164,1285,2.251,1286,2.251,1287,2.251,1288,2.251,1289,2.251,1290,3.164,1291,3.968,1292,2.251,1293,3.164,1294,4.181,1295,2.251,1296,3.658,1297,2.251,1298,2.251]],["title/components/ViewFurnitureComponent.html",[187,0.921,273,1.879]],["body/components/ViewFurnitureComponent.html",[3,0.127,4,0.127,5,0.111,8,0.131,9,1.528,19,0.725,22,1.879,24,1.8,25,0.015,26,0.485,27,0.148,28,1.55,30,0.293,31,1.648,38,0.303,48,0.159,52,0.238,53,0.111,54,2.336,60,0.127,61,0.127,62,0.35,64,0.772,80,0.408,87,0.01,88,0.01,91,0.263,96,1.061,106,1.317,122,1.304,123,1.002,125,1.304,173,0.896,175,0.684,179,1.875,181,0.896,182,0.8,187,1.443,188,1.897,189,2.715,190,2.094,191,1.991,192,2.094,194,1.897,196,1.812,197,1.897,201,1.591,202,1.591,203,2.259,208,2.627,209,2.721,210,1.778,211,1.848,213,1.848,228,2,229,1.733,231,2.208,232,1.304,240,2.094,241,2.263,242,2.855,243,1.733,244,3.489,245,2.094,246,1.897,247,3.768,248,2.094,249,1.897,250,2.715,251,2.094,252,1.812,253,2.259,254,1.812,255,2.094,256,2.888,257,2.094,258,1.991,259,2.094,260,1.897,261,2.094,262,1.733,263,1.897,264,2.094,265,2.094,266,2.263,267,2.094,268,1.897,269,1.897,270,2.094,271,1.991,272,1.591,273,3.162,274,3.857,275,1.991,276,1.991,277,2.094,311,1.711,316,4.253,320,3.089,329,3.119,364,0.825,388,3.853,392,4.253,404,2.187,406,2.471,409,2.757,425,3.625,429,2.811,430,2.652,442,1.255,445,0.831,462,1.739,477,2.575,478,1.355,479,1.812,481,1.466,482,1.733,497,3.119,500,1.806,549,3.119,550,3.119,551,3.119,566,3.249,610,2.655,614,3.119,615,3.119,627,3.386,679,1.739,694,3.02,797,3.464,815,5.93,895,4.439,946,2.655,968,2.483,1299,6.587,1300,3.464,1301,4.119,1302,5.439,1303,5.439,1304,6.189,1305,5.439,1306,6.648,1307,5.439,1308,5.439,1309,7.347,1310,3.989,1311,3.989,1312,3.989,1313,5.439,1314,3.989,1315,3.989,1316,3.989,1317,5.439,1318,6.189,1319,3.989,1320,5.439,1321,5.439,1322,3.989,1323,3.989,1324,2.655,1325,3.464,1326,3.989,1327,3.989,1328,3.989,1329,5.774,1330,3.989,1331,3.989,1332,6.957,1333,3.989,1334,3.989,1335,3.989,1336,3.989,1337,6.189,1338,3.989,1339,6.189,1340,5.439,1341,3.989,1342,3.989,1343,3.989,1344,5.439,1345,5.439,1346,3.989,1347,3.989,1348,3.989,1349,3.989,1350,5.439,1351,3.989,1352,3.989,1353,5.439,1354,5.439,1355,5.439]],["title/interfaces/accountFullData.html",[135,0.172,138,1.971]],["body/interfaces/accountFullData.html",[0,0.316,1,1.941,3,0.117,4,0.117,5,0.103,8,0.088,19,0.491,25,0.015,26,0.243,27,0.15,28,1.201,30,0.317,34,1.53,38,0.325,40,3.483,41,1.675,48,0.147,50,2.938,52,0.223,53,0.103,58,0.513,59,0.491,60,0.238,61,0.117,62,0.313,63,0.595,64,0.746,66,0.785,79,1.561,80,0.484,87,0.009,88,0.009,89,1.754,90,1.935,91,0.249,92,0.632,93,2.295,96,0.632,101,0.883,103,0.632,105,0.926,106,1.437,107,2.295,109,1.179,110,2.295,112,2.295,115,2.295,116,3.287,118,2.295,119,2.851,121,2.704,124,0.939,125,2.101,126,0.643,127,2.92,128,2.238,129,2.295,130,1.969,131,0.607,132,1.355,133,0.632,134,0.513,135,0.295,136,2.579,137,3.497,138,2.964,139,3.765,140,4.213,141,3.744,142,3.374,143,3.558,144,1.84,145,2.143,146,1.754,147,2.704,148,2.159,149,2.159,150,2.295,151,2.164,152,1.935,153,2.295,154,2.295,155,2.295,156,2.295,157,1.935,158,2.295,159,1.935,160,2.295,161,1.534,162,1.868,163,2.45,164,2.295,165,1.444,166,2.295,167,1.935,168,2.295,169,1.935,170,1.935,171,1.602,172,0.798,173,0.828,174,3.558,175,0.632,176,1.16,177,2.295,178,2.295,179,1.117,180,1.84,181,0.828,182,1.19,183,1.47,184,1.47,185,1.117,186,1.675,1356,0.559]],["title/interfaces/additionalData.html",[135,0.172,461,1.716]],["body/interfaces/additionalData.html",[0,0.358,3,0.114,4,0.114,5,0.1,8,0.086,22,0.897,25,0.015,26,0.235,27,0.072,28,1.174,30,0.28,34,1.53,38,0.318,48,0.201,52,0.213,53,0.1,58,0.497,59,0.475,60,0.232,61,0.16,62,0.188,63,0.636,64,0.677,66,0.776,80,0.418,87,0.009,88,0.009,91,0.243,92,0.612,96,0.612,101,0.863,103,0.863,105,0.897,109,1.199,124,0.922,126,0.713,130,1.639,131,0.588,133,1.146,134,0.497,135,0.342,151,2.08,162,1.584,165,1.423,172,1.5,173,0.802,175,0.612,179,1.767,181,0.802,182,1.17,183,1.423,184,2.008,185,1.525,203,1.711,232,1.646,347,2.153,359,1.849,364,0.961,368,1.55,442,1.836,445,1.444,459,2.145,460,1.55,461,2.903,462,1.003,463,1.261,464,1.261,465,1.366,477,2.78,480,1.851,481,1.312,482,1.55,493,1.584,495,1.697,498,1.697,522,2.534,523,1.485,524,1.485,525,1.697,598,2.327,616,1.212,660,1.697,672,1.261,674,2.395,675,1.873,676,1.873,678,1.873,679,2.08,688,3.062,689,1.873,690,1.423,691,2.095,692,1.781,693,2.534,694,2.65,695,2.775,696,2.775,697,2.008,698,3.299,699,2.395,700,1.423,701,1.873,702,1.873,703,1.781,704,3.062,705,2.643,706,1.873,707,1.873,708,1.873,709,1.873,710,2.643,711,1.873,712,1.873,713,1.873,714,1.781,715,1.781,716,2.395,717,1.873,718,1.781,1356,0.541,1357,3.099,1358,3.568]],["title/interfaces/baseFilter.html",[135,0.172,353,2.186]],["body/interfaces/baseFilter.html",[0,0.391,3,0.162,4,0.162,5,0.142,8,0.122,19,0.676,25,0.015,26,0.506,27,0.152,30,0.224,38,0.322,48,0.203,52,0.233,53,0.142,58,0.707,59,0.676,60,0.233,61,0.162,62,0.335,80,0.335,87,0.011,88,0.011,91,0.308,92,0.87,101,1.092,103,0.87,109,1.007,124,1.007,126,0.507,131,0.836,133,0.87,134,0.707,135,0.327,176,1.597,342,2.663,343,2.809,344,3.159,347,1.724,348,2.663,349,3.159,350,3.159,351,3.159,352,3.525,353,4.04,354,4.544,355,3.171,356,3.525,357,3.159,358,3.342,359,1.858,360,3.159,361,3.023,362,3.342,363,3.159,364,0.966,365,3.159,1356,0.769]],["title/interfaces/categoryData.html",[135,0.172,348,2.073]],["body/interfaces/categoryData.html",[0,0.386,3,0.159,4,0.159,5,0.139,8,0.119,19,0.663,25,0.015,26,0.503,27,0.156,30,0.22,38,0.324,48,0.199,52,0.231,53,0.139,58,0.693,59,0.663,60,0.231,61,0.159,62,0.331,80,0.328,87,0.011,88,0.011,91,0.304,92,0.853,101,1.078,103,0.853,109,0.994,124,0.994,126,0.498,131,0.819,133,0.853,134,0.693,135,0.326,176,1.566,342,2.612,343,2.754,344,3.098,347,1.691,348,3.301,349,4.511,350,4.511,351,4.511,352,4.011,353,3.817,354,3.098,355,3.148,356,3.481,357,3.098,358,3.301,359,1.835,360,3.098,361,2.996,362,3.301,363,3.098,364,0.954,365,3.098,1356,0.755]],["title/interfaces/changeAccountDataEmail.html",[135,0.172,136,1.716]],["body/interfaces/changeAccountDataEmail.html",[0,0.321,1,1.964,3,0.12,4,0.12,5,0.105,8,0.09,19,0.502,25,0.015,26,0.249,27,0.137,30,0.319,34,1.555,38,0.322,40,3.469,41,1.712,48,0.151,50,3.205,52,0.225,53,0.105,58,0.525,59,0.502,60,0.239,61,0.12,62,0.316,63,0.599,64,0.753,66,0.792,79,1.585,80,0.487,87,0.009,88,0.009,89,1.793,90,1.978,91,0.253,92,0.646,93,2.346,96,0.646,101,0.897,103,0.646,105,0.947,106,1.455,107,2.346,109,1.184,110,2.346,112,2.346,115,2.346,116,3.326,118,2.346,119,2.896,121,2.746,124,0.95,125,2.122,126,0.601,127,2.376,128,2.273,129,2.346,130,1.983,131,0.621,132,1.386,133,0.646,134,0.525,135,0.297,136,2.82,137,3.522,138,2.611,139,2.208,140,3.801,141,2.896,142,1.978,143,2.896,144,1.881,145,2.176,146,1.793,147,2.746,148,2.208,149,2.208,150,2.346,151,2.172,152,1.978,153,2.346,154,2.346,155,2.346,156,2.346,157,1.978,158,2.346,159,1.978,160,2.346,161,1.568,162,1.89,163,2.489,164,2.346,165,1.458,166,2.346,167,1.978,168,2.346,169,1.978,170,1.978,171,1.637,172,0.815,173,0.847,174,3.592,175,0.646,176,1.186,177,2.346,178,2.346,179,1.142,180,1.881,181,0.847,182,1.205,183,1.503,184,1.503,185,1.142,186,1.712,1356,0.572]],["title/interfaces/changeSecondaryData.html",[119,2.186,135,0.172]],["body/interfaces/changeSecondaryData.html",[0,0.322,1,1.968,3,0.121,4,0.121,5,0.106,8,0.091,19,0.504,25,0.015,26,0.25,27,0.138,30,0.32,34,1.556,38,0.322,40,3.442,41,1.719,48,0.151,50,2.966,52,0.225,53,0.106,58,0.527,59,0.504,60,0.239,61,0.121,62,0.317,63,0.599,64,0.755,66,0.793,79,1.589,80,0.487,87,0.009,88,0.009,89,1.8,90,1.986,91,0.254,92,0.649,93,2.356,96,0.649,101,0.899,103,0.649,105,0.951,106,1.458,107,2.356,109,1.185,110,2.356,112,2.356,115,2.356,116,3.332,118,2.356,119,3.332,121,2.753,124,0.952,125,2.125,126,0.602,127,2.383,128,2.279,129,2.356,130,1.985,131,0.623,132,1.391,133,0.649,134,0.527,135,0.297,136,2.615,137,3.005,138,2.618,139,2.216,140,4.243,141,2.903,142,1.986,143,2.903,144,1.888,145,2.182,146,1.8,147,2.753,148,2.216,149,2.216,150,2.356,151,2.174,152,1.986,153,2.356,154,2.356,155,2.356,156,2.356,157,1.986,158,2.356,159,1.986,160,2.356,161,1.574,162,1.894,163,2.495,164,2.356,165,1.46,166,2.356,167,1.986,168,2.356,169,1.986,170,1.986,171,1.644,172,0.819,173,0.85,174,3.598,175,0.649,176,1.191,177,2.356,178,2.356,179,1.146,180,1.888,181,0.85,182,1.207,183,1.509,184,1.509,185,1.146,186,1.719,1356,0.574]],["title/interfaces/clientFilters.html",[135,0.172,1252,2.186]],["body/interfaces/clientFilters.html",[0,0.335,3,0.127,4,0.127,5,0.112,8,0.096,25,0.015,26,0.264,27,0.14,30,0.24,38,0.307,48,0.16,52,0.222,53,0.112,58,0.557,59,0.533,60,0.212,61,0.127,62,0.326,63,0.565,64,0.834,66,0.808,80,0.359,87,0.01,88,0.01,91,0.263,92,0.685,96,0.685,101,0.934,103,0.685,123,1.004,124,1.052,126,0.62,131,0.658,133,0.685,134,0.557,135,0.303,145,2.266,165,0.898,172,1.178,173,0.898,175,1.062,181,0.898,182,1.396,185,1.65,205,2.098,219,1.736,253,1.358,272,1.594,355,1.736,361,1.736,364,1.164,384,2.341,445,0.832,459,2.641,462,1.123,493,1.714,500,1.808,616,1.358,672,1.412,679,1.123,697,1.594,700,1.594,1020,1.851,1137,2.212,1150,2.212,1243,2.341,1244,4.142,1248,2.488,1249,3.429,1251,4.142,1252,3.429,1253,2.488,1254,3.391,1255,3.853,1257,3.391,1258,2.488,1259,2.488,1261,3.015,1262,3.015,1263,4.334,1264,4.334,1265,3.391,1266,2.488,1267,3.857,1268,2.488,1269,2.488,1270,2.488,1271,2.488,1272,2.488,1273,2.488,1274,2.488,1275,2.488,1276,2.488,1277,2.488,1278,3.391,1279,2.488,1280,2.488,1281,2.488,1282,2.488,1283,2.488,1284,3.391,1285,2.488,1286,2.488,1287,2.488,1288,2.488,1289,2.488,1290,3.391,1291,4.142,1292,2.488,1293,3.391,1294,4.334,1295,2.488,1296,3.857,1297,2.488,1298,2.488,1356,0.606]],["title/interfaces/clientProportions.html",[135,0.172,483,2.833]],["body/interfaces/clientProportions.html",[1,1.474,3,0.098,4,0.098,5,0.085,8,0.073,19,0.408,21,2.196,25,0.015,26,0.353,27,0.108,30,0.236,31,0.928,34,1.5,38,0.236,48,0.214,52,0.237,53,0.085,60,0.098,61,0.098,62,0.391,63,0.501,64,0.918,66,0.621,79,2.116,80,0.51,87,0.008,88,0.008,91,0.218,96,1.079,105,0.769,106,1.429,109,0.846,126,0.451,132,1.126,134,0.426,135,0.133,172,1.652,173,1.326,175,1.309,179,0.928,181,1.326,182,1.184,187,1.052,199,2.367,203,1.532,204,2.25,208,1.001,209,1.04,210,1.001,211,1.04,213,1.04,218,1.274,226,1.457,227,1.906,228,1.658,229,2.325,231,2.496,232,1.001,233,1.607,241,1.274,249,2.808,250,3.485,252,1.391,253,2.138,262,1.959,263,1.457,311,0.963,312,2.145,314,1.528,329,2.325,364,1.081,373,2.138,399,2.394,400,2.394,401,1.906,402,2.807,403,2.038,404,1.593,405,2.038,406,1.391,407,2.038,408,2.659,409,2.519,410,2.659,411,2.659,413,2.659,414,2.659,415,2.659,416,2.659,417,2.394,419,2.659,422,2.659,424,2.367,425,1.793,426,2.659,427,3.562,428,1.906,429,1.391,430,1.798,432,1.607,433,2.659,434,3.916,436,4.648,439,4.721,442,1.98,445,1.115,448,2.394,450,2.659,452,2.659,455,3.916,457,2.659,459,2.17,460,2.325,461,1.959,462,1.659,463,2.326,464,2.326,465,2.519,468,3.916,470,2.394,471,2.659,472,2.196,473,1.793,474,2.038,475,2.196,476,2.394,477,1.876,478,1.04,479,1.391,480,1.967,481,1.126,482,1.33,483,3.838,484,5.127,485,2.196,486,2.659,487,2.394,488,6.065,489,2.659,490,2.659,491,2.394,492,2.659,493,1.419,494,2.659,495,1.457,496,2.659,497,4.184,498,1.457,499,4.648,500,1.92,501,4.616,502,5.127,503,2.659,504,2.659,505,2.659,506,2.659,507,2.659,508,2.659,509,2.659,510,2.659,511,3.916,512,2.659,513,3.916,514,3.916,515,3.332,516,2.659,517,2.659,518,3.916,519,4.648,520,3.916,521,3.916,522,1.959,523,1.876,524,1.876,525,2.145,526,3.916,527,5.127,528,3.916,529,2.659,530,3.234,531,3.572,532,2.659,533,2.659,534,3.916,535,3.916,536,2.659,537,2.659,538,2.659,539,2.659,540,2.659,541,2.659,542,2.659,543,3.916,544,4.648,545,2.196,546,3.562,547,2.659,548,3.686,549,2.394,550,2.394,551,2.394,552,2.659,553,5.127,554,2.659,555,3.916,556,2.659,557,2.659,558,2.659,559,3.916,560,2.659,561,2.659,1356,0.464]],["title/interfaces/colorClientData.html",[135,0.172,695,1.879]],["body/interfaces/colorClientData.html",[0,0.359,3,0.114,4,0.114,5,0.1,8,0.086,25,0.015,26,0.236,27,0.102,30,0.28,34,1.531,38,0.316,48,0.202,52,0.213,53,0.1,58,0.498,59,0.477,60,0.232,61,0.161,62,0.188,63,0.637,64,0.678,66,0.776,80,0.418,87,0.009,88,0.009,91,0.244,92,0.613,96,0.613,101,0.865,103,0.865,105,0.899,109,1.2,124,0.923,126,0.713,130,1.642,131,0.589,133,1.147,134,0.498,135,0.342,151,2.081,162,1.587,165,1.425,172,1.501,173,0.804,175,0.613,179,1.77,181,0.804,182,1.171,183,1.427,184,2.012,185,1.528,203,1.714,232,1.169,347,1.215,359,1.851,364,0.962,368,1.554,442,1.587,445,1.446,459,2.147,460,1.554,461,2.756,462,1.005,463,1.264,464,1.264,465,1.369,477,2.783,480,2.332,481,1.315,482,1.554,493,1.587,495,1.702,498,1.702,522,3.015,523,1.488,524,1.488,525,1.702,598,2.768,616,1.215,660,1.702,672,1.264,674,1.702,675,1.877,676,1.877,678,1.877,679,2.081,688,3.066,689,1.877,690,1.427,691,2.098,692,1.785,693,2.538,694,2.653,695,3.018,696,2.779,697,1.427,698,3.301,699,2.399,700,1.427,701,1.877,702,1.877,703,1.785,704,3.066,705,2.647,706,1.877,707,1.877,708,1.877,709,1.877,710,2.647,711,1.877,712,1.877,713,1.877,714,1.785,715,1.785,716,2.399,717,1.877,718,1.785,1356,0.542]],["title/interfaces/colorFromServerData.html",[135,0.172,696,1.879]],["body/interfaces/colorFromServerData.html",[0,0.359,3,0.114,4,0.114,5,0.1,8,0.086,25,0.015,26,0.236,27,0.102,30,0.28,34,1.531,38,0.316,48,0.202,52,0.213,53,0.1,58,0.498,59,0.477,60,0.232,61,0.161,62,0.188,63,0.637,64,0.678,66,0.776,80,0.418,87,0.009,88,0.009,91,0.244,92,0.613,96,0.613,101,0.865,103,0.865,105,0.899,109,1.2,124,0.923,126,0.713,130,1.642,131,0.589,133,1.147,134,0.498,135,0.342,151,2.081,162,1.587,165,1.425,172,1.501,173,0.804,175,0.613,179,1.77,181,0.804,182,1.171,183,1.427,184,2.012,185,1.528,203,1.714,232,1.169,347,1.215,359,1.851,364,0.962,368,1.554,442,1.587,445,1.446,459,2.147,460,1.554,461,2.756,462,1.005,463,1.264,464,1.264,465,1.369,477,2.783,480,1.854,481,1.315,482,1.554,493,1.587,495,1.702,498,1.702,522,3.015,523,1.488,524,1.488,525,1.702,598,2.768,616,1.215,660,1.702,672,1.264,674,1.702,675,1.877,676,1.877,678,1.877,679,2.081,688,3.066,689,1.877,690,1.427,691,2.639,692,1.785,693,2.538,694,2.653,695,2.779,696,3.018,697,1.427,698,3.301,699,2.399,700,1.427,701,1.877,702,1.877,703,1.785,704,3.066,705,2.647,706,1.877,707,1.877,708,1.877,709,1.877,710,2.647,711,1.877,712,1.877,713,1.877,714,1.785,715,1.785,716,2.399,717,1.877,718,1.785,1356,0.542]],["title/coverage.html",[1359,4.692]],["body/coverage.html",[0,0.481,1,1.279,5,0.109,6,3.397,7,3.397,25,0.015,27,0.144,50,1.699,66,0.454,87,0.009,88,0.009,89,1.861,90,4.011,116,2.165,119,2.165,124,0.618,127,1.777,128,1.699,135,0.361,136,1.699,138,1.952,143,2.165,146,1.861,147,2.053,148,4.181,187,1.847,188,1.861,193,3.397,196,1.777,197,1.861,198,2.291,199,2.053,200,1.777,201,1.56,202,1.56,203,1.329,204,1.952,205,2.053,206,2.435,221,2.817,228,1.973,232,2.469,233,2.053,243,1.699,246,1.861,249,1.861,252,1.777,253,2.24,254,1.777,256,1.699,258,1.952,260,1.861,262,1.699,268,1.861,269,2.553,271,1.952,273,1.861,278,4.389,287,2.603,294,2.603,295,2.435,296,2.435,309,3.397,310,3.397,342,2.053,343,4.046,348,2.053,352,2.165,353,2.165,356,2.165,358,2.053,362,2.053,366,2.806,367,3.397,368,3.379,387,2.806,388,2.435,390,3.397,391,3.397,399,4.791,400,4.197,401,4.635,430,1.56,461,1.699,473,2.291,475,2.806,477,1.627,480,1.438,481,2.252,483,2.806,500,2.229,562,4.197,570,2.603,572,2.806,654,3.397,674,3.635,691,1.627,693,1.699,694,1.777,695,1.861,696,1.861,698,1.861,699,1.861,736,3.397,737,2.806,739,3.397,740,3.397,759,4.394,760,4.394,788,3.397,789,3.397,815,3.059,831,3.397,832,3.397,845,3.397,869,3.397,892,4.791,893,3.397,931,2.141,999,4.389,1005,2.165,1020,1.329,1021,1.861,1022,2.165,1037,4.197,1061,2.806,1138,5.996,1208,3.397,1243,4.181,1249,2.165,1252,2.165,1255,2.165,1261,2.165,1262,2.165,1299,3.397,1300,4.661,1359,3.397,1360,3.912,1361,3.912,1362,3.912,1363,3.912,1364,4.661,1365,7.137,1366,3.397,1367,7.444,1368,3.397,1369,3.397,1370,3.397,1371,4.661,1372,4.661,1373,3.912,1374,3.912,1375,3.059,1376,7.833,1377,3.912,1378,3.912,1379,3.912,1380,3.912,1381,3.912,1382,3.912,1383,3.912,1384,3.912,1385,6.594,1386,3.912,1387,3.912,1388,3.912,1389,3.912,1390,3.912,1391,3.912,1392,3.912,1393,6.909,1394,3.912,1395,3.912,1396,3.912,1397,3.912,1398,4.661,1399,3.912,1400,3.912,1401,3.059,1402,3.397,1403,2.435,1404,7.716,1405,3.397,1406,3.397,1407,3.397,1408,3.397,1409,3.397,1410,3.397,1411,3.397,1412,4.599,1413,3.912,1414,3.912,1415,7.553,1416,2.435,1417,6.127,1418,7.137,1419,3.912,1420,3.912,1421,3.912,1422,3.912,1423,3.912,1424,3.912,1425,6.127,1426,5.367,1427,3.912,1428,3.397,1429,3.397,1430,3.912,1431,3.912,1432,3.912,1433,3.912,1434,6.909,1435,3.912,1436,3.912,1437,3.912,1438,3.912,1439,4.661,1440,3.912,1441,5.367,1442,5.367,1443,3.912,1444,3.912,1445,3.912,1446,3.912,1447,3.912,1448,3.397,1449,3.397,1450,3.912,1451,3.912]],["title/interfaces/createEmailAccountData.html",[135,0.172,147,2.073]],["body/interfaces/createEmailAccountData.html",[0,0.321,1,1.96,3,0.12,4,0.12,5,0.105,8,0.09,19,0.5,25,0.015,26,0.248,27,0.142,30,0.319,34,1.534,38,0.324,40,3.509,41,1.706,48,0.15,50,3.202,52,0.225,53,0.105,58,0.523,59,0.5,60,0.239,61,0.12,62,0.316,63,0.598,64,0.752,66,0.79,79,1.581,80,0.486,87,0.009,88,0.009,89,1.786,90,1.971,91,0.252,92,0.644,93,2.338,96,0.644,101,0.895,103,0.644,105,0.944,106,1.452,107,2.338,109,1.183,110,2.338,112,2.338,115,2.338,116,3.319,118,2.338,119,2.888,121,2.739,124,0.948,125,2.118,126,0.6,127,2.37,128,2.267,129,2.338,130,1.981,131,0.618,132,1.38,133,0.644,134,0.523,135,0.297,136,2.605,137,3.518,138,2.604,139,2.199,140,4.234,141,2.888,142,1.971,143,2.888,144,1.874,145,2.171,146,1.786,147,3.147,148,2.199,149,2.199,150,2.338,151,2.171,152,1.971,153,2.338,154,2.338,155,2.338,156,2.338,157,1.971,158,2.338,159,1.971,160,2.338,161,1.562,162,1.887,163,2.482,164,2.338,165,1.456,166,2.338,167,1.971,168,2.338,169,1.971,170,1.971,171,1.631,172,0.812,173,0.843,174,3.586,175,0.644,176,1.181,177,2.338,178,2.338,179,1.137,180,1.874,181,0.843,182,1.202,183,1.498,184,1.498,185,1.137,186,1.706,1356,0.569]],["title/dependencies.html",[1452,2.859,1453,4.129]],["body/dependencies.html",[25,0.015,53,0.167,54,4.376,55,4.667,56,5.184,87,0.012,88,0.012,134,0.831,218,2.483,332,4.667,375,5.184,478,2.028,785,5.643,786,4.281,946,3.972,1325,5.184,1453,5.184,1454,5.968,1455,8.05,1456,5.968,1457,5.968,1458,5.968,1459,5.968,1460,5.968,1461,7.029,1462,5.968,1463,5.968,1464,5.968,1465,5.968,1466,7.029,1467,5.968,1468,5.968,1469,5.968,1470,5.968,1471,5.968,1472,5.968,1473,5.968,1474,5.968,1475,5.968,1476,5.968,1477,5.968,1478,3.972,1479,5.968,1480,5.968,1481,5.968,1482,5.968,1483,3.972,1484,5.968,1485,5.968,1486,5.968]],["title/interfaces/editForm.html",[135,0.172,1375,3.088]],["body/interfaces/editForm.html",[1,1.898,3,0.113,4,0.113,5,0.162,8,0.085,19,0.471,25,0.015,27,0.101,28,1.167,31,1.072,34,1.549,38,0.232,40,2.523,41,2.273,48,0.141,50,3.155,52,0.241,53,0.099,60,0.113,61,0.113,62,0.402,63,0.587,64,0.879,66,0.674,79,1.516,80,0.487,87,0.009,88,0.009,89,2.762,91,0.242,96,1.142,106,1.212,125,1.898,132,1.301,135,0.154,137,3.325,138,2.498,139,2.072,140,4.164,141,1.958,142,1.857,173,1.496,174,1.958,175,1.219,181,1.496,182,1.425,185,1.516,186,2.868,187,1.167,198,3.401,199,2.627,208,1.157,209,1.202,210,1.157,211,1.202,213,1.202,218,1.472,224,2.767,225,3.073,226,1.683,227,2.203,228,1.84,229,2.174,246,1.683,262,2.174,263,1.683,311,1.113,312,2.381,314,1.766,322,2.498,336,2.072,364,0.537,366,3.589,401,2.203,403,2.355,404,1.768,405,2.355,407,2.355,409,2.609,427,3.865,429,1.607,430,1.996,442,1.575,445,1.042,473,2.072,474,2.355,478,1.202,479,1.607,485,2.538,501,5.208,530,4.165,531,4.013,546,2.355,548,4.326,566,2.627,567,3.331,850,3.073,895,3.589,941,4.54,942,5.559,943,3.913,945,2.767,946,2.355,961,6.006,962,3.073,1008,3.331,1356,0.537,1371,3.073,1372,3.073,1375,4.54,1487,5.005,1488,3.073,1489,3.538,1490,2.203,1491,3.538,1492,3.538,1493,3.538,1494,3.538,1495,3.538,1496,3.538,1497,5.005,1498,5.807,1499,3.538,1500,5.005,1501,3.538,1502,3.538,1503,5.807,1504,5.005,1505,3.538,1506,3.538,1507,3.538,1508,3.538,1509,3.538,1510,6.313,1511,3.538,1512,6.313,1513,3.538,1514,3.538,1515,3.538,1516,3.538,1517,3.538,1518,3.538,1519,3.538,1520,5.005,1521,3.538,1522,3.538,1523,3.538,1524,5.005,1525,3.538,1526,3.538,1527,3.538,1528,3.538,1529,3.538,1530,3.538,1531,3.538,1532,3.538,1533,3.538,1534,3.538,1535,3.538,1536,3.538,1537,3.538,1538,3.538,1539,3.538,1540,5.005,1541,3.538,1542,3.538,1543,3.538,1544,3.538,1545,3.538,1546,3.538,1547,3.538,1548,3.538]],["title/interfaces/emailAuthData.html",[135,0.172,295,2.459]],["body/interfaces/emailAuthData.html",[0,0.372,3,0.149,4,0.149,5,0.131,8,0.113,19,0.625,25,0.015,27,0.135,30,0.313,34,1.416,38,0.31,40,3.559,41,3.22,48,0.187,50,3.323,52,0.24,53,0.131,57,4.344,58,0.653,59,0.625,60,0.226,61,0.149,62,0.319,63,0.602,64,0.703,66,0.823,80,0.468,87,0.011,88,0.011,91,0.293,92,0.804,101,1.038,103,0.804,109,1.225,121,3.179,124,0.957,125,1.533,126,0.469,130,2.063,131,0.772,133,0.804,134,0.653,135,0.264,136,2.038,137,3.539,146,2.881,151,2.201,152,2.462,157,3.521,159,2.462,161,2.52,165,1.361,167,2.462,169,2.462,170,2.462,171,2.038,176,1.476,198,2.747,278,3.122,284,3.667,286,3.667,287,4.465,289,3.667,291,3.667,293,4.736,294,3.122,295,4.176,296,3.771,297,3.667,298,3.667,299,3.667,300,3.667,301,3.667,302,3.667,303,4.736,304,3.667,305,3.667,306,3.667,307,3.667,308,3.667,1356,0.711]],["title/interfaces/foundFurniture.html",[135,0.172,572,2.833]],["body/interfaces/foundFurniture.html",[3,0.125,4,0.125,5,0.109,8,0.094,19,0.521,25,0.015,26,0.456,27,0.139,30,0.27,31,1.185,38,0.323,48,0.156,52,0.233,53,0.109,60,0.125,61,0.125,62,0.409,63,0.606,64,0.711,79,1.626,80,0.491,87,0.009,88,0.009,91,0.259,96,0.671,105,0.983,106,1.483,123,0.983,126,0.659,135,0.17,172,0.846,175,0.671,187,1.538,191,1.952,199,2.817,206,3.814,208,1.279,209,1.329,210,1.279,211,1.329,213,1.329,218,1.627,227,2.435,228,1.438,229,1.699,235,3.059,241,2.233,254,1.777,311,1.231,329,2.662,347,2.425,364,0.929,388,3.341,404,1.896,406,1.777,409,2.522,424,2.817,432,2.053,442,1.231,445,1.439,478,1.329,500,1.788,546,3.572,562,3.059,563,2.817,564,3.397,565,3.572,566,2.817,567,4.078,568,3.397,569,3.397,570,4.078,571,3.397,572,5.119,573,3.397,574,3.397,576,3.397,577,3.397,581,3.397,582,2.053,583,3.397,585,2.165,586,3.849,587,3.397,589,3.397,593,4.661,594,3.397,596,3.397,597,3.397,598,2.444,600,4.661,601,3.397,604,3.397,610,3.572,612,3.059,613,3.059,614,3.059,615,3.059,616,2.24,617,5.727,618,5.321,619,3.397,620,3.397,621,3.397,622,4.661,623,3.397,624,4.661,625,3.397,626,5.321,627,3.341,628,5.321,629,2.806,630,3.397,631,3.397,632,4.661,633,3.397,634,4.661,635,3.397,636,4.661,637,3.397,638,4.661,639,3.397,640,3.397,641,3.397,642,3.397,643,3.397,644,3.397,645,3.397,646,4.661,647,3.397,648,3.397,649,3.397,650,3.397,651,3.397,1356,0.593]],["title/miscellaneous/functions.html",[1549,2.05,1550,4.129]],["body/miscellaneous/functions.html",[8,0.132,24,2.083,25,0.015,26,0.507,27,0.151,28,1.795,30,0.34,38,0.313,40,2.908,48,0.268,87,0.012,88,0.012,90,2.887,106,1.332,109,1.187,125,1.798,126,0.721,136,2.39,149,3.222,294,4.455,373,2.614,439,4.801,570,4.802,683,5.87,1402,4.777,1403,4.167,1405,4.777,1406,5.813,1407,4.777,1408,5.813,1409,5.813,1410,4.777,1411,5.813,1448,4.777,1449,5.813,1549,3.424,1550,4.777,1551,5.5,1552,4.777,1553,5.5,1554,5.5,1555,4.777,1556,5.5,1557,5.5,1558,7.994,1559,7.994,1560,5.5,1561,5.5,1562,5.5,1563,5.5,1564,5.5,1565,5.5,1566,3.661,1567,5.5]],["title/interfaces/furnitureAccountData.html",[135,0.172,143,2.186]],["body/interfaces/furnitureAccountData.html",[0,0.321,1,1.961,3,0.12,4,0.12,5,0.105,8,0.09,19,0.501,25,0.015,26,0.427,27,0.142,30,0.319,34,1.534,38,0.324,40,3.439,41,1.707,48,0.15,50,2.959,52,0.225,53,0.105,58,0.523,59,0.501,60,0.239,61,0.12,62,0.316,63,0.598,64,0.752,66,0.791,79,1.581,80,0.486,87,0.009,88,0.009,89,1.787,90,1.972,91,0.252,92,0.644,93,2.339,96,0.644,101,0.895,103,0.644,105,0.944,106,1.452,107,2.339,109,1.183,110,2.339,112,2.339,115,2.339,116,3.32,118,2.339,119,2.889,121,2.74,124,0.948,125,2.119,126,0.648,127,2.371,128,2.268,129,2.339,130,1.981,131,0.619,132,1.381,133,0.644,134,0.523,135,0.297,136,2.606,137,2.994,138,2.605,139,2.201,140,3.796,141,2.889,142,1.972,143,3.32,144,3.235,145,2.833,146,1.787,147,2.74,148,2.201,149,2.201,150,2.339,151,2.171,152,1.972,153,2.339,154,2.339,155,2.339,156,2.339,157,1.972,158,2.339,159,1.972,160,2.339,161,1.563,162,1.887,163,2.483,164,2.339,165,1.456,166,2.339,167,1.972,168,2.339,169,1.972,170,1.972,171,1.632,172,0.813,173,0.844,174,3.587,175,0.644,176,1.182,177,2.339,178,2.339,179,1.138,180,1.875,181,0.844,182,1.203,183,1.499,184,1.499,185,1.138,186,1.707,1356,0.57]],["title/interfaces/furnitureBaseData.html",[135,0.172,698,1.879]],["body/interfaces/furnitureBaseData.html",[0,0.355,3,0.112,4,0.112,5,0.098,8,0.084,25,0.015,26,0.415,27,0.134,30,0.278,34,1.527,38,0.318,48,0.266,52,0.212,53,0.098,58,0.489,59,0.468,60,0.231,61,0.159,62,0.185,63,0.634,64,0.671,66,0.771,80,0.415,87,0.009,88,0.009,91,0.241,92,0.602,96,0.602,101,0.854,103,0.854,105,0.883,109,1.195,124,0.914,126,0.725,130,1.625,131,0.579,133,1.139,134,0.489,135,0.342,151,2.072,162,1.567,165,1.414,172,1.493,173,0.789,175,0.602,179,1.752,181,0.789,182,1.16,183,1.401,184,1.986,185,1.508,203,1.692,232,1.148,347,1.194,359,1.836,364,0.954,368,1.526,442,1.567,445,1.437,459,2.126,460,2.734,461,3.203,462,1.768,463,1.241,464,1.241,465,1.345,477,2.764,480,1.831,481,1.291,482,1.526,493,1.567,495,1.671,498,1.671,522,2.513,523,1.461,524,1.461,525,1.671,598,2.307,616,1.194,660,1.671,672,1.241,674,1.671,675,1.844,676,1.844,678,1.844,679,2.072,688,3.036,689,1.844,690,1.401,691,2.072,692,1.753,693,2.886,694,3.018,695,2.752,696,2.752,697,1.401,698,3.375,699,2.369,700,1.401,701,1.844,702,1.844,703,1.753,704,3.036,705,2.614,706,1.844,707,1.844,708,1.844,709,1.844,710,2.614,711,1.844,712,1.844,713,1.844,714,1.753,715,1.753,716,2.369,717,1.844,718,1.753,1356,0.533]],["title/interfaces/furnitureClientData.html",[135,0.172,699,1.879]],["body/interfaces/furnitureClientData.html",[0,0.36,3,0.114,4,0.114,5,0.1,8,0.086,25,0.015,26,0.237,27,0.072,30,0.28,34,1.531,38,0.313,48,0.202,52,0.213,53,0.1,58,0.5,59,0.478,60,0.232,61,0.161,62,0.189,63,0.637,64,0.679,66,0.777,80,0.419,87,0.009,88,0.009,91,0.244,92,0.616,96,0.616,101,0.867,103,0.867,105,0.902,109,1.2,124,0.925,126,0.714,130,1.645,131,0.591,133,1.148,134,0.5,135,0.343,151,2.082,162,1.591,165,1.427,172,1.503,173,0.806,175,0.616,179,1.773,181,0.806,182,1.173,183,1.432,184,2.017,185,1.532,203,1.718,232,1.174,347,1.22,359,1.954,364,0.964,368,1.56,442,1.591,445,1.447,459,2.554,460,1.56,461,2.76,462,1.009,463,1.268,464,1.268,465,1.374,477,2.786,480,1.859,481,1.32,482,1.56,493,1.591,495,1.708,498,1.708,522,2.543,523,1.494,524,1.494,525,1.708,598,2.335,616,1.22,660,1.708,672,1.268,674,1.708,675,1.884,676,1.884,678,1.884,679,2.082,688,3.072,689,1.884,690,1.432,691,2.104,692,1.792,693,2.543,694,2.659,695,3.186,696,2.784,697,1.432,698,3.396,699,2.784,700,1.432,701,1.884,702,1.884,703,1.792,704,3.072,705,2.654,706,1.884,707,1.884,708,1.884,709,1.884,710,2.654,711,1.884,712,1.884,713,1.884,714,1.792,715,1.792,716,2.405,717,1.884,718,1.792,1356,0.544]],["title/interfaces/furnitureFromServerData.html",[135,0.172,477,1.643]],["body/interfaces/furnitureFromServerData.html",[0,0.36,3,0.114,4,0.114,5,0.1,8,0.086,25,0.015,26,0.237,27,0.072,30,0.28,34,1.531,38,0.313,48,0.202,52,0.213,53,0.1,58,0.5,59,0.478,60,0.232,61,0.161,62,0.189,63,0.637,64,0.679,66,0.777,80,0.419,87,0.009,88,0.009,91,0.244,92,0.616,96,0.616,101,0.867,103,0.867,105,0.902,109,1.2,124,0.925,126,0.714,130,1.645,131,0.591,133,1.148,134,0.5,135,0.343,151,2.082,162,1.591,165,1.427,172,1.503,173,0.806,175,0.616,179,1.773,181,0.806,182,1.173,183,1.432,184,2.017,185,1.532,203,1.718,232,1.174,347,1.22,359,1.954,364,0.964,368,1.56,442,1.591,445,1.447,459,2.554,460,1.56,461,2.76,462,1.009,463,1.268,464,1.268,465,1.374,477,2.891,480,1.859,481,1.32,482,1.56,493,1.591,495,1.708,498,1.708,522,2.543,523,1.494,524,1.494,525,1.708,598,2.335,616,1.22,660,1.708,672,1.268,674,1.708,675,1.884,676,1.884,678,1.884,679,2.082,688,3.072,689,1.884,690,1.432,691,2.104,692,1.792,693,2.543,694,2.659,695,2.784,696,3.186,697,1.432,698,3.396,699,2.405,700,1.432,701,1.884,702,1.884,703,1.792,704,3.072,705,2.654,706,1.884,707,1.884,708,1.884,709,1.884,710,2.654,711,1.884,712,1.884,713,1.884,714,1.792,715,1.792,716,2.405,717,1.884,718,1.792,1356,0.544]],["title/interfaces/furnitureProportions.html",[135,0.172,694,1.794]],["body/interfaces/furnitureProportions.html",[0,0.355,3,0.112,4,0.112,5,0.098,8,0.084,25,0.015,26,0.231,27,0.117,30,0.278,34,1.527,38,0.312,48,0.199,52,0.212,53,0.098,58,0.489,59,0.468,60,0.231,61,0.159,62,0.185,63,0.634,64,0.671,66,0.771,80,0.415,87,0.009,88,0.009,91,0.241,92,0.602,96,0.602,101,0.853,103,0.853,105,0.882,109,1.195,124,0.914,126,0.709,130,1.624,131,0.578,133,1.138,134,0.489,135,0.342,151,2.071,162,1.565,165,1.413,172,1.687,173,0.788,175,0.602,179,1.751,181,0.788,182,1.159,183,1.4,184,1.984,185,1.507,203,1.69,232,1.147,347,1.192,359,1.835,364,1.133,368,1.524,442,1.565,445,1.436,459,2.125,460,1.524,461,2.732,462,0.986,463,2.222,464,2.222,465,2.407,477,2.763,480,1.829,481,1.29,482,1.524,493,1.565,495,1.669,498,1.669,522,2.511,523,1.46,524,1.46,525,1.669,598,2.306,616,1.192,660,1.669,672,1.24,674,1.669,675,1.842,676,1.842,678,1.842,679,2.071,688,3.034,689,1.842,690,1.4,691,2.07,692,1.751,693,2.511,694,2.857,695,2.75,696,2.75,697,1.4,698,3.281,699,2.367,700,1.4,701,1.842,702,1.842,703,1.751,704,3.034,705,2.611,706,1.842,707,1.842,708,1.842,709,1.842,710,2.611,711,1.842,712,1.842,713,1.842,714,1.751,715,1.751,716,2.367,717,1.842,718,1.751,1356,0.532]],["title/interfaces/furnitureShopData.html",[135,0.172,1249,2.186]],["body/interfaces/furnitureShopData.html",[0,0.33,3,0.125,4,0.125,5,0.109,8,0.094,25,0.015,26,0.435,27,0.15,30,0.237,38,0.318,48,0.157,52,0.22,53,0.109,58,0.546,59,0.522,60,0.21,61,0.125,62,0.323,63,0.56,64,0.829,66,0.803,80,0.354,87,0.01,88,0.01,91,0.26,92,0.672,96,0.672,101,0.921,103,0.672,123,0.985,124,1.093,126,0.66,131,0.645,133,0.672,134,0.546,135,0.301,145,2.877,165,0.88,172,1.163,173,0.88,175,1.052,181,0.88,182,1.386,185,1.628,205,2.057,219,1.703,253,1.332,272,1.563,355,1.703,361,1.703,364,1.129,384,2.296,445,1.119,459,2.626,462,1.855,493,1.691,500,1.789,616,2.242,672,1.385,679,1.855,697,1.563,700,1.563,1020,2.242,1137,2.17,1150,2.17,1243,2.296,1244,4.108,1248,2.44,1249,3.653,1251,4.108,1252,2.975,1253,2.44,1254,3.346,1255,3.827,1257,3.346,1258,2.44,1259,2.44,1261,2.975,1262,2.975,1263,3.346,1264,3.346,1265,3.346,1266,2.44,1267,3.818,1268,2.44,1269,2.44,1270,2.44,1271,2.44,1272,2.44,1273,2.44,1274,2.44,1275,2.44,1276,2.44,1277,2.44,1278,3.346,1279,2.44,1280,2.44,1281,2.44,1282,2.44,1283,2.44,1284,3.346,1285,2.44,1286,2.44,1287,2.44,1288,2.44,1289,2.44,1290,3.346,1291,4.108,1292,2.44,1293,3.346,1294,4.305,1295,2.44,1296,3.818,1297,2.44,1298,2.44,1356,0.594]],["title/interfaces/googleAuthData.html",[135,0.172,296,2.459]],["body/interfaces/googleAuthData.html",[0,0.376,3,0.152,4,0.152,5,0.133,8,0.114,19,0.634,25,0.015,27,0.096,30,0.315,34,1.422,38,0.285,40,3.499,41,3.428,48,0.19,50,3.334,52,0.24,53,0.133,57,4.385,58,0.663,59,0.634,60,0.227,61,0.152,62,0.322,63,0.605,64,0.71,66,0.828,80,0.47,87,0.011,88,0.011,91,0.296,92,0.816,101,1.048,103,0.816,109,1.229,121,3.209,124,0.966,125,1.556,126,0.476,130,2.072,131,0.784,133,0.816,134,0.663,135,0.266,136,2.067,137,2.375,146,2.908,151,2.207,152,2.498,157,3.545,159,2.498,161,2.543,165,1.373,167,2.498,169,2.498,170,2.498,171,2.067,176,1.497,198,2.787,278,3.167,284,3.721,286,3.721,287,4.496,289,3.721,291,3.721,293,4.78,294,3.167,295,3.806,296,4.205,297,3.721,298,3.721,299,3.721,300,3.721,301,3.721,302,3.721,303,4.78,304,3.721,305,3.721,306,3.721,307,3.721,308,3.721,1356,0.722]],["title/interfaces/imageSliderClientData.html",[135,0.172,480,1.452]],["body/interfaces/imageSliderClientData.html",[3,0.17,4,0.17,5,0.149,8,0.158,25,0.015,27,0.132,38,0.213,48,0.213,52,0.227,53,0.149,60,0.227,61,0.17,87,0.012,88,0.012,91,0.318,106,1.292,126,0.657,135,0.286,187,1.532,208,1.744,209,1.813,210,1.744,211,1.813,213,1.813,228,2.617,256,2.318,311,1.679,312,3.125,320,2.663,330,2.538,364,1.157,373,2.674,404,2.321,406,2.424,409,1.885,478,1.813,480,2.415,481,1.962,500,1.557,523,3.174,524,3.174,566,3.449,691,2.22,759,3.827,760,3.827,761,4.172,762,5.137,763,4.172,764,4.172,785,3.827,786,3.827,1356,0.809]],["title/interfaces/imageSliderFromServerData.html",[135,0.172,691,1.643]],["body/interfaces/imageSliderFromServerData.html",[3,0.17,4,0.17,5,0.149,8,0.158,25,0.015,27,0.132,38,0.284,48,0.213,52,0.227,53,0.149,60,0.227,61,0.17,87,0.012,88,0.012,91,0.317,106,1.291,126,0.743,135,0.286,187,1.531,208,1.743,209,1.811,210,1.743,211,1.811,213,1.811,228,2.616,256,2.316,311,1.677,312,3.124,320,2.661,330,2.536,364,1.157,373,2.418,404,2.32,406,2.422,409,1.884,478,1.811,480,1.96,481,1.96,500,1.555,523,3.173,524,3.173,566,3.447,691,2.732,759,3.824,760,3.824,761,4.168,762,5.134,763,4.168,764,4.168,785,3.824,786,3.824,1356,0.808]],["title/index.html",[8,0.095,1568,3.43]],["body/index.html",[2,2.684,25,0.013,87,0.013,88,0.013,189,3.22,243,2.803,387,4.628,781,3.059,1356,0.978,1568,5.604,1569,6.452,1570,6.452,1571,6.452]],["title/interfaces/modelInterface.html",[135,0.172,1020,1.342]],["body/interfaces/modelInterface.html",[1,1.49,3,0.075,4,0.075,5,0.066,8,0.057,19,0.314,25,0.015,27,0.092,30,0.201,31,2.154,34,1.147,38,0.182,48,0.094,52,0.227,53,0.066,54,1.381,60,0.145,61,0.075,62,0.418,63,0.603,64,0.943,66,0.786,69,1.569,71,1.381,79,1.381,80,0.504,87,0.007,88,0.007,91,0.179,96,0.885,105,0.929,106,1.439,109,0.584,132,0.867,135,0.225,172,0.799,173,0.83,175,1.066,181,0.83,182,0.741,186,2.07,187,0.862,200,2.07,201,1.818,202,0.94,203,1.256,204,1.845,207,2.67,208,0.771,209,0.801,210,0.771,211,0.801,213,0.801,218,0.981,221,1.237,222,1.381,226,1.121,229,1.605,230,1.381,231,2.046,232,0.771,233,1.94,266,0.981,311,0.742,320,1.845,322,3.303,329,1.98,330,1.121,336,2.165,359,0.688,364,1.173,373,0.801,402,1.468,404,1.306,409,1.61,424,1.94,425,1.381,428,1.468,429,1.071,430,1.474,432,1.237,442,1.871,445,0.77,462,1.039,463,2.594,464,2.669,465,2.276,478,0.801,479,1.071,500,1.975,515,2.301,531,1.94,548,2.165,563,1.94,582,1.237,585,1.305,679,1.575,778,1.381,781,2.473,827,2.301,931,2.235,968,1.468,992,1.468,993,1.468,994,1.468,995,1.468,1020,2.02,1021,2.666,1024,4.203,1027,1.237,1028,1.94,1125,4.528,1171,3.212,1183,2.838,1301,2.46,1324,2.46,1356,0.358,1403,1.468,1412,1.569,1416,3.212,1478,2.46,1483,2.46,1490,1.468,1566,3.434,1572,2.46,1573,2.46,1574,3.269,1575,1.691,1576,2.65,1577,2.65,1578,3.269,1579,1.691,1580,2.65,1581,3.957,1582,2.65,1583,2.46,1584,2.65,1585,3.957,1586,3.701,1587,2.65,1588,2.65,1589,4.019,1590,1.691,1591,1.691,1592,1.691,1593,2.65,1594,1.691,1595,1.691,1596,2.65,1597,1.691,1598,1.691,1599,1.691,1600,1.691,1601,1.691,1602,1.691,1603,1.691,1604,1.691,1605,1.691,1606,1.691,1607,1.691,1608,2.65,1609,1.691,1610,1.691,1611,4.264,1612,1.691,1613,2.65,1614,3.269,1615,1.691,1616,2.65,1617,3.269,1618,2.65,1619,1.691,1620,3.269,1621,1.691,1622,1.691,1623,1.691,1624,1.691,1625,1.691,1626,1.691,1627,1.691,1628,1.691,1629,1.691,1630,1.691,1631,3.269,1632,4.264,1633,4.019,1634,1.691,1635,1.691,1636,2.65,1637,2.65,1638,1.691,1639,2.65,1640,1.691,1641,1.691,1642,1.691,1643,3.269,1644,1.691,1645,1.691,1646,4.458,1647,1.691,1648,3.701,1649,2.65,1650,1.691,1651,1.691,1652,1.691,1653,1.691,1654,1.691,1655,1.691,1656,1.691,1657,1.691,1658,1.691,1659,1.691,1660,1.691,1661,2.65,1662,3.701,1663,1.691,1664,2.65,1665,2.65,1666,2.65,1667,3.701,1668,1.691,1669,3.269,1670,1.691,1671,1.691,1672,1.691,1673,1.691,1674,1.691,1675,2.65,1676,2.65,1677,2.65,1678,2.65,1679,2.65,1680,1.691,1681,1.691,1682,1.569,1683,1.691,1684,1.691,1685,1.691,1686,1.691,1687,1.691,1688,1.691,1689,1.691,1690,1.691,1691,1.691,1692,2.65,1693,1.691,1694,1.691,1695,1.691,1696,1.691,1697,1.691,1698,3.269,1699,1.691,1700,1.691,1701,2.65,1702,3.269,1703,1.691,1704,1.691,1705,3.269,1706,1.691,1707,1.691,1708,1.691,1709,2.65,1710,3.269,1711,1.691,1712,2.65,1713,2.65,1714,1.691,1715,1.691,1716,1.691,1717,1.691,1718,1.691,1719,2.65,1720,3.269,1721,1.691,1722,1.691,1723,1.691,1724,2.65,1725,3.269,1726,1.691,1727,2.65,1728,1.691,1729,2.65,1730,3.269,1731,1.691,1732,1.691,1733,2.46,1734,1.691,1735,2.65,1736,1.691,1737,1.691,1738,1.691,1739,1.691,1740,1.691,1741,1.691,1742,3.701,1743,3.269,1744,1.691,1745,1.691,1746,1.691,1747,1.691,1748,1.691,1749,1.691,1750,2.46,1751,4.264,1752,2.65,1753,2.65,1754,2.65,1755,2.65,1756,2.65,1757,2.46,1758,2.65,1759,2.65,1760,2.65,1761,2.65,1762,2.65,1763,2.65,1764,1.691,1765,3.269,1766,1.691,1767,1.691,1768,2.65,1769,2.65,1770,1.691,1771,1.691,1772,1.569,1773,3.269,1774,1.691,1775,1.569,1776,1.569,1777,3.434,1778,1.691,1779,2.65,1780,1.569,1781,1.691,1782,1.691,1783,1.569,1784,1.691,1785,1.691,1786,2.65,1787,1.691,1788,2.65,1789,1.691,1790,1.691,1791,1.691,1792,1.691,1793,1.691,1794,2.65,1795,2.65,1796,3.269,1797,3.269,1798,1.691,1799,2.65,1800,2.65,1801,3.269,1802,3.701,1803,1.691,1804,1.691,1805,2.65,1806,1.691,1807,1.691,1808,1.691,1809,1.691,1810,1.691,1811,1.691,1812,1.691,1813,1.691,1814,1.691,1815,1.691,1816,1.691,1817,2.65,1818,1.691,1819,1.691,1820,1.691,1821,1.691,1822,3.269,1823,1.691,1824,1.691,1825,1.691,1826,1.691,1827,1.691,1828,1.691]],["title/modules.html",[1829,4.692]],["body/modules.html",[25,0.013,87,0.013,88,0.013,1829,5.666]],["title/interfaces/objectLoadInterface.html",[135,0.172,1416,2.459]],["body/interfaces/objectLoadInterface.html",[1,1.487,3,0.075,4,0.075,5,0.066,8,0.056,19,0.313,25,0.015,27,0.092,30,0.201,31,2.153,34,1.145,38,0.182,48,0.094,52,0.226,53,0.066,54,1.376,60,0.145,61,0.075,62,0.418,63,0.603,64,0.943,66,0.785,69,1.564,71,1.376,79,1.378,80,0.503,87,0.007,88,0.007,91,0.178,96,0.883,105,0.926,106,1.437,109,0.583,132,0.864,135,0.224,172,0.797,173,0.828,175,1.064,181,0.828,182,0.739,186,2.066,187,0.86,200,2.066,201,1.814,202,0.937,203,1.253,204,1.84,207,2.664,208,0.768,209,0.798,210,0.768,211,0.798,213,0.798,218,0.978,221,1.233,222,1.376,226,1.118,229,1.601,230,1.376,231,2.04,232,0.768,233,1.935,266,0.978,311,0.739,320,1.84,322,3.299,329,1.976,330,1.118,336,2.159,359,0.686,364,1.172,373,0.798,402,1.463,404,1.302,409,1.607,424,1.935,425,1.376,428,1.463,429,1.067,430,1.47,432,1.233,442,1.868,445,0.768,462,1.036,463,2.511,464,2.614,465,1.741,478,0.798,479,1.067,500,1.973,515,2.295,531,1.935,548,2.159,563,1.935,582,1.233,585,1.301,679,1.573,778,1.376,781,2.47,827,2.295,931,2.232,968,1.463,992,1.463,993,1.463,994,1.463,995,1.463,1020,1.901,1021,2.662,1024,4.202,1027,1.233,1028,1.935,1125,4.525,1171,3.207,1183,2.832,1301,2.453,1324,2.453,1356,0.356,1403,1.463,1412,1.564,1416,3.484,1478,2.453,1483,2.453,1490,1.463,1566,3.428,1572,2.453,1573,2.453,1574,3.262,1575,1.685,1576,2.644,1577,2.644,1578,3.262,1579,1.685,1580,2.644,1581,4.132,1582,2.644,1583,3.027,1584,2.644,1585,4.132,1586,4.453,1587,4.013,1588,4.013,1589,4.013,1590,1.685,1591,1.685,1592,1.685,1593,2.644,1594,1.685,1595,1.685,1596,2.644,1597,1.685,1598,1.685,1599,1.685,1600,1.685,1601,1.685,1602,1.685,1603,1.685,1604,1.685,1605,1.685,1606,1.685,1607,1.685,1608,2.644,1609,1.685,1610,1.685,1611,4.258,1612,1.685,1613,2.644,1614,3.262,1615,1.685,1616,2.644,1617,3.262,1618,2.644,1619,1.685,1620,3.262,1621,1.685,1622,1.685,1623,1.685,1624,1.685,1625,1.685,1626,1.685,1627,1.685,1628,1.685,1629,1.685,1630,1.685,1631,3.262,1632,4.258,1633,4.013,1634,1.685,1635,1.685,1636,2.644,1637,2.644,1638,1.685,1639,2.644,1640,1.685,1641,1.685,1642,1.685,1643,3.262,1644,1.685,1645,1.685,1646,4.453,1647,1.685,1648,3.694,1649,2.644,1650,1.685,1651,1.685,1652,1.685,1653,1.685,1654,1.685,1655,1.685,1656,1.685,1657,1.685,1658,1.685,1659,1.685,1660,1.685,1661,2.644,1662,3.694,1663,1.685,1664,2.644,1665,2.644,1666,2.644,1667,3.694,1668,1.685,1669,3.262,1670,1.685,1671,1.685,1672,1.685,1673,1.685,1674,1.685,1675,2.644,1676,2.644,1677,2.644,1678,2.644,1679,2.644,1680,1.685,1681,1.685,1682,1.564,1683,1.685,1684,1.685,1685,1.685,1686,1.685,1687,1.685,1688,1.685,1689,1.685,1690,1.685,1691,1.685,1692,2.644,1693,1.685,1694,1.685,1695,1.685,1696,1.685,1697,1.685,1698,3.262,1699,1.685,1700,1.685,1701,2.644,1702,3.262,1703,1.685,1704,1.685,1705,3.262,1706,1.685,1707,1.685,1708,1.685,1709,2.644,1710,3.262,1711,1.685,1712,2.644,1713,2.644,1714,1.685,1715,1.685,1716,1.685,1717,1.685,1718,1.685,1719,2.644,1720,3.262,1721,1.685,1722,1.685,1723,1.685,1724,2.644,1725,3.262,1726,1.685,1727,2.644,1728,1.685,1729,2.644,1730,3.262,1731,1.685,1732,1.685,1733,2.453,1734,1.685,1735,2.644,1736,1.685,1737,1.685,1738,1.685,1739,1.685,1740,1.685,1741,1.685,1742,3.694,1743,3.262,1744,1.685,1745,1.685,1746,1.685,1747,1.685,1748,1.685,1749,1.685,1750,2.453,1751,4.258,1752,2.644,1753,2.644,1754,2.644,1755,2.644,1756,2.644,1757,2.453,1758,2.644,1759,2.644,1760,2.644,1761,2.644,1762,2.644,1763,2.644,1764,1.685,1765,3.262,1766,1.685,1767,1.685,1768,2.644,1769,2.644,1770,1.685,1771,1.685,1772,1.564,1773,3.262,1774,1.685,1775,1.564,1776,1.564,1777,3.428,1778,1.685,1779,2.644,1780,1.564,1781,1.685,1782,1.685,1783,1.564,1784,1.685,1785,1.685,1786,2.644,1787,1.685,1788,2.644,1789,1.685,1790,1.685,1791,1.685,1792,1.685,1793,1.685,1794,2.644,1795,2.644,1796,3.262,1797,3.262,1798,1.685,1799,2.644,1800,2.644,1801,3.262,1802,3.694,1803,1.685,1804,1.685,1805,2.644,1806,1.685,1807,1.685,1808,1.685,1809,1.685,1810,1.685,1811,1.685,1812,1.685,1813,1.685,1814,1.685,1815,1.685,1816,1.685,1817,2.644,1818,1.685,1819,1.685,1820,1.685,1821,1.685,1822,3.262,1823,1.685,1824,1.685,1825,1.685,1826,1.685,1827,1.685,1828,1.685]],["title/interfaces/objectSceneInterface.html",[135,0.172,1021,1.879]],["body/interfaces/objectSceneInterface.html",[1,1.482,3,0.075,4,0.075,5,0.065,8,0.056,19,0.312,25,0.015,27,0.104,30,0.2,31,2.15,34,1.143,38,0.223,48,0.093,52,0.226,53,0.065,54,1.37,60,0.144,61,0.075,62,0.418,63,0.602,64,0.942,66,0.784,69,1.557,71,1.37,79,1.374,80,0.503,87,0.006,88,0.006,91,0.178,96,0.881,105,0.923,106,1.435,109,0.581,132,0.86,135,0.224,172,0.794,173,0.825,175,1.063,181,0.825,182,0.736,186,2.06,187,0.857,200,2.06,201,1.809,202,0.933,203,1.248,204,1.833,207,2.656,208,0.765,209,0.795,210,0.765,211,0.795,213,0.795,218,0.973,221,1.228,222,1.37,226,1.113,229,1.595,230,1.37,231,2.033,232,0.765,233,1.928,266,0.973,311,0.736,320,1.833,322,3.294,329,1.97,330,1.113,336,2.151,359,0.682,364,1.172,373,0.795,402,1.456,404,1.298,409,1.602,424,1.928,425,1.37,428,1.456,429,1.062,430,1.465,432,1.228,442,1.864,445,0.945,462,1.032,463,2.508,464,2.612,465,1.736,478,0.795,479,1.062,500,1.971,515,2.286,531,1.928,548,2.151,563,1.928,582,1.228,585,1.294,679,1.569,778,1.37,781,2.465,827,2.286,931,2.227,968,1.456,992,1.456,993,1.456,994,1.456,995,1.456,1020,1.897,1021,2.819,1024,4.2,1027,1.228,1028,1.928,1125,4.521,1171,3.198,1183,2.823,1301,2.444,1324,2.444,1356,0.355,1403,1.456,1412,1.557,1416,3.198,1478,2.444,1483,2.444,1490,1.456,1566,3.419,1572,2.444,1573,2.444,1574,3.252,1575,1.677,1576,2.634,1577,2.634,1578,3.252,1579,1.677,1580,4.004,1581,4.124,1582,4.004,1583,3.018,1584,4.004,1585,4.124,1586,4.445,1587,2.634,1588,2.634,1589,4.004,1590,1.677,1591,1.677,1592,1.677,1593,2.634,1594,1.677,1595,1.677,1596,2.634,1597,1.677,1598,1.677,1599,1.677,1600,1.677,1601,1.677,1602,1.677,1603,1.677,1604,1.677,1605,1.677,1606,1.677,1607,1.677,1608,2.634,1609,1.677,1610,1.677,1611,4.25,1612,1.677,1613,2.634,1614,3.252,1615,1.677,1616,2.634,1617,3.252,1618,2.634,1619,1.677,1620,3.252,1621,1.677,1622,1.677,1623,1.677,1624,1.677,1625,1.677,1626,1.677,1627,1.677,1628,1.677,1629,1.677,1630,1.677,1631,3.252,1632,4.25,1633,4.004,1634,1.677,1635,1.677,1636,2.634,1637,2.634,1638,1.677,1639,2.634,1640,1.677,1641,1.677,1642,1.677,1643,3.252,1644,1.677,1645,1.677,1646,4.445,1647,1.677,1648,3.685,1649,2.634,1650,1.677,1651,1.677,1652,1.677,1653,1.677,1654,1.677,1655,1.677,1656,1.677,1657,1.677,1658,1.677,1659,1.677,1660,1.677,1661,2.634,1662,3.685,1663,1.677,1664,2.634,1665,2.634,1666,2.634,1667,3.685,1668,1.677,1669,3.252,1670,1.677,1671,1.677,1672,1.677,1673,1.677,1674,1.677,1675,2.634,1676,2.634,1677,2.634,1678,2.634,1679,2.634,1680,1.677,1681,1.677,1682,1.557,1683,1.677,1684,1.677,1685,1.677,1686,1.677,1687,1.677,1688,1.677,1689,1.677,1690,1.677,1691,1.677,1692,2.634,1693,1.677,1694,1.677,1695,1.677,1696,1.677,1697,1.677,1698,3.252,1699,1.677,1700,1.677,1701,2.634,1702,3.252,1703,1.677,1704,1.677,1705,3.252,1706,1.677,1707,1.677,1708,1.677,1709,2.634,1710,3.252,1711,1.677,1712,2.634,1713,2.634,1714,1.677,1715,1.677,1716,1.677,1717,1.677,1718,1.677,1719,2.634,1720,3.252,1721,1.677,1722,1.677,1723,1.677,1724,2.634,1725,3.252,1726,1.677,1727,2.634,1728,1.677,1729,2.634,1730,3.252,1731,1.677,1732,1.677,1733,2.444,1734,1.677,1735,2.634,1736,1.677,1737,1.677,1738,1.677,1739,1.677,1740,1.677,1741,1.677,1742,3.685,1743,3.252,1744,1.677,1745,1.677,1746,1.677,1747,1.677,1748,1.677,1749,1.677,1750,2.444,1751,4.25,1752,2.634,1753,2.634,1754,2.634,1755,2.634,1756,2.634,1757,2.444,1758,2.634,1759,2.634,1760,2.634,1761,2.634,1762,2.634,1763,2.634,1764,1.677,1765,3.252,1766,1.677,1767,1.677,1768,2.634,1769,2.634,1770,1.677,1771,1.677,1772,1.557,1773,3.252,1774,1.677,1775,1.557,1776,1.557,1777,3.419,1778,1.677,1779,2.634,1780,1.557,1781,1.677,1782,1.677,1783,1.557,1784,1.677,1785,1.677,1786,2.634,1787,1.677,1788,2.634,1789,1.677,1790,1.677,1791,1.677,1792,1.677,1793,1.677,1794,2.634,1795,2.634,1796,3.252,1797,3.252,1798,1.677,1799,2.634,1800,2.634,1801,3.252,1802,3.685,1803,1.677,1804,1.677,1805,2.634,1806,1.677,1807,1.677,1808,1.677,1809,1.677,1810,1.677,1811,1.677,1812,1.677,1813,1.677,1814,1.677,1815,1.677,1816,1.677,1817,2.634,1818,1.677,1819,1.677,1820,1.677,1821,1.677,1822,3.252,1823,1.677,1824,1.677,1825,1.677,1826,1.677,1827,1.677,1828,1.677]],["title/interfaces/option.html",[135,0.172,356,2.186]],["body/interfaces/option.html",[0,0.391,3,0.161,4,0.161,5,0.141,8,0.122,19,0.675,25,0.015,26,0.506,27,0.152,30,0.224,38,0.322,48,0.202,52,0.232,53,0.141,58,0.705,59,0.675,60,0.232,61,0.161,62,0.335,80,0.334,87,0.011,88,0.011,91,0.308,92,0.868,101,1.091,103,0.868,109,1.006,124,1.006,126,0.507,131,0.834,133,0.868,134,0.705,135,0.327,176,1.594,342,2.659,343,2.804,344,3.153,347,1.721,348,2.659,349,3.153,350,3.153,351,3.153,352,3.521,353,3.849,354,3.153,355,3.264,356,3.849,357,4.541,358,3.339,359,1.856,360,3.153,361,3.021,362,3.339,363,3.153,364,0.965,365,3.153,1356,0.768]],["title/interfaces/optionRangeQueryData.html",[135,0.172,1262,2.186]],["body/interfaces/optionRangeQueryData.html",[0,0.336,3,0.128,4,0.128,5,0.112,8,0.097,25,0.015,26,0.265,27,0.148,30,0.241,38,0.3,48,0.161,52,0.222,53,0.112,58,0.56,59,0.536,60,0.213,61,0.128,62,0.327,63,0.566,64,0.835,66,0.81,80,0.361,87,0.01,88,0.01,91,0.264,92,0.689,96,0.689,101,0.938,103,0.689,123,1.01,124,1.054,126,0.622,131,0.662,133,0.689,134,0.56,135,0.304,145,2.275,165,0.903,172,1.183,173,0.903,175,1.066,181,0.903,182,1.399,185,1.657,205,2.111,219,1.747,253,1.366,272,1.604,355,1.747,361,1.747,364,1.165,384,2.355,445,0.838,459,2.285,462,1.13,493,1.721,500,1.813,616,1.366,672,1.421,679,1.13,697,1.604,700,1.604,1020,1.858,1137,3.692,1150,3.692,1243,2.355,1244,4.153,1248,2.503,1249,3.44,1251,4.153,1252,3.027,1253,2.503,1254,3.405,1255,3.862,1257,3.405,1258,2.503,1259,2.503,1261,3.027,1262,3.44,1263,3.405,1264,3.405,1265,3.405,1266,2.503,1267,3.869,1268,2.503,1269,2.503,1270,2.503,1271,2.503,1272,2.503,1273,2.503,1274,2.503,1275,2.503,1276,2.503,1277,2.503,1278,3.405,1279,2.503,1280,2.503,1281,2.503,1282,2.503,1283,2.503,1284,3.405,1285,2.503,1286,2.503,1287,2.503,1288,2.503,1289,2.503,1290,3.405,1291,4.153,1292,2.503,1293,3.405,1294,4.343,1295,2.503,1296,3.869,1297,2.503,1298,2.503,1356,0.61]],["title/interfaces/optionSelectQueryData.html",[135,0.172,1261,2.186]],["body/interfaces/optionSelectQueryData.html",[0,0.338,3,0.129,4,0.129,5,0.113,8,0.097,25,0.015,26,0.267,27,0.145,30,0.242,38,0.307,48,0.162,52,0.223,53,0.113,58,0.564,59,0.54,60,0.213,61,0.129,62,0.328,63,0.568,64,0.837,66,0.812,80,0.362,87,0.01,88,0.01,91,0.266,92,0.694,96,0.694,101,0.942,103,0.694,123,1.681,124,1.057,126,0.624,131,0.667,133,0.694,134,0.564,135,0.305,145,2.286,165,0.91,172,1.189,173,0.91,175,1.069,181,0.91,182,1.402,185,1.665,205,2.125,219,1.759,253,1.376,272,1.615,355,1.759,361,1.759,364,1.094,384,2.372,445,0.843,459,2.293,462,1.138,493,1.729,500,1.82,616,1.376,672,1.431,679,1.138,697,1.615,700,1.615,1020,1.867,1137,2.241,1150,2.241,1243,2.372,1244,4.164,1248,2.521,1249,3.452,1251,4.164,1252,3.041,1253,2.521,1254,3.421,1255,3.871,1257,3.421,1258,2.521,1259,2.521,1261,3.452,1262,3.041,1263,3.421,1264,3.421,1265,3.421,1266,2.521,1267,3.883,1268,2.521,1269,2.521,1270,2.521,1271,2.521,1272,2.521,1273,2.521,1274,2.521,1275,2.521,1276,2.521,1277,2.521,1278,3.421,1279,2.521,1280,2.521,1281,2.521,1282,2.521,1283,2.521,1284,3.421,1285,2.521,1286,2.521,1287,2.521,1288,2.521,1289,2.521,1290,3.421,1291,4.164,1292,2.521,1293,3.421,1294,4.354,1295,2.521,1296,3.883,1297,2.521,1298,2.521,1356,0.614]],["title/interfaces/projectInformation.html",[127,1.794,135,0.172]],["body/interfaces/projectInformation.html",[0,0.342,3,0.131,4,0.131,5,0.115,8,0.099,19,0.549,25,0.015,26,0.497,27,0.112,30,0.31,34,1.539,38,0.322,48,0.165,52,0.236,53,0.115,58,0.574,59,0.549,60,0.215,61,0.131,62,0.331,63,0.666,64,0.841,66,0.817,80,0.464,87,0.01,88,0.01,91,0.269,92,0.706,96,0.706,101,0.953,103,0.706,109,1.207,124,0.995,126,0.412,127,3.366,128,1.79,130,2.037,131,0.678,133,0.706,134,0.574,135,0.274,144,2.775,151,2.169,161,1.714,162,2.214,163,1.96,165,1.513,171,1.79,175,0.706,176,1.749,179,1.248,180,2.775,200,1.871,219,1.79,359,1.202,373,1.889,445,1.569,493,1.296,690,1.643,780,2.742,781,1.714,828,2.742,922,4.188,931,2.687,981,4.484,999,2.742,1005,3.483,1007,2.955,1008,5.082,1010,2.955,1012,2.955,1013,3.918,1015,2.955,1016,2.955,1018,2.955,1020,1.889,1021,2.645,1022,3.077,1023,3.987,1024,2.162,1025,2.742,1026,2.742,1027,2.162,1028,2.162,1029,2.955,1030,2.955,1031,4.513,1032,2.955,1033,2.955,1034,2.955,1035,2.955,1036,2.955,1356,0.625]],["title/interfaces/projectServerInformation.html",[128,1.716,135,0.172]],["body/interfaces/projectServerInformation.html",[0,0.341,3,0.131,4,0.131,5,0.115,8,0.099,19,0.547,25,0.015,26,0.464,27,0.112,30,0.31,34,1.538,38,0.324,48,0.164,52,0.236,53,0.115,58,0.572,59,0.547,60,0.214,61,0.131,62,0.331,63,0.665,64,0.841,66,0.816,80,0.464,87,0.01,88,0.01,91,0.268,92,0.704,96,0.704,101,0.951,103,0.704,109,1.206,124,0.993,126,0.411,127,3.363,128,2.411,130,2.035,131,0.677,133,0.704,134,0.572,135,0.274,144,3.508,151,2.168,161,1.709,162,2.211,163,1.954,165,1.512,171,1.785,175,0.704,176,1.746,179,1.245,180,2.77,200,1.866,219,1.785,359,1.619,373,1.885,445,1.607,493,1.293,690,1.639,780,2.734,781,1.709,828,2.734,922,4.182,931,2.213,981,2.734,999,2.734,1005,3.478,1007,2.946,1008,5.079,1010,2.946,1012,2.946,1013,3.912,1015,2.946,1016,2.946,1018,2.946,1020,1.885,1021,2.64,1022,3.071,1023,3.98,1024,2.156,1025,2.734,1026,2.734,1027,2.156,1028,2.156,1029,4.826,1030,2.946,1031,4.507,1032,2.946,1033,2.946,1034,2.946,1035,2.946,1036,2.946,1356,0.623]],["title/properties.html",[91,0.23,1452,2.859]],["body/properties.html",[25,0.014,87,0.013,88,0.013,91,0.314,1830,6.502,1831,6.502]],["title/interfaces/queryData.html",[135,0.172,1255,2.186]],["body/interfaces/queryData.html",[0,0.339,3,0.13,4,0.13,5,0.113,22,1.022,25,0.015,26,0.268,27,0.111,30,0.243,38,0.304,48,0.163,52,0.223,53,0.113,58,0.566,59,0.542,60,0.214,61,0.13,62,0.329,63,0.569,64,0.838,66,0.813,80,0.363,87,0.01,88,0.01,92,0.697,96,0.697,101,0.945,103,0.697,123,1.022,124,1.059,126,0.625,131,0.67,133,0.697,134,0.566,135,0.305,145,2.292,165,0.913,172,1.192,173,0.913,175,1.072,181,0.913,182,1.404,185,1.669,205,2.134,219,1.766,253,1.381,272,1.622,355,1.766,361,1.766,364,1.095,384,2.381,445,0.847,459,2.298,462,1.143,493,1.734,500,1.824,616,1.381,672,1.436,679,1.143,697,2.198,700,1.622,1020,1.872,1137,2.25,1150,2.25,1243,2.381,1244,4.172,1248,2.531,1249,3.46,1251,4.172,1252,3.05,1253,2.531,1254,3.43,1255,3.997,1257,3.43,1258,2.531,1259,2.531,1261,3.46,1262,3.46,1263,3.43,1264,3.43,1265,3.43,1266,2.531,1267,3.891,1268,2.531,1269,2.531,1270,2.531,1271,2.531,1272,2.531,1273,2.531,1274,2.531,1275,2.531,1276,2.531,1277,2.531,1278,3.43,1279,2.531,1280,2.531,1281,2.531,1282,2.531,1283,2.531,1284,3.43,1285,2.531,1286,2.531,1287,2.531,1288,2.531,1289,2.531,1290,3.43,1291,4.172,1292,2.531,1293,3.43,1294,4.36,1295,2.531,1296,3.891,1297,2.531,1298,2.531,1356,0.617,1357,3.531,1832,4.066]],["title/interfaces/rangeFilter.html",[135,0.172,362,2.073]],["body/interfaces/rangeFilter.html",[0,0.39,3,0.161,4,0.161,5,0.141,8,0.121,19,0.673,25,0.015,26,0.458,27,0.159,30,0.223,38,0.311,48,0.202,52,0.232,53,0.141,58,0.703,59,0.673,60,0.232,61,0.161,62,0.334,80,0.333,87,0.011,88,0.011,91,0.307,92,0.866,101,1.088,103,0.866,109,1.003,124,1.003,126,0.505,131,0.831,133,0.866,134,0.703,135,0.327,176,1.588,342,2.65,343,2.794,344,3.143,347,1.715,348,2.65,349,3.143,350,3.143,351,3.143,352,3.513,353,4.032,354,3.143,355,3.165,356,3.513,357,3.143,358,3.332,359,2.026,360,3.143,361,3.165,362,3.644,363,4.535,364,1.162,365,4.535,1356,0.766]],["title/interfaces/reportResponse.html",[135,0.172,1022,2.186]],["body/interfaces/reportResponse.html",[0,0.297,3,0.107,4,0.107,5,0.094,8,0.081,19,0.448,25,0.015,26,0.431,27,0.141,30,0.213,31,1.869,38,0.319,52,0.197,53,0.094,58,0.468,59,0.448,60,0.18,61,0.154,62,0.39,63,0.636,64,0.79,66,0.813,80,0.318,87,0.009,88,0.009,91,0.233,126,0.617,135,0.147,142,3.239,145,1.4,215,3.775,219,1.462,229,1.462,232,1.1,241,3.036,253,1.641,339,4.416,347,1.143,364,0.732,373,2.22,393,3.775,460,1.462,462,1.836,463,2.649,464,1.706,500,2.246,545,2.413,598,3.071,616,1.143,629,4.05,679,0.945,693,2.098,824,3.775,931,2.253,1005,3.967,1013,4.068,1020,2.22,1022,3.967,1037,2.631,1045,2.922,1047,2.922,1049,2.922,1051,2.922,1052,4.905,1054,4.905,1055,2.922,1056,4.193,1058,2.922,1059,5.359,1061,2.413,1062,5.907,1063,2.922,1064,2.922,1065,2.922,1066,2.922,1067,4.193,1068,2.922,1069,2.922,1070,2.922,1071,2.922,1072,4.193,1073,6.916,1074,4.193,1075,6.338,1076,5.359,1077,4.193,1078,2.922,1079,4.193,1080,5.675,1081,2.922,1082,2.922,1083,4.193,1084,6.687,1085,6.084,1086,4.905,1087,5.109,1088,4.193,1089,4.193,1090,4.905,1091,2.922,1092,2.922,1093,5.109,1094,5.604,1095,5.359,1096,4.905,1097,4.905,1098,4.905,1099,5.675,1100,5.675,1101,5.907,1102,6.084,1103,2.922,1104,6.225,1105,5.318,1106,2.922,1107,2.922,1108,2.922,1109,5.359,1110,2.922,1111,4.905,1112,2.922,1113,5.359,1114,5.359,1115,5.706,1116,4.905,1117,5.359,1118,2.922,1119,4.905,1120,2.922,1121,2.922,1122,4.193,1123,6.084,1124,4.193,1125,3.842,1126,2.922,1127,5.359,1128,4.193,1129,4.193,1130,4.193,1131,2.922,1132,4.193,1133,4.193,1134,4.193,1135,2.922,1136,2.922,1137,3.617,1138,4.426,1139,4.905,1140,4.193,1141,3.775,1142,2.631,1143,2.922,1144,4.193,1145,2.922,1146,2.922,1147,2.922,1148,4.193,1149,4.193,1150,2.672,1151,4.193,1152,2.922,1153,2.922,1154,2.922,1155,2.922,1156,2.922,1157,2.922,1158,2.922,1159,4.193,1160,2.922,1161,4.416,1162,2.922,1163,2.922,1164,4.193,1165,4.193,1166,4.193,1167,2.922,1168,2.922,1169,2.922,1170,2.922,1171,2.095,1172,2.922,1173,2.922,1174,2.922,1175,2.922,1176,2.922,1177,2.922,1178,2.922,1179,4.193,1180,2.922,1181,2.922,1182,2.922,1183,2.095,1184,2.922,1185,2.922,1186,2.922,1187,2.922,1188,2.922,1189,2.922,1190,2.922,1191,2.922,1192,2.922,1193,4.193,1194,2.922,1195,2.922,1196,2.922,1197,2.922,1198,2.922,1199,2.922,1200,2.922,1201,2.922,1202,2.922,1203,2.922,1204,2.922,1205,2.922,1206,2.922,1207,2.922,1356,0.51,1833,4.828]],["title/interfaces/roomData.html",[135,0.172,931,1.575]],["body/interfaces/roomData.html",[0,0.335,3,0.128,4,0.128,5,0.112,8,0.096,19,0.534,25,0.015,26,0.494,27,0.14,28,1.272,30,0.307,34,1.533,38,0.325,48,0.16,52,0.234,53,0.112,58,0.558,59,0.534,60,0.212,61,0.128,62,0.326,63,0.663,64,0.834,66,0.809,80,0.459,87,0.01,88,0.01,91,0.264,92,0.687,96,0.687,101,0.935,103,0.687,109,1.2,124,0.98,126,0.4,127,3.265,128,1.74,130,2.02,131,0.66,133,0.687,134,0.558,135,0.27,144,3.477,151,2.157,161,1.666,162,2.192,163,1.905,165,1.496,171,1.74,175,0.687,176,1.716,179,1.213,180,2.722,200,1.819,219,1.74,359,1.168,373,1.853,445,1.581,493,1.26,690,1.597,780,3.63,781,2.269,828,2.665,922,4.128,931,2.474,981,2.665,999,2.665,1005,3.433,1007,2.872,1008,5.052,1010,2.872,1012,2.872,1013,3.861,1015,2.872,1016,2.872,1018,2.872,1020,2.263,1021,3.168,1022,3.019,1023,3.912,1024,2.863,1025,3.63,1026,4.432,1027,3.495,1028,3.495,1029,2.872,1030,2.872,1031,4.448,1032,2.872,1033,2.872,1034,2.872,1035,2.872,1036,2.872,1356,0.607]],["title/interfaces/roomData-1.html",[135,0.143,781,1.37,931,1.313]],["body/interfaces/roomData-1.html",[1,1.495,3,0.076,4,0.076,5,0.066,8,0.057,19,0.316,25,0.015,27,0.048,30,0.202,31,2.157,34,1.15,38,0.183,48,0.095,52,0.227,53,0.066,54,1.389,60,0.146,61,0.076,62,0.419,63,0.604,64,0.943,66,0.787,69,1.578,71,1.389,79,1.386,80,0.504,87,0.007,88,0.007,91,0.179,96,0.887,105,0.933,106,1.443,109,0.587,132,0.872,135,0.225,172,0.803,173,0.834,175,1.068,181,0.834,182,0.744,186,2.078,187,0.866,200,2.078,201,1.825,202,0.946,203,1.261,204,1.853,207,2.679,208,0.775,209,0.806,210,0.775,211,0.806,213,0.806,218,0.986,221,1.244,222,1.389,226,1.128,229,1.613,230,1.389,231,2.055,232,0.775,233,1.948,266,0.986,311,0.746,320,1.853,322,3.308,329,1.987,330,1.128,336,2.174,359,1.083,364,1.14,373,0.806,402,1.476,404,1.312,409,1.616,424,1.948,425,1.389,428,1.476,429,1.077,430,1.481,432,1.244,442,1.875,445,0.773,462,1.043,463,2.516,464,2.619,465,1.751,478,0.806,479,1.077,500,1.978,515,2.311,531,1.948,548,2.174,563,1.948,582,1.244,585,1.312,679,1.579,778,1.389,781,2.479,827,2.311,931,2.377,968,1.476,992,1.476,993,1.476,994,1.476,995,1.476,1020,2.025,1021,2.963,1024,4.205,1027,1.244,1028,2.949,1125,4.534,1171,3.222,1183,2.848,1301,2.47,1324,2.47,1356,0.36,1403,1.476,1412,1.578,1416,3.222,1478,2.47,1483,2.47,1490,1.476,1566,3.445,1572,2.47,1573,2.47,1574,3.281,1575,1.7,1576,2.662,1577,2.662,1578,3.281,1579,1.7,1580,2.662,1581,3.966,1582,2.662,1583,2.47,1584,2.662,1585,3.966,1586,3.712,1587,2.662,1588,2.662,1589,4.03,1590,1.7,1591,1.7,1592,1.7,1593,2.662,1594,1.7,1595,1.7,1596,2.662,1597,1.7,1598,1.7,1599,1.7,1600,1.7,1601,1.7,1602,1.7,1603,1.7,1604,1.7,1605,1.7,1606,1.7,1607,1.7,1608,2.662,1609,1.7,1610,1.7,1611,4.274,1612,1.7,1613,2.662,1614,3.281,1615,1.7,1616,2.662,1617,3.281,1618,2.662,1619,1.7,1620,3.281,1621,1.7,1622,1.7,1623,1.7,1624,1.7,1625,1.7,1626,1.7,1627,1.7,1628,1.7,1629,1.7,1630,1.7,1631,3.281,1632,4.274,1633,4.03,1634,1.7,1635,1.7,1636,2.662,1637,2.662,1638,1.7,1639,2.662,1640,1.7,1641,1.7,1642,1.7,1643,3.281,1644,1.7,1645,1.7,1646,4.467,1647,1.7,1648,3.712,1649,2.662,1650,1.7,1651,1.7,1652,1.7,1653,1.7,1654,1.7,1655,1.7,1656,1.7,1657,1.7,1658,1.7,1659,1.7,1660,1.7,1661,2.662,1662,3.712,1663,1.7,1664,2.662,1665,2.662,1666,2.662,1667,3.712,1668,1.7,1669,3.281,1670,1.7,1671,1.7,1672,1.7,1673,1.7,1674,1.7,1675,2.662,1676,2.662,1677,2.662,1678,2.662,1679,2.662,1680,1.7,1681,1.7,1682,1.578,1683,1.7,1684,1.7,1685,1.7,1686,1.7,1687,1.7,1688,1.7,1689,1.7,1690,1.7,1691,1.7,1692,2.662,1693,1.7,1694,1.7,1695,1.7,1696,1.7,1697,1.7,1698,3.281,1699,1.7,1700,1.7,1701,2.662,1702,3.281,1703,1.7,1704,1.7,1705,3.281,1706,1.7,1707,1.7,1708,1.7,1709,2.662,1710,3.281,1711,1.7,1712,2.662,1713,2.662,1714,1.7,1715,1.7,1716,1.7,1717,1.7,1718,1.7,1719,2.662,1720,3.281,1721,1.7,1722,1.7,1723,1.7,1724,2.662,1725,3.281,1726,1.7,1727,2.662,1728,1.7,1729,2.662,1730,3.281,1731,1.7,1732,1.7,1733,2.47,1734,1.7,1735,2.662,1736,1.7,1737,1.7,1738,1.7,1739,1.7,1740,1.7,1741,1.7,1742,3.712,1743,3.281,1744,1.7,1745,1.7,1746,1.7,1747,1.7,1748,1.7,1749,1.7,1750,2.47,1751,4.274,1752,2.662,1753,2.662,1754,2.662,1755,2.662,1756,2.662,1757,2.47,1758,2.662,1759,2.662,1760,2.662,1761,2.662,1762,2.662,1763,2.662,1764,1.7,1765,3.281,1766,1.7,1767,1.7,1768,2.662,1769,2.662,1770,1.7,1771,1.7,1772,1.578,1773,3.281,1774,1.7,1775,1.578,1776,1.578,1777,3.445,1778,1.7,1779,2.662,1780,1.578,1781,1.7,1782,1.7,1783,1.578,1784,1.7,1785,1.7,1786,2.662,1787,1.7,1788,2.662,1789,1.7,1790,1.7,1791,1.7,1792,1.7,1793,1.7,1794,2.662,1795,2.662,1796,3.281,1797,3.281,1798,1.7,1799,2.662,1800,2.662,1801,3.281,1802,3.712,1803,1.7,1804,1.7,1805,2.662,1806,1.7,1807,1.7,1808,1.7,1809,1.7,1810,1.7,1811,1.7,1812,1.7,1813,1.7,1814,1.7,1815,1.7,1816,1.7,1817,2.662,1818,1.7,1819,1.7,1820,1.7,1821,1.7,1822,3.281,1823,1.7,1824,1.7,1825,1.7,1826,1.7,1827,1.7,1828,1.7]],["title/interfaces/roomSpanSettings.html",[135,0.172,1401,3.088]],["body/interfaces/roomSpanSettings.html",[1,1.427,3,0.07,4,0.07,5,0.062,8,0.105,19,0.294,25,0.015,26,0.4,27,0.109,30,0.155,31,1.507,38,0.174,48,0.088,52,0.212,53,0.062,60,0.07,61,0.07,62,0.413,63,0.49,64,0.915,66,0.73,71,2.913,79,2.264,80,0.499,87,0.006,88,0.006,91,0.17,96,0.378,105,1.452,106,1.717,132,0.811,135,0.096,172,1.25,175,0.378,187,0.818,201,0.88,202,1.984,207,2.557,208,0.721,209,0.75,210,0.721,211,0.75,213,0.75,221,1.158,226,1.05,230,1.292,241,1.459,266,1.816,269,1.05,311,0.694,312,1.668,314,1.101,320,1.751,322,3.616,325,3.046,326,1.916,329,1.896,330,1.05,332,1.725,336,1.292,341,5.019,342,2.291,348,1.841,364,1.167,404,1.239,409,2.583,429,1.002,430,1.399,442,2.48,445,0.46,463,2.583,464,2.583,465,2.541,470,2.742,472,1.582,478,0.75,479,1.002,500,0.644,563,1.841,566,1.841,582,1.158,585,1.221,586,2.516,598,2.305,610,2.334,627,3.096,781,3.042,808,1.725,892,1.725,895,2.516,931,1.984,941,2.742,942,2.742,943,3.889,945,1.725,946,1.469,950,3.046,954,1.916,992,2.184,993,1.374,994,1.374,995,2.184,996,1.916,1020,1.192,1021,1.668,1024,2.291,1025,1.469,1026,3.31,1027,1.841,1028,1.841,1087,4.519,1093,2.742,1094,1.725,1105,2.742,1115,2.742,1138,1.582,1141,3.889,1142,2.742,1161,1.725,1329,1.916,1356,0.335,1398,1.916,1401,3.889,1488,1.916,1490,1.374,1572,3.31,1573,3.31,1581,3.846,1583,2.334,1585,3.846,1682,1.469,1733,3.612,1750,3.846,1757,2.334,1772,2.334,1775,1.469,1776,1.469,1777,3.31,1780,3.31,1783,1.469,1834,4.974,1835,4.974,1836,4.974,1837,4.974,1838,5.428,1839,3.507,1840,3.507,1841,2.206,1842,2.206,1843,2.206,1844,2.206,1845,2.206,1846,2.206,1847,6.288,1848,6.288,1849,2.206,1850,2.206,1851,2.206,1852,2.206,1853,2.206,1854,2.206,1855,2.206,1856,2.206,1857,3.507,1858,2.206,1859,2.206,1860,2.206,1861,2.206,1862,2.206,1863,2.206,1864,2.206,1865,2.206,1866,2.206,1867,2.206,1868,2.206,1869,2.206,1870,2.206,1871,2.206,1872,4.365,1873,2.206,1874,2.206,1875,2.206,1876,2.206,1877,2.206,1878,3.507,1879,2.206,1880,2.206,1881,2.206,1882,2.206,1883,4.974,1884,5.428,1885,3.507,1886,2.206,1887,2.206,1888,2.206,1889,4.365,1890,2.206,1891,2.206,1892,3.507,1893,2.206,1894,2.206,1895,2.206,1896,2.206,1897,2.206,1898,2.206,1899,4.365,1900,2.206,1901,2.206,1902,2.206,1903,2.206,1904,2.206,1905,2.206,1906,2.206,1907,3.507,1908,2.206,1909,2.206,1910,2.206,1911,2.206,1912,6.059,1913,5.779,1914,5.428,1915,5.779,1916,2.206,1917,2.206,1918,2.206,1919,3.507,1920,4.365,1921,2.206,1922,7.473,1923,2.206,1924,2.206,1925,3.507,1926,2.206,1927,2.206,1928,2.206,1929,4.365,1930,2.206,1931,2.206,1932,4.365,1933,2.206,1934,4.365,1935,2.206,1936,4.365,1937,2.206,1938,4.365,1939,2.206,1940,2.206,1941,4.365,1942,2.206,1943,4.974,1944,4.974,1945,4.365,1946,5.779,1947,6.059,1948,2.206,1949,2.206,1950,5.779,1951,2.206,1952,3.507,1953,3.507,1954,2.206,1955,2.206,1956,6.639,1957,2.206,1958,2.206,1959,2.206,1960,2.206,1961,2.206,1962,4.974,1963,4.974,1964,6.059,1965,4.365,1966,2.206,1967,2.206,1968,2.206,1969,2.206,1970,2.206,1971,4.974,1972,3.507,1973,4.365,1974,4.974,1975,4.365,1976,5.428,1977,2.206,1978,6.059,1979,2.206,1980,4.365,1981,2.206,1982,2.206,1983,2.206,1984,3.507,1985,2.206,1986,2.206,1987,2.206,1988,3.507,1989,2.206,1990,2.206,1991,2.206,1992,2.206,1993,2.206,1994,2.206,1995,2.206,1996,2.206,1997,2.206,1998,2.206,1999,2.206,2000,2.206,2001,2.206,2002,2.206,2003,3.507,2004,4.365,2005,2.206,2006,2.206,2007,2.206,2008,2.206,2009,2.206,2010,2.206,2011,2.206,2012,2.206,2013,2.206,2014,2.206,2015,5.428,2016,2.206,2017,2.206,2018,2.206,2019,3.507,2020,2.206,2021,2.206,2022,3.507,2023,2.206,2024,3.507,2025,2.206,2026,2.206,2027,3.507,2028,2.206,2029,2.206,2030,2.206,2031,4.974,2032,2.206,2033,2.206,2034,2.206,2035,2.206,2036,2.206,2037,4.365,2038,2.206,2039,3.507,2040,6.059,2041,2.206,2042,2.206,2043,4.365,2044,2.206,2045,3.507,2046,3.507,2047,2.206,2048,2.206,2049,4.365,2050,3.507,2051,4.974,2052,4.365,2053,2.206,2054,2.206,2055,3.507,2056,2.206,2057,2.206,2058,2.206,2059,2.206,2060,2.206,2061,2.206,2062,2.206,2063,2.206,2064,2.206,2065,2.206,2066,2.206,2067,2.206,2068,2.206,2069,2.206,2070,2.206,2071,2.206,2072,2.206,2073,3.507,2074,4.365,2075,4.365,2076,3.507,2077,2.206,2078,3.507,2079,2.206,2080,2.206,2081,2.206,2082,2.206,2083,2.206,2084,5.779,2085,5.779,2086,2.206,2087,3.507,2088,3.507,2089,2.206,2090,4.365,2091,2.206,2092,2.206,2093,2.206,2094,2.206,2095,4.365,2096,4.365,2097,4.365,2098,4.365,2099,2.206]],["title/interfaces/selectFilter.html",[135,0.172,358,2.073]],["body/interfaces/selectFilter.html",[0,0.392,3,0.162,4,0.162,5,0.142,8,0.122,19,0.678,25,0.015,26,0.46,27,0.157,30,0.224,38,0.311,48,0.203,52,0.233,53,0.142,58,0.708,59,0.678,60,0.233,61,0.162,62,0.336,80,0.336,87,0.011,88,0.011,91,0.308,92,0.872,101,1.094,103,0.872,109,1.008,124,1.008,126,0.509,131,0.838,133,0.872,134,0.708,135,0.328,176,1.601,342,2.67,343,2.816,344,3.167,347,1.729,348,2.67,349,3.167,350,3.167,351,3.167,352,3.53,353,4.043,354,3.167,355,3.269,356,4.043,357,3.167,358,3.657,359,2.033,360,4.548,361,3.027,362,3.348,363,3.167,364,0.967,365,3.167,1356,0.771]],["title/interfaces/shopData.html",[135,0.172,693,1.716]],["body/interfaces/shopData.html",[0,0.359,3,0.114,4,0.114,5,0.1,8,0.086,25,0.015,26,0.236,27,0.102,30,0.28,34,1.531,38,0.316,48,0.202,52,0.213,53,0.1,58,0.498,59,0.477,60,0.232,61,0.161,62,0.188,63,0.637,64,0.678,66,0.777,80,0.418,87,0.009,88,0.009,91,0.244,92,0.614,96,0.614,101,0.865,103,0.865,105,0.899,109,1.2,124,0.924,126,0.766,130,1.642,131,0.589,133,1.147,134,0.498,135,0.343,151,2.081,162,1.588,165,1.425,172,1.502,173,0.804,175,0.614,179,1.77,181,0.804,182,1.172,183,1.428,184,2.012,185,1.528,203,1.714,232,1.17,347,1.216,359,1.851,364,1.053,368,1.555,442,1.588,445,1.446,459,2.148,460,1.555,461,2.757,462,1.006,463,1.265,464,1.265,465,1.37,477,2.783,480,1.855,481,1.316,482,1.555,493,1.588,495,1.703,498,1.703,522,2.539,523,1.489,524,1.489,525,1.703,598,2.331,616,2.156,660,1.703,672,1.265,674,1.703,675,1.879,676,1.879,678,1.879,679,2.081,688,3.067,689,1.879,690,1.428,691,2.099,692,1.786,693,2.757,694,2.654,695,2.78,696,2.78,697,1.428,698,3.302,699,2.4,700,1.428,701,1.879,702,1.879,703,1.786,704,3.067,705,2.648,706,1.879,707,1.879,708,1.879,709,1.879,710,2.648,711,1.879,712,1.879,713,1.879,714,1.786,715,1.786,716,2.4,717,1.879,718,1.786,1356,0.543]],["title/miscellaneous/typealiases.html",[1549,2.05,2100,4.754]],["body/miscellaneous/typealiases.html",[8,0.147,25,0.015,27,0.123,40,3.1,41,2.782,50,3.1,87,0.013,88,0.013,90,3.214,116,3.949,136,2.66,146,3.394,147,3.214,278,4.076,287,4.749,295,3.812,296,3.812,343,3.389,352,3.949,355,2.66,358,3.214,361,2.66,362,3.214,1549,3.812,1552,6.558,2101,6.124,2102,6.124,2103,6.124]],["title/miscellaneous/variables.html",[1549,2.05,2104,4.129]],["body/miscellaneous/variables.html",[8,0.14,25,0.015,27,0.149,38,0.233,87,0.012,88,0.012,106,1.413,122,2.594,123,1.994,124,1.097,126,0.74,195,6.025,690,2.953,737,4.187,1061,5.309,1364,5.071,1366,6.429,1368,6.429,1369,5.071,1370,6.025,1428,5.071,1429,6.025,1439,5.071,1549,3.635,1555,6.025,2104,5.071,2105,5.838,2106,5.838,2107,6.938,2108,6.938,2109,5.838,2110,5.838,2111,5.838,2112,5.838,2113,5.838,2114,5.838,2115,5.838,2116,5.838,2117,5.838,2118,5.838,2119,5.838,2120,5.838,2121,5.838]]],"invertedIndex":[["",{"_index":25,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"dependencies.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"miscellaneous/functions.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"index.html":{},"interfaces/modelInterface.html":{},"modules.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"properties.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":500,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/PlanHousePageComponent.html":{},"injectables/ReportService.html":{},"injectables/ShopService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"coverage.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureShopData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["0.0.0",{"_index":1831,"title":{},"body":{"properties.html":{}}}],["0.05",{"_index":1774,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["0.1",{"_index":1649,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["0.10.3",{"_index":1472,"title":{},"body":{"dependencies.html":{}}}],["0.15",{"_index":1688,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["0.15.0",{"_index":1486,"title":{},"body":{"dependencies.html":{}}}],["0.176.0",{"_index":1484,"title":{},"body":{"dependencies.html":{}}}],["0.2",{"_index":1131,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["0.3",{"_index":1173,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["0.3s",{"_index":1133,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["0.6",{"_index":380,"title":{},"body":{"injectables/ClientImageControlService.html":{}}}],["0.8rem",{"_index":1167,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["0/1",{"_index":1367,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1363,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1443,"title":{},"body":{"coverage.html":{}}}],["0deg",{"_index":2079,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["0x000000",{"_index":1653,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["1",{"_index":781,"title":{"interfaces/roomData-1.html":{}},"body":{"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"index.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["1).join",{"_index":994,"title":{},"body":{"components/PlanHousePageComponent.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["1).tostring",{"_index":1343,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["1.2.1",{"_index":1468,"title":{},"body":{"dependencies.html":{}}}],["1.234.567",{"_index":396,"title":{},"body":{"pipes/CostFormatPipe.html":{}}}],["1.2rem",{"_index":1147,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["1.3rem",{"_index":1135,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["1.4.1",{"_index":1470,"title":{},"body":{"dependencies.html":{}}}],["1.5",{"_index":1600,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["1.5rem",{"_index":1112,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["1.6",{"_index":1092,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["1/1",{"_index":1404,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":1382,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":71,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/FinderService.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["10/10",{"_index":1386,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":1138,"title":{},"body":{"injectables/ReportService.html":{},"coverage.html":{},"interfaces/reportResponse.html":{},"interfaces/roomSpanSettings.html":{}}}],["1000",{"_index":1650,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["10px",{"_index":1139,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["11",{"_index":2003,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["115px",{"_index":1346,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["1250",{"_index":1349,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["13",{"_index":1570,"title":{},"body":{"index.html":{}}}],["13/14",{"_index":1392,"title":{},"body":{"coverage.html":{}}}],["135deg",{"_index":2076,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["15",{"_index":1569,"title":{},"body":{"index.html":{}}}],["15/16",{"_index":1384,"title":{},"body":{"coverage.html":{}}}],["15px",{"_index":1114,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["16.0.0",{"_index":1476,"title":{},"body":{"dependencies.html":{}}}],["16/17",{"_index":1374,"title":{},"body":{"coverage.html":{}}}],["16/19",{"_index":1380,"title":{},"body":{"coverage.html":{}}}],["16px",{"_index":1129,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["19.0.0",{"_index":1479,"title":{},"body":{"dependencies.html":{}}}],["19.1.2",{"_index":1477,"title":{},"body":{"dependencies.html":{}}}],["19.2.9",{"_index":1455,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":1024,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["2/2",{"_index":1418,"title":{},"body":{"coverage.html":{}}}],["2/3",{"_index":1427,"title":{},"body":{"coverage.html":{}}}],["2/4",{"_index":1438,"title":{},"body":{"coverage.html":{}}}],["200px",{"_index":1151,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["2025",{"_index":830,"title":{},"body":{"components/MainPageComponent.html":{}}}],["20px",{"_index":1123,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["21/23",{"_index":1397,"title":{},"body":{"coverage.html":{}}}],["24.8.2",{"_index":1481,"title":{},"body":{"dependencies.html":{}}}],["25",{"_index":1381,"title":{},"body":{"coverage.html":{}}}],["25/26",{"_index":1390,"title":{},"body":{"coverage.html":{}}}],["250",{"_index":326,"title":{},"body":{"directives/AutoHeightDirective.html":{},"interfaces/roomSpanSettings.html":{}}}],["250px",{"_index":1166,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["25px",{"_index":1126,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["2px",{"_index":1109,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["2rem",{"_index":1122,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["3",{"_index":780,"title":{},"body":{"components/ImageSliderComponent.html":{},"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["3.0.1",{"_index":1474,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":1376,"title":{},"body":{"coverage.html":{}}}],["300",{"_index":648,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["30px",{"_index":1113,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["32/74",{"_index":1400,"title":{},"body":{"coverage.html":{}}}],["344e41",{"_index":1179,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["35/44",{"_index":1414,"title":{},"body":{"coverage.html":{}}}],["350",{"_index":2020,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["36/37",{"_index":1378,"title":{},"body":{"coverage.html":{}}}],["38/40",{"_index":1422,"title":{},"body":{"coverage.html":{}}}],["39",{"_index":1571,"title":{},"body":{"index.html":{}}}],["3d",{"_index":439,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureModelControlService.html":{},"interfaces/clientProportions.html":{},"miscellaneous/functions.html":{}}}],["3px",{"_index":2091,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["3rem",{"_index":1103,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["4",{"_index":1025,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{},"interfaces/roomSpanSettings.html":{}}}],["4.0.2",{"_index":1465,"title":{},"body":{"dependencies.html":{}}}],["4.17.21",{"_index":1475,"title":{},"body":{"dependencies.html":{}}}],["4.36.0",{"_index":1461,"title":{},"body":{"dependencies.html":{}}}],["4.37.0",{"_index":1466,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":1415,"title":{},"body":{"coverage.html":{}}}],["4/6",{"_index":1426,"title":{},"body":{"coverage.html":{}}}],["4/9",{"_index":1424,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":629,"title":{},"body":{"components/FinderComponent.html":{},"injectables/ReportService.html":{},"interfaces/foundFurniture.html":{},"interfaces/reportResponse.html":{}}}],["40px",{"_index":1086,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["43",{"_index":1399,"title":{},"body":{"coverage.html":{}}}],["44",{"_index":1423,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":1617,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["5/5",{"_index":1417,"title":{},"body":{"coverage.html":{}}}],["5/6",{"_index":1447,"title":{},"body":{"coverage.html":{}}}],["5/7",{"_index":1436,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1437,"title":{},"body":{"coverage.html":{}}}],["500",{"_index":1347,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["5000",{"_index":531,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/PlanHousePageComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["500px",{"_index":1170,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["5px",{"_index":1163,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["6/6",{"_index":1385,"title":{},"body":{"coverage.html":{}}}],["6/7",{"_index":1395,"title":{},"body":{"coverage.html":{}}}],["66",{"_index":1425,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":69,"title":{},"body":{"injectables/AccountCookieService.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["7.8.2",{"_index":1482,"title":{},"body":{"dependencies.html":{}}}],["7/10",{"_index":1445,"title":{},"body":{"coverage.html":{}}}],["7/7",{"_index":1393,"title":{},"body":{"coverage.html":{}}}],["7/8",{"_index":1442,"title":{},"body":{"coverage.html":{}}}],["7/9",{"_index":1433,"title":{},"body":{"coverage.html":{}}}],["70",{"_index":1444,"title":{},"body":{"coverage.html":{}}}],["71",{"_index":1435,"title":{},"body":{"coverage.html":{}}}],["768",{"_index":2047,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["768px",{"_index":1181,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["77",{"_index":1432,"title":{},"body":{"coverage.html":{}}}],["79",{"_index":1413,"title":{},"body":{"coverage.html":{}}}],["8/8",{"_index":1440,"title":{},"body":{"coverage.html":{}}}],["81",{"_index":1430,"title":{},"body":{"coverage.html":{}}}],["83",{"_index":1446,"title":{},"body":{"coverage.html":{}}}],["84",{"_index":1379,"title":{},"body":{"coverage.html":{}}}],["85",{"_index":1394,"title":{},"body":{"coverage.html":{}}}],["87",{"_index":1441,"title":{},"body":{"coverage.html":{}}}],["8px",{"_index":1117,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["9/11",{"_index":1431,"title":{},"body":{"coverage.html":{}}}],["90",{"_index":1183,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData-1.html":{}}}],["91",{"_index":1396,"title":{},"body":{"coverage.html":{}}}],["92",{"_index":1391,"title":{},"body":{"coverage.html":{}}}],["93",{"_index":1383,"title":{},"body":{"coverage.html":{}}}],["94",{"_index":1373,"title":{},"body":{"coverage.html":{}}}],["95",{"_index":1421,"title":{},"body":{"coverage.html":{}}}],["96",{"_index":1389,"title":{},"body":{"coverage.html":{}}}],["97",{"_index":1377,"title":{},"body":{"coverage.html":{}}}],["_blank",{"_index":1199,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["_id",{"_index":144,"title":{},"body":{"injectables/AccountService.html":{},"injectables/ProjectService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["_shoppagecomponent",{"_index":641,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["a3b18a",{"_index":1105,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{},"interfaces/roomSpanSettings.html":{}}}],["a:hover",{"_index":1168,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["abortcontroller",{"_index":1244,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["aborterror",{"_index":1289,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["abstractcontrol",{"_index":1488,"title":{},"body":{"interfaces/editForm.html":{},"interfaces/roomSpanSettings.html":{}}}],["account",{"_index":125,"title":{},"body":{"injectables/AccountService.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"miscellaneous/functions.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/googleAuthData.html":{}}}],["account.accounttype",{"_index":150,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["account.service",{"_index":57,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AuthService.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{}}}],["account/code",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{}}}],["account_data",{"_index":1514,"title":{},"body":{"interfaces/editForm.html":{}}}],["account_data.email",{"_index":1515,"title":{},"body":{"interfaces/editForm.html":{}}}],["account_data.furnitures",{"_index":1519,"title":{},"body":{"interfaces/editForm.html":{}}}],["account_data.nickname",{"_index":1516,"title":{},"body":{"interfaces/editForm.html":{}}}],["account_data.password",{"_index":1520,"title":{},"body":{"interfaces/editForm.html":{}}}],["account_data.projects",{"_index":1517,"title":{},"body":{"interfaces/editForm.html":{}}}],["account_type",{"_index":1503,"title":{},"body":{"interfaces/editForm.html":{}}}],["accountcookieservice",{"_index":1,"title":{"injectables/AccountCookieService.html":{}},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientProportions.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["accountdata",{"_index":174,"title":{},"body":{"injectables/AccountService.html":{},"components/PlanHousePageComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/furnitureAccountData.html":{}}}],["accountdata.furnitures",{"_index":177,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["accountdata.furnitures.map(furnituredata",{"_index":178,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["accountfulldata",{"_index":138,"title":{"interfaces/accountFullData.html":{}},"body":{"injectables/AccountService.html":{},"components/PlanHousePageComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/furnitureAccountData.html":{}}}],["accountpagecomponent",{"_index":246,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"coverage.html":{},"interfaces/editForm.html":{}}}],["accountservice",{"_index":89,"title":{"injectables/AccountService.html":{}},"body":{"injectables/AccountService.html":{},"components/AppComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/furnitureAccountData.html":{}}}],["accounttype",{"_index":50,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"injectables/AuthService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/googleAuthData.html":{},"miscellaneous/typealiases.html":{}}}],["action",{"_index":539,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["activatedroute",{"_index":424,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/foundFurniture.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["actual_component",{"_index":277,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["additionaldata",{"_index":461,"title":{"interfaces/additionalData.html":{}},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["addmodel(furniturecardid",{"_index":1638,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["addmodule",{"_index":896,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["addroom",{"_index":2053,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["aftercolors",{"_index":1337,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["afterviewchecked",{"_index":894,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["afterviewinit",{"_index":563,"title":{},"body":{"components/FinderComponent.html":{},"components/MainPageComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/foundFurniture.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["alias",{"_index":1434,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":2101,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["align",{"_index":1100,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["all'}/${idfurniture",{"_index":651,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["alpha",{"_index":1657,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["angular",{"_index":2119,"title":{},"body":{"miscellaneous/variables.html":{}}}],["angular/animations",{"_index":1454,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":478,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"dependencies.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["angular/common/http",{"_index":131,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/roomData.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["angular/core",{"_index":53,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"dependencies.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["angular/forms",{"_index":946,"title":{},"body":{"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"dependencies.html":{},"interfaces/editForm.html":{},"interfaces/roomSpanSettings.html":{}}}],["angular/platform",{"_index":1456,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":218,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/clientProportions.html":{},"dependencies.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["angular/service",{"_index":1458,"title":{},"body":{"dependencies.html":{}}}],["animate",{"_index":1668,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["animationframeid",{"_index":1598,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["antialias",{"_index":1656,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["any).id",{"_index":1707,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["any).name",{"_index":735,"title":{},"body":{"injectables/FurnitureModelControlService.html":{}}}],["api",{"_index":690,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"injectables/ProjectService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{},"interfaces/shopData.html":{},"miscellaneous/variables.html":{}}}],["app",{"_index":209,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["app.component.html",{"_index":214,"title":{},"body":{"components/AppComponent.html":{}}}],["appautoheight",{"_index":276,"title":{},"body":{"components/AppComponent.html":{},"directives/AutoHeightDirective.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["appcomponent",{"_index":188,"title":{"components/AppComponent.html":{}},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"coverage.html":{}}}],["appconfig",{"_index":1370,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["applicationconfig",{"_index":2108,"title":{},"body":{"miscellaneous/variables.html":{}}}],["area",{"_index":1848,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["arguments",{"_index":774,"title":{},"body":{"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{}}}],["array(grid_size).fill(false",{"_index":1910,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["array.from",{"_index":1909,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["arrowdown",{"_index":2000,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["arrowleft",{"_index":2002,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["arrowright",{"_index":2001,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["arrowup",{"_index":1999,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["async",{"_index":96,"title":{},"body":{"injectables/AccountService.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FurnitureCardControlService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ShopService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/shopData.html":{}}}],["auth",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{}}}],["authdata",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{},"miscellaneous/typealiases.html":{}}}],["authdata.accounttype",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{}}}],["authdata.email",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{}}}],["authdata.password",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{}}}],["authorid",{"_index":1029,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["authormatched",{"_index":705,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["authservice",{"_index":198,"title":{"injectables/AuthService.html":{}},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"coverage.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{}}}],["auto",{"_index":339,"title":{},"body":{"directives/AutoHeightDirective.html":{},"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["autoheightdirective",{"_index":196,"title":{"directives/AutoHeightDirective.html":{}},"body":{"components/AppComponent.html":{},"directives/AutoHeightDirective.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"coverage.html":{}}}],["avatarurl",{"_index":139,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/furnitureAccountData.html":{}}}],["await",{"_index":175,"title":{},"body":{"injectables/AccountService.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FurnitureCardControlService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ShopService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/shopData.html":{}}}],["background",{"_index":1087,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{},"interfaces/roomSpanSettings.html":{}}}],["baseclienturl",{"_index":1061,"title":{},"body":{"injectables/ReportService.html":{},"coverage.html":{},"interfaces/reportResponse.html":{},"miscellaneous/variables.html":{}}}],["basefilter",{"_index":353,"title":{"interfaces/baseFilter.html":{}},"body":{"injectables/CategoryService.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"coverage.html":{},"interfaces/option.html":{},"interfaces/rangeFilter.html":{},"interfaces/selectFilter.html":{}}}],["baseserviceurl",{"_index":92,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/roomData.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["baseurl",{"_index":124,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/roomData.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{},"miscellaneous/variables.html":{}}}],["baseurl}/account/avatar?jwt=${jwt",{"_index":1231,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["beforecolors",{"_index":1336,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["behaviorsubject",{"_index":670,"title":{},"body":{"injectables/FinderService.html":{},"injectables/NotificationService.html":{}}}],["black",{"_index":1088,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["blob",{"_index":373,"title":{},"body":{"injectables/ClientImageControlService.html":{},"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureModelControlService.html":{},"components/ImageSliderComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"interfaces/clientProportions.html":{},"miscellaneous/functions.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{}}}],["blob([htmlcontent",{"_index":1195,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["bloburl",{"_index":505,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["block",{"_index":1124,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["body",{"_index":1083,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["boolean",{"_index":105,"title":{},"body":{"injectables/AccountService.html":{},"directives/AutoHeightDirective.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FurnitureCardControlService.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/shopData.html":{}}}],["bootstrap",{"_index":1429,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["bootstrapapplication(appcomponent",{"_index":2120,"title":{},"body":{"miscellaneous/variables.html":{}}}],["border",{"_index":1115,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{},"interfaces/roomSpanSettings.html":{}}}],["bottom",{"_index":1104,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["box",{"_index":1127,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["break",{"_index":1780,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["browser",{"_index":1457,"title":{},"body":{"dependencies.html":{}}}],["calculategridarea(objectx",{"_index":1921,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["calculatemoveobjectdata(objectsavedata",{"_index":1715,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["calculateobjectsavedata(object",{"_index":1700,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["callsaveemitter",{"_index":1870,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["calypso",{"_index":1076,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["camera",{"_index":1594,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["camera_frustum_bounds",{"_index":1722,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["canvas_container",{"_index":1658,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["canvas_container.appendchild(this.renderer.domelement",{"_index":1663,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["canvasratioofwindow",{"_index":1599,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["card",{"_index":232,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/ReportService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/additionalData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData-1.html":{},"interfaces/shopData.html":{}}}],["card.cost",{"_index":653,"title":{},"body":{"components/FinderComponent.html":{}}}],["card.name",{"_index":652,"title":{},"body":{"components/FinderComponent.html":{}}}],["case",{"_index":1777,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["catch",{"_index":181,"title":{},"body":{"injectables/AccountService.html":{},"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ShopService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"interfaces/roomData-1.html":{},"interfaces/shopData.html":{}}}],["catcherror",{"_index":754,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{}}}],["catcherror((error",{"_index":757,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{}}}],["category",{"_index":347,"title":{},"body":{"injectables/CategoryService.html":{},"components/FinderComponent.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/ReportService.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/option.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["categoryarray",{"_index":1860,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["categorydata",{"_index":348,"title":{"interfaces/categoryData.html":{}},"body":{"injectables/CategoryService.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"coverage.html":{},"interfaces/option.html":{},"interfaces/rangeFilter.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{}}}],["categoryname",{"_index":1258,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["categoryservice",{"_index":342,"title":{"injectables/CategoryService.html":{}},"body":{"injectables/CategoryService.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"coverage.html":{},"interfaces/option.html":{},"interfaces/rangeFilter.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{}}}],["cdr",{"_index":1846,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["center",{"_index":1101,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["change_data",{"_index":1497,"title":{},"body":{"interfaces/editForm.html":{}}}],["changeaccountdata",{"_index":146,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/googleAuthData.html":{},"miscellaneous/typealiases.html":{}}}],["changeaccountdataemail",{"_index":136,"title":{"interfaces/changeAccountDataEmail.html":{}},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"miscellaneous/functions.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/googleAuthData.html":{},"miscellaneous/typealiases.html":{}}}],["changedata",{"_index":121,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/googleAuthData.html":{}}}],["changedata.accounttype",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{}}}],["changedata.jwt",{"_index":169,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/googleAuthData.html":{}}}],["changedata.nickname",{"_index":168,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["changedata.password",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{}}}],["changedetectorref",{"_index":470,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/roomSpanSettings.html":{}}}],["changemainimage",{"_index":766,"title":{},"body":{"components/ImageSliderComponent.html":{}}}],["changemainimage(index",{"_index":776,"title":{},"body":{"components/ImageSliderComponent.html":{}}}],["changemodeslider",{"_index":769,"title":{},"body":{"components/ImageSliderComponent.html":{}}}],["changes['roomdata'].currentvalue",{"_index":1612,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["changes['roomdata'].previousvalue",{"_index":1614,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["changesecondarydata",{"_index":119,"title":{"interfaces/changeSecondaryData.html":{}},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["checkauthandloaddata",{"_index":1529,"title":{},"body":{"interfaces/editForm.html":{}}}],["checkdesktop",{"_index":570,"title":{},"body":{"components/FinderComponent.html":{},"components/PlanHousePageComponent.html":{},"coverage.html":{},"interfaces/foundFurniture.html":{},"miscellaneous/functions.html":{}}}],["checkguideinclude",{"_index":1900,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["checkjwt",{"_index":93,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["checkshoppage",{"_index":575,"title":{},"body":{"components/FinderComponent.html":{}}}],["checkshoppage(name",{"_index":589,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["checkvalid",{"_index":412,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["checkvalid(typerequest",{"_index":433,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["checkviewport",{"_index":767,"title":{},"body":{"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{}}}],["child.setattribute('tabindex",{"_index":822,"title":{},"body":{"components/MainPageComponent.html":{}}}],["child.style.pointerevents",{"_index":823,"title":{},"body":{"components/MainPageComponent.html":{}}}],["class",{"_index":61,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["clearerror",{"_index":872,"title":{},"body":{"injectables/NotificationService.html":{}}}],["clearfurniturecard",{"_index":413,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["clearinput",{"_index":576,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["clearroom",{"_index":1739,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["cleartimeout(this.clicktimer",{"_index":1981,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["cleartimeout(this.debouncetimer",{"_index":643,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["clickroom(event",{"_index":2014,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["clicktimer",{"_index":1853,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["clientfilters",{"_index":1252,"title":{"interfaces/clientFilters.html":{}},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"coverage.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["clientimagecontrolservice",{"_index":366,"title":{"injectables/ClientImageControlService.html":{}},"body":{"injectables/ClientImageControlService.html":{},"coverage.html":{},"interfaces/editForm.html":{}}}],["clientproportions",{"_index":483,"title":{"interfaces/clientProportions.html":{}},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{},"coverage.html":{}}}],["clientx",{"_index":1940,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["clienty",{"_index":1941,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["clipboard",{"_index":1325,"title":{},"body":{"components/ViewFurnitureComponent.html":{},"dependencies.html":{}}}],["clipboardservice",{"_index":1309,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["closeaddmodule",{"_index":901,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["closeeditform",{"_index":1541,"title":{},"body":{"interfaces/editForm.html":{}}}],["closefoundresultslist",{"_index":577,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["closeguide",{"_index":2021,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["closeproject",{"_index":902,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["closescene",{"_index":2034,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["closeviewroom",{"_index":2036,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["coeff_proportions",{"_index":2090,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["color",{"_index":598,"title":{},"body":{"components/FinderComponent.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/reportResponse.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/shopData.html":{}}}],["color:white",{"_index":1177,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["color_button_element",{"_index":1328,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["color_button_element.getattribute('data",{"_index":1333,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["color_button_element.style.setproperty('margin",{"_index":1344,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["colorbutton",{"_index":1320,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["colorclientdata",{"_index":695,"title":{"interfaces/colorClientData.html":{}},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["colordata",{"_index":519,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["colordata.color",{"_index":712,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["colordata.imagesdata.idmainimage",{"_index":525,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["colordata.imagesdata.images.length",{"_index":534,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["colordata.imagesdata.images.map(url",{"_index":713,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["colorfromserverdata",{"_index":696,"title":{"interfaces/colorFromServerData.html":{}},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["colorrequest",{"_index":617,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["colors",{"_index":459,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/ShopService.html":{},"interfaces/additionalData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"interfaces/shopData.html":{}}}],["colors.length",{"_index":540,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["colors_element",{"_index":1330,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["colors_element.queryselectorall('.colorvariant",{"_index":1335,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["colors_variants",{"_index":1334,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["colors_variants.foreach((colorvariant",{"_index":1338,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["colorvariant",{"_index":1340,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["column",{"_index":1096,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["commonmodule",{"_index":1487,"title":{},"body":{"interfaces/editForm.html":{}}}],["component",{"_index":187,"title":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{}},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"coverage.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["component.name",{"_index":640,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["component_template",{"_index":245,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["components",{"_index":189,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"index.html":{}}}],["components/image",{"_index":692,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"injectables/ServerImageControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["components/notification/notification.component",{"_index":223,"title":{},"body":{"components/AppComponent.html":{}}}],["components/plan",{"_index":220,"title":{},"body":{"components/AppComponent.html":{}}}],["components/scene/scene.component",{"_index":219,"title":{},"body":{"components/AppComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{}}}],["compressed_image",{"_index":1524,"title":{},"body":{"interfaces/editForm.html":{}}}],["compressedfile",{"_index":382,"title":{},"body":{"injectables/ClientImageControlService.html":{}}}],["compressimage",{"_index":369,"title":{},"body":{"injectables/ClientImageControlService.html":{}}}],["compressimage(image",{"_index":370,"title":{},"body":{"injectables/ClientImageControlService.html":{}}}],["compressor",{"_index":374,"title":{},"body":{"injectables/ClientImageControlService.html":{}}}],["compressor(image",{"_index":378,"title":{},"body":{"injectables/ClientImageControlService.html":{}}}],["compressor.js",{"_index":372,"title":{},"body":{"injectables/ClientImageControlService.html":{}}}],["compressorjs",{"_index":375,"title":{},"body":{"injectables/ClientImageControlService.html":{},"dependencies.html":{}}}],["config",{"_index":1366,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["console.error",{"_index":384,"title":{},"body":{"injectables/ClientImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["console.error('error",{"_index":183,"title":{},"body":{"injectables/AccountService.html":{},"injectables/FurnitureCardControlService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["console.error(error",{"_index":501,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{}}}],["console.log('changedata",{"_index":166,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["console.log(error",{"_index":968,"title":{},"body":{"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["console.log(http_params.tostring",{"_index":170,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/googleAuthData.html":{}}}],["const",{"_index":64,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/shopData.html":{}}}],["constructor",{"_index":19,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/MainPageComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientProportions.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/googleAuthData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{}}}],["constructor(accountservice",{"_index":911,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["constructor(cookieservice",{"_index":20,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["constructor(elementref",{"_index":797,"title":{},"body":{"components/MainPageComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["constructor(finderservice",{"_index":584,"title":{},"body":{"components/FinderComponent.html":{}}}],["constructor(httpmodule",{"_index":100,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{}}}],["constructor(notification",{"_index":742,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{}}}],["constructor(notificationservice",{"_index":852,"title":{},"body":{"components/NotificationComponent.html":{}}}],["constructor(private",{"_index":672,"title":{},"body":{"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/additionalData.html":{},"interfaces/clientFilters.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"interfaces/shopData.html":{}}}],["constructor(route",{"_index":423,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["contain",{"_index":1172,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["content",{"_index":1119,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["continue",{"_index":998,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["control.service",{"_index":229,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/ReportService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData-1.html":{}}}],["control.service.ts",{"_index":368,"title":{},"body":{"injectables/ClientImageControlService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"injectables/ServerImageControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["control.service.ts:108",{"_index":1224,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["control.service.ts:11",{"_index":722,"title":{},"body":{"injectables/FurnitureModelControlService.html":{},"injectables/ServerImageControlService.html":{}}}],["control.service.ts:112",{"_index":677,"title":{},"body":{"injectables/FurnitureCardControlService.html":{}}}],["control.service.ts:127",{"_index":682,"title":{},"body":{"injectables/FurnitureCardControlService.html":{}}}],["control.service.ts:178",{"_index":685,"title":{},"body":{"injectables/FurnitureCardControlService.html":{}}}],["control.service.ts:19",{"_index":371,"title":{},"body":{"injectables/ClientImageControlService.html":{}}}],["control.service.ts:195",{"_index":687,"title":{},"body":{"injectables/FurnitureCardControlService.html":{}}}],["control.service.ts:20",{"_index":1220,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["control.service.ts:21",{"_index":726,"title":{},"body":{"injectables/FurnitureModelControlService.html":{}}}],["control.service.ts:214",{"_index":680,"title":{},"body":{"injectables/FurnitureCardControlService.html":{}}}],["control.service.ts:30",{"_index":1228,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["control.service.ts:38",{"_index":728,"title":{},"body":{"injectables/FurnitureModelControlService.html":{}}}],["control.service.ts:45",{"_index":1226,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["control.service.ts:57",{"_index":724,"title":{},"body":{"injectables/FurnitureModelControlService.html":{}}}],["control.service.ts:59",{"_index":1358,"title":{},"body":{"interfaces/additionalData.html":{}}}],["control.service.ts:65",{"_index":1218,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["control.service.ts:80",{"_index":1216,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["control.service.ts:94",{"_index":1222,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["controls",{"_index":1597,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["cookie",{"_index":55,"title":{},"body":{"injectables/AccountCookieService.html":{},"components/NotificationComponent.html":{},"dependencies.html":{}}}],["cookie.service",{"_index":132,"title":{},"body":{"injectables/AccountService.html":{},"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientProportions.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["cookie.service.ts",{"_index":7,"title":{},"body":{"injectables/AccountCookieService.html":{},"coverage.html":{}}}],["cookie.service.ts:18",{"_index":47,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["cookie.service.ts:31",{"_index":33,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["cookie.service.ts:38",{"_index":42,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["cookie.service.ts:49",{"_index":35,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["cookie.service.ts:56",{"_index":32,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["cookie.service.ts:64",{"_index":37,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["cookie.service.ts:72",{"_index":51,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["cookie.service.ts:8",{"_index":23,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["cookie.service.ts:82",{"_index":39,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["cookie.service.ts:89",{"_index":29,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["cookies",{"_index":928,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["cookieservice",{"_index":21,"title":{},"body":{"injectables/AccountCookieService.html":{},"components/CreateFurniturePageComponent.html":{},"components/NotificationComponent.html":{},"interfaces/clientProportions.html":{}}}],["copyshoplink",{"_index":1305,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["copyshoplink(furnitureurl",{"_index":1313,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["cost",{"_index":616,"title":{},"body":{"components/FinderComponent.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/ReportService.html":{},"injectables/ShopService.html":{},"interfaces/additionalData.html":{},"interfaces/clientFilters.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"interfaces/reportResponse.html":{},"interfaces/shopData.html":{}}}],["cost.tostring().replace(/\\b(?=(\\d{3})+(?!\\d))/g",{"_index":1194,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["costformat",{"_index":392,"title":{},"body":{"pipes/CostFormatPipe.html":{},"components/FinderComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["costformatpipe",{"_index":388,"title":{"pipes/CostFormatPipe.html":{}},"body":{"pipes/CostFormatPipe.html":{},"components/FinderComponent.html":{},"components/ViewFurnitureComponent.html":{},"coverage.html":{},"interfaces/foundFurniture.html":{}}}],["costpipe",{"_index":1038,"title":{},"body":{"injectables/ReportService.html":{}}}],["costpipe(cost",{"_index":1045,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["courier",{"_index":1080,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["coverage",{"_index":1359,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":250,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{}}}],["createaccountdata",{"_index":116,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{},"miscellaneous/typealiases.html":{}}}],["createaccountdata.accounttype",{"_index":153,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["createaccountdata.email",{"_index":158,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["createaccountdata.nickname",{"_index":155,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["createaccountdata.password",{"_index":160,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["createemailaccountdata",{"_index":147,"title":{"interfaces/createEmailAccountData.html":{}},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{},"miscellaneous/typealiases.html":{}}}],["createfurniture",{"_index":807,"title":{},"body":{"components/MainPageComponent.html":{}}}],["createfurniturecard",{"_index":414,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["createfurniturecomponent",{"_index":249,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"coverage.html":{}}}],["createfurniturecomponentref",{"_index":408,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["createfurniturepagecomponent",{"_index":252,"title":{"components/CreateFurniturePageComponent.html":{}},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"coverage.html":{}}}],["createproject",{"_index":903,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["createreport",{"_index":1039,"title":{},"body":{"injectables/ReportService.html":{}}}],["createreport(roomdata",{"_index":1047,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["createreporthtml",{"_index":1040,"title":{},"body":{"injectables/ReportService.html":{}}}],["createreporthtml(roomdata",{"_index":1049,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["createroom",{"_index":1681,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["createroomshape(widthratio",{"_index":1721,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["createroundedrectanglegeometry(width",{"_index":1670,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["css",{"_index":593,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["current_project_id",{"_index":976,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["current_route",{"_index":636,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["current_route.firstchild",{"_index":638,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["current_route.snapshot.routeconfig?.component",{"_index":639,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["currentcolorid",{"_index":1304,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["currentidclickedroom",{"_index":1865,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["currentplanhouse",{"_index":897,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["currentprojectid",{"_index":898,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["currentviewroom",{"_index":1863,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["cursor",{"_index":1975,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["dad7cd",{"_index":1089,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["dashed",{"_index":2092,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["date",{"_index":67,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["debounce",{"_index":604,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["debouncetimer",{"_index":571,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["decoration",{"_index":1162,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["decorators",{"_index":454,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/PlanHousePageComponent.html":{}}}],["default",{"_index":122,"title":{},"body":{"injectables/AccountService.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"components/ViewFurnitureComponent.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":22,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/additionalData.html":{},"interfaces/queryData.html":{}}}],["delay",{"_index":877,"title":{},"body":{"injectables/NotificationService.html":{}}}],["delete/color",{"_index":1240,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["delete/project",{"_index":1241,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["deleteaccount",{"_index":94,"title":{},"body":{"injectables/AccountService.html":{}}}],["deleteaccount(jwt",{"_index":107,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["deleteaccountjwt",{"_index":95,"title":{},"body":{"injectables/AccountService.html":{}}}],["deleteaccountjwt(jwt",{"_index":110,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["deleteaccounttype",{"_index":10,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["deletecolor",{"_index":415,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["deletecolorcalculate",{"_index":416,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["deletedeleteproject",{"_index":1000,"title":{},"body":{"injectables/ProjectService.html":{}}}],["deletedeleteproject(jwt",{"_index":1007,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["deletefurniturecard",{"_index":417,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"interfaces/clientProportions.html":{}}}],["deletefurniturecard(jwt",{"_index":678,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["deletefurnituremodel",{"_index":719,"title":{},"body":{"injectables/FurnitureModelControlService.html":{}}}],["deletefurnituremodel(jwt",{"_index":723,"title":{},"body":{"injectables/FurnitureModelControlService.html":{}}}],["deleteguiderule",{"_index":11,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["deletejwt",{"_index":12,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["deletemodel",{"_index":1820,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["deleteproject",{"_index":904,"title":{},"body":{"components/PlanHousePageComponent.html":{},"injectables/ServerImageControlService.html":{}}}],["deleteproject(indexproject",{"_index":918,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["deleteproject(jwt",{"_index":1215,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["deleteprojectcolor",{"_index":1209,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["deleteprojectcolor(jwt",{"_index":1217,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["deleteroom",{"_index":2058,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["dependencies",{"_index":1453,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["description",{"_index":48,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/ClientImageControlService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"miscellaneous/functions.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["direction",{"_index":1095,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["directive",{"_index":243,"title":{"directives/AutoHeightDirective.html":{}},"body":{"components/AppComponent.html":{},"directives/AutoHeightDirective.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"coverage.html":{},"index.html":{}}}],["directives",{"_index":275,"title":{},"body":{"components/AppComponent.html":{},"directives/AutoHeightDirective.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["directives/auto",{"_index":236,"title":{},"body":{"components/AppComponent.html":{}}}],["disabled",{"_index":989,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["display",{"_index":1093,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{},"interfaces/roomSpanSettings.html":{}}}],["docheck",{"_index":471,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["document.createelement('a",{"_index":1202,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["document.documentelement.scrolltop",{"_index":1928,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["documentation",{"_index":1360,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":191,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/foundFurniture.html":{}}}],["downloadbutton",{"_index":1201,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["downloadbutton.click",{"_index":1206,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["downloadbutton.download",{"_index":1204,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["downloadbutton.href",{"_index":1203,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["downloadhtml",{"_index":1041,"title":{},"body":{"injectables/ReportService.html":{}}}],["downloadhtml(roomname",{"_index":1051,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["dragged_element",{"_index":1971,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["e",{"_index":1781,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["ease",{"_index":1134,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["editform",{"_index":1375,"title":{"interfaces/editForm.html":{}},"body":{"coverage.html":{},"interfaces/editForm.html":{}}}],["el",{"_index":313,"title":{},"body":{"directives/AutoHeightDirective.html":{}}}],["elem.queryselectorall('*').foreach(child",{"_index":821,"title":{},"body":{"components/MainPageComponent.html":{}}}],["elemenetref",{"_index":912,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["element",{"_index":242,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["elementref",{"_index":329,"title":{},"body":{"directives/AutoHeightDirective.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/MainPageComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/foundFurniture.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["email",{"_index":40,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"injectables/AuthService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"miscellaneous/functions.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/googleAuthData.html":{},"miscellaneous/typealiases.html":{}}}],["emailauthdata",{"_index":295,"title":{"interfaces/emailAuthData.html":{}},"body":{"injectables/AuthService.html":{},"coverage.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{},"miscellaneous/typealiases.html":{}}}],["emitplanhouse",{"_index":1902,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["enable",{"_index":2062,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["end_column",{"_index":1936,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["end_row",{"_index":1938,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["endcolumn",{"_index":1915,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["endrow",{"_index":1914,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["endx",{"_index":1834,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["endy",{"_index":1835,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["error",{"_index":182,"title":{},"body":{"injectables/AccountService.html":{},"injectables/ClientImageControlService.html":{},"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ShopService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"interfaces/roomData-1.html":{},"interfaces/shopData.html":{}}}],["error('invalid",{"_index":707,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["error.interceptor.ts",{"_index":740,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{},"coverage.html":{}}}],["error.interceptor.ts:14",{"_index":743,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{}}}],["error.interceptor.ts:30",{"_index":748,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{}}}],["error.message",{"_index":385,"title":{},"body":{"injectables/ClientImageControlService.html":{}}}],["error.name",{"_index":1288,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["errormessage",{"_index":848,"title":{},"body":{"components/NotificationComponent.html":{}}}],["errormessage||successmessage",{"_index":868,"title":{},"body":{"components/NotificationComponent.html":{}}}],["errorsubject",{"_index":870,"title":{},"body":{"injectables/NotificationService.html":{}}}],["errortext",{"_index":1278,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["escapedraggingmode",{"_index":2013,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["event",{"_index":322,"title":{},"body":{"directives/AutoHeightDirective.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"interfaces/editForm.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["event.changedtouches[0",{"_index":1968,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["event.changedtouches[0].clienty",{"_index":1987,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["event.clientx",{"_index":1754,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["event.clienty",{"_index":1757,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["event.key",{"_index":1776,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["event.preventdefault",{"_index":1984,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["event.target",{"_index":336,"title":{},"body":{"directives/AutoHeightDirective.html":{},"interfaces/editForm.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["event_target",{"_index":2016,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["eventemitter",{"_index":1573,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["eventtarget",{"_index":1318,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["expirationdate",{"_index":65,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["expirationdate.setdate(expirationdate.getdate",{"_index":68,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["expirationdate.setminutes(expirationdate.getminutes",{"_index":70,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["expires",{"_index":73,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["export",{"_index":60,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["extends",{"_index":359,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/ProjectService.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/rangeFilter.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["f18dc4",{"_index":1990,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["face",{"_index":1074,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["false",{"_index":79,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"directives/AutoHeightDirective.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientProportions.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["family",{"_index":1075,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["fbx",{"_index":1564,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fetch",{"_index":1274,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["fetch(bloburl.tostring",{"_index":506,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["fetch(imagedataurl",{"_index":1813,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["field",{"_index":354,"title":{},"body":{"injectables/CategoryService.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/option.html":{},"interfaces/rangeFilter.html":{},"interfaces/selectFilter.html":{}}}],["file",{"_index":5,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["filereader",{"_index":1065,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["filter",{"_index":352,"title":{},"body":{"injectables/CategoryService.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"coverage.html":{},"interfaces/option.html":{},"interfaces/rangeFilter.html":{},"interfaces/selectFilter.html":{},"miscellaneous/typealiases.html":{}}}],["filters",{"_index":351,"title":{},"body":{"injectables/CategoryService.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/option.html":{},"interfaces/rangeFilter.html":{},"interfaces/selectFilter.html":{}}}],["filtersobject",{"_index":1290,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["filtersobject.colors",{"_index":1297,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["filtersobject.colors.push(...furnituredata.colors",{"_index":1295,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["filtersobject.maxcost",{"_index":1294,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["filtersobject.mincost",{"_index":1296,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["find?q",{"_index":666,"title":{},"body":{"injectables/FinderService.html":{}}}],["finder",{"_index":564,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["finder'},{'name",{"_index":255,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["finder.component.html",{"_index":568,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["finder.component.scss",{"_index":569,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["finder/finder.component",{"_index":843,"title":{},"body":{"components/NavigationPanelComponent.html":{}}}],["findercomponent",{"_index":254,"title":{"components/FinderComponent.html":{}},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"coverage.html":{},"interfaces/foundFurniture.html":{}}}],["finderinput",{"_index":802,"title":{},"body":{"components/MainPageComponent.html":{}}}],["finderservice",{"_index":206,"title":{"injectables/FinderService.html":{}},"body":{"components/AppComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"coverage.html":{},"interfaces/foundFurniture.html":{}}}],["findfreespace(roomproportions",{"_index":1906,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["findfurnitures",{"_index":578,"title":{},"body":{"components/FinderComponent.html":{}}}],["findfurnitures(findstring",{"_index":594,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["findstring",{"_index":596,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["firstvaluefrom",{"_index":133,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/roomData.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["firstvaluefrom(this.httpmodule.delete(this.baseserviceurl",{"_index":163,"title":{},"body":{"injectables/AccountService.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["firstvaluefrom(this.httpmodule.get(this.baseserviceurl",{"_index":176,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/FinderService.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"interfaces/accountFullData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/googleAuthData.html":{},"interfaces/option.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/rangeFilter.html":{},"interfaces/roomData.html":{},"interfaces/selectFilter.html":{}}}],["firstvaluefrom(this.httpmodule.post(`${baseurl}/account/avatar",{"_index":1233,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["firstvaluefrom(this.httpmodule.post(this.baseserviceurl",{"_index":161,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/googleAuthData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["firstvaluefrom(this.httpmodule.put(this.baseserviceurl",{"_index":171,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/ProjectService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/googleAuthData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["fit",{"_index":1149,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["fixpath",{"_index":1644,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["flex",{"_index":1094,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{},"interfaces/roomSpanSettings.html":{}}}],["floor_size",{"_index":1701,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["floor_size.length",{"_index":1712,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["floor_size.width",{"_index":1709,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["focusfinder",{"_index":793,"title":{},"body":{"components/MainPageComponent.html":{}}}],["font",{"_index":1073,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["format('truetype",{"_index":1079,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["format.pipe",{"_index":615,"title":{},"body":{"components/FinderComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/foundFurniture.html":{}}}],["format.pipe.ts",{"_index":391,"title":{},"body":{"pipes/CostFormatPipe.html":{},"coverage.html":{}}}],["format.pipe.ts:12",{"_index":395,"title":{},"body":{"pipes/CostFormatPipe.html":{}}}],["formcontrol",{"_index":942,"title":{},"body":{"components/PlanHousePageComponent.html":{},"interfaces/editForm.html":{},"interfaces/roomSpanSettings.html":{}}}],["formcontrol(null",{"_index":2095,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["formcontrol(this.accountdata?.nickname",{"_index":1533,"title":{},"body":{"interfaces/editForm.html":{}}}],["formcontrol(this.accountdata?.password",{"_index":1537,"title":{},"body":{"interfaces/editForm.html":{}}}],["formdata",{"_index":732,"title":{},"body":{"injectables/FurnitureModelControlService.html":{},"injectables/ServerImageControlService.html":{}}}],["formdata.append('image",{"_index":1232,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["formdata.append('images",{"_index":1235,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["formdata.append('model",{"_index":733,"title":{},"body":{"injectables/FurnitureModelControlService.html":{}}}],["formelement",{"_index":1856,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["formgroup",{"_index":941,"title":{},"body":{"components/PlanHousePageComponent.html":{},"interfaces/editForm.html":{},"interfaces/roomSpanSettings.html":{}}}],["found_intersection",{"_index":1765,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["found_intersection.parent",{"_index":1769,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["foundfurniture",{"_index":572,"title":{"interfaces/foundFurniture.html":{}},"body":{"components/FinderComponent.html":{},"coverage.html":{},"interfaces/foundFurniture.html":{}}}],["fromobject",{"_index":167,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/googleAuthData.html":{}}}],["function",{"_index":148,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["functions",{"_index":1550,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["functions.used",{"_index":613,"title":{},"body":{"components/FinderComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/foundFurniture.html":{}}}],["functions.used.ts",{"_index":1449,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["furnitre/create",{"_index":475,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/MainPageComponent.html":{},"interfaces/clientProportions.html":{},"coverage.html":{}}}],["furniture",{"_index":253,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"injectables/ReportService.html":{},"injectables/ShopService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"coverage.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"interfaces/reportResponse.html":{}}}],["furniture'},{'name",{"_index":251,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["furniture,app",{"_index":819,"title":{},"body":{"components/MainPageComponent.html":{}}}],["furniture.component",{"_index":476,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/MainPageComponent.html":{},"interfaces/clientProportions.html":{}}}],["furniture.component.html",{"_index":1302,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["furniture.component.scss",{"_index":1303,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["furniture.component.ts",{"_index":1300,"title":{},"body":{"components/ViewFurnitureComponent.html":{},"coverage.html":{}}}],["furniture.component.ts:17",{"_index":1310,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["furniture.component.ts:26",{"_index":1323,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["furniture.component.ts:30",{"_index":1311,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["furniture.component.ts:34",{"_index":1312,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["furniture.component.ts:36",{"_index":1316,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["furniture.component.ts:46",{"_index":1319,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["furniture.component.ts:73",{"_index":1322,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["furniture.component.ts:77",{"_index":1314,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["furniture.name",{"_index":1187,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["furniture.previewurl",{"_index":1286,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["furniture.proportions.height}c",{"_index":1189,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["furniture.proportions.length}c",{"_index":1190,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["furniture.proportions.width}c",{"_index":1188,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["furniture.shops.map(shopdata",{"_index":1191,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["furniture/card",{"_index":689,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["furniture/images",{"_index":1230,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["furniture/model",{"_index":730,"title":{},"body":{"injectables/FurnitureModelControlService.html":{}}}],["furniture/view",{"_index":815,"title":{},"body":{"components/MainPageComponent.html":{},"components/ViewFurnitureComponent.html":{},"coverage.html":{}}}],["furniture_data",{"_index":513,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["furniture_data.colors.foreach(async",{"_index":518,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["furniture_id",{"_index":515,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["furniture_model_blob",{"_index":527,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["furniture_model_blob[0",{"_index":537,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["furnitureaccountdata",{"_index":143,"title":{"interfaces/furnitureAccountData.html":{}},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["furniturebasedata",{"_index":698,"title":{"interfaces/furnitureBaseData.html":{}},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["furniturecard",{"_index":704,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["furniturecardcontrolservice",{"_index":203,"title":{"injectables/FurnitureCardControlService.html":{}},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/additionalData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/shopData.html":{}}}],["furniturecardid",{"_index":679,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/additionalData.html":{},"interfaces/clientFilters.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData-1.html":{},"interfaces/shopData.html":{}}}],["furniturecardservice",{"_index":425,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["furniturecardupdatedata",{"_index":688,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["furnitureclientdata",{"_index":699,"title":{"interfaces/furnitureClientData.html":{}},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["furnituredata",{"_index":179,"title":{},"body":{"injectables/AccountService.html":{},"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/ProjectService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{},"interfaces/shopData.html":{}}}],["furnituredata.cost",{"_index":1293,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["furnituredata.name",{"_index":1353,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["furnituredata.previewurl",{"_index":180,"title":{},"body":{"injectables/AccountService.html":{},"injectables/ProjectService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["furnitureexampledata",{"_index":790,"title":{},"body":{"components/MainPageComponent.html":{}}}],["furniturefooter",{"_index":1140,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["furniturefromserverdata",{"_index":477,"title":{"interfaces/furnitureFromServerData.html":{}},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/additionalData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["furnitureimage",{"_index":1136,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["furniturelink",{"_index":1176,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["furnituremodelcontrolservice",{"_index":204,"title":{"injectables/FurnitureModelControlService.html":{}},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureModelControlService.html":{},"interfaces/clientProportions.html":{},"coverage.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["furnituremodelinput",{"_index":554,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["furnituremodelservice",{"_index":428,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["furniturename",{"_index":655,"title":{},"body":{"injectables/FinderService.html":{}}}],["furnitureproportions",{"_index":694,"title":{"interfaces/furnitureProportions.html":{}},"body":{"injectables/FurnitureCardControlService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["furnitures",{"_index":142,"title":{},"body":{"injectables/AccountService.html":{},"injectables/ReportService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/reportResponse.html":{}}}],["furnitureshopdata",{"_index":1249,"title":{"interfaces/furnitureShopData.html":{}},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"coverage.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["furnituresize",{"_index":1631,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["furnituresspantitle",{"_index":1121,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["furnituretemplate",{"_index":791,"title":{},"body":{"components/MainPageComponent.html":{}}}],["furnituretitle",{"_index":545,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/ReportService.html":{},"interfaces/clientProportions.html":{},"interfaces/reportResponse.html":{}}}],["furnitureurl",{"_index":1315,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["gap",{"_index":1141,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{},"interfaces/roomSpanSettings.html":{}}}],["general_coefficient",{"_index":1730,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["generatehtmlcontent",{"_index":1042,"title":{},"body":{"injectables/ReportService.html":{}}}],["generatehtmlcontent(roomdata",{"_index":1055,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["geometry",{"_index":1679,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["getaccount",{"_index":97,"title":{},"body":{"injectables/AccountService.html":{}}}],["getaccount(jwt",{"_index":112,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["getaccountavatar",{"_index":1210,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["getaccountavatar(jwt",{"_index":1219,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["getallprojectimages",{"_index":1211,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["getallprojectimages(furniturecardid",{"_index":1221,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["getcurrentcolorid",{"_index":418,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["getcurrentviewroom",{"_index":905,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["getfindfurnitures",{"_index":657,"title":{},"body":{"injectables/FinderService.html":{}}}],["getfindfurnitures(query",{"_index":661,"title":{},"body":{"injectables/FinderService.html":{}}}],["getfindoptionsbyresult",{"_index":1245,"title":{},"body":{"injectables/ShopService.html":{}}}],["getfindoptionsbyresult(resultsarray",{"_index":1248,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["getfurniturecard",{"_index":184,"title":{},"body":{"injectables/AccountService.html":{},"injectables/FurnitureCardControlService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["getfurniturecard(furniturecardid",{"_index":681,"title":{},"body":{"injectables/FurnitureCardControlService.html":{}}}],["getfurnituremodel",{"_index":720,"title":{},"body":{"injectables/FurnitureModelControlService.html":{}}}],["getfurnituremodel(jwt",{"_index":725,"title":{},"body":{"injectables/FurnitureModelControlService.html":{}}}],["getgetallcategories",{"_index":344,"title":{},"body":{"injectables/CategoryService.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/option.html":{},"interfaces/rangeFilter.html":{},"interfaces/selectFilter.html":{}}}],["getgetcategorydata",{"_index":1246,"title":{},"body":{"injectables/ShopService.html":{}}}],["getgetcategorydata(categoryname",{"_index":1253,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["getgetproject",{"_index":1001,"title":{},"body":{"injectables/ProjectService.html":{}}}],["getgetproject(jwt",{"_index":1010,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["getgetreportofroom",{"_index":1002,"title":{},"body":{"injectables/ProjectService.html":{}}}],["getgetreportofroom(jwt",{"_index":1012,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["getguiderule",{"_index":13,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["getimage",{"_index":579,"title":{},"body":{"components/FinderComponent.html":{}}}],["getimage(idfurniture",{"_index":597,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["getitemscount",{"_index":768,"title":{},"body":{"components/ImageSliderComponent.html":{}}}],["getjwt",{"_index":14,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["getmainimage",{"_index":1212,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["getmainimage(furniturecardid",{"_index":1223,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["getreport",{"_index":1804,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["getrequestpasswordcode",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{}}}],["getrequestpasswordcode(email",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{}}}],["geturl",{"_index":580,"title":{},"body":{"components/FinderComponent.html":{}}}],["geturl(idfurniture",{"_index":601,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["getusertype",{"_index":15,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["glb.loader.ts",{"_index":1408,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["gltf/glb",{"_index":1563,"title":{},"body":{"miscellaneous/functions.html":{}}}],["google",{"_index":41,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"injectables/AuthService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/googleAuthData.html":{},"miscellaneous/typealiases.html":{}}}],["googleauthdata",{"_index":296,"title":{"interfaces/googleAuthData.html":{}},"body":{"injectables/AuthService.html":{},"coverage.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{},"miscellaneous/typealiases.html":{}}}],["grabbing",{"_index":1973,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["grid",{"_index":1847,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["grid_area",{"_index":1947,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["grid_occupied",{"_index":1908,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["grid_size",{"_index":1907,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["gridarea",{"_index":1026,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{},"interfaces/roomSpanSettings.html":{}}}],["guideinclude",{"_index":36,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["guidetemplate",{"_index":1866,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["hasroomidbeenprocessed",{"_index":899,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["height",{"_index":464,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/ReportService.html":{},"interfaces/additionalData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/shopData.html":{}}}],["height.directive",{"_index":237,"title":{},"body":{"components/AppComponent.html":{}}}],["height.directive.ts",{"_index":310,"title":{},"body":{"directives/AutoHeightDirective.html":{},"coverage.html":{}}}],["height.directive.ts:12",{"_index":328,"title":{},"body":{"directives/AutoHeightDirective.html":{}}}],["height.directive.ts:19",{"_index":318,"title":{},"body":{"directives/AutoHeightDirective.html":{}}}],["height.directive.ts:27",{"_index":319,"title":{},"body":{"directives/AutoHeightDirective.html":{}}}],["height.directive.ts:38",{"_index":323,"title":{},"body":{"directives/AutoHeightDirective.html":{}}}],["heightratio",{"_index":1720,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["hemisphere_light",{"_index":1651,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["hemispherelight",{"_index":1743,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["hostlistener",{"_index":330,"title":{},"body":{"directives/AutoHeightDirective.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["hostlistener('click",{"_index":1748,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["hostlistener('document:contextmenu",{"_index":2008,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["hostlistener('document:keydown.arrowdown",{"_index":1992,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["hostlistener('document:keydown.arrowleft",{"_index":1994,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["hostlistener('document:keydown.arrowright",{"_index":1993,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["hostlistener('document:keydown.arrowup",{"_index":1991,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["hostlistener('document:keydown.escape",{"_index":2012,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["hostlistener('document:keyup.enter",{"_index":1959,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["hostlistener('document:mouseleave",{"_index":1954,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["hostlistener('document:mousemove",{"_index":1982,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["hostlistener('document:mouseup",{"_index":1960,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["hostlistener('document:touchend",{"_index":1958,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["hostlistener('document:touchmove",{"_index":1983,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["hostlistener('mousemove",{"_index":1782,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["hostlistener('window:keydown",{"_index":1770,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["hostlistener('window:resize",{"_index":778,"title":{},"body":{"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["hostlistener('window:scroll",{"_index":2010,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["hostlisteners",{"_index":770,"title":{},"body":{"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{}}}],["house",{"_index":269,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"coverage.html":{},"interfaces/roomSpanSettings.html":{}}}],["house'},{'name",{"_index":267,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["house.component",{"_index":222,"title":{},"body":{"components/AppComponent.html":{},"components/MainPageComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["house.component.html",{"_index":1844,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["house.component.scss",{"_index":1845,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["house.component.ts",{"_index":1398,"title":{},"body":{"coverage.html":{},"interfaces/roomSpanSettings.html":{}}}],["house/plan",{"_index":221,"title":{},"body":{"components/AppComponent.html":{},"components/MainPageComponent.html":{},"components/PlanHousePageComponent.html":{},"coverage.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["housequality",{"_index":216,"title":{},"body":{"components/AppComponent.html":{},"components/MainPageComponent.html":{}}}],["hover",{"_index":1178,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["hq",{"_index":844,"title":{},"body":{"components/NavigationPanelComponent.html":{}}}],["html",{"_index":241,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"injectables/ReportService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/foundFurniture.html":{},"interfaces/reportResponse.html":{},"interfaces/roomSpanSettings.html":{}}}],["html2canvas",{"_index":1469,"title":{},"body":{"dependencies.html":{}}}],["html2pdf.js",{"_index":1471,"title":{},"body":{"dependencies.html":{}}}],["htmlbuttonelement",{"_index":1329,"title":{},"body":{"components/ViewFurnitureComponent.html":{},"interfaces/roomSpanSettings.html":{}}}],["htmlbuttonelement).style.setproperty",{"_index":1341,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["htmlcanvaselement).getboundingclientrect",{"_index":1753,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["htmlcontent",{"_index":1059,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["htmldivelement",{"_index":1946,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["htmlformelement",{"_index":1857,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["htmlinputelement",{"_index":546,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{}}}],["htmlspanelement",{"_index":610,"title":{},"body":{"components/FinderComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/foundFurniture.html":{},"interfaces/roomSpanSettings.html":{}}}],["htmltextareaelement",{"_index":337,"title":{},"body":{"directives/AutoHeightDirective.html":{}}}],["htmlurl",{"_index":1052,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["http",{"_index":660,"title":{},"body":{"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["http://localhost:4200",{"_index":2118,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http_interceptors",{"_index":2115,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http_params",{"_index":151,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/googleAuthData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{},"interfaces/shopData.html":{}}}],["http_params.set('jwt",{"_index":702,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["httpclient",{"_index":101,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/roomData.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["httperrorinterceptor",{"_index":737,"title":{"interceptors/HttpErrorInterceptor.html":{}},"body":{"interceptors/HttpErrorInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["httperrorresponse",{"_index":752,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{}}}],["httpevent",{"_index":750,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{}}}],["httphandler",{"_index":747,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{}}}],["httpinterceptor",{"_index":751,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{}}}],["httpmodule",{"_index":103,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/roomData.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["httpparams",{"_index":130,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/googleAuthData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{},"interfaces/shopData.html":{}}}],["httpparams().set('furniturecardid",{"_index":701,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["httpparams().set('jwt",{"_index":714,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"injectables/ServerImageControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["httprequest",{"_index":745,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{}}}],["id",{"_index":445,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/additionalData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/shopData.html":{}}}],["idcolor",{"_index":1332,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["identifier",{"_index":1361,"title":{},"body":{"coverage.html":{}}}],["idfurniture",{"_index":600,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["idmainimage",{"_index":524,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"components/ImageSliderComponent.html":{},"interfaces/additionalData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/shopData.html":{}}}],["idpage",{"_index":410,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["image",{"_index":228,"title":{},"body":{"components/AppComponent.html":{},"injectables/ClientImageControlService.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"injectables/ServerImageControlService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"coverage.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{}}}],["imageclientcontrolservice",{"_index":1493,"title":{},"body":{"interfaces/editForm.html":{}}}],["imagedatablob",{"_index":1817,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["imagedataresponse",{"_index":1812,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["imagedataresponse.blob",{"_index":1818,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["imagedataresponse.ok",{"_index":1816,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["imagedataurl",{"_index":1810,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["imagefile",{"_index":1229,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["images",{"_index":523,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"components/ImageSliderComponent.html":{},"interfaces/additionalData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/shopData.html":{}}}],["images_blob_array",{"_index":502,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["images_data",{"_index":535,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["imagesarray",{"_index":452,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["imagesarray.map(async",{"_index":504,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["imagesblobarray",{"_index":520,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["imagesdata",{"_index":522,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"components/ImageSliderComponent.html":{},"injectables/ServerImageControlService.html":{},"interfaces/additionalData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["imagesdata.idmainimage",{"_index":1238,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["imagesdata.idmainimage===i",{"_index":787,"title":{},"body":{"components/ImageSliderComponent.html":{}}}],["imagesdata.images.foreach((file",{"_index":1234,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["imageservercontrolservice",{"_index":1492,"title":{},"body":{"interfaces/editForm.html":{}}}],["imageservice",{"_index":587,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["imagesliderclientdata",{"_index":480,"title":{"interfaces/imageSliderClientData.html":{}},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"components/ImageSliderComponent.html":{},"injectables/ServerImageControlService.html":{},"interfaces/additionalData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/shopData.html":{}}}],["imageslidercomponent",{"_index":256,"title":{"components/ImageSliderComponent.html":{}},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"coverage.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{}}}],["imagesliderfromserverdata",{"_index":691,"title":{"interfaces/imageSliderFromServerData.html":{}},"body":{"injectables/FurnitureCardControlService.html":{},"components/ImageSliderComponent.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/shopData.html":{}}}],["imageurl",{"_index":1067,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["img",{"_index":1169,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["implements",{"_index":311,"title":{},"body":{"directives/AutoHeightDirective.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["import",{"_index":52,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["imports",{"_index":211,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"miscellaneous/functions.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["index=\"${indexroom",{"_index":2083,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["index=\"${this.currentidclickedroom",{"_index":1945,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["index=\"${this.currentviewroom",{"_index":2038,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["indexable",{"_index":1357,"title":{},"body":{"interfaces/additionalData.html":{},"interfaces/queryData.html":{}}}],["indexproject",{"_index":920,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["indexroom",{"_index":2015,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["indexvariant",{"_index":1339,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["infinity",{"_index":1291,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["info",{"_index":3,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["initcategories",{"_index":1895,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["initeditform",{"_index":1531,"title":{},"body":{"interfaces/editForm.html":{}}}],["initialized",{"_index":1868,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["initthreejs",{"_index":1645,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["inject",{"_index":331,"title":{},"body":{"directives/AutoHeightDirective.html":{}}}],["inject(elementref",{"_index":327,"title":{},"body":{"directives/AutoHeightDirective.html":{}}}],["injectable",{"_index":0,"title":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"injectables/NotificationService.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{}},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"injectables/NotificationService.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["injectables",{"_index":2,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"injectables/NotificationService.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"index.html":{}}}],["inline",{"_index":1160,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["input",{"_index":320,"title":{},"body":{"directives/AutoHeightDirective.html":{},"components/ImageSliderComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["input.scrollheight",{"_index":340,"title":{},"body":{"directives/AutoHeightDirective.html":{}}}],["input.style.height",{"_index":338,"title":{},"body":{"directives/AutoHeightDirective.html":{}}}],["inputelement",{"_index":573,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["inputfurniturenamesubject",{"_index":656,"title":{},"body":{"injectables/FinderService.html":{}}}],["inputprocess",{"_index":581,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["inputs",{"_index":316,"title":{},"body":{"directives/AutoHeightDirective.html":{},"components/ImageSliderComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["instanceof",{"_index":1965,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["intercept",{"_index":741,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{}}}],["intercept(request",{"_index":744,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{}}}],["interceptor",{"_index":736,"title":{"interceptors/HttpErrorInterceptor.html":{}},"body":{"coverage.html":{}}}],["interceptors",{"_index":738,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{}}}],["interface",{"_index":135,"title":{"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FurnitureCardControlService.html":{},"components/ImageSliderComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ShopService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["interfaces",{"_index":1356,"title":{},"body":{"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"index.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["intersect.object.name",{"_index":1767,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["intersect.object.type",{"_index":1768,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["intersection_z",{"_index":1788,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["intersections",{"_index":1763,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["intersections.find(intersect",{"_index":1766,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["intersections.length",{"_index":1785,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["intersections[0].point.x",{"_index":1787,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["intersections[0].point.z",{"_index":1789,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["intersections_x",{"_index":1786,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["isclick",{"_index":1852,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["isdoubleclick",{"_index":1854,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["isdragging",{"_index":1851,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["iseditformopen",{"_index":1491,"title":{},"body":{"interfaces/editForm.html":{}}}],["isemailaccount",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"interfaces/emailAuthData.html":{},"miscellaneous/functions.html":{},"interfaces/googleAuthData.html":{}}}],["isemailaccount(account",{"_index":149,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"miscellaneous/functions.html":{},"interfaces/furnitureAccountData.html":{}}}],["isemailaccount(authdata",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{}}}],["isemailaccount(changedata",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{}}}],["isemailaccount(createaccountdata",{"_index":156,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["isguideincluded",{"_index":1861,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["isguidevisible",{"_index":1862,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["ismobileview",{"_index":765,"title":{},"body":{"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{}}}],["isoccupied",{"_index":1988,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["items",{"_index":1182,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["join",{"_index":1193,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["json.stringify(querydata",{"_index":1272,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["jspdf",{"_index":1473,"title":{},"body":{"dependencies.html":{}}}],["justify",{"_index":1143,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["jwt",{"_index":34,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"injectables/AuthService.html":{},"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/googleAuthData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/shopData.html":{}}}],["jwt)).furnituredata._id",{"_index":517,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["jwt/delete",{"_index":164,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["jwt/long",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{}}}],["jwt/temporary",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{}}}],["key",{"_index":697,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"injectables/ShopService.html":{},"interfaces/additionalData.html":{},"interfaces/clientFilters.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"interfaces/shopData.html":{}}}],["keyboardevent",{"_index":1772,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["lastplanhouse",{"_index":1859,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["left",{"_index":1158,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["legend",{"_index":240,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["length",{"_index":465,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/shopData.html":{}}}],["letter",{"_index":1107,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["line",{"_index":1091,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["link",{"_index":805,"title":{},"body":{"components/MainPageComponent.html":{}}}],["list",{"_index":1153,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["literal",{"_index":1833,"title":{},"body":{"interfaces/reportResponse.html":{}}}],["load_object",{"_index":1634,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["loaders",{"_index":1579,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["loadfbxmodel",{"_index":1406,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["loadfbxmodel(url",{"_index":1557,"title":{},"body":{"miscellaneous/functions.html":{}}}],["loadfurnituremodel(filemodel",{"_index":1630,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["loadgltfmodel",{"_index":1409,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["loadgltfmodel(url",{"_index":1560,"title":{},"body":{"miscellaneous/functions.html":{}}}],["loadingmanager",{"_index":1559,"title":{},"body":{"miscellaneous/functions.html":{}}}],["loadmodel",{"_index":1403,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["loadmodel(blob",{"_index":1561,"title":{},"body":{"miscellaneous/functions.html":{}}}],["loadmodel(filemodel",{"_index":1635,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["loadobjmodel",{"_index":1411,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["loadobjmodel(url",{"_index":1567,"title":{},"body":{"miscellaneous/functions.html":{}}}],["loadroom",{"_index":1734,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["loaduserdata(jwt",{"_index":1513,"title":{},"body":{"interfaces/editForm.html":{}}}],["location",{"_index":207,"title":{},"body":{"components/AppComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["lodash",{"_index":332,"title":{},"body":{"directives/AutoHeightDirective.html":{},"dependencies.html":{},"interfaces/roomSpanSettings.html":{}}}],["login",{"_index":259,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["loginpagecomponent",{"_index":258,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"coverage.html":{}}}],["logout",{"_index":850,"title":{},"body":{"components/NotificationComponent.html":{},"interfaces/editForm.html":{}}}],["long",{"_index":45,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["main",{"_index":261,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["mainpagecomponent",{"_index":260,"title":{"components/MainPageComponent.html":{}},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"coverage.html":{}}}],["manager",{"_index":1558,"title":{},"body":{"miscellaneous/functions.html":{}}}],["map(object",{"_index":1825,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["margin",{"_index":1084,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["matching",{"_index":88,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"dependencies.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"miscellaneous/functions.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"index.html":{},"interfaces/modelInterface.html":{},"modules.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"properties.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.floor(relative_x",{"_index":1933,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["math.floor(relative_y",{"_index":1935,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["math.round(room_proportions.length",{"_index":1939,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["math.round(room_proportions.width",{"_index":1937,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["max",{"_index":1137,"title":{},"body":{"injectables/ReportService.html":{},"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"interfaces/reportResponse.html":{}}}],["max_z",{"_index":1801,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["maxcost",{"_index":1264,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["maxvalue",{"_index":365,"title":{},"body":{"injectables/CategoryService.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/option.html":{},"interfaces/rangeFilter.html":{},"interfaces/selectFilter.html":{}}}],["maxx",{"_index":1796,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["media",{"_index":1180,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["memberof",{"_index":1062,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["menuopen",{"_index":836,"title":{},"body":{"components/NavigationPanelComponent.html":{}}}],["mergeapplicationconfig(appconfig",{"_index":2121,"title":{},"body":{"miscellaneous/variables.html":{}}}],["message",{"_index":861,"title":{},"body":{"components/NotificationComponent.html":{},"injectables/NotificationService.html":{}}}],["metadata",{"_index":194,"title":{},"body":{"components/AppComponent.html":{},"directives/AutoHeightDirective.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["methods",{"_index":9,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"components/ViewFurnitureComponent.html":{}}}],["mime",{"_index":1562,"title":{},"body":{"miscellaneous/functions.html":{}}}],["min",{"_index":1150,"title":{},"body":{"injectables/ReportService.html":{},"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"interfaces/reportResponse.html":{}}}],["min_z",{"_index":1798,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["mincost",{"_index":1263,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["minvalue",{"_index":363,"title":{},"body":{"injectables/CategoryService.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/option.html":{},"interfaces/rangeFilter.html":{},"interfaces/selectFilter.html":{}}}],["minx",{"_index":1793,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["miscellaneous",{"_index":1549,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":709,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["mobileview",{"_index":317,"title":{},"body":{"directives/AutoHeightDirective.html":{}}}],["model",{"_index":233,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureModelControlService.html":{},"interfaces/clientProportions.html":{},"coverage.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["modelfile",{"_index":729,"title":{},"body":{"injectables/FurnitureModelControlService.html":{}}}],["modelinterface",{"_index":1020,"title":{"interfaces/modelInterface.html":{}},"body":{"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"coverage.html":{},"interfaces/furnitureShopData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["modules",{"_index":1829,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["monospace",{"_index":1090,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["mouse",{"_index":1603,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["mouseevent",{"_index":1750,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["move_room_element",{"_index":1996,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["movedata",{"_index":1633,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["moveroom(event",{"_index":1995,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["multi",{"_index":2117,"title":{},"body":{"miscellaneous/variables.html":{}}}],["n",{"_index":1350,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["n${description",{"_index":1351,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["name",{"_index":26,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/foundFurniture.html":{},"miscellaneous/functions.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["name.length",{"_index":542,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["nameinput",{"_index":543,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["nameinput.focus",{"_index":547,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["navigatetopage",{"_index":794,"title":{},"body":{"components/MainPageComponent.html":{}}}],["navigatetopage(link",{"_index":803,"title":{},"body":{"components/MainPageComponent.html":{}}}],["navigation",{"_index":263,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{}}}],["navigationpanelcomponent",{"_index":262,"title":{"components/NavigationPanelComponent.html":{}},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"coverage.html":{},"interfaces/editForm.html":{}}}],["new",{"_index":66,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/ClientImageControlService.html":{},"components/CreateFurniturePageComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/shopData.html":{}}}],["new.ttf",{"_index":1082,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["new_grid_area",{"_index":2004,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["new_room",{"_index":2055,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["new_room.gridarea",{"_index":2057,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["new_url",{"_index":992,"title":{},"body":{"components/PlanHousePageComponent.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["newindex",{"_index":1342,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["newproject",{"_index":972,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["newproject.projectdata",{"_index":975,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["newxobjectposition",{"_index":1797,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["newzobjectposition",{"_index":1802,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["next",{"_index":746,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{}}}],["next.handle(request).pipe",{"_index":756,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{}}}],["ngafterviewchecked",{"_index":906,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["ngafterviewinit",{"_index":582,"title":{},"body":{"components/FinderComponent.html":{},"components/MainPageComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/foundFurniture.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["ngclass",{"_index":565,"title":{},"body":{"components/FinderComponent.html":{},"components/MainPageComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/foundFurniture.html":{}}}],["ngfor",{"_index":566,"title":{},"body":{"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/roomSpanSettings.html":{}}}],["ngif",{"_index":404,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["ngonchanges",{"_index":1306,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["ngonchanges(changes",{"_index":1610,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["ngondestroy",{"_index":419,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["ngoninit",{"_index":314,"title":{},"body":{"directives/AutoHeightDirective.html":{},"components/CreateFurniturePageComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{},"interfaces/roomSpanSettings.html":{}}}],["ngtemplateoutlet",{"_index":1840,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["ngx",{"_index":54,"title":{},"body":{"injectables/AccountCookieService.html":{},"components/ViewFurnitureComponent.html":{},"dependencies.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["ngxspinnermodule",{"_index":1576,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["ngxspinnerservice",{"_index":1577,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["nickname",{"_index":140,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/furnitureAccountData.html":{}}}],["nodelistof).foreach(elem",{"_index":820,"title":{},"body":{"components/MainPageComponent.html":{}}}],["none",{"_index":824,"title":{},"body":{"components/MainPageComponent.html":{},"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["notification",{"_index":429,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["notification'},{'name",{"_index":265,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["notification.component.html",{"_index":846,"title":{},"body":{"components/NotificationComponent.html":{}}}],["notification.component.scss",{"_index":847,"title":{},"body":{"components/NotificationComponent.html":{}}}],["notificationcomponent",{"_index":197,"title":{"components/NotificationComponent.html":{}},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"coverage.html":{}}}],["notificationservice",{"_index":430,"title":{"injectables/NotificationService.html":{}},"body":{"components/CreateFurniturePageComponent.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"coverage.html":{},"interfaces/editForm.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["null",{"_index":172,"title":{},"body":{"injectables/AccountService.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FurnitureCardControlService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ShopService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/shopData.html":{}}}],["number",{"_index":364,"title":{},"body":{"injectables/CategoryService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FurnitureCardControlService.html":{},"components/ImageSliderComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ReportService.html":{},"injectables/ShopService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["obj",{"_index":1565,"title":{},"body":{"miscellaneous/functions.html":{}}}],["object",{"_index":1171,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData-1.html":{}}}],["object.keys(querydata).length",{"_index":1269,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["object.name",{"_index":1824,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["object.position",{"_index":1704,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["object.rotation.y",{"_index":1714,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["object.scale.set(general_coefficient",{"_index":1732,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["object.type",{"_index":1742,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["object.userdata",{"_index":1706,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["object_position",{"_index":1703,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["object_position.x",{"_index":1708,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["object_position.z",{"_index":1711,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["objectid",{"_index":1580,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["objectloadinterface",{"_index":1416,"title":{"interfaces/objectLoadInterface.html":{}},"body":{"coverage.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["objects",{"_index":1028,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["objects_scene_array",{"_index":1822,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["objectsavedata",{"_index":1705,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["objectsavedata.xmetersdistance",{"_index":1716,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["objectsavedata.yrotate",{"_index":1718,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["objectsavedata.zmetersdistance",{"_index":1717,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["objectsceneinterface",{"_index":1021,"title":{"interfaces/objectSceneInterface.html":{}},"body":{"injectables/ProjectService.html":{},"coverage.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["objectsize",{"_index":1791,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["objectsize.length",{"_index":1800,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["objectsize.width",{"_index":1795,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["objectx",{"_index":1919,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["objecty",{"_index":1920,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["observable",{"_index":669,"title":{},"body":{"injectables/FinderService.html":{},"interceptors/HttpErrorInterceptor.html":{},"injectables/NotificationService.html":{}}}],["offset",{"_index":1259,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["oldcameraposition",{"_index":1806,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["oldcamerarotation",{"_index":1808,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["oldsizeviewroom",{"_index":1858,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["onchanges",{"_index":1301,"title":{},"body":{"components/ViewFurnitureComponent.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["oncontextmenu(event",{"_index":2009,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["ondestroy",{"_index":402,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["oninit",{"_index":312,"title":{},"body":{"directives/AutoHeightDirective.html":{},"components/CreateFurniturePageComponent.html":{},"components/ImageSliderComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/roomSpanSettings.html":{}}}],["oninput",{"_index":315,"title":{},"body":{"directives/AutoHeightDirective.html":{}}}],["oninput(event",{"_index":321,"title":{},"body":{"directives/AutoHeightDirective.html":{}}}],["onmouseclick(event",{"_index":1749,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["onmouseleave(event",{"_index":1955,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["onmousemove(event",{"_index":1783,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["onmouseup(event",{"_index":1961,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["onresize(event",{"_index":1745,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["onscroll",{"_index":2011,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["openaddmodule",{"_index":907,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["opencreatefurniture",{"_index":795,"title":{},"body":{"components/MainPageComponent.html":{}}}],["openeditform",{"_index":1539,"title":{},"body":{"interfaces/editForm.html":{}}}],["openfoundresultslist",{"_index":583,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["openfurniturevariant",{"_index":1307,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["openfurniturevariant(colorbutton",{"_index":1317,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["openhtmlinnewtab",{"_index":1043,"title":{},"body":{"injectables/ReportService.html":{}}}],["openhtmlinnewtab(roomname",{"_index":1058,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["openlink",{"_index":1174,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["openlink,.shoplink",{"_index":1184,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["openproject",{"_index":908,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["openproject(indexproject",{"_index":925,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["openproject(projectid",{"_index":1543,"title":{},"body":{"interfaces/editForm.html":{}}}],["openscene",{"_index":2032,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["openviewfurniture",{"_index":796,"title":{},"body":{"components/MainPageComponent.html":{}}}],["openviewroom(indexroom",{"_index":2080,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["option",{"_index":356,"title":{"interfaces/option.html":{}},"body":{"injectables/CategoryService.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"coverage.html":{},"interfaces/option.html":{},"interfaces/rangeFilter.html":{},"interfaces/selectFilter.html":{}}}],["optional",{"_index":28,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/editForm.html":{},"miscellaneous/functions.html":{},"interfaces/roomData.html":{}}}],["optionrangequerydata",{"_index":1262,"title":{"interfaces/optionRangeQueryData.html":{}},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"coverage.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["options",{"_index":360,"title":{},"body":{"injectables/CategoryService.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/option.html":{},"interfaces/rangeFilter.html":{},"interfaces/selectFilter.html":{}}}],["optionselectquerydata",{"_index":1261,"title":{"interfaces/optionSelectQueryData.html":{}},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"coverage.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["orbitcontrols",{"_index":1574,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["orbitcontrols(this.camera",{"_index":1684,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["otherstartcolumn",{"_index":1918,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["otherstartrow",{"_index":1917,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["output",{"_index":1572,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["overview",{"_index":1568,"title":{"index.html":{}},"body":{"index.html":{}}}],["package",{"_index":1452,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["padding",{"_index":1085,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["paddingpolarangle",{"_index":1692,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["page",{"_index":403,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/MainPageComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{}}}],["page'},{'name",{"_index":247,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["page.component.html",{"_index":405,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/MainPageComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{}}}],["page.component.scss",{"_index":407,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/MainPageComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{}}}],["page.component.ts",{"_index":401,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/MainPageComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/clientProportions.html":{},"coverage.html":{},"interfaces/editForm.html":{}}}],["page.component.ts:104",{"_index":449,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["page.component.ts:116",{"_index":927,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:123",{"_index":451,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["page.component.ts:135",{"_index":917,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:137",{"_index":443,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["page.component.ts:151",{"_index":929,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:158",{"_index":438,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["page.component.ts:178",{"_index":919,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:189",{"_index":935,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:194",{"_index":453,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/PlanHousePageComponent.html":{}}}],["page.component.ts:203",{"_index":932,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:21",{"_index":798,"title":{},"body":{"components/MainPageComponent.html":{}}}],["page.component.ts:211",{"_index":914,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:219",{"_index":924,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:227",{"_index":915,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:230",{"_index":435,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["page.component.ts:238",{"_index":926,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:245",{"_index":944,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:289",{"_index":437,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["page.component.ts:29",{"_index":813,"title":{},"body":{"components/MainPageComponent.html":{}}}],["page.component.ts:309",{"_index":441,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["page.component.ts:318",{"_index":440,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["page.component.ts:32",{"_index":812,"title":{},"body":{"components/MainPageComponent.html":{}}}],["page.component.ts:330",{"_index":444,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["page.component.ts:35",{"_index":469,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/MainPageComponent.html":{}}}],["page.component.ts:37",{"_index":467,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["page.component.ts:38",{"_index":814,"title":{},"body":{"components/MainPageComponent.html":{}}}],["page.component.ts:41",{"_index":456,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["page.component.ts:42",{"_index":913,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:44",{"_index":806,"title":{},"body":{"components/MainPageComponent.html":{}}}],["page.component.ts:45",{"_index":458,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["page.component.ts:50",{"_index":466,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["page.component.ts:56",{"_index":938,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:57",{"_index":809,"title":{},"body":{"components/MainPageComponent.html":{}}}],["page.component.ts:59",{"_index":934,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:61",{"_index":431,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["page.component.ts:62",{"_index":936,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:65",{"_index":933,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:67",{"_index":799,"title":{},"body":{"components/MainPageComponent.html":{}}}],["page.component.ts:68",{"_index":937,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:72",{"_index":940,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:74",{"_index":801,"title":{},"body":{"components/MainPageComponent.html":{}}}],["page.component.ts:78",{"_index":923,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:79",{"_index":447,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["page.component.ts:83",{"_index":811,"title":{},"body":{"components/MainPageComponent.html":{}}}],["page.component.ts:90",{"_index":810,"title":{},"body":{"components/MainPageComponent.html":{},"components/PlanHousePageComponent.html":{}}}],["page.component.ts:95",{"_index":446,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["page.component.ts:97",{"_index":921,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["page.component.ts:98",{"_index":804,"title":{},"body":{"components/MainPageComponent.html":{}}}],["page.mock",{"_index":817,"title":{},"body":{"components/MainPageComponent.html":{}}}],["page/account",{"_index":1372,"title":{},"body":{"coverage.html":{},"interfaces/editForm.html":{}}}],["page/create",{"_index":400,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{},"coverage.html":{}}}],["page/login",{"_index":1388,"title":{},"body":{"coverage.html":{}}}],["page/main",{"_index":789,"title":{},"body":{"components/MainPageComponent.html":{},"coverage.html":{}}}],["page/plan",{"_index":893,"title":{},"body":{"components/PlanHousePageComponent.html":{},"coverage.html":{}}}],["page/shop",{"_index":1420,"title":{},"body":{"coverage.html":{}}}],["pageinit",{"_index":420,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/PlanHousePageComponent.html":{}}}],["pageinit(jwt",{"_index":448,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["panel",{"_index":833,"title":{},"body":{"components/NavigationPanelComponent.html":{}}}],["panel'},{'name",{"_index":264,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["panel.component",{"_index":474,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/MainPageComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{}}}],["panel.component.html",{"_index":834,"title":{},"body":{"components/NavigationPanelComponent.html":{}}}],["panel.component.scss",{"_index":835,"title":{},"body":{"components/NavigationPanelComponent.html":{}}}],["panel.component.ts",{"_index":832,"title":{},"body":{"components/NavigationPanelComponent.html":{},"coverage.html":{}}}],["panel.component.ts:20",{"_index":842,"title":{},"body":{"components/NavigationPanelComponent.html":{}}}],["panel.component.ts:23",{"_index":841,"title":{},"body":{"components/NavigationPanelComponent.html":{}}}],["panel.component.ts:29",{"_index":839,"title":{},"body":{"components/NavigationPanelComponent.html":{}}}],["panel.component.ts:40",{"_index":838,"title":{},"body":{"components/NavigationPanelComponent.html":{}}}],["panel.component.ts:50",{"_index":840,"title":{},"body":{"components/NavigationPanelComponent.html":{}}}],["panel/navigation",{"_index":473,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/clientProportions.html":{},"coverage.html":{},"interfaces/editForm.html":{}}}],["param",{"_index":63,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/ClientImageControlService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/shopData.html":{}}}],["parameters",{"_index":24,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"components/ViewFurnitureComponent.html":{},"miscellaneous/functions.html":{}}}],["paramobject",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{}}}],["paramobject.password",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{}}}],["params",{"_index":165,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/roomData.html":{},"interfaces/shopData.html":{}}}],["params.append('filters",{"_index":1271,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["params.get('id",{"_index":489,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["params.get('planid",{"_index":963,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["paramsitem",{"_index":1155,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["paramslist",{"_index":1152,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["paramsspan",{"_index":1148,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["paramstitle",{"_index":1145,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["parent_element",{"_index":1880,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["parent_element.classlist.contains('projectpreviewspan",{"_index":1882,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["parseint(params.get('planid",{"_index":965,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["parseint(this.route.snapshot.params['roomid",{"_index":953,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["password",{"_index":137,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/googleAuthData.html":{}}}],["path",{"_index":74,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["pdf",{"_index":1015,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["pipe",{"_index":387,"title":{"pipes/CostFormatPipe.html":{}},"body":{"pipes/CostFormatPipe.html":{},"coverage.html":{},"index.html":{}}}],["pipes",{"_index":389,"title":{},"body":{"pipes/CostFormatPipe.html":{}}}],["pipes/cost",{"_index":614,"title":{},"body":{"components/FinderComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/foundFurniture.html":{}}}],["pipetransform",{"_index":397,"title":{},"body":{"pipes/CostFormatPipe.html":{}}}],["plan",{"_index":266,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["plan_id",{"_index":964,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["planhouse",{"_index":808,"title":{},"body":{"components/MainPageComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/roomSpanSettings.html":{}}}],["planhousecomponent",{"_index":201,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"coverage.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["planhouseemitter",{"_index":1869,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["planhouseexampledata",{"_index":792,"title":{},"body":{"components/MainPageComponent.html":{}}}],["planhousepagecomponent",{"_index":268,"title":{"components/PlanHousePageComponent.html":{}},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"coverage.html":{}}}],["planid",{"_index":916,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["plugins",{"_index":1464,"title":{},"body":{"dependencies.html":{}}}],["position",{"_index":1156,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["postcreateaccount",{"_index":98,"title":{},"body":{"injectables/AccountService.html":{}}}],["postcreateaccount(createaccountdata",{"_index":115,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["postcreatefurniturecard",{"_index":675,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["postcreatefurniturecard(furnituredata",{"_index":684,"title":{},"body":{"injectables/FurnitureCardControlService.html":{}}}],["postcreatelongjwt",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{}}}],["postcreatelongjwt(authdata",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{}}}],["postcreateproject",{"_index":1003,"title":{},"body":{"injectables/ProjectService.html":{}}}],["postcreateproject(jwt",{"_index":1016,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["postcreateshortjwt",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{}}}],["postcreateshortjwt(email",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{}}}],["postuploadfurnituremodel",{"_index":721,"title":{},"body":{"injectables/FurnitureModelControlService.html":{}}}],["postuploadfurnituremodel(modelfile",{"_index":727,"title":{},"body":{"injectables/FurnitureModelControlService.html":{}}}],["postuploadprojectimages",{"_index":1213,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["postuploadprojectimages(color",{"_index":1225,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["postuploaduseravatar",{"_index":1214,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["postuploaduseravatar(imagefile",{"_index":1227,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["previewurl",{"_index":145,"title":{},"body":{"injectables/AccountService.html":{},"injectables/ReportService.html":{},"injectables/ShopService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"interfaces/reportResponse.html":{}}}],["previousgridarea",{"_index":1849,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["private",{"_index":62,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["proccessdescription",{"_index":1308,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["proccessdescription(description",{"_index":1321,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["proccessdescription(furnituredata.description,furnituredata.proportions",{"_index":1354,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["profile",{"_index":829,"title":{},"body":{"components/MainPageComponent.html":{}}}],["project",{"_index":828,"title":{},"body":{"components/MainPageComponent.html":{},"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["project.service",{"_index":129,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["project_data",{"_index":980,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["projectdata.name",{"_index":997,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["projectid",{"_index":1008,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/editForm.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["projectinformation",{"_index":127,"title":{"interfaces/projectInformation.html":{}},"body":{"injectables/AccountService.html":{},"injectables/ProjectService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["projectnameform",{"_index":900,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["projects",{"_index":141,"title":{},"body":{"injectables/AccountService.html":{},"components/PlanHousePageComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/furnitureAccountData.html":{}}}],["projectserverinformation",{"_index":128,"title":{"interfaces/projectServerInformation.html":{}},"body":{"injectables/AccountService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["projectservice",{"_index":200,"title":{"injectables/ProjectService.html":{}},"body":{"components/AppComponent.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"coverage.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{}}}],["promise",{"_index":109,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"components/CreateFurniturePageComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"miscellaneous/functions.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/googleAuthData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/rangeFilter.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["promise((resolve",{"_index":376,"title":{},"body":{"injectables/ClientImageControlService.html":{}}}],["promise.all",{"_index":503,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["properties",{"_index":91,"title":{"properties.html":{}},"body":{"injectables/AccountService.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"properties.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["proportions",{"_index":462,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/ReportService.html":{},"injectables/ShopService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/additionalData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData-1.html":{},"interfaces/shopData.html":{}}}],["proportions.height",{"_index":549,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{}}}],["proportions.length",{"_index":551,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{}}}],["proportions.width",{"_index":550,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{}}}],["protected",{"_index":409,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["provide",{"_index":2114,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provideanimations",{"_index":2111,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provideclienthydration",{"_index":2110,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providedin",{"_index":58,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"injectables/NotificationService.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["provideeventplugins",{"_index":2113,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providehttpclient(withinterceptorsfromdi",{"_index":2112,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providerouter(routes",{"_index":2109,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providers",{"_index":195,"title":{},"body":{"components/AppComponent.html":{},"miscellaneous/variables.html":{}}}],["providers:[autoheightdirective,notificationcomponent,accountservice,authservice,accountcookieservice,serverimagecontrolservice,projectservice,planhousecomponent,scenecomponent,furniturecardcontrolservice,furnituremodelcontrolservice,shopservice,finderservice,location",{"_index":239,"title":{},"body":{"components/AppComponent.html":{}}}],["public",{"_index":1733,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["puppeteer",{"_index":1480,"title":{},"body":{"dependencies.html":{}}}],["putupdatebasedata",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{}}}],["putupdatebasedata(changedata",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{}}}],["putupdatefurniturecard",{"_index":676,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["putupdatefurniturecard(furniturecardupdatedata",{"_index":686,"title":{},"body":{"injectables/FurnitureCardControlService.html":{}}}],["putupdateproject",{"_index":1004,"title":{},"body":{"injectables/ProjectService.html":{}}}],["putupdateproject(jwt",{"_index":1018,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["putupdatesecondaryaccountdata",{"_index":99,"title":{},"body":{"injectables/AccountService.html":{}}}],["putupdatesecondaryaccountdata(changedata",{"_index":118,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["px",{"_index":341,"title":{},"body":{"directives/AutoHeightDirective.html":{},"interfaces/roomSpanSettings.html":{}}}],["q",{"_index":1778,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["quality",{"_index":379,"title":{},"body":{"injectables/ClientImageControlService.html":{}}}],["query",{"_index":663,"title":{},"body":{"injectables/FinderService.html":{}}}],["querydata",{"_index":1255,"title":{"interfaces/queryData.html":{}},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"coverage.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["queryvalue",{"_index":357,"title":{},"body":{"injectables/CategoryService.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/option.html":{},"interfaces/rangeFilter.html":{},"interfaces/selectFilter.html":{}}}],["radius",{"_index":1125,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData-1.html":{}}}],["range",{"_index":361,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ShopService.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/selectFilter.html":{},"miscellaneous/typealiases.html":{}}}],["rangefilter",{"_index":362,"title":{"interfaces/rangeFilter.html":{}},"body":{"injectables/CategoryService.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"coverage.html":{},"interfaces/option.html":{},"interfaces/rangeFilter.html":{},"interfaces/selectFilter.html":{},"miscellaneous/typealiases.html":{}}}],["raycaster",{"_index":1601,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["reactiveformsmodule",{"_index":895,"title":{},"body":{"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/editForm.html":{},"interfaces/roomSpanSettings.html":{}}}],["read",{"_index":457,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["reader",{"_index":1064,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["reader.onload",{"_index":1066,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["reader.readasdataurl(renderimage",{"_index":1071,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["reader.result",{"_index":1068,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["real_proportions_coefficient",{"_index":1729,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["received_data",{"_index":622,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["received_data.length",{"_index":625,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["rect",{"_index":1752,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["rect.height",{"_index":1759,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["rect.left",{"_index":1755,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["rect.top",{"_index":1758,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["rect.width",{"_index":1756,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["rectangle_mesh_size",{"_index":1790,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["rectangle_mesh_size.length",{"_index":1799,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["rectangle_mesh_size.width",{"_index":1794,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["rectangle_size.length",{"_index":1728,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["rectangle_size.width",{"_index":1726,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["rectanglemesh",{"_index":1605,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["reject",{"_index":377,"title":{},"body":{"injectables/ClientImageControlService.html":{}}}],["reject(error",{"_index":386,"title":{},"body":{"injectables/ClientImageControlService.html":{}}}],["relative",{"_index":1157,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["relative_x",{"_index":1924,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["relative_y",{"_index":1926,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["reloadpage",{"_index":851,"title":{},"body":{"components/NotificationComponent.html":{}}}],["renderer",{"_index":585,"title":{},"body":{"components/FinderComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/foundFurniture.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["renderer2",{"_index":586,"title":{},"body":{"components/FinderComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/foundFurniture.html":{},"interfaces/roomSpanSettings.html":{}}}],["renderimage",{"_index":1013,"title":{},"body":{"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{}}}],["rendertitle",{"_index":1110,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["renderurl",{"_index":1056,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["report.html",{"_index":1205,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["report.service",{"_index":1023,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["reportresponse",{"_index":1022,"title":{"interfaces/reportResponse.html":{}},"body":{"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"coverage.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{}}}],["reportservice",{"_index":1005,"title":{"injectables/ReportService.html":{}},"body":{"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"coverage.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{}}}],["request",{"_index":749,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{}}}],["requestanimationframe",{"_index":1665,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["requesturl",{"_index":1267,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["resetroomposition(clientx",{"_index":1942,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["resize",{"_index":800,"title":{},"body":{"components/MainPageComponent.html":{}}}],["resolve(compressedfile",{"_index":383,"title":{},"body":{"injectables/ClientImageControlService.html":{}}}],["response",{"_index":493,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/ProjectService.html":{},"injectables/ShopService.html":{},"interfaces/additionalData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/roomData.html":{},"interfaces/shopData.html":{}}}],["response.authormatched",{"_index":495,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["response.blob",{"_index":507,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["response.furniturecard",{"_index":498,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["response.furniturecard.colors.map(colordata",{"_index":711,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["response.furnitures",{"_index":1034,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["response.furnitures.map(furnituredata",{"_index":1035,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["response.json",{"_index":1281,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["response.ok",{"_index":1277,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["response.resultsarray",{"_index":1283,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["response.status",{"_index":1280,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["response.text",{"_index":1279,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["response?.furniturecard",{"_index":706,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["responsetype",{"_index":731,"title":{},"body":{"injectables/FurnitureModelControlService.html":{}}}],["results",{"_index":87,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"dependencies.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"miscellaneous/functions.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"index.html":{},"interfaces/modelInterface.html":{},"modules.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"properties.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results_array",{"_index":1282,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["results_array.map(furniture",{"_index":1285,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["resultsarray",{"_index":1251,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["resultsarray.foreach(furnituredata",{"_index":1292,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["resultsclientfiltersdata",{"_index":1257,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["return",{"_index":80,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["returns",{"_index":30,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"miscellaneous/functions.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["rgba(0",{"_index":1130,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["right",{"_index":1345,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["room",{"_index":1033,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["room.gridarea.split('/').map(number",{"_index":1916,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["room_data",{"_index":978,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["room_element",{"_index":2037,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["room_element.getboundingclientrect",{"_index":2086,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["room_id",{"_index":952,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["room_objects_data",{"_index":1827,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["room_proportions",{"_index":1682,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["room_proportions.length",{"_index":1696,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["roomdata",{"_index":931,"title":{"interfaces/roomData.html":{},"interfaces/roomData-1.html":{}},"body":{"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"coverage.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["roomdata.furnitures.map(furniture",{"_index":1186,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["roomdata.name",{"_index":1072,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["roomdata.objects",{"_index":1736,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["roomdataplan",{"_index":1578,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["roomfloorbase",{"_index":1698,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["roomform",{"_index":2094,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["roomguidetemplate",{"_index":1877,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["roomheight",{"_index":2085,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["roomid",{"_index":922,"title":{},"body":{"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["roomname",{"_index":1054,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["roomproportions",{"_index":1027,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["rooms",{"_index":981,"title":{},"body":{"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["roomsguidetemplate1",{"_index":1873,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["roomsguidetemplate2",{"_index":1875,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["roomspan",{"_index":1850,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["roomspansettings",{"_index":1401,"title":{"interfaces/roomSpanSettings.html":{}},"body":{"coverage.html":{},"interfaces/roomSpanSettings.html":{}}}],["roomview",{"_index":2045,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["roomwidth",{"_index":2084,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["root",{"_index":59,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"injectables/NotificationService.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["root'},{'name",{"_index":248,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["rotate",{"_index":2075,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["rotateangle",{"_index":1773,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["rotatetargetobject(event",{"_index":1771,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["route",{"_index":432,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/foundFurniture.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["router",{"_index":427,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/MainPageComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{}}}],["routerlink",{"_index":567,"title":{},"body":{"components/FinderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{}}}],["routeroutlet",{"_index":212,"title":{},"body":{"components/AppComponent.html":{}}}],["routeroutlet,notificationcomponent",{"_index":238,"title":{},"body":{"components/AppComponent.html":{}}}],["routesub",{"_index":411,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["row",{"_index":1142,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{},"interfaces/roomSpanSettings.html":{}}}],["rxjs",{"_index":134,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"components/CreateFurniturePageComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"injectables/NotificationService.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"dependencies.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/roomData.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["rxjs/operators",{"_index":755,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{}}}],["samesite",{"_index":75,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["sans",{"_index":1097,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["savechanges",{"_index":1501,"title":{},"body":{"interfaces/editForm.html":{}}}],["savehouse",{"_index":1904,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["saveobjectsemitter",{"_index":1592,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["saveproject",{"_index":909,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["saveroom",{"_index":1632,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["scene",{"_index":1589,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["scene'},{'name",{"_index":270,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["scene.component.html",{"_index":1590,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["scene.component.scss",{"_index":1591,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["scene/scene.component",{"_index":1839,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["scene_proportions_coefficient",{"_index":1731,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["scenecomponent",{"_index":202,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"coverage.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["sceneopentoggle",{"_index":1864,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["segments",{"_index":1669,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["select",{"_index":355,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ShopService.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/selectFilter.html":{},"miscellaneous/typealiases.html":{}}}],["selectfilter",{"_index":358,"title":{"interfaces/selectFilter.html":{}},"body":{"injectables/CategoryService.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"coverage.html":{},"interfaces/option.html":{},"interfaces/rangeFilter.html":{},"interfaces/selectFilter.html":{},"miscellaneous/typealiases.html":{}}}],["selector",{"_index":208,"title":{},"body":{"components/AppComponent.html":{},"directives/AutoHeightDirective.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["self",{"_index":1120,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["serif",{"_index":1098,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["serverconfig",{"_index":1368,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["serverimagecontrol",{"_index":426,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["serverimagecontrolservice",{"_index":199,"title":{"injectables/ServerImageControlService.html":{}},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/ServerImageControlService.html":{},"interfaces/clientProportions.html":{},"coverage.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{}}}],["service",{"_index":56,"title":{},"body":{"injectables/AccountCookieService.html":{},"dependencies.html":{}}}],["services/account",{"_index":226,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["services/account.service",{"_index":224,"title":{},"body":{"components/AppComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/editForm.html":{}}}],["services/auth.service",{"_index":225,"title":{},"body":{"components/AppComponent.html":{},"interfaces/editForm.html":{}}}],["services/category.service",{"_index":1843,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["services/client",{"_index":1489,"title":{},"body":{"interfaces/editForm.html":{}}}],["services/finder.service",{"_index":235,"title":{},"body":{"components/AppComponent.html":{},"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["services/furniture",{"_index":231,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["services/notification.service",{"_index":479,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["services/project.service",{"_index":230,"title":{},"body":{"components/AppComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["services/server",{"_index":227,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{}}}],["services/shop.service",{"_index":234,"title":{},"body":{"components/AppComponent.html":{}}}],["set('accounttype",{"_index":152,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/googleAuthData.html":{}}}],["set('color",{"_index":1236,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["set('email",{"_index":157,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/googleAuthData.html":{}}}],["set('filename",{"_index":734,"title":{},"body":{"injectables/FurnitureModelControlService.html":{}}}],["set('furniturecardid",{"_index":716,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"injectables/ServerImageControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["set('idmainimage",{"_index":1237,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["set('jwt",{"_index":162,"title":{},"body":{"injectables/AccountService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{},"interfaces/shopData.html":{}}}],["set('name",{"_index":1030,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["set('nickname",{"_index":154,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/furnitureAccountData.html":{}}}],["set('password",{"_index":159,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/googleAuthData.html":{}}}],["set('projectid",{"_index":1031,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["set('roomid",{"_index":1032,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["set(filtersobject.colors",{"_index":1298,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["seterror",{"_index":873,"title":{},"body":{"injectables/NotificationService.html":{}}}],["seterror(message",{"_index":876,"title":{},"body":{"injectables/NotificationService.html":{}}}],["setfurniturename",{"_index":658,"title":{},"body":{"injectables/FinderService.html":{}}}],["setfurniturename(name",{"_index":664,"title":{},"body":{"injectables/FinderService.html":{}}}],["setguiderule",{"_index":16,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["setjwt",{"_index":17,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["setjwt(jwt",{"_index":43,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["setsuccess",{"_index":874,"title":{},"body":{"injectables/NotificationService.html":{}}}],["setsuccess(message",{"_index":879,"title":{},"body":{"injectables/NotificationService.html":{}}}],["settimeout",{"_index":627,"title":{},"body":{"components/FinderComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/foundFurniture.html":{},"interfaces/roomSpanSettings.html":{}}}],["setusertype",{"_index":18,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["setusertype(accounttype",{"_index":49,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["shadow",{"_index":1128,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["shape",{"_index":1672,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["shape.lineto",{"_index":1677,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["shape.lineto(width",{"_index":1675,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["shape.moveto",{"_index":1674,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["shape.quadraticcurveto",{"_index":1678,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["shape.quadraticcurveto(width",{"_index":1676,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["shape_ratio",{"_index":1724,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["shop",{"_index":272,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"injectables/ShopService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["shop/${category",{"_index":650,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["shopdata",{"_index":693,"title":{"interfaces/shopData.html":{}},"body":{"injectables/FurnitureCardControlService.html":{},"injectables/ReportService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/reportResponse.html":{},"interfaces/shopData.html":{}}}],["shopdata.cost",{"_index":1355,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["shoppagecomponent",{"_index":271,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"coverage.html":{}}}],["shops",{"_index":460,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/ReportService.html":{},"interfaces/additionalData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/reportResponse.html":{},"interfaces/shopData.html":{}}}],["shops.length",{"_index":556,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["shopservice",{"_index":205,"title":{"injectables/ShopService.html":{}},"body":{"components/AppComponent.html":{},"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"coverage.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["shopsspan",{"_index":1159,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["shopstitle",{"_index":1146,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["showguide",{"_index":1898,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["side_area",{"_index":1929,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["signal",{"_index":1275,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["simplechanges",{"_index":1324,"title":{},"body":{"components/ViewFurnitureComponent.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["size",{"_index":1102,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["sizing",{"_index":1185,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["slider",{"_index":761,"title":{},"body":{"components/ImageSliderComponent.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{}}}],["slider'},{'name",{"_index":257,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["slider.component",{"_index":482,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/ServerImageControlService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/additionalData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["slider.component.html",{"_index":763,"title":{},"body":{"components/ImageSliderComponent.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{}}}],["slider.component.scss",{"_index":764,"title":{},"body":{"components/ImageSliderComponent.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{}}}],["slider.component.ts",{"_index":760,"title":{},"body":{"components/ImageSliderComponent.html":{},"coverage.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{}}}],["slider.component.ts:40",{"_index":783,"title":{},"body":{"components/ImageSliderComponent.html":{}}}],["slider.component.ts:45",{"_index":784,"title":{},"body":{"components/ImageSliderComponent.html":{}}}],["slider.component.ts:52",{"_index":773,"title":{},"body":{"components/ImageSliderComponent.html":{}}}],["slider.component.ts:58",{"_index":772,"title":{},"body":{"components/ImageSliderComponent.html":{}}}],["slider.component.ts:64",{"_index":782,"title":{},"body":{"components/ImageSliderComponent.html":{}}}],["slider.component.ts:73",{"_index":775,"title":{},"body":{"components/ImageSliderComponent.html":{}}}],["slider.component.ts:81",{"_index":777,"title":{},"body":{"components/ImageSliderComponent.html":{}}}],["slider.component.ts:91",{"_index":779,"title":{},"body":{"components/ImageSliderComponent.html":{}}}],["slider/image",{"_index":481,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"components/ImageSliderComponent.html":{},"injectables/ServerImageControlService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/additionalData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/shopData.html":{}}}],["solid",{"_index":1116,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["source",{"_index":4,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{}}}],["spacing",{"_index":1108,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["spanheight",{"_index":2088,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["spanwidth",{"_index":2087,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["spinner",{"_index":1478,"title":{},"body":{"dependencies.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["src",{"_index":1077,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["src/.../account.service.ts",{"_index":1552,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../app.config.server.ts",{"_index":2107,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../app.config.ts",{"_index":2105,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.service.ts",{"_index":2102,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../category.service.ts",{"_index":2103,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../fbx.loader.ts",{"_index":1553,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../gltf",{"_index":1554,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../index.ts",{"_index":1555,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../main.server.ts",{"_index":2106,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../obj.loader.ts",{"_index":1556,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../reusable",{"_index":1551,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.component.ts",{"_index":193,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app.component.ts:26",{"_index":217,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app.config.server.ts",{"_index":1364,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.config.ts",{"_index":1369,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/components/account",{"_index":1371,"title":{},"body":{"coverage.html":{},"interfaces/editForm.html":{}}}],["src/components/create",{"_index":399,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{},"coverage.html":{}}}],["src/components/finder/finder.component.ts",{"_index":562,"title":{},"body":{"components/FinderComponent.html":{},"coverage.html":{},"interfaces/foundFurniture.html":{}}}],["src/components/finder/finder.component.ts:105",{"_index":592,"title":{},"body":{"components/FinderComponent.html":{}}}],["src/components/finder/finder.component.ts:113",{"_index":607,"title":{},"body":{"components/FinderComponent.html":{}}}],["src/components/finder/finder.component.ts:118",{"_index":591,"title":{},"body":{"components/FinderComponent.html":{}}}],["src/components/finder/finder.component.ts:130",{"_index":590,"title":{},"body":{"components/FinderComponent.html":{}}}],["src/components/finder/finder.component.ts:147",{"_index":603,"title":{},"body":{"components/FinderComponent.html":{}}}],["src/components/finder/finder.component.ts:167",{"_index":599,"title":{},"body":{"components/FinderComponent.html":{}}}],["src/components/finder/finder.component.ts:177",{"_index":602,"title":{},"body":{"components/FinderComponent.html":{}}}],["src/components/finder/finder.component.ts:40",{"_index":611,"title":{},"body":{"components/FinderComponent.html":{}}}],["src/components/finder/finder.component.ts:45",{"_index":609,"title":{},"body":{"components/FinderComponent.html":{}}}],["src/components/finder/finder.component.ts:50",{"_index":608,"title":{},"body":{"components/FinderComponent.html":{}}}],["src/components/finder/finder.component.ts:55",{"_index":588,"title":{},"body":{"components/FinderComponent.html":{}}}],["src/components/finder/finder.component.ts:69",{"_index":605,"title":{},"body":{"components/FinderComponent.html":{}}}],["src/components/finder/finder.component.ts:78",{"_index":595,"title":{},"body":{"components/FinderComponent.html":{}}}],["src/components/finder/finder.component.ts:97",{"_index":606,"title":{},"body":{"components/FinderComponent.html":{}}}],["src/components/image",{"_index":759,"title":{},"body":{"components/ImageSliderComponent.html":{},"coverage.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{}}}],["src/components/login",{"_index":1387,"title":{},"body":{"coverage.html":{}}}],["src/components/main",{"_index":788,"title":{},"body":{"components/MainPageComponent.html":{},"coverage.html":{}}}],["src/components/navigation",{"_index":831,"title":{},"body":{"components/NavigationPanelComponent.html":{},"coverage.html":{}}}],["src/components/notification/notification.component.ts",{"_index":845,"title":{},"body":{"components/NotificationComponent.html":{},"coverage.html":{}}}],["src/components/notification/notification.component.ts:17",{"_index":853,"title":{},"body":{"components/NotificationComponent.html":{}}}],["src/components/notification/notification.component.ts:24",{"_index":857,"title":{},"body":{"components/NotificationComponent.html":{}}}],["src/components/notification/notification.component.ts:27",{"_index":858,"title":{},"body":{"components/NotificationComponent.html":{}}}],["src/components/notification/notification.component.ts:33",{"_index":855,"title":{},"body":{"components/NotificationComponent.html":{}}}],["src/components/notification/notification.component.ts:46",{"_index":856,"title":{},"body":{"components/NotificationComponent.html":{}}}],["src/components/notification/notification.component.ts:53",{"_index":854,"title":{},"body":{"components/NotificationComponent.html":{}}}],["src/components/plan",{"_index":892,"title":{},"body":{"components/PlanHousePageComponent.html":{},"coverage.html":{},"interfaces/roomSpanSettings.html":{}}}],["src/components/scene/loaders/index.ts",{"_index":1402,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/components/scene/loaders/loaders/fbx.loader.ts",{"_index":1405,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/components/scene/loaders/loaders/gltf",{"_index":1407,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/components/scene/loaders/loaders/obj.loader.ts",{"_index":1410,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/components/scene/scene.component.ts",{"_index":1412,"title":{},"body":{"coverage.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["src/components/shop",{"_index":1419,"title":{},"body":{"coverage.html":{}}}],["src/components/view",{"_index":1299,"title":{},"body":{"components/ViewFurnitureComponent.html":{},"coverage.html":{}}}],["src/directives/auto",{"_index":309,"title":{},"body":{"directives/AutoHeightDirective.html":{},"coverage.html":{}}}],["src/interceptors/http",{"_index":739,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{},"coverage.html":{}}}],["src/main.server.ts",{"_index":1428,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/pipes/cost",{"_index":390,"title":{},"body":{"pipes/CostFormatPipe.html":{},"coverage.html":{}}}],["src/services/account",{"_index":6,"title":{},"body":{"injectables/AccountCookieService.html":{},"coverage.html":{}}}],["src/services/account.service.ts",{"_index":90,"title":{},"body":{"injectables/AccountService.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"miscellaneous/functions.html":{},"interfaces/furnitureAccountData.html":{},"miscellaneous/typealiases.html":{}}}],["src/services/account.service.ts:109",{"_index":117,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/services/account.service.ts:128",{"_index":111,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/services/account.service.ts:139",{"_index":120,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/services/account.service.ts:156",{"_index":108,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/services/account.service.ts:167",{"_index":113,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/services/account.service.ts:189",{"_index":104,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/services/account.service.ts:97",{"_index":102,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/services/auth.service.ts",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"interfaces/emailAuthData.html":{},"interfaces/googleAuthData.html":{},"miscellaneous/typealiases.html":{}}}],["src/services/auth.service.ts:100",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/services/auth.service.ts:38",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/services/auth.service.ts:49",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/services/auth.service.ts:67",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/services/auth.service.ts:79",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/services/category.service.ts",{"_index":343,"title":{},"body":{"injectables/CategoryService.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"coverage.html":{},"interfaces/option.html":{},"interfaces/rangeFilter.html":{},"interfaces/selectFilter.html":{},"miscellaneous/typealiases.html":{}}}],["src/services/category.service.ts:72",{"_index":345,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/services/category.service.ts:82",{"_index":346,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/services/client",{"_index":367,"title":{},"body":{"injectables/ClientImageControlService.html":{},"coverage.html":{}}}],["src/services/finder.service.ts",{"_index":654,"title":{},"body":{"injectables/FinderService.html":{},"coverage.html":{}}}],["src/services/finder.service.ts:17",{"_index":667,"title":{},"body":{"injectables/FinderService.html":{}}}],["src/services/finder.service.ts:20",{"_index":671,"title":{},"body":{"injectables/FinderService.html":{}}}],["src/services/finder.service.ts:23",{"_index":659,"title":{},"body":{"injectables/FinderService.html":{}}}],["src/services/finder.service.ts:35",{"_index":665,"title":{},"body":{"injectables/FinderService.html":{}}}],["src/services/finder.service.ts:44",{"_index":662,"title":{},"body":{"injectables/FinderService.html":{}}}],["src/services/furniture",{"_index":674,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["src/services/index.ts",{"_index":1439,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/services/notification.service.ts",{"_index":869,"title":{},"body":{"injectables/NotificationService.html":{},"coverage.html":{}}}],["src/services/notification.service.ts:16",{"_index":883,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/services/notification.service.ts:21",{"_index":886,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/services/notification.service.ts:24",{"_index":882,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/services/notification.service.ts:27",{"_index":885,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/services/notification.service.ts:34",{"_index":878,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/services/notification.service.ts:44",{"_index":880,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/services/notification.service.ts:53",{"_index":875,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/services/project.service.ts",{"_index":999,"title":{},"body":{"injectables/ProjectService.html":{},"coverage.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["src/services/project.service.ts:106",{"_index":1019,"title":{},"body":{"injectables/ProjectService.html":{}}}],["src/services/project.service.ts:120",{"_index":1014,"title":{},"body":{"injectables/ProjectService.html":{}}}],["src/services/project.service.ts:53",{"_index":1006,"title":{},"body":{"injectables/ProjectService.html":{}}}],["src/services/project.service.ts:66",{"_index":1017,"title":{},"body":{"injectables/ProjectService.html":{}}}],["src/services/project.service.ts:79",{"_index":1009,"title":{},"body":{"injectables/ProjectService.html":{}}}],["src/services/project.service.ts:92",{"_index":1011,"title":{},"body":{"injectables/ProjectService.html":{}}}],["src/services/report.service.ts",{"_index":1037,"title":{},"body":{"injectables/ReportService.html":{},"coverage.html":{},"interfaces/reportResponse.html":{}}}],["src/services/report.service.ts:29",{"_index":1044,"title":{},"body":{"injectables/ReportService.html":{}}}],["src/services/report.service.ts:321",{"_index":1046,"title":{},"body":{"injectables/ReportService.html":{}}}],["src/services/report.service.ts:333",{"_index":1060,"title":{},"body":{"injectables/ReportService.html":{}}}],["src/services/report.service.ts:348",{"_index":1053,"title":{},"body":{"injectables/ReportService.html":{}}}],["src/services/report.service.ts:39",{"_index":1048,"title":{},"body":{"injectables/ReportService.html":{}}}],["src/services/report.service.ts:51",{"_index":1050,"title":{},"body":{"injectables/ReportService.html":{}}}],["src/services/report.service.ts:72",{"_index":1057,"title":{},"body":{"injectables/ReportService.html":{}}}],["src/services/server",{"_index":1208,"title":{},"body":{"injectables/ServerImageControlService.html":{},"coverage.html":{}}}],["src/services/shop.service.ts",{"_index":1243,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"coverage.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["src/services/shop.service.ts:10",{"_index":1832,"title":{},"body":{"interfaces/queryData.html":{}}}],["src/services/shop.service.ts:151",{"_index":1250,"title":{},"body":{"injectables/ShopService.html":{}}}],["src/services/shop.service.ts:75",{"_index":1260,"title":{},"body":{"injectables/ShopService.html":{}}}],["src/services/shop.service.ts:78",{"_index":1247,"title":{},"body":{"injectables/ShopService.html":{}}}],["src/services/shop.service.ts:97",{"_index":1256,"title":{},"body":{"injectables/ShopService.html":{}}}],["src/usable/reusable",{"_index":1448,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["standalone",{"_index":210,"title":{},"body":{"components/AppComponent.html":{},"directives/AutoHeightDirective.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["start_column",{"_index":1932,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["start_row",{"_index":1934,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["startcolumn",{"_index":1913,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["startrange",{"_index":1254,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["startrow",{"_index":1912,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["startx",{"_index":1836,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["starty",{"_index":1837,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["statements",{"_index":1362,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":1872,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["strict",{"_index":76,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["string",{"_index":38,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"miscellaneous/functions.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{},"miscellaneous/variables.html":{}}}],["structure",{"_index":708,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["style",{"_index":1154,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["styleurl",{"_index":406,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/foundFurniture.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{}}}],["styleurls",{"_index":1490,"title":{},"body":{"interfaces/editForm.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["subscription",{"_index":468,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["success",{"_index":381,"title":{},"body":{"injectables/ClientImageControlService.html":{},"injectables/NotificationService.html":{}}}],["successmessage",{"_index":849,"title":{},"body":{"components/NotificationComponent.html":{}}}],["successsubject",{"_index":871,"title":{},"body":{"injectables/NotificationService.html":{}}}],["switch",{"_index":1775,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["table",{"_index":1451,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1450,"title":{},"body":{"coverage.html":{}}}],["taiga",{"_index":785,"title":{},"body":{"components/ImageSliderComponent.html":{},"dependencies.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{}}}],["target",{"_index":1522,"title":{},"body":{"interfaces/editForm.html":{}}}],["target.files?.[0",{"_index":1523,"title":{},"body":{"interfaces/editForm.html":{}}}],["target_element",{"_index":1943,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["targetobject",{"_index":1607,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["template",{"_index":190,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["templateref",{"_index":1838,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["templateurl",{"_index":213,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["temporary",{"_index":46,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["text",{"_index":1099,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["text/html",{"_index":1196,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["textarea",{"_index":324,"title":{},"body":{"directives/AutoHeightDirective.html":{}}}],["this.abortcontroller",{"_index":1265,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["this.abortcontroller.abort",{"_index":1266,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["this.abortcontroller.signal",{"_index":1276,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["this.accountcookieservice.deleteaccounttype",{"_index":1547,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.accountcookieservice.deleteguiderule",{"_index":2028,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.accountcookieservice.deletejwt",{"_index":1546,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.accountcookieservice.getguiderule",{"_index":1901,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.accountcookieservice.getjwt",{"_index":186,"title":{},"body":{"injectables/AccountService.html":{},"components/PlanHousePageComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.accountcookieservice.getusertype",{"_index":1504,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.accountcookieservice.setguiderule",{"_index":2022,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.accountdata",{"_index":961,"title":{},"body":{"components/PlanHousePageComponent.html":{},"interfaces/editForm.html":{}}}],["this.accountdata.avatarurl",{"_index":1527,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.accountdata.nickname",{"_index":1500,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.accountdata.password",{"_index":1512,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.accountdata.projects",{"_index":974,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.accountdata.projects.length",{"_index":966,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.accountdata.projects.splice(indexproject",{"_index":986,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.accountdata.projects[indexproject]._id",{"_index":984,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.accountdata.projects[this.currentprojectid!].rooms",{"_index":987,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.accountdata.projects[this.currentprojectid]._id",{"_index":977,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.accountdata.projects[this.currentprojectid].name",{"_index":982,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.accountdata?.password",{"_index":1509,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.accountservice.deleteaccountjwt(jwt",{"_index":1545,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.accountservice.getaccount(jwt)).accountdata",{"_index":962,"title":{},"body":{"components/PlanHousePageComponent.html":{},"interfaces/editForm.html":{}}}],["this.accountservice.putupdatesecondaryaccountdata(change_data",{"_index":1499,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.addmodel(furniture_id",{"_index":1629,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.addmodel(object.objectid",{"_index":1737,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.addmodule",{"_index":947,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.addobjecttoscene(load_object",{"_index":1636,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.animate",{"_index":1666,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.animationframeid",{"_index":1664,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.authservice.putupdatebasedata(change_data",{"_index":1511,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.baseserviceurl}?category=${categoryname}&startrange=${startrange",{"_index":1268,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["this.baseserviceurl}main?furniturecardid=${furniturecardid}&color=${color",{"_index":1242,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["this.calculatefrustumbounds",{"_index":1723,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.calculategridarea(clientx",{"_index":1948,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.calculategridarea(event.changedtouches[0].clientx",{"_index":1986,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.calculategridarea(event.clientx",{"_index":1985,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.calculatemoveobjectdata(object",{"_index":1738,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.calculateobjectsavedata(object",{"_index":1826,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.calculateroomspansettings",{"_index":1889,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.callsaveemitter.emit",{"_index":1905,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.camera",{"_index":1646,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.camera.aspect",{"_index":1746,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.camera.position.clone",{"_index":1807,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.camera.position.copy(oldcameraposition",{"_index":1814,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.camera.position.set(0",{"_index":1616,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.camera.position.z",{"_index":1660,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.camera.rotation.clone",{"_index":1809,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.camera.rotation.copy(oldcamerarotation",{"_index":1815,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.camera.rotation.set(three.mathutils.degtorad",{"_index":1618,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.camera.updateprojectionmatrix",{"_index":1747,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.canvasratioofwindow",{"_index":1662,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.categoryarray",{"_index":1896,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.categoryservice.getgetallcategories()).categoryarray",{"_index":1897,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.cdr.detectchanges",{"_index":1886,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.checkauthandloaddata",{"_index":1494,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.checkguideinclude",{"_index":1878,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.checkshoppage(value",{"_index":646,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["this.checkvalid('create",{"_index":512,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.checkvalid('update",{"_index":532,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.checkviewport",{"_index":825,"title":{},"body":{"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{}}}],["this.clearerror",{"_index":888,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.clearfurniturecard",{"_index":490,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.clearroom",{"_index":1615,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.clicktimer",{"_index":1977,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.clipboardservice.copyfromcontent(furnitureurl",{"_index":1352,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["this.closeaddmodule",{"_index":969,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.closeeditform",{"_index":1507,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.closefoundresultslist",{"_index":626,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["this.controls",{"_index":1683,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.controls.dampingfactor",{"_index":1687,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.controls.enabledamping",{"_index":1686,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.controls.enablezoom",{"_index":1689,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.controls.maxdistance",{"_index":1691,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.controls.maxpolarangle",{"_index":1693,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.controls.mindistance",{"_index":1690,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.cookieservice.delete('accounttype",{"_index":86,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["this.cookieservice.delete('guideinclude",{"_index":82,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["this.cookieservice.delete('jwt",{"_index":77,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["this.cookieservice.deleteaccounttype",{"_index":866,"title":{},"body":{"components/NotificationComponent.html":{}}}],["this.cookieservice.deletejwt",{"_index":865,"title":{},"body":{"components/NotificationComponent.html":{}}}],["this.cookieservice.get('accounttype",{"_index":85,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["this.cookieservice.get('guideinclude",{"_index":81,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["this.cookieservice.get('jwt",{"_index":83,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["this.cookieservice.getjwt",{"_index":484,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.cookieservice.set('accounttype",{"_index":84,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["this.cookieservice.set('guideinclude",{"_index":78,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["this.cookieservice.set('jwt",{"_index":72,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["this.costpipe(shopdata.cost",{"_index":1192,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["this.createfurniturecomponent",{"_index":559,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.createfurniturecomponent.currentcolorid",{"_index":499,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.createfurniturecomponent.furnituredata",{"_index":514,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.createfurniturecomponent.furnituredata.colors.length",{"_index":561,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.createfurniturecomponent.furnituredata.colors[this.createfurniturecomponent.currentcolorid].color",{"_index":560,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.createfurniturecomponent.furnituremodelinput.files",{"_index":536,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.createfurniturecomponent.furnituremodelinput.files![0",{"_index":528,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.createfurniturecomponent.openadditional",{"_index":552,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.createfurniturecomponent.opencolormodule",{"_index":541,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.createfurniturecomponent.openshopsmodule",{"_index":557,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.createfurniturecomponentref.nativeelement.queryselector",{"_index":544,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.createreporthtml(roomdata",{"_index":1063,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["this.createroom",{"_index":1621,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.createroomshape(room_proportions.width",{"_index":1695,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.currentcolorid",{"_index":1348,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["this.currentidclickedroom",{"_index":1922,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.currentplanhouse",{"_index":979,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.currentprojectid",{"_index":967,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.currentviewroom",{"_index":1964,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.debouncetimer",{"_index":644,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["this.downloadhtml(roomname",{"_index":1200,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["this.editform",{"_index":1532,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.editform.addcontrol('password",{"_index":1536,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.editform.reset",{"_index":1542,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.editform.valid",{"_index":1502,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.editform.value.nickname",{"_index":1498,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.editform.value.password",{"_index":1510,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.el.nativeelement.addeventlistener('input",{"_index":334,"title":{},"body":{"directives/AutoHeightDirective.html":{}}}],["this.elemenetref.nativeelement.queryselector('.addmodule",{"_index":948,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.elementref.nativeelement.parentelement",{"_index":1881,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.elementref.nativeelement.queryselector('#canvascontainer",{"_index":1659,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.elementref.nativeelement.queryselector('.addmodulebtn",{"_index":1893,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.elementref.nativeelement.queryselector('.colors",{"_index":1331,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["this.elementref.nativeelement.queryselector('.finderinput",{"_index":621,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["this.elementref.nativeelement.queryselector('.roomspan",{"_index":1888,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.elementref.nativeelement.queryselector('.variantsspan",{"_index":619,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["this.elementref.nativeelement.queryselector('[style*=\"cursor",{"_index":1972,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.elementref.nativeelement.queryselector('form",{"_index":1891,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.elementref.nativeelement.queryselector(`[data",{"_index":1997,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.elementref.nativeelement.queryselectorall('app",{"_index":818,"title":{},"body":{"components/MainPageComponent.html":{}}}],["this.emitplanhouse",{"_index":1976,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.errormessage",{"_index":860,"title":{},"body":{"components/NotificationComponent.html":{}}}],["this.errorsubject.asobservable",{"_index":881,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.errorsubject.next",{"_index":890,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.errorsubject.next(message",{"_index":887,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.finderservice.getfindfurnitures(findstring",{"_index":623,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["this.finderservice.setfurniturename(name",{"_index":642,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["this.findfreespace(new_room.roomproportions",{"_index":2056,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.findfurnitures(value",{"_index":647,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["this.fixpath",{"_index":1628,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.formelement",{"_index":1890,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.formelement.classlist.add('openaddmodule",{"_index":2073,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.formelement.classlist.contains('openaddmodule",{"_index":2077,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.formelement.classlist.remove('openaddmodule",{"_index":2078,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.foundfurniture",{"_index":628,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["this.foundfurniture.length",{"_index":630,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["this.furniturecardid",{"_index":1326,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["this.furniturecardservice.deletefurniturecard(jwt",{"_index":510,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.furniturecardservice.getfurniturecard(furniturecardid)).furniturecard.proportions",{"_index":1640,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.furniturecardservice.getfurniturecard(this.furniturecardid)).furniturecard",{"_index":1327,"title":{},"body":{"components/ViewFurnitureComponent.html":{}}}],["this.furniturecardservice.getfurniturecard(this.idpage",{"_index":494,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.furniturecardservice.postcreatefurniturecard(furniture_data",{"_index":516,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.furniturecardservice.putupdatefurniturecard(furniture_data",{"_index":533,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.furnituredata",{"_index":497,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.furnituremodelservice.deletefurnituremodel(jwt",{"_index":508,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.furnituremodelservice.getfurnituremodel(jwt",{"_index":1641,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.furnituremodelservice.postuploadfurnituremodel(furniture_model_blob",{"_index":529,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.furnituremodelservice.postuploadfurnituremodel(furniture_model_blob[0",{"_index":538,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.generatehtmlcontent(roomdata",{"_index":1069,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["this.getfindoptionsbyresult(updated_results",{"_index":1287,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["this.getobjectsize(this.rectanglemesh",{"_index":1702,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.getobjectsize(this.rectanglemesh).width",{"_index":1624,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.getobjectsize(this.targetobject",{"_index":1792,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.guidetemplate",{"_index":1884,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.hasroomidbeenprocessed",{"_index":949,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.httpmodule.delete(this.baseserviceurl",{"_index":718,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["this.httpmodule.get(this.baseserviceurl",{"_index":703,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["this.httpmodule.post(this.baseserviceurl",{"_index":715,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["this.httpmodule.put(this.baseserviceurl",{"_index":717,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["this.idpage",{"_index":488,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.imageclientcontrolservice.compressimage(file",{"_index":1525,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.imageservercontrolservice.getaccountavatar(jwt",{"_index":1518,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.imageservercontrolservice.postuploaduseravatar(compressed_image",{"_index":1526,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.imageservice.getmainimage(idfurniture",{"_index":649,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["this.initcategories",{"_index":1879,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.initeditform",{"_index":1495,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.initialized.emit",{"_index":1894,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.initthreejs",{"_index":1609,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.inputelement",{"_index":620,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["this.inputelement.value",{"_index":634,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["this.inputfurniturenamesubject.asobservable",{"_index":668,"title":{},"body":{"injectables/FinderService.html":{}}}],["this.inputfurniturenamesubject.next(name",{"_index":673,"title":{},"body":{"injectables/FinderService.html":{}}}],["this.inputprocess",{"_index":635,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["this.isareaoccupied(grid_area",{"_index":1949,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.isareaoccupied(gridarea",{"_index":1989,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.isareaoccupied(new_grid_area",{"_index":2005,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.isclick",{"_index":1978,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.isdoubleclick",{"_index":1980,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.isdragging",{"_index":1956,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.iseditformopen",{"_index":1540,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.isguideincluded",{"_index":1883,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.isguidevisible",{"_index":1899,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.ismobileview",{"_index":826,"title":{},"body":{"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{}}}],["this.lastplanhouse",{"_index":2081,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.loadfurnituremodel(model",{"_index":1642,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.loadroom",{"_index":1626,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.loaduserdata(jwt",{"_index":1530,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.location.path",{"_index":996,"title":{},"body":{"components/PlanHousePageComponent.html":{},"interfaces/roomSpanSettings.html":{}}}],["this.location.path().split('/').slice(0",{"_index":993,"title":{},"body":{"components/PlanHousePageComponent.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["this.location.replacestate(new_url",{"_index":995,"title":{},"body":{"components/PlanHousePageComponent.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["this.mobileview",{"_index":333,"title":{},"body":{"directives/AutoHeightDirective.html":{}}}],["this.mouse.x",{"_index":1760,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.mouse.y",{"_index":1761,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.notification.seterror",{"_index":548,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.notification.seterror(error.error.message",{"_index":758,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{}}}],["this.notification.setsuccess",{"_index":530,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{}}}],["this.notificationservice.error$.subscribe(message",{"_index":859,"title":{},"body":{"components/NotificationComponent.html":{}}}],["this.notificationservice.success$.subscribe(message",{"_index":862,"title":{},"body":{"components/NotificationComponent.html":{}}}],["this.oldsizeviewroom",{"_index":2039,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.oldsizeviewroom.height",{"_index":2042,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.oldsizeviewroom.width",{"_index":2041,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.oninput.bind(this.el.nativeelement",{"_index":335,"title":{},"body":{"directives/AutoHeightDirective.html":{}}}],["this.onmouseup(event",{"_index":1957,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.openfoundresultslist",{"_index":624,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["this.openhtmlinnewtab(roomdata.name",{"_index":1070,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["this.openviewroom(this.currentidclickedroom",{"_index":2018,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.pageinit(jwt",{"_index":491,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.planhouse",{"_index":950,"title":{},"body":{"components/PlanHousePageComponent.html":{},"interfaces/roomSpanSettings.html":{}}}],["this.planhouse.currentidclickedroom",{"_index":956,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.planhouse.currentviewroom",{"_index":955,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.planhouse.foreach(room",{"_index":1911,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.planhouse.guidetemplate",{"_index":959,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.planhouse.openviewroom(room_id",{"_index":957,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.planhouse.roomguidetemplate",{"_index":960,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.planhouse.sceneopentoggle",{"_index":958,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.planhouse.splice(this.currentidclickedroom",{"_index":2059,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.planhouse[indexroom",{"_index":2082,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.planhouse[indexroom].name",{"_index":2071,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.planhouse[indexroom].roomproportions",{"_index":2070,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.planhouse[this.currentidclickedroom!].gridarea",{"_index":1951,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.planhouse[this.currentidclickedroom].gridarea",{"_index":2007,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.planhouse[this.currentidclickedroom].gridarea.split('/').map(number",{"_index":1998,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.planhouse[this.currentidclickedroom].name",{"_index":2050,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.planhouse[this.currentidclickedroom].roomproportions",{"_index":1923,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.planhouse[this.currentviewroom].objects",{"_index":2030,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.planhousecomponent.sceneopentoggle",{"_index":1625,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.planhouseemitter.emit(this.planhouse",{"_index":1903,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.previousgridarea",{"_index":1952,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.projectnameform.value",{"_index":970,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.projectnameform.value.name",{"_index":971,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.projectservice.deletedeleteproject(jwt",{"_index":985,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.projectservice.getgetreportofroom(jwt",{"_index":1819,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.projectservice.postcreateproject(jwt",{"_index":973,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.projectservice.putupdateproject(jwt",{"_index":983,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.raycaster.intersectobject(this.rectanglemesh",{"_index":1784,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.raycaster.intersectobjects(this.scene.children",{"_index":1764,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.raycaster.setfromcamera(this.mouse",{"_index":1762,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.rectanglemesh",{"_index":1699,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.rectanglemesh.name",{"_index":1697,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.rectanglemesh.rotation.x",{"_index":1622,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.reloadpage",{"_index":867,"title":{},"body":{"components/NotificationComponent.html":{}}}],["this.renderer",{"_index":1655,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.renderer.addclass(room_element",{"_index":2093,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.renderer.addclass(this.addmodule",{"_index":988,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.renderer.addclass(this.variantsspan",{"_index":631,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["this.renderer.domelement",{"_index":1685,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.renderer.domelement.todataurl('image/png",{"_index":1811,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.renderer.removeclass(room_element",{"_index":2044,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.renderer.removeclass(this.addmodule",{"_index":990,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.renderer.removeclass(this.variantsspan",{"_index":633,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["this.renderer.removestyle(dragged_element",{"_index":1974,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.renderer.removestyle(room_element",{"_index":2043,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.renderer.removestyle(target_element",{"_index":1953,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.renderer.render(this.scene",{"_index":1667,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.renderer.setsize(window.innerwidth",{"_index":1661,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.renderer.setstyle(event_target",{"_index":2019,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.renderer.setstyle(move_room_element",{"_index":2006,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.renderer.setstyle(room_element",{"_index":2040,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.renderer.setstyle(target_element",{"_index":1950,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.renderer.setstyle(this.roomspan",{"_index":2046,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.renderer.setstyle(this.togglemodulebutton",{"_index":2074,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.reportservice.createreport(response",{"_index":1036,"title":{},"body":{"injectables/ProjectService.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/roomData.html":{}}}],["this.resetroomposition(event.clientx",{"_index":1966,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.resetroomposition(touch.clientx",{"_index":1969,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.roomdata",{"_index":1611,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.roomdata.objects",{"_index":1735,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.roomdata.roomproportions",{"_index":1620,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.roomdata?._id",{"_index":1805,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.roomform.get('height')?.disable",{"_index":2067,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.roomform.get('height')?.enable",{"_index":2064,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.roomform.get('length')?.disable",{"_index":2068,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.roomform.get('length')?.enable",{"_index":2065,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.roomform.get('width')?.disable",{"_index":2066,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.roomform.get('width')?.enable",{"_index":2063,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.roomform.patchvalue",{"_index":2052,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.roomform.value",{"_index":2054,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.roomform.value.name",{"_index":2049,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.roomguidetemplate",{"_index":2027,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.roomproportions",{"_index":1619,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.roomproportions.length",{"_index":1713,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.roomproportions.width",{"_index":1710,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.roomsguidetemplate1",{"_index":1885,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.roomsguidetemplate2",{"_index":2023,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.roomspan",{"_index":1887,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.roomspan.getboundingclientrect",{"_index":2089,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.roomspan.queryselector(`[data",{"_index":1944,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.roomspansettings.endx",{"_index":1930,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.roomspansettings.gap",{"_index":1931,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.roomspansettings.startx",{"_index":1925,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.roomspansettings.starty",{"_index":1927,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.route.parammap.subscribe(params",{"_index":487,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.route.root",{"_index":637,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["this.route.snapshot.params['furniturecardid",{"_index":1627,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.route.snapshot.params['roomid",{"_index":951,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.router.navigatebyurl",{"_index":1548,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.router.navigatebyurl('/account",{"_index":511,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.router.navigatebyurl('/create/new",{"_index":496,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.router.navigatebyurl('/login",{"_index":485,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{}}}],["this.router.navigatebyurl('/plan",{"_index":1544,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.routesub",{"_index":486,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.routesub.unsubscribe",{"_index":492,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.savehouse",{"_index":2031,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.saveobjectsemitter.emit(room_objects_data",{"_index":1828,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.saveproject",{"_index":991,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["this.saveroom",{"_index":1637,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.scene",{"_index":1613,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.scene.add(hemisphere_light",{"_index":1654,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.scene.children.filter(object",{"_index":1823,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.scene.children.length",{"_index":1740,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.scene.children[i",{"_index":1741,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.scene.remove(object",{"_index":1744,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.scene.remove(this.targetobject",{"_index":1821,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.scenecomponent.loadroom",{"_index":2033,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.scenecomponent.saveroom",{"_index":2035,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.sceneopentoggle",{"_index":1963,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.serverimagecontrol.deleteproject(jwt",{"_index":509,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.serverimagecontrol.postuploadprojectimages(colordata.color",{"_index":526,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.showguide",{"_index":2024,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.spinner.hide",{"_index":1643,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.spinner.show",{"_index":1639,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.successmessage",{"_index":863,"title":{},"body":{"components/NotificationComponent.html":{}}}],["this.successsubject.asobservable",{"_index":884,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.successsubject.next",{"_index":891,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.successsubject.next(message",{"_index":889,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.targetobject",{"_index":1751,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.targetobject.position.set(newxobjectposition",{"_index":1803,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.targetobject.rotation.y",{"_index":1779,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["this.togglecontrols(this.currentidclickedroom",{"_index":2072,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.togglecontrols(true",{"_index":2060,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.togglemodulebutton",{"_index":1892,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.toggleopenroommodule",{"_index":2051,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.toggleopenroommodule(this.currentidclickedroom",{"_index":1979,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["this.transformurlarraytoblob(colordata.imagesdata.images",{"_index":521,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["this.updatebasedataifneeded(jwt",{"_index":1506,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.updatesecondaryaccountdata(jwt",{"_index":1505,"title":{},"body":{"interfaces/editForm.html":{}}}],["this.variantsspan",{"_index":618,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["three",{"_index":1483,"title":{},"body":{"dependencies.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["three.buffergeometry",{"_index":1671,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["three.hemispherelight(0xaaaaaa",{"_index":1652,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["three.js",{"_index":1566,"title":{},"body":{"miscellaneous/functions.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["three.mathutils.degtorad",{"_index":1623,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["three.mathutils.degtorad(90",{"_index":1694,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["three.mesh",{"_index":1606,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["three.object3d",{"_index":1608,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["three.perspectivecamera",{"_index":1595,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["three.perspectivecamera(75",{"_index":1647,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["three.raycaster",{"_index":1602,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["three.scene",{"_index":1596,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["three.shape",{"_index":1673,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["three.shapegeometry(shape",{"_index":1680,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["three.vector2",{"_index":1604,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["three.webglrenderer",{"_index":1593,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["three/examples/jsm/controls/orbitcontrols.js",{"_index":1575,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["throttle",{"_index":325,"title":{},"body":{"directives/AutoHeightDirective.html":{},"interfaces/roomSpanSettings.html":{}}}],["throw",{"_index":185,"title":{},"body":{"injectables/AccountService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/ShopService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"interfaces/shopData.html":{}}}],["throwerror",{"_index":753,"title":{},"body":{"interceptors/HttpErrorInterceptor.html":{}}}],["throws",{"_index":700,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"injectables/ShopService.html":{},"interfaces/additionalData.html":{},"interfaces/clientFilters.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"interfaces/shopData.html":{}}}],["title",{"_index":215,"title":{},"body":{"components/AppComponent.html":{},"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["togglecontrols(enable",{"_index":2061,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["togglemenu",{"_index":837,"title":{},"body":{"components/NavigationPanelComponent.html":{}}}],["togglemodulebutton",{"_index":1855,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["toggleopenroommodule(indexroom",{"_index":2069,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["top",{"_index":1175,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["touch",{"_index":1967,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["touch.clienty",{"_index":1970,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["touchevent",{"_index":1962,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["transform",{"_index":393,"title":{},"body":{"pipes/CostFormatPipe.html":{},"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["transform(value",{"_index":394,"title":{},"body":{"pipes/CostFormatPipe.html":{}}}],["transformedfurniturecard",{"_index":710,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"interfaces/additionalData.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/shopData.html":{}}}],["transformurlarraytoblob",{"_index":421,"title":{},"body":{"components/CreateFurniturePageComponent.html":{}}}],["transformurlarraytoblob(imagesarray",{"_index":450,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["transition",{"_index":1132,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["translatemany",{"_index":350,"title":{},"body":{"injectables/CategoryService.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/option.html":{},"interfaces/rangeFilter.html":{},"interfaces/selectFilter.html":{}}}],["translateone",{"_index":349,"title":{},"body":{"injectables/CategoryService.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/option.html":{},"interfaces/rangeFilter.html":{},"interfaces/selectFilter.html":{}}}],["transparent",{"_index":1164,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["tree",{"_index":192,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["true",{"_index":106,"title":{},"body":{"injectables/AccountService.html":{},"components/AppComponent.html":{},"directives/AutoHeightDirective.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientProportions.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"miscellaneous/functions.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":173,"title":{},"body":{"injectables/AccountService.html":{},"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ShopService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"interfaces/roomData-1.html":{},"interfaces/shopData.html":{}}}],["tuicarousel",{"_index":762,"title":{},"body":{"components/ImageSliderComponent.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{}}}],["turnoff",{"_index":2026,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["turnoffguides(turnoff",{"_index":2025,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["type",{"_index":27,"title":{},"body":{"injectables/AccountCookieService.html":{},"injectables/AccountService.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"injectables/ClientImageControlService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"interceptors/HttpErrorInterceptor.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"coverage.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/editForm.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"miscellaneous/functions.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":2100,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typejwt",{"_index":44,"title":{},"body":{"injectables/AccountCookieService.html":{}}}],["typeof",{"_index":954,"title":{},"body":{"components/PlanHousePageComponent.html":{},"interfaces/roomSpanSettings.html":{}}}],["typerequest",{"_index":436,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["ui/cdk",{"_index":1460,"title":{},"body":{"dependencies.html":{}}}],["ui/core",{"_index":1462,"title":{},"body":{"dependencies.html":{}}}],["ui/event",{"_index":1463,"title":{},"body":{"dependencies.html":{}}}],["ui/kit",{"_index":786,"title":{},"body":{"components/ImageSliderComponent.html":{},"dependencies.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{}}}],["ui/legacy",{"_index":1467,"title":{},"body":{"dependencies.html":{}}}],["undefined",{"_index":442,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FurnitureCardControlService.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/additionalData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/shopData.html":{}}}],["unknown",{"_index":114,"title":{},"body":{"injectables/AccountService.html":{},"injectables/ShopService.html":{}}}],["update",{"_index":434,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["updatebasedataifneeded(jwt",{"_index":1508,"title":{},"body":{"interfaces/editForm.html":{}}}],["updated_results",{"_index":1284,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["updatefurniturecard",{"_index":422,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["updateplandata",{"_index":910,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["updateplandata(planhouse",{"_index":930,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["updateroom",{"_index":2048,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["updateroomobjects(objects",{"_index":2029,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["updatesecondaryaccountdata(jwt",{"_index":1496,"title":{},"body":{"interfaces/editForm.html":{}}}],["upload",{"_index":1239,"title":{},"body":{"injectables/ServerImageControlService.html":{}}}],["upload_object_size.length",{"_index":1725,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["upload_object_size.width",{"_index":1727,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["uploadavatar(event",{"_index":1521,"title":{},"body":{"interfaces/editForm.html":{}}}],["uploadimagesinput",{"_index":558,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["uploadinput",{"_index":553,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["uploadinput.click",{"_index":555,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["uppercase",{"_index":1106,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["url",{"_index":126,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"components/ImageSliderComponent.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ReportService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"interfaces/accountFullData.html":{},"interfaces/additionalData.html":{},"interfaces/baseFilter.html":{},"interfaces/categoryData.html":{},"interfaces/changeAccountDataEmail.html":{},"interfaces/changeSecondaryData.html":{},"interfaces/clientFilters.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/createEmailAccountData.html":{},"interfaces/emailAuthData.html":{},"interfaces/foundFurniture.html":{},"miscellaneous/functions.html":{},"interfaces/furnitureAccountData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/furnitureShopData.html":{},"interfaces/googleAuthData.html":{},"interfaces/imageSliderClientData.html":{},"interfaces/imageSliderFromServerData.html":{},"interfaces/option.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/projectInformation.html":{},"interfaces/projectServerInformation.html":{},"interfaces/queryData.html":{},"interfaces/rangeFilter.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData.html":{},"interfaces/selectFilter.html":{},"interfaces/shopData.html":{},"miscellaneous/variables.html":{}}}],["url('http://localhost:4200/assets/fonts/calypso.ttf",{"_index":1078,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["url('http://localhost:4200/assets/fonts/courier",{"_index":1081,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["url.createobjecturl(blob",{"_index":1197,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["url.createobjecturl(compressed_image",{"_index":1528,"title":{},"body":{"interfaces/editForm.html":{}}}],["url.revokeobjecturl(htmlurl",{"_index":1207,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["urlsearchparams",{"_index":1270,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["urlsearchparams(params).tostring",{"_index":1273,"title":{},"body":{"injectables/ShopService.html":{},"interfaces/clientFilters.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{}}}],["usable/main",{"_index":816,"title":{},"body":{"components/MainPageComponent.html":{}}}],["usable/reusable",{"_index":612,"title":{},"body":{"components/FinderComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/foundFurniture.html":{}}}],["useclass",{"_index":2116,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validationerrors",{"_index":1842,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["validatorfn",{"_index":1841,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["validators",{"_index":945,"title":{},"body":{"components/PlanHousePageComponent.html":{},"interfaces/editForm.html":{},"interfaces/roomSpanSettings.html":{}}}],["validators.max(10",{"_index":2097,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["validators.maxlength(20",{"_index":2099,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["validators.maxlength(30",{"_index":1535,"title":{},"body":{"interfaces/editForm.html":{}}}],["validators.min(0.1",{"_index":2096,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["validators.minlength(3",{"_index":1534,"title":{},"body":{"interfaces/editForm.html":{}}}],["validators.minlength(6",{"_index":1538,"title":{},"body":{"interfaces/editForm.html":{}}}],["validators.pattern(/^\\d*\\.?\\d",{"_index":2098,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["validators.required",{"_index":943,"title":{},"body":{"components/PlanHousePageComponent.html":{},"interfaces/editForm.html":{},"interfaces/roomSpanSettings.html":{}}}],["value",{"_index":123,"title":{},"body":{"injectables/AccountService.html":{},"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/AutoHeightDirective.html":{},"injectables/CategoryService.html":{},"pipes/CostFormatPipe.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/FurnitureModelControlService.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ProjectService.html":{},"injectables/ServerImageControlService.html":{},"injectables/ShopService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientFilters.html":{},"interfaces/foundFurniture.html":{},"interfaces/furnitureShopData.html":{},"interfaces/optionRangeQueryData.html":{},"interfaces/optionSelectQueryData.html":{},"interfaces/queryData.html":{},"miscellaneous/variables.html":{}}}],["value.length",{"_index":645,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["value.tostring().replace(/\\b(?=(\\d{3})+(?!\\d))/g",{"_index":398,"title":{},"body":{"pipes/CostFormatPipe.html":{}}}],["var",{"_index":244,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["variable",{"_index":1365,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":2104,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["variantsspan",{"_index":574,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["variantsspanopen",{"_index":632,"title":{},"body":{"components/FinderComponent.html":{},"interfaces/foundFurniture.html":{}}}],["version",{"_index":1830,"title":{},"body":{"properties.html":{}}}],["view",{"_index":274,"title":{},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{}}}],["viewchild",{"_index":472,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"components/PlanHousePageComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/roomSpanSettings.html":{}}}],["viewchild('planhouse",{"_index":939,"title":{},"body":{"components/PlanHousePageComponent.html":{}}}],["viewchild('roomguidetemplate",{"_index":1876,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["viewchild('roomsguidetemplate1",{"_index":1871,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["viewchild('roomsguidetemplate2",{"_index":1874,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["viewchild('scene",{"_index":1867,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["viewchild(createfurniturecomponent",{"_index":455,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"interfaces/clientProportions.html":{}}}],["viewfurniturecomponent",{"_index":273,"title":{"components/ViewFurnitureComponent.html":{}},"body":{"components/AppComponent.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"components/PlanHousePageComponent.html":{},"components/ViewFurnitureComponent.html":{},"coverage.html":{}}}],["void",{"_index":31,"title":{},"body":{"injectables/AccountCookieService.html":{},"directives/AutoHeightDirective.html":{},"components/CreateFurniturePageComponent.html":{},"components/FinderComponent.html":{},"injectables/FinderService.html":{},"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"components/NotificationComponent.html":{},"injectables/NotificationService.html":{},"components/PlanHousePageComponent.html":{},"injectables/ReportService.html":{},"components/ViewFurnitureComponent.html":{},"interfaces/clientProportions.html":{},"interfaces/editForm.html":{},"interfaces/foundFurniture.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["weight",{"_index":1111,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["white",{"_index":1161,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{},"interfaces/roomSpanSettings.html":{}}}],["width",{"_index":463,"title":{},"body":{"components/CreateFurniturePageComponent.html":{},"injectables/FurnitureCardControlService.html":{},"injectables/ReportService.html":{},"interfaces/additionalData.html":{},"interfaces/clientProportions.html":{},"interfaces/colorClientData.html":{},"interfaces/colorFromServerData.html":{},"interfaces/furnitureBaseData.html":{},"interfaces/furnitureClientData.html":{},"interfaces/furnitureFromServerData.html":{},"interfaces/furnitureProportions.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/reportResponse.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{},"interfaces/shopData.html":{}}}],["width:250px",{"_index":1165,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["width:fit",{"_index":1118,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["widthratio",{"_index":1719,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["window.getcomputedstyle(event_target).getpropertyvalue('grid",{"_index":2017,"title":{},"body":{"interfaces/roomSpanSettings.html":{}}}],["window.innerheight",{"_index":1648,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["window.innerwidth",{"_index":827,"title":{},"body":{"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{},"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["window.location.reload",{"_index":864,"title":{},"body":{"components/NotificationComponent.html":{}}}],["window.open(url",{"_index":1198,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["window:resize",{"_index":771,"title":{},"body":{"components/ImageSliderComponent.html":{},"components/MainPageComponent.html":{},"components/NavigationPanelComponent.html":{}}}],["worker",{"_index":1459,"title":{},"body":{"dependencies.html":{}}}],["wrap",{"_index":1144,"title":{},"body":{"injectables/ReportService.html":{},"interfaces/reportResponse.html":{}}}],["x",{"_index":1581,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["xdistance",{"_index":1587,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["xmetersdistance",{"_index":1582,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["y",{"_index":1585,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["yes",{"_index":683,"title":{},"body":{"injectables/FurnitureCardControlService.html":{},"injectables/ShopService.html":{},"miscellaneous/functions.html":{}}}],["yrotate",{"_index":1586,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["z",{"_index":1583,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{},"interfaces/roomSpanSettings.html":{}}}],["zdistance",{"_index":1588,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["zmetersdistance",{"_index":1584,"title":{},"body":{"interfaces/modelInterface.html":{},"interfaces/objectLoadInterface.html":{},"interfaces/objectSceneInterface.html":{},"interfaces/roomData-1.html":{}}}],["zone.js",{"_index":1485,"title":{},"body":{"dependencies.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"injectables/AccountCookieService.html":{"url":"injectables/AccountCookieService.html","title":"injectable - AccountCookieService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccountCookieService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/account-cookie.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                deleteAccountType\n                            \n                            \n                                deleteGuideRule\n                            \n                            \n                                deleteJwt\n                            \n                            \n                                getGuideRule\n                            \n                            \n                                getJwt\n                            \n                            \n                                getUserType\n                            \n                            \n                                setGuideRule\n                            \n                            \n                                setJwt\n                            \n                            \n                                setUserType\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cookieService: CookieService)\n                    \n                \n                        \n                            \n                                Defined in src/services/account-cookie.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cookieService\n                                                  \n                                                        \n                                                                    CookieService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        deleteAccountType\n                        \n                    \n                \n            \n            \n                \ndeleteAccountType()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/account-cookie.service.ts:89\n                        \n                    \n\n\n            \n                \n                        Удаление типа пользователя из куки\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteGuideRule\n                        \n                    \n                \n            \n            \n                \ndeleteGuideRule()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/account-cookie.service.ts:56\n                        \n                    \n\n\n            \n                \n                        Удаление флага отображения руководства из куки\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteJwt\n                        \n                    \n                \n            \n            \n                \ndeleteJwt()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/account-cookie.service.ts:31\n                        \n                    \n\n\n            \n                \n                        Удаление JWT токена из куки\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getGuideRule\n                        \n                    \n                \n            \n            \n                \ngetGuideRule()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/account-cookie.service.ts:49\n                        \n                    \n\n\n            \n                \n                        Получение значения флага отображения руководства из куки\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                Значение куки guideInclude\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getJwt\n                        \n                    \n                \n            \n            \n                \ngetJwt()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/account-cookie.service.ts:64\n                        \n                    \n\n\n            \n                \n                        Получение JWT токена из куки\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                JWT токен, либо пустую строку, если кука отсутствует\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserType\n                        \n                    \n                \n            \n            \n                \ngetUserType()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/account-cookie.service.ts:82\n                        \n                    \n\n\n            \n                \n                        Получение типа пользователя из куки\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                Тип аккаунта ('email' или 'google'), либо пустая строка, если кука отсутствует\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setGuideRule\n                        \n                    \n                \n            \n            \n                \nsetGuideRule()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/account-cookie.service.ts:38\n                        \n                    \n\n\n            \n                \n                        Установка флага отображения руководства (guideInclude) в куки\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setJwt\n                        \n                    \n                \n            \n            \n                \nsetJwt(jwt: string, typeJwt: \"long\" | \"temporary\")\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/account-cookie.service.ts:18\n                        \n                    \n\n\n            \n                \n                        Установка JWT токена в куки с указанием срока действия\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    JWT токен\n\n                                            \n                                        \n                                        \n                                                typeJwt\n                                            \n                                                        \"long\" | \"temporary\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Тип JWT токена ('long' — долгосрочный, 'temporary' — временный)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setUserType\n                        \n                    \n                \n            \n            \n                \nsetUserType(accountType: accountType)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/account-cookie.service.ts:72\n                        \n                    \n\n\n            \n                \n                        Установка типа пользователя в куки\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                accountType\n                                            \n                                                            accountType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Тип аккаунта ('email' или 'google')\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { CookieService } from 'ngx-cookie-service';\nimport { accountType } from './account.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccountCookieService {\n  constructor(\n    private cookieService: CookieService\n  ) { }\n\n  /**\n   * Установка JWT токена в куки с указанием срока действия\n   * @param jwt JWT токен\n   * @param typeJwt Тип JWT токена ('long' — долгосрочный, 'temporary' — временный)\n   */\n  setJwt(jwt: string, typeJwt: 'long' | 'temporary') {\n    const expirationDate = new Date();\n    if (typeJwt === 'long') {\n      expirationDate.setDate(expirationDate.getDate() + 7); // срок действия 7 дней\n    } else {\n      expirationDate.setMinutes(expirationDate.getMinutes() + 10); // срок действия 10 минут\n    }\n    this.cookieService.set('jwt', jwt, { expires: expirationDate, path: '/', sameSite: 'Strict' });\n  }\n\n  /**\n   * Удаление JWT токена из куки\n   */\n  deleteJwt() {\n    this.cookieService.delete('jwt', '/');\n  }\n\n  /**\n   * Установка флага отображения руководства (guideInclude) в куки\n   */\n  setGuideRule() {\n    // Здесь исправил установку срока действия куки — должно быть объект Date, а не число\n    const expirationDate = new Date();\n    expirationDate.setDate(expirationDate.getDate() + 7);\n    this.cookieService.set('guideInclude', 'false', { expires: expirationDate, path: '/', sameSite: 'Strict' });\n  }\n\n  /**\n   * Получение значения флага отображения руководства из куки\n   * @returns Значение куки guideInclude\n   */\n  getGuideRule() {\n    return this.cookieService.get('guideInclude');\n  }\n\n  /**\n   * Удаление флага отображения руководства из куки\n   */\n  deleteGuideRule() {\n    this.cookieService.delete('guideInclude', '/');\n  }\n\n  /**\n   * Получение JWT токена из куки\n   * @returns JWT токен, либо пустую строку, если кука отсутствует\n   */\n  getJwt(): string {\n    return this.cookieService.get('jwt');\n  }\n\n  /**\n   * Установка типа пользователя в куки\n   * @param accountType Тип аккаунта ('email' или 'google')\n   */\n  setUserType(accountType: accountType) {\n    const expirationDate = new Date();\n    expirationDate.setDate(expirationDate.getDate() + 7);\n    this.cookieService.set('accountType', accountType, { expires: expirationDate, path: '/', sameSite: 'Strict' });\n  }\n\n  /**\n   * Получение типа пользователя из куки\n   * @returns Тип аккаунта ('email' или 'google'), либо пустая строка, если кука отсутствует\n   */\n  getUserType(): string {\n    return this.cookieService.get('accountType');\n  }\n\n  /**\n   * Удаление типа пользователя из куки\n   */\n  deleteAccountType() {\n    this.cookieService.delete('accountType', '/');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AccountService.html":{"url":"injectables/AccountService.html","title":"injectable - AccountService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccountService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/account.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseServiceUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                checkJwt\n                            \n                            \n                                DELETEaccount\n                            \n                            \n                                DELETEaccountJwt\n                            \n                            \n                                    Async\n                                GETaccount\n                            \n                            \n                                POSTcreateAccount\n                            \n                            \n                                PUTupdateSecondaryAccountData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpModule: HttpClient, accountCookieService: AccountCookieService)\n                    \n                \n                        \n                            \n                                Defined in src/services/account.service.ts:97\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpModule\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accountCookieService\n                                                  \n                                                        \n                                                                        AccountCookieService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        checkJwt\n                        \n                    \n                \n            \n            \n                \ncheckJwt()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/account.service.ts:189\n                        \n                    \n\n\n            \n                \n                        Проверка наличия JWT токена в куках\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                true, если JWT токен найден, иначе false\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DELETEaccount\n                        \n                    \n                \n            \n            \n                \nDELETEaccount(jwt: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/account.service.ts:156\n                        \n                    \n\n\n            \n                \n                        Удаление аккаунта пользователя\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    JWT токен\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise с сообщением об успешном удалении пользователя\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DELETEaccountJwt\n                        \n                    \n                \n            \n            \n                \nDELETEaccountJwt(jwt: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/account.service.ts:128\n                        \n                    \n\n\n            \n                \n                        Удаление JWT токена пользователя\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    JWT токен\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise с сообщением об успешном удалении токена\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        GETaccount\n                        \n                    \n                \n            \n            \n                \n                        \n                    GETaccount(jwt: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/account.service.ts:167\n                        \n                    \n\n\n            \n                \n                        Получение полной информации об аккаунте пользователя\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    JWT токен\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Promise с данными аккаунта (включая проекты и мебель)\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        POSTcreateAccount\n                        \n                    \n                \n            \n            \n                \nPOSTcreateAccount(createAccountData: createAccountData)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/account.service.ts:109\n                        \n                    \n\n\n            \n                \n                        Создание нового пользователя\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createAccountData\n                                            \n                                                            createAccountData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Основная информация о пользователе (никнейм, email, пароль)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise с сообщением об успешном создании пользователя\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PUTupdateSecondaryAccountData\n                        \n                    \n                \n            \n            \n                \nPUTupdateSecondaryAccountData(changeData: changeSecondaryData)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/account.service.ts:139\n                        \n                    \n\n\n            \n                \n                        Обновление вторичных данных аккаунта (например, никнейм)\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                changeData\n                                            \n                                                            changeSecondaryData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Данные для изменения\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise с сообщением об успешном обновлении\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseServiceUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : baseUrl + 'account'\n                    \n                \n                    \n                        \n                                Defined in src/services/account.service.ts:97\n                        \n                    \n\n            \n                \n                    Базовый URL для аккаунт-сервисов\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { projectInformation, projectServerInformation } from './project.service';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { AccountCookieService } from './account-cookie.service';\nimport { baseUrl } from '.';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные для изменения аккаунта с email\n */\nexport interface changeAccountDataEmail {\n  /** JWT токен */\n  jwt: string;\n  /** Тип аккаунта (email) */\n  accountType: 'email';\n  /** Пароль пользователя */\n  password: string;\n}\n\n/**\n * Полные данные аккаунта пользователя\n */\nexport interface accountFullData {\n  /** URL аватара */\n  avatarUrl: string;\n  /** Никнейм пользователя */\n  nickname: string;\n  /** Email пользователя */\n  email: string;\n  /** Массив проектов пользователя */\n  projects: projectInformation[];\n  /** Массив мебели, связанной с аккаунтом */\n  furnitures: furnitureAccountData[];\n  /** Пароль пользователя (необязательный) */\n  password?: string;\n}\n\n/**\n * Данные для изменения вторичных данных аккаунта\n */\nexport interface changeSecondaryData {\n  /** JWT токен */\n  jwt: string;\n  /** Новый никнейм */\n  nickname: string;\n}\n\n/**\n * Данные по мебели, связанной с аккаунтом\n */\nexport interface furnitureAccountData {\n  /** Идентификатор мебели */\n  _id: string;\n  /** Название мебели */\n  name: string;\n  /** URL превью изображения мебели */\n  previewUrl: string;\n}\n\n/** Тип аккаунта */\nexport type accountType = 'google' | 'email';\n\n/** Тип данных для изменения аккаунта (на данный момент только email) */\nexport type changeAccountData = changeAccountDataEmail;\n\n/**\n * Данные для создания аккаунта с email\n */\ninterface createEmailAccountData {\n  /** Email */\n  email: string;\n  /** Пароль */\n  password: string;\n  /** Никнейм */\n  nickname: string;\n  /** Тип аккаунта (email) */\n  accountType: 'email';\n}\n\n/** Тип данных для создания аккаунта */\nexport type createAccountData = createEmailAccountData;\n\n/**\n * Функция-помощник для проверки, что аккаунт с типом email\n * @param account Объект аккаунта\n * @returns true, если аккаунт с типом email\n */\nexport function isEmailAccount(account: { accountType: accountType }): account is changeAccountDataEmail {\n  return account.accountType === 'email';\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccountService {\n  /** Базовый URL для аккаунт-сервисов */\n  private baseServiceUrl = baseUrl + 'account';\n\n  constructor(\n    private httpModule: HttpClient,\n    private accountCookieService: AccountCookieService\n  ) { }\n\n  /**\n   * Создание нового пользователя\n   * @param createAccountData Основная информация о пользователе (никнейм, email, пароль)\n   * @returns Promise с сообщением об успешном создании пользователя\n   */\n  POSTcreateAccount(createAccountData: createAccountData) {\n    let HTTP_PARAMS = new HttpParams()\n      .set('accountType', createAccountData.accountType)\n      .set('nickname', createAccountData.nickname);\n\n    if (isEmailAccount(createAccountData)) {\n      HTTP_PARAMS = HTTP_PARAMS\n        .set('email', createAccountData.email)\n        .set('password', createAccountData.password);\n    }\n\n    return firstValueFrom(this.httpModule.post(this.baseServiceUrl, HTTP_PARAMS)) as Promise;\n  }\n\n  /**\n   * Удаление JWT токена пользователя\n   * @param jwt JWT токен\n   * @returns Promise с сообщением об успешном удалении токена\n   */\n  DELETEaccountJwt(jwt: string) {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt);\n    return firstValueFrom(this.httpModule.delete(this.baseServiceUrl + '/jwt/delete', { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Обновление вторичных данных аккаунта (например, никнейм)\n   * @param changeData Данные для изменения\n   * @returns Promise с сообщением об успешном обновлении\n   */\n  PUTupdateSecondaryAccountData(changeData: changeSecondaryData) {\n    console.log('changeData', changeData);\n    const HTTP_PARAMS = new HttpParams({\n      fromObject: {\n        nickname: changeData.nickname,\n        jwt: changeData.jwt\n      }\n    });\n    console.log(HTTP_PARAMS.toString());\n    return firstValueFrom(this.httpModule.put(this.baseServiceUrl, null, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Удаление аккаунта пользователя\n   * @param jwt JWT токен\n   * @returns Promise с сообщением об успешном удалении пользователя\n   */\n  DELETEaccount(jwt: string) {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt);\n    return firstValueFrom(this.httpModule.delete(this.baseServiceUrl, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Получение полной информации об аккаунте пользователя\n   * @param jwt JWT токен\n   * @returns Promise с данными аккаунта (включая проекты и мебель)\n   */\n  async GETaccount(jwt: string) {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt);\n    try {\n      let { accountData } = await firstValueFrom(this.httpModule.get(this.baseServiceUrl, { params: HTTP_PARAMS })) as { accountData: accountFullData & { projects: projectServerInformation[] } };\n      accountData.furnitures = accountData.furnitures.map(furnitureData => {\n        return {\n          ...furnitureData,\n          previewUrl: baseUrl + furnitureData.previewUrl\n        };\n      });\n      return { accountData: accountData };\n    } catch (error) {\n      console.error('Error in GETfurnitureCard:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Проверка наличия JWT токена в куках\n   * @returns true, если JWT токен найден, иначе false\n   */\n  checkJwt(): boolean {\n    return this.accountCookieService.getJwt() ? true : false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n            \n                providers\n                \n                                AutoHeightDirective\n                                NotificationComponent\n                                AccountService\n                                AuthService\n                                AccountCookieService\n                                ServerImageControlService\n                                ProjectService\n                                PlanHouseComponent\n                                SceneComponent\n                                FurnitureCardControlService\n                                FurnitureModelControlService\n                                ShopService\n                                FinderService\n                            Location\n                \n            \n\n\n            \n                selector\n                app-root\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            RouterOutlet\n                                NotificationComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'HouseQuality'\n                    \n                \n                    \n                        \n                                Defined in src/app.component.ts:26\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component} from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\nimport { SceneComponent } from './components/scene/scene.component';\nimport { PlanHouseComponent } from './components/plan-house/plan-house.component';\nimport { NotificationComponent } from './components/notification/notification.component';\nimport { AccountService } from './services/account.service';\nimport { AuthService } from './services/auth.service';\nimport { AccountCookieService } from './services/account-cookie.service';\nimport { ServerImageControlService } from './services/server-image-control.service';\nimport { ProjectService } from './services/project.service';\nimport { FurnitureCardControlService } from './services/furniture-card-control.service';\nimport { FurnitureModelControlService } from './services/furniture-model-control.service';\nimport { ShopService } from './services/shop.service';\nimport { FinderService } from './services/finder.service';\nimport { AutoHeightDirective } from './directives/auto-height.directive';\n\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [RouterOutlet,NotificationComponent],\n  providers:[AutoHeightDirective,NotificationComponent,AccountService,AuthService,AccountCookieService,ServerImageControlService,ProjectService,PlanHouseComponent,SceneComponent,FurnitureCardControlService,FurnitureModelControlService,ShopService,FinderService,Location],\n  templateUrl: './app.component.html'\n})\nexport class AppComponent {\n  title = 'HouseQuality'; \n}\n\n    \n\n    \n        \n\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AccountPageComponent', 'selector': 'app-account-page'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreateFurnitureComponent', 'selector': 'app-create-furniture'},{'name': 'CreateFurniturePageComponent', 'selector': 'app-create-furniture-page'},{'name': 'FinderComponent', 'selector': 'app-finder'},{'name': 'ImageSliderComponent', 'selector': 'app-image-slider'},{'name': 'LoginPageComponent', 'selector': 'app-login-page'},{'name': 'MainPageComponent', 'selector': 'app-main-page'},{'name': 'NavigationPanelComponent', 'selector': 'app-navigation-panel'},{'name': 'NotificationComponent', 'selector': 'app-notification'},{'name': 'PlanHouseComponent', 'selector': 'app-plan-house'},{'name': 'PlanHousePageComponent', 'selector': 'app-plan-house-page'},{'name': 'SceneComponent', 'selector': 'app-scene'},{'name': 'ShopPageComponent', 'selector': 'app-shop-page'},{'name': 'ViewFurnitureComponent', 'selector': 'app-view-furniture'}];\n    var DIRECTIVES = [{'name': 'AutoHeightDirective', 'selector': '[appAutoHeight]'}];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseServiceUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                GETrequestPasswordCode\n                            \n                            \n                                POSTcreateLongJWT\n                            \n                            \n                                POSTcreateShortJWT\n                            \n                            \n                                PUTupdateBaseData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpModule: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/services/auth.service.ts:38\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpModule\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        GETrequestPasswordCode\n                        \n                    \n                \n            \n            \n                \nGETrequestPasswordCode(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/auth.service.ts:100\n                        \n                    \n\n\n            \n                \n                        Запрос кода сброса пароля по email\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Email пользователя\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise с кодом для сброса пароля\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        POSTcreateLongJWT\n                        \n                    \n                \n            \n            \n                \nPOSTcreateLongJWT(authData: authData)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/auth.service.ts:49\n                        \n                    \n\n\n            \n                \n                        Создание длинного JWT токена\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                authData\n                                            \n                                                            authData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Данные для входа (email+пароль или google)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise с JWT токеном\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        POSTcreateShortJWT\n                        \n                    \n                \n            \n            \n                \nPOSTcreateShortJWT(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/auth.service.ts:67\n                        \n                    \n\n\n            \n                \n                        Создание короткого (временного) JWT токена\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Email пользователя\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise с временным JWT токеном\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PUTupdateBaseData\n                        \n                    \n                \n            \n            \n                \nPUTupdateBaseData(changeData: changeAccountData)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/auth.service.ts:79\n                        \n                    \n\n\n            \n                \n                        Обновление базовой информации о пользователе\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                changeData\n                                            \n                                                            changeAccountData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Новые данные для обновления аккаунта\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise с сообщением об успехе обновления\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseServiceUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : baseUrl + 'auth/'\n                    \n                \n                    \n                        \n                                Defined in src/services/auth.service.ts:38\n                        \n                    \n\n            \n                \n                    Базовый URL для auth-роутов\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { accountType, changeAccountDataEmail, changeAccountData } from './account.service';\nimport { baseUrl } from '.';\nimport { isEmailAccount } from './account.service';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные для аутентификации через email\n */\nexport interface emailAuthData {\n  /** Email пользователя */\n  email: string;\n  /** Пароль пользователя */\n  password: string;\n  /** Тип аккаунта - 'email' */\n  accountType: 'email';\n}\n\n/**\n * Данные для аутентификации через Google\n */\nexport interface googleAuthData {\n  /** Тип аккаунта - 'google' */\n  accountType: 'google';\n}\n\n/**\n * Объединённый тип данных для аутентификации\n */\nexport type authData = googleAuthData | emailAuthData;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  /** Базовый URL для auth-роутов */\n  private baseServiceUrl = baseUrl + 'auth/';\n\n  constructor(\n    private httpModule: HttpClient\n  ) { }\n\n  /**\n   * Создание длинного JWT токена\n   * @param authData Данные для входа (email+пароль или google)\n   * @returns Promise с JWT токеном\n   */\n  POSTcreateLongJWT(authData: authData) {\n    let HTTP_PARAMS = new HttpParams()\n      .set('accountType', authData.accountType);\n\n    if (isEmailAccount(authData)) {\n      HTTP_PARAMS = HTTP_PARAMS\n        .set('email', authData.email)\n        .set('password', authData.password);\n    }\n\n    return firstValueFrom(this.httpModule.post(this.baseServiceUrl + 'jwt/long', HTTP_PARAMS)) as Promise;\n  }\n\n  /**\n   * Создание короткого (временного) JWT токена\n   * @param email Email пользователя\n   * @returns Promise с временным JWT токеном\n   */\n  POSTcreateShortJWT(email: string) {\n    let HTTP_PARAMS = new HttpParams()\n      .set('email', email);\n\n    return firstValueFrom(this.httpModule.post(this.baseServiceUrl + 'jwt/temporary', { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Обновление базовой информации о пользователе\n   * @param changeData Новые данные для обновления аккаунта\n   * @returns Promise с сообщением об успехе обновления\n   */\n  PUTupdateBaseData(changeData: changeAccountData) {\n    const paramObject: any = {\n      accountType: changeData.accountType,\n      jwt: changeData.jwt\n    };\n\n    if (isEmailAccount(changeData)) {\n      paramObject.password = changeData.password;\n    }\n\n    const HTTP_PARAMS = new HttpParams({ fromObject: paramObject });\n    console.log(HTTP_PARAMS.toString());\n\n    return firstValueFrom(this.httpModule.put(this.baseServiceUrl + 'account', changeData)) as Promise;\n  }\n\n  /**\n   * Запрос кода сброса пароля по email\n   * @param email Email пользователя\n   * @returns Promise с кодом для сброса пароля\n   */\n  GETrequestPasswordCode(email: string) {\n    let HTTP_PARAMS = new HttpParams()\n      .set('email', email);\n\n    return firstValueFrom(this.httpModule.get(this.baseServiceUrl + 'account/code', { params: HTTP_PARAMS })) as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/AutoHeightDirective.html":{"url":"directives/AutoHeightDirective.html","title":"directive - AutoHeightDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  AutoHeightDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/directives/auto-height.directive.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        OnInit\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [appAutoHeight]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                el\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                            \n                                onInput\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                mobileView\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/directives/auto-height.directive.ts:19\n                            \n                        \n\n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        mobileView\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in src/directives/auto-height.directive.ts:19\n                            \n                        \n                \n                    \n                        Флаг мобильного отображения.\nЕсли true, включается автоизменение высоты текстового поля\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/directives/auto-height.directive.ts:27\n                        \n                    \n\n\n            \n                \n                        Инициализация директивы\nДобавляет слушатель события 'input' только если включён мобильный режим\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onInput\n                        \n                    \n                \n            \n            \n                \nonInput(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/directives/auto-height.directive.ts:38\n                        \n                    \n\n\n            \n                \n                        Обработчик события ввода текста в textarea\nАвтоматически регулирует высоту textarea под содержимое\nФункция вызова ограничена (throttle) с задержкой 250 мс\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Событие ввода\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        el\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ElementRef)\n                    \n                \n                    \n                        \n                                Defined in src/directives/auto-height.directive.ts:12\n                        \n                    \n\n            \n                \n                    Элемент, к которому привязана директива\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, ElementRef, HostListener, inject, Input, OnInit } from '@angular/core';\nimport { throttle } from 'lodash';\n\n@Directive({\n  selector: '[appAutoHeight]',\n  standalone: true\n})\nexport class AutoHeightDirective implements OnInit {\n  /**\n   * Элемент, к которому привязана директива\n   */\n  private el = inject(ElementRef);\n  \n  /**\n   * Флаг мобильного отображения.\n   * Если true, включается автоизменение высоты текстового поля\n   */\n  @Input()\n  mobileView: boolean = false;\n\n  constructor() { }\n\n  /**\n   * Инициализация директивы\n   * Добавляет слушатель события 'input' только если включён мобильный режим\n   */\n  ngOnInit(): void {\n    if (!this.mobileView) return;\n    this.el.nativeElement.addEventListener('input', this.onInput.bind(this.el.nativeElement));\n  }\n  \n  /**\n   * Обработчик события ввода текста в textarea\n   * Автоматически регулирует высоту textarea под содержимое\n   * Функция вызова ограничена (throttle) с задержкой 250 мс\n   * @param event Событие ввода\n   */\n  onInput(event: Event) {\n    const input = event.target as HTMLTextAreaElement;\n    throttle(() => {\n      input.style.height = 'auto';\n      input.style.height = (input.scrollHeight) + 'px';\n    }, 250)();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CategoryService.html":{"url":"injectables/CategoryService.html","title":"injectable - CategoryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CategoryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/category.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseServiceUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                GETgetAllCategories\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpModule: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/services/category.service.ts:72\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpModule\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        GETgetAllCategories\n                        \n                    \n                \n            \n            \n                \nGETgetAllCategories()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/category.service.ts:82\n                        \n                    \n\n\n            \n                \n                        Получение всех категорий\n\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise с массивом категорий\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseServiceUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : baseUrl + 'category'\n                    \n                \n                    \n                        \n                                Defined in src/services/category.service.ts:72\n                        \n                    \n\n            \n                \n                    Базовый URL для работы с категориями\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные категории\n */\nexport interface categoryData {\n  /** Название категории */\n  name: string;\n  /** Перевод категории в единственном числе */\n  translateOne: string;\n  /** Перевод категории во множественном числе */\n  translateMany: string;\n  /** Массив фильтров категории */\n  filters: filter[];\n}\n\n/**\n * Базовый фильтр\n */\ninterface baseFilter {\n  /** Имя фильтра */\n  name: string;\n  /** Поле, по которому фильтр */\n  field: string;\n}\n\n/**\n * Опция для select-фильтра\n */\nexport interface option {\n  /** Название опции */\n  name: string;\n  /** Значение опции для запроса */\n  queryValue: string;\n}\n\n/**\n * Фильтр типа select\n */\ninterface selectFilter extends baseFilter {\n  /** Тип фильтра */\n  type: 'select';\n  /** Варианты выбора */\n  options: option[];\n}\n\n/**\n * Фильтр типа range\n */\ninterface rangeFilter extends baseFilter {\n  /** Тип фильтра */\n  type: 'range';\n  /** Минимальное значение */\n  minValue: number;\n  /** Максимальное значение */\n  maxValue: number;\n}\n\n/**\n * Тип фильтра: select или range\n */\nexport type filter = rangeFilter | selectFilter;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CategoryService {\n  /** Базовый URL для работы с категориями */\n  private baseServiceUrl = baseUrl + 'category';\n\n  constructor(\n    private httpModule: HttpClient\n  ) { }\n\n  /**\n   * Получение всех категорий\n   * @returns Promise с массивом категорий\n   */\n  GETgetAllCategories() {\n    return firstValueFrom(this.httpModule.get(this.baseServiceUrl)) as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ClientImageControlService.html":{"url":"injectables/ClientImageControlService.html","title":"injectable - ClientImageControlService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ClientImageControlService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/client-image-control.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для работы с клиентскими изображениями, включая сжатие\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                compressImage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        compressImage\n                        \n                    \n                \n            \n            \n                \ncompressImage(image: File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/client-image-control.service.ts:19\n                        \n                    \n\n\n            \n                \n                        Сжимает изображение с помощью библиотеки Compressor.js\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                image\n                                            \n                                                        File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nИсходный файл изображения (Blob или File)\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise, который резолвится в сжатый Blob или отклоняется с ошибкой\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport Compressor from 'compressorjs';\n\n/**\n * Сервис для работы с клиентскими изображениями, включая сжатие\n * @class ClientImageControlService\n * @injectable\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ClientImageControlService {\n\n  /**\n   * Сжимает изображение с помощью библиотеки Compressor.js\n   * @param image - Исходный файл изображения (Blob или File)\n   * @returns Promise, который резолвится в сжатый Blob или отклоняется с ошибкой\n   */\n  compressImage(image: File): Promise {\n    return new Promise((resolve, reject) => {\n      new Compressor(image, {\n        quality: 0.6,\n        success: (compressedFile: Blob) => {\n          resolve(compressedFile);\n        },\n        error: (error) => {\n          console.error('Ошибка сжатия:', error.message);\n          reject(error);\n        },\n      });\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/CostFormatPipe.html":{"url":"pipes/CostFormatPipe.html","title":"pipe - CostFormatPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  CostFormatPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/pipes/cost-format.pipe.ts\n        \n\n\n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        costFormat\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/pipes/cost-format.pipe.ts:12\n                        \n                    \n\n\n            \n                \n                        Форматирование числа стоимости в строку с разделением тысяч точками и добавлением символа рубля\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Число стоимости для форматирования\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                Отформатированная строка, например: \"1.234.567 ₽\"\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'costFormat'\n})\nexport class CostFormatPipe implements PipeTransform {\n  /**\n   * Форматирование числа стоимости в строку с разделением тысяч точками и добавлением символа рубля\n   * @param value Число стоимости для форматирования\n   * @returns Отформатированная строка, например: \"1.234.567 ₽\"\n   */\n  transform(value: number): string {\n    return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.') + ' ₽';\n  }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/CreateFurniturePageComponent.html":{"url":"components/CreateFurniturePageComponent.html","title":"component - CreateFurniturePageComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  CreateFurniturePageComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/components/create-furniture-page/create-furniture-page.component.ts\n\n\n\n    \n        Description\n    \n    \n        Компонент страницы создания и редактирования мебели.\nОтвечает за загрузку данных, валидацию, сохранение и удаление мебели.\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-create-furniture-page\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                                NavigationPanelComponent\n                                CreateFurnitureComponent\n                            NgIf\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./create-furniture-page.component.html\n            \n\n\n\n            \n                styleUrl\n                ./create-furniture-page.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Private\n                                createFurnitureComponent\n                            \n                            \n                                    \n                                    Private\n                                createFurnitureComponentRef\n                            \n                            \n                                    Protected\n                                furnitureData\n                            \n                            \n                                    Protected\n                                idPage\n                            \n                            \n                                    Private\n                                routeSub\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                checkValid\n                            \n                            \n                                    Protected\n                                clearFurnitureCard\n                            \n                            \n                                    Protected\n                                    Async\n                                createFurnitureCard\n                            \n                            \n                                    Protected\n                                deleteColor\n                            \n                            \n                                    Protected\n                                deleteColorCalculate\n                            \n                            \n                                    Protected\n                                    Async\n                                deleteFurnitureCard\n                            \n                            \n                                    Protected\n                                getCurrentColorId\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Private\n                                    Async\n                                pageInit\n                            \n                            \n                                    Private\n                                    Async\n                                transformUrlArrayToBlob\n                            \n                            \n                                    Protected\n                                    Async\n                                updateFurnitureCard\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(route: ActivatedRoute, cookieService: AccountCookieService, furnitureCardService: FurnitureCardControlService, serverImageControl: ServerImageControlService, router: Router, furnitureModelService: FurnitureModelControlService, notification: NotificationService)\n                    \n                \n                        \n                            \n                                Defined in src/components/create-furniture-page/create-furniture-page.component.ts:61\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        route\n                                                  \n                                                        \n                                                                    ActivatedRoute\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cookieService\n                                                  \n                                                        \n                                                                        AccountCookieService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        furnitureCardService\n                                                  \n                                                        \n                                                                        FurnitureCardControlService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        serverImageControl\n                                                  \n                                                        \n                                                                        ServerImageControlService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        furnitureModelService\n                                                  \n                                                        \n                                                                        FurnitureModelControlService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        notification\n                                                  \n                                                        \n                                                                        NotificationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        checkValid\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkValid(typeRequest: \"update\" | \"create\")\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/create-furniture-page/create-furniture-page.component.ts:230\n                        \n                    \n\n\n            \n                \n                        Проверяет валидность данных мебели.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                typeRequest\n                                            \n                                                        \"update\" | \"create\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nтип операции ('create' или 'update').\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                true, если данные валидны, иначе false.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        clearFurnitureCard\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearFurnitureCard()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/create-furniture-page/create-furniture-page.component.ts:289\n                        \n                    \n\n\n            \n                \n                        Очищает данные мебели в компоненте.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Async\n                        createFurnitureCard\n                        \n                    \n                \n            \n            \n                \n                        \n                    createFurnitureCard()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/create-furniture-page/create-furniture-page.component.ts:158\n                        \n                    \n\n\n            \n                \n                        Создаёт новую мебель:\n\nпроверяет валидность,\nсоздаёт карточку,\nзагружает изображения по цветам,\nзагружает 3D модель,\nпоказывает уведомление и перенаправляет пользователя.\n\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        deleteColor\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteColor()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/create-furniture-page/create-furniture-page.component.ts:318\n                        \n                    \n\n\n            \n                \n                        Удаляет текущий цвет, если цветов больше одного.\nЕсли цветов один — показывает ошибку.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        deleteColorCalculate\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteColorCalculate()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/create-furniture-page/create-furniture-page.component.ts:309\n                        \n                    \n\n\n            \n                \n                        Возвращает цвет, который планируется удалить (для расчётов и логирования).\n\n\n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                цвет (строка) текущего выделенного цвета или undefined.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Async\n                        deleteFurnitureCard\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteFurnitureCard()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/create-furniture-page/create-furniture-page.component.ts:137\n                        \n                    \n\n\n            \n                \n                        Удаляет мебель, 3D модель и связанные изображения с сервера.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        getCurrentColorId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCurrentColorId()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/create-furniture-page/create-furniture-page.component.ts:330\n                        \n                    \n\n\n            \n                \n                        Возвращает текущий id выбранного цвета.\n\n\n                        \n                            Returns :     number | undefined\n\n                        \n                            \n                                id цвета или undefined.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/create-furniture-page/create-furniture-page.component.ts:95\n                        \n                    \n\n\n            \n                \n                        Отписка от подписки при уничтожении компонента.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/create-furniture-page/create-furniture-page.component.ts:79\n                        \n                    \n\n\n            \n                \n                        Инициализация компонента:\n\nпроверяет JWT,\nподписывается на изменения параметров маршрута,\nзагружает мебель, если id не \"new\".\n\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        pageInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    pageInit(jwt: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/create-furniture-page/create-furniture-page.component.ts:104\n                        \n                    \n\n\n            \n                \n                        Загружает данные мебели по id и JWT.\nЕсли автор не совпадает, происходит перенаправление на создание новой мебели.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nJWT токен пользователя.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        transformUrlArrayToBlob\n                        \n                    \n                \n            \n            \n                \n                        \n                    transformUrlArrayToBlob(imagesArray: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/create-furniture-page/create-furniture-page.component.ts:123\n                        \n                    \n\n\n            \n                \n                        Преобразует массив URL строк изображений в массив Blob объектов.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                imagesArray\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nмассив URL строк изображений.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise с массивом Blob объектов.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Async\n                        updateFurnitureCard\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateFurnitureCard()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/create-furniture-page/create-furniture-page.component.ts:194\n                        \n                    \n\n\n            \n                \n                        Обновляет данные мебели:\n\nпроверяет валидность,\nобновляет карточку мебели,\nобновляет изображения,\nпри необходимости загружает новую 3D модель,\nпоказывает уведомление об успешном обновлении.\n\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        createFurnitureComponent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateFurnitureComponent\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild(CreateFurnitureComponent)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/create-furniture-page/create-furniture-page.component.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        createFurnitureComponentRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild(CreateFurnitureComponent, {read: ElementRef})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/create-furniture-page/create-furniture-page.component.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        furnitureData\n                        \n                    \n                \n            \n                \n                    \n                        Default value : {\n    name: '',\n    description: '',\n    colors: [],\n    shops: [],\n    additionalData: {},\n    proportions: {\n      width: null,\n      height: null,\n      length: null\n    }\n  }\n                    \n                \n                    \n                        \n                                Defined in src/components/create-furniture-page/create-furniture-page.component.ts:50\n                        \n                    \n\n            \n                \n                    Данные мебели с дополнительным полем пропорций клиента.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        idPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/components/create-furniture-page/create-furniture-page.component.ts:37\n                        \n                    \n\n            \n                \n                    Id страницы.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        routeSub\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                    \n                        \n                                Defined in src/components/create-furniture-page/create-furniture-page.component.ts:35\n                        \n                    \n\n            \n                \n                    Подписка на изменения маршрута в приложении.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { ChangeDetectorRef, Component, DoCheck, ElementRef, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { NavigationPanelComponent } from '../navigation-panel/navigation-panel.component';\nimport { CreateFurnitureComponent } from '../create-furnitre/create-furniture.component';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AccountCookieService } from '../../services/account-cookie.service';\nimport { FurnitureCardControlService, furnitureFromServerData } from '../../services/furniture-card-control.service';\nimport { ServerImageControlService } from '../../services/server-image-control.service';\nimport { NgIf } from '@angular/common';\nimport { FurnitureModelControlService } from '../../services/furniture-model-control.service';\nimport { NotificationService } from '../../services/notification.service';\nimport { imageSliderClientData } from '../image-slider/image-slider.component';\nimport { Subscription } from 'rxjs';\n\n/** Данные для формы габаритов мебели на клиенте.*/\ninterface clientProportions {\n  width: number | null;\n  height: number | null;\n  length: number | null;\n}\n\n/**\n * Компонент страницы создания и редактирования мебели.\n * Отвечает за загрузку данных, валидацию, сохранение и удаление мебели.\n */\n@Component({\n  selector: 'app-create-furniture-page',\n  standalone: true,\n  imports: [NavigationPanelComponent, CreateFurnitureComponent, NgIf],\n  templateUrl: './create-furniture-page.component.html',\n  styleUrl: './create-furniture-page.component.scss'\n})\nexport class CreateFurniturePageComponent implements OnInit, OnDestroy {\n\n  /** Подписка на изменения маршрута в приложении.*/\n  private routeSub!: Subscription;\n  /** Id страницы.*/\n  protected idPage!: string;\n  \n  @ViewChild(CreateFurnitureComponent)\n  /** Переменная для взаимодействия с методами дочернего компонента.*/\n  private createFurnitureComponent!: CreateFurnitureComponent;\n  \n  @ViewChild(CreateFurnitureComponent, { read: ElementRef })\n  /** Переменная для взаимодействия с html дочернего компонента.*/\n  private createFurnitureComponentRef!: ElementRef;\n\n  /**\n   * Данные мебели с дополнительным полем пропорций клиента.\n   */\n  protected furnitureData: furnitureFromServerData & { proportions: clientProportions } = {\n    name: '',\n    description: '',\n    colors: [],\n    shops: [],\n    additionalData: {},\n    proportions: {\n      width: null,\n      height: null,\n      length: null\n    }\n  };\n\n  constructor(\n    private route: ActivatedRoute,\n    private cookieService: AccountCookieService,\n    private furnitureCardService: FurnitureCardControlService,\n    private serverImageControl: ServerImageControlService,\n    private router: Router,\n    private furnitureModelService: FurnitureModelControlService,\n    private notification: NotificationService\n  ) { }\n\n  /**\n   * Инициализация компонента:\n   * - проверяет JWT,\n   * - подписывается на изменения параметров маршрута,\n   * - загружает мебель, если id не \"new\".\n   */\n  ngOnInit(): void {\n    const JWT = this.cookieService.getJwt();\n    if (!JWT) {\n      this.router.navigateByUrl('/login');\n      return;\n    }\n    this.routeSub = this.route.paramMap.subscribe(params => {\n      this.idPage = params.get('id') ?? 'new';\n      this.clearFurnitureCard();\n      if (this.idPage !== 'new') this.pageInit(JWT);\n    });\n  }\n\n  /**\n   * Отписка от подписки при уничтожении компонента.\n   */\n  ngOnDestroy() {\n    this.routeSub.unsubscribe();\n  }\n\n  /**\n   * Загружает данные мебели по id и JWT.\n   * Если автор не совпадает, происходит перенаправление на создание новой мебели.\n   * @param jwt - JWT токен пользователя.\n   */\n  private async pageInit(jwt: string) {\n    try {\n      const RESPONSE = await this.furnitureCardService.GETfurnitureCard(this.idPage, jwt);\n      if (RESPONSE.authorMatched === false) {\n        this.router.navigateByUrl('/create/new');\n        return;\n      }\n      this.furnitureData = RESPONSE.furnitureCard;\n      this.createFurnitureComponent.currentColorId = 0;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  /**\n   * Преобразует массив URL строк изображений в массив Blob объектов.\n   * @param imagesArray - массив URL строк изображений.\n   * @returns Promise с массивом Blob объектов.\n   */\n  private async transformUrlArrayToBlob(imagesArray: string[]): Promise {\n    const IMAGES_BLOB_ARRAY: Blob[] = await Promise.all(\n      imagesArray.map(async (blobUrl): Promise => {\n        const RESPONSE = await fetch(blobUrl.toString());\n        const BLOB = await RESPONSE.blob();\n        return BLOB;\n      })\n    );\n    return IMAGES_BLOB_ARRAY;\n  }\n\n  /**\n   * Удаляет мебель, 3D модель и связанные изображения с сервера.\n   */\n  protected async deleteFurnitureCard() {\n    const JWT = this.cookieService.getJwt();\n    if (!JWT) return;\n    try {\n      await this.furnitureModelService.DELETEfurnitureModel(JWT, this.idPage);\n      await this.serverImageControl.DELETEproject(JWT, this.idPage);\n      await this.furnitureCardService.DELETEfurnitureCard(JWT, this.idPage);\n      this.router.navigateByUrl('/account');\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  /**\n   * Создаёт новую мебель:\n   * - проверяет валидность,\n   * - создаёт карточку,\n   * - загружает изображения по цветам,\n   * - загружает 3D модель,\n   * - показывает уведомление и перенаправляет пользователя.\n   */\n  protected async createFurnitureCard() {\n    const JWT = this.cookieService.getJwt();\n    if (!this.checkValid('create') || !JWT) return;\n    try {\n      const FURNITURE_DATA = this.createFurnitureComponent.furnitureData;\n      const FURNITURE_ID = (await this.furnitureCardService.POSTcreateFurnitureCard(FURNITURE_DATA, JWT)).furnitureData._id;\n\n      // Загрузка изображений по цветам\n      FURNITURE_DATA.colors.forEach(async (colorData) => {\n        const imagesBlobArray = await this.transformUrlArrayToBlob(colorData.imagesData.images);\n        const imagesData: imageSliderClientData = {\n          images: imagesBlobArray,\n          idMainImage: colorData.imagesData.idMainImage\n        };\n        await this.serverImageControl.POSTuploadProjectImages(colorData.color, imagesData, JWT, FURNITURE_ID);\n      });\n\n      // Загрузка 3D модели\n      const FURNITURE_MODEL_BLOB = this.createFurnitureComponent.furnitureModelInput.files![0];\n      await this.furnitureModelService.POSTuploadFurnitureModel(FURNITURE_MODEL_BLOB, JWT, FURNITURE_ID);\n\n      this.notification.setSuccess('Мебель добавлена', 5000);\n      this.router.navigateByUrl('/account');\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  /**\n   * Обновляет данные мебели:\n   * - проверяет валидность,\n   * - обновляет карточку мебели,\n   * - обновляет изображения,\n   * - при необходимости загружает новую 3D модель,\n   * - показывает уведомление об успешном обновлении.\n   */\n  protected async updateFurnitureCard() {\n    const JWT = this.cookieService.getJwt();\n    if (!this.checkValid('update') || !JWT) return;\n    try {\n      const FURNITURE_DATA = this.createFurnitureComponent.furnitureData;\n      await this.furnitureCardService.PUTupdateFurnitureCard(FURNITURE_DATA, this.idPage, JWT);\n\n      // Загрузка изображений по цветам, если есть\n      FURNITURE_DATA.colors.forEach(async (colorData) => {\n        if (colorData.imagesData.images.length === 0) return;\n        const IMAGES_BLOB_ARRAY = await this.transformUrlArrayToBlob(colorData.imagesData.images);\n        const IMAGES_DATA: imageSliderClientData = {\n          images: IMAGES_BLOB_ARRAY,\n          idMainImage: colorData.imagesData.idMainImage\n        };\n        await this.serverImageControl.POSTuploadProjectImages(colorData.color, IMAGES_DATA, JWT, this.idPage);\n      });\n\n      // Загрузка 3D модели, если файл выбран\n      const FURNITURE_MODEL_BLOB = this.createFurnitureComponent.furnitureModelInput.files!;\n      if (FURNITURE_MODEL_BLOB[0]) {\n        await this.furnitureModelService.POSTuploadFurnitureModel(FURNITURE_MODEL_BLOB[0], JWT, this.idPage);\n      }\n\n      this.notification.setSuccess('Мебель обновлена', 5000);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  /**\n   * Проверяет валидность данных мебели.\n   * @param typeRequest - тип операции ('create' или 'update').\n   * @param action - если true, то при ошибке вызываются уведомления и открываются необходимые модули.\n   * @returns true, если данные валидны, иначе false.\n   */\n  protected checkValid(typeRequest: 'update' | 'create'): boolean {\n    const { colors, shops, proportions, name } = this.furnitureData;\n    const FURNITURE_MODEL_BLOB = this.createFurnitureComponent.furnitureModelInput.files![0];\n\n    if (colors.length == 0) {\n      this.createFurnitureComponent.openColorModule();\n      return false;\n    }\n    if (name.length == 0) {\n      const nameInput = this.createFurnitureComponentRef.nativeElement.querySelector(\n        '.furnitureTitle'\n      ) as HTMLInputElement;\n\n      if (nameInput) {\n        nameInput.focus();\n      }\n      this.notification.setError('Заполните название мебели', 5000);\n      return false;\n    }\n    if (!proportions.height || !proportions.width || !proportions.length) {\n      this.createFurnitureComponent.openAdditional();\n      this.notification.setError('Заполните параметры', 5000);\n      return false;\n    }\n    if (!FURNITURE_MODEL_BLOB && typeRequest === 'create') {\n      const uploadInput = this.createFurnitureComponentRef.nativeElement.querySelector(\n        '.furnitureModelInput'\n      ) as HTMLInputElement;\n\n      if (uploadInput) {\n        uploadInput.click();\n      }\n      this.notification.setError('Загрузите 3D модель', 5000);\n      return false;\n    }\n    if (shops.length == 0) {\n      this.createFurnitureComponent.openShopsModule();\n      this.notification.setError('Добавьте магазины', 5000);\n      return false;\n    }\n    for (let colorData of colors) {\n      if (colorData.imagesData.images.length == 0 && typeRequest === 'create') {\n        const uploadInput = this.createFurnitureComponentRef.nativeElement.querySelector(\n          '.uploadImagesInput'\n        ) as HTMLInputElement;\n\n        if (uploadInput) {\n          uploadInput.click();\n        }\n        this.notification.setError('Загрузите изображения', 5000);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Очищает данные мебели в компоненте.\n   */\n  protected clearFurnitureCard() {\n    if (this.createFurnitureComponent) this.createFurnitureComponent.currentColorId = undefined;\n    this.furnitureData = {\n      name: '',\n      description: '',\n      colors: [],\n      shops: [],\n      additionalData: {},\n      proportions: {\n        width: null,\n        height: null,\n        length: null\n      }\n    };\n  }\n\n  /**\n   * Возвращает цвет, который планируется удалить (для расчётов и логирования).\n   * @returns цвет (строка) текущего выделенного цвета или undefined.\n   */\n  protected deleteColorCalculate(): string | undefined {\n    if (!this.createFurnitureComponent || this.createFurnitureComponent.currentColorId === undefined) return undefined;\n    return this.createFurnitureComponent.furnitureData.colors[this.createFurnitureComponent.currentColorId].color;\n  }\n\n  /**\n   * Удаляет текущий цвет, если цветов больше одного.\n   * Если цветов один — показывает ошибку.\n   */\n  protected deleteColor() {\n    if (this.createFurnitureComponent.furnitureData.colors.length \n    \n\n    \n        \n  \n  \n  \n    \n        \n    \n    \n      {{idPage === 'new' ? 'Создать' : 'Обновить'}}\n    \n    \n      \n    \n  \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                {{idPage === \\'new\\' ? \\'Создать\\' : \\'Обновить\\'}}                    '\n    var COMPONENTS = [{'name': 'AccountPageComponent', 'selector': 'app-account-page'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreateFurnitureComponent', 'selector': 'app-create-furniture'},{'name': 'CreateFurniturePageComponent', 'selector': 'app-create-furniture-page'},{'name': 'FinderComponent', 'selector': 'app-finder'},{'name': 'ImageSliderComponent', 'selector': 'app-image-slider'},{'name': 'LoginPageComponent', 'selector': 'app-login-page'},{'name': 'MainPageComponent', 'selector': 'app-main-page'},{'name': 'NavigationPanelComponent', 'selector': 'app-navigation-panel'},{'name': 'NotificationComponent', 'selector': 'app-notification'},{'name': 'PlanHouseComponent', 'selector': 'app-plan-house'},{'name': 'PlanHousePageComponent', 'selector': 'app-plan-house-page'},{'name': 'SceneComponent', 'selector': 'app-scene'},{'name': 'ShopPageComponent', 'selector': 'app-shop-page'},{'name': 'ViewFurnitureComponent', 'selector': 'app-view-furniture'}];\n    var DIRECTIVES = [{'name': 'AutoHeightDirective', 'selector': '[appAutoHeight]'}];\n    var ACTUAL_COMPONENT = {'name': 'CreateFurniturePageComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FinderComponent.html":{"url":"components/FinderComponent.html","title":"component - FinderComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  FinderComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/components/finder/finder.component.ts\n\n\n\n    \n        Description\n    \n    \n        Компонент поиска мебели.\nПозволяет искать мебель по названию и отображать результаты.\n\n    \n\n\n    \n        Implements\n    \n    \n                AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-finder\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            NgClass\n                            NgFor\n                            NgIf\n                            RouterLink\n                            CostFormatPipe\n                            RouterLink\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./finder.component.html\n            \n\n\n\n            \n                styleUrl\n                ./finder.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                checkDesktop\n                            \n                            \n                                    Private\n                                debounceTimer\n                            \n                            \n                                    Protected\n                                    Optional\n                                foundFurniture\n                            \n                            \n                                    Private\n                                inputElement\n                            \n                            \n                                    Private\n                                variantsSpan\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                checkShopPage\n                            \n                            \n                                    Protected\n                                clearInput\n                            \n                            \n                                    Private\n                                closeFoundResultsList\n                            \n                            \n                                    Private\n                                    Async\n                                findFurnitures\n                            \n                            \n                                    Protected\n                                getImage\n                            \n                            \n                                    Protected\n                                getUrl\n                            \n                            \n                                    Protected\n                                inputProcess\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                    Private\n                                openFoundResultsList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(finderService: FinderService, elementRef: ElementRef, renderer: Renderer2, imageService: ServerImageControlService, route: ActivatedRoute)\n                    \n                \n                        \n                            \n                                Defined in src/components/finder/finder.component.ts:55\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        finderService\n                                                  \n                                                        \n                                                                        FinderService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        elementRef\n                                                  \n                                                        \n                                                                    ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                    Renderer2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        imageService\n                                                  \n                                                        \n                                                                        ServerImageControlService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        route\n                                                  \n                                                        \n                                                                    ActivatedRoute\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        checkShopPage\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkShopPage(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/finder/finder.component.ts:130\n                        \n                    \n\n\n            \n                \n                        Проверяет, находится ли пользователь на странице магазина.\nЕсли да, устанавливает в сервисе имя мебели.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Имя мебели для поиска\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                true если на странице магазина, иначе false\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        clearInput\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearInput()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/finder/finder.component.ts:118\n                        \n                    \n\n\n            \n                \n                        Очищает поле ввода и скрывает список результатов.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        closeFoundResultsList\n                        \n                    \n                \n            \n            \n                \n                        \n                    closeFoundResultsList()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/finder/finder.component.ts:105\n                        \n                    \n\n\n            \n                \n                        Закрывает список найденных результатов (удаляет CSS класс).\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        findFurnitures\n                        \n                    \n                \n            \n            \n                \n                        \n                    findFurnitures(findString: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/finder/finder.component.ts:78\n                        \n                    \n\n\n            \n                \n                        Выполняет поиск мебели на сервере по заданной строке.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                findString\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Строка для поиска мебели\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        getImage\n                        \n                    \n                \n            \n            \n                \n                        \n                    getImage(idFurniture: string, color: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/finder/finder.component.ts:167\n                        \n                    \n\n\n            \n                \n                        Возвращает URL главного изображения мебели по id и цвету.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                idFurniture\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор мебели\n\n                                            \n                                        \n                                        \n                                                color\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Цвет мебели\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                URL изображения\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        getUrl\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUrl(idFurniture: string, category: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/finder/finder.component.ts:177\n                        \n                    \n\n\n            \n                \n                        Формирует URL для перехода на страницу мебели.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                idFurniture\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор мебели\n\n                                            \n                                        \n                                        \n                                                category\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Категория мебели\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                URL для маршрутизации\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        inputProcess\n                        \n                    \n                \n            \n            \n                \n                        \n                    inputProcess()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/finder/finder.component.ts:147\n                        \n                    \n\n\n            \n                \n                        Обрабатывает ввод пользователя с задержкой (debounce).\nЗапускает поиск, если введена строка.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/finder/finder.component.ts:69\n                        \n                    \n\n\n            \n                \n                        Инициализация после рендера компонента:\nПолучение необходимых DOM-элементов для управления поиском.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        openFoundResultsList\n                        \n                    \n                \n            \n            \n                \n                        \n                    openFoundResultsList()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/finder/finder.component.ts:97\n                        \n                    \n\n\n            \n                \n                        Открывает список найденных результатов (добавляет CSS класс).\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        checkDesktop\n                        \n                    \n                \n            \n                \n                    \n                        Default value : checkDesktop\n                    \n                \n                    \n                        \n                                Defined in src/components/finder/finder.component.ts:113\n                        \n                    \n\n            \n                \n                    Утилитная функция проверки, запущено ли приложение на десктопе.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        debounceTimer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/components/finder/finder.component.ts:55\n                        \n                    \n\n            \n                \n                    Таймер для реализации дебаунса ввода.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Optional\n                        foundFurniture\n                        \n                    \n                \n            \n                \n                    \n                        Type :         foundFurniture[]\n\n                    \n                \n                    \n                        \n                                Defined in src/components/finder/finder.component.ts:50\n                        \n                    \n\n            \n                \n                    Массив найденных объектов мебели.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        inputElement\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HTMLInputElement\n\n                    \n                \n                    \n                        \n                                Defined in src/components/finder/finder.component.ts:45\n                        \n                    \n\n            \n                \n                    Ссылка на HTML-элемент текстового поля ввода.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        variantsSpan\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HTMLSpanElement\n\n                    \n                \n                    \n                        \n                                Defined in src/components/finder/finder.component.ts:40\n                        \n                    \n\n            \n                \n                    Ссылка на HTML-элемент с результатами поиска (список вариантов).\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { NgClass, NgFor, NgIf } from '@angular/common';\nimport { AfterViewInit, Component, ElementRef, Renderer2 } from '@angular/core';\nimport { FinderService } from '../../services/finder.service';\nimport { ServerImageControlService } from '../../services/server-image-control.service';\nimport { ActivatedRoute, RouterLink } from '@angular/router';\nimport { checkDesktop } from '../../usable/reusable-functions.used';\nimport { CostFormatPipe } from '../../pipes/cost-format.pipe';\n\n/**\n * Интерфейс, описывающий найденную мебель.\n */\ninterface foundFurniture {\n  /** Название мебели */\n  name: string;\n  /** Цена мебели */\n  cost: number;\n  /** Цвет, указанный в запросе */\n  colorRequest: string;\n  /** Уникальный идентификатор мебели */\n  id: string;\n  /** Категория мебели */\n  category: string;\n}\n\n/**\n * Компонент поиска мебели.\n * Позволяет искать мебель по названию и отображать результаты.\n */\n@Component({\n  selector: 'app-finder',\n  standalone: true,\n  imports: [NgClass, NgFor, NgIf, RouterLink, CostFormatPipe, RouterLink],\n  templateUrl: './finder.component.html',\n  styleUrl: './finder.component.scss'\n})\nexport class FinderComponent implements AfterViewInit {\n  /**\n   * Ссылка на HTML-элемент с результатами поиска (список вариантов).\n   */\n  private variantsSpan!: HTMLSpanElement;\n\n  /**\n   * Ссылка на HTML-элемент текстового поля ввода.\n   */\n  private inputElement!: HTMLInputElement;\n\n  /**\n   * Массив найденных объектов мебели.\n   */\n  protected foundFurniture?: foundFurniture[];\n\n  /**\n   * Таймер для реализации дебаунса ввода.\n   */\n  private debounceTimer: any = null;\n\n  constructor(\n    private finderService: FinderService,\n    private elementRef: ElementRef,\n    private renderer: Renderer2,\n    private imageService: ServerImageControlService,\n    private route: ActivatedRoute\n  ) { }\n\n  /**\n   * Инициализация после рендера компонента:\n   * Получение необходимых DOM-элементов для управления поиском.\n   */\n  ngAfterViewInit(): void {\n    this.variantsSpan = this.elementRef.nativeElement.querySelector('.variantsSpan') as HTMLSpanElement;\n    this.inputElement = this.elementRef.nativeElement.querySelector('.finderInput') as HTMLInputElement;\n  }\n\n  /**\n   * Выполняет поиск мебели на сервере по заданной строке.\n   * @param findString Строка для поиска мебели\n   */\n  private async findFurnitures(findString: string) {\n    const RECEIVED_DATA = await this.finderService.GETfindFurnitures(findString) as foundFurniture[];\n    this.openFoundResultsList();\n\n    if (RECEIVED_DATA.length > 0) {\n      this.closeFoundResultsList();\n      setTimeout(() => {\n        this.foundFurniture = RECEIVED_DATA;\n        this.openFoundResultsList();\n      }, 400);\n    } else {\n      // Если результатов нет, очищаем массив foundFurniture\n      this.foundFurniture !== undefined ? this.foundFurniture.length = 0 : this.foundFurniture = [];\n    }\n  }\n\n  /**\n   * Открывает список найденных результатов (добавляет CSS класс).\n   */\n  private openFoundResultsList() {\n    if (!this.variantsSpan) return;\n    this.renderer.addClass(this.variantsSpan, 'variantsSpanOpen');\n  }\n\n  /**\n   * Закрывает список найденных результатов (удаляет CSS класс).\n   */\n  private closeFoundResultsList() {\n    if (!this.variantsSpan) return;\n    this.renderer.removeClass(this.variantsSpan, 'variantsSpanOpen');\n  }\n\n  /**\n   * Утилитная функция проверки, запущено ли приложение на десктопе.\n   */\n  protected checkDesktop = checkDesktop;\n\n  /**\n   * Очищает поле ввода и скрывает список результатов.\n   */\n  protected clearInput() {\n    this.inputElement.value = '';\n    this.inputProcess();\n    this.closeFoundResultsList();\n  }\n\n  /**\n   * Проверяет, находится ли пользователь на странице магазина.\n   * Если да, устанавливает в сервисе имя мебели.\n   * @param name Имя мебели для поиска\n   * @returns true если на странице магазина, иначе false\n   */\n  private checkShopPage(name: string): boolean {\n    let CURRENT_ROUTE = this.route.root;\n    while (CURRENT_ROUTE.firstChild) {\n      CURRENT_ROUTE = CURRENT_ROUTE.firstChild;\n    }\n    const component = CURRENT_ROUTE.snapshot.routeConfig?.component;\n    if (component && component.name === '_ShopPageComponent') {\n      this.finderService.setFurnitureName(name);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Обрабатывает ввод пользователя с задержкой (debounce).\n   * Запускает поиск, если введена строка.\n   */\n  protected inputProcess() {\n    const VALUE = this.inputElement.value;\n    clearTimeout(this.debounceTimer);\n    this.debounceTimer = setTimeout(() => {\n      if (VALUE.length === 0) {\n        if (this.checkShopPage(VALUE)) this.closeFoundResultsList();\n        return;\n      }\n      if (this.checkShopPage(VALUE)) return;\n\n      this.findFurnitures(VALUE);\n    }, 300);\n  }\n\n  /**\n   * Возвращает URL главного изображения мебели по id и цвету.\n   * @param idFurniture Идентификатор мебели\n   * @param color Цвет мебели\n   * @returns URL изображения\n   */\n  protected getImage(idFurniture: string, color: string): string {\n    return this.imageService.GETmainImage(idFurniture, color);\n  }\n\n  /**\n   * Формирует URL для перехода на страницу мебели.\n   * @param idFurniture Идентификатор мебели\n   * @param category Категория мебели\n   * @returns URL для маршрутизации\n   */\n  protected getUrl(idFurniture: string, category: string): string {\n    return `/shop/${category ?? 'all'}/${idFurniture}`;\n  }\n}\n\n    \n\n    \n        \n    \n        \n            \n        \n        \n        \n            \n        \n    \n    \n        Ничего не найдено :(\n        \n            \n                {{card.name}}\n                {{ card.cost | costFormat }}\n            \n            \n        \n        Перейти в магазин\n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                                    Ничего не найдено :(                                    {{card.name}}                {{ card.cost | costFormat }}                                        Перейти в магазин    '\n    var COMPONENTS = [{'name': 'AccountPageComponent', 'selector': 'app-account-page'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreateFurnitureComponent', 'selector': 'app-create-furniture'},{'name': 'CreateFurniturePageComponent', 'selector': 'app-create-furniture-page'},{'name': 'FinderComponent', 'selector': 'app-finder'},{'name': 'ImageSliderComponent', 'selector': 'app-image-slider'},{'name': 'LoginPageComponent', 'selector': 'app-login-page'},{'name': 'MainPageComponent', 'selector': 'app-main-page'},{'name': 'NavigationPanelComponent', 'selector': 'app-navigation-panel'},{'name': 'NotificationComponent', 'selector': 'app-notification'},{'name': 'PlanHouseComponent', 'selector': 'app-plan-house'},{'name': 'PlanHousePageComponent', 'selector': 'app-plan-house-page'},{'name': 'SceneComponent', 'selector': 'app-scene'},{'name': 'ShopPageComponent', 'selector': 'app-shop-page'},{'name': 'ViewFurnitureComponent', 'selector': 'app-view-furniture'}];\n    var DIRECTIVES = [{'name': 'AutoHeightDirective', 'selector': '[appAutoHeight]'}];\n    var ACTUAL_COMPONENT = {'name': 'FinderComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FinderService.html":{"url":"injectables/FinderService.html","title":"injectable - FinderService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FinderService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/finder.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для поиска мебели по названию\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseServiceUrl\n                            \n                            \n                                furnitureName$\n                            \n                            \n                                    Private\n                                inputFurnitureNameSubject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                GETfindFurnitures\n                            \n                            \n                                setFurnitureName\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpModule: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/services/finder.service.ts:23\n                            \n                        \n\n                \n                    \n                            Конструктор сервиса\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        httpModule\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nHTTP клиент для выполнения запросов\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        GETfindFurnitures\n                        \n                    \n                \n            \n            \n                \nGETfindFurnitures(query: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/finder.service.ts:44\n                        \n                    \n\n\n            \n                \n                        Выполняет поиск мебели по названию, возвращая до 10 найденных публикаций\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nСтрока запроса поиска\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise с результатами поиска (массив публикаций или любая структура, возвращаемая сервером)\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setFurnitureName\n                        \n                    \n                \n            \n            \n                \nsetFurnitureName(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/finder.service.ts:35\n                        \n                    \n\n\n            \n                \n                        Устанавливает текущее название мебели для поиска\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nНазвание мебели\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseServiceUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : baseUrl + 'find?q='\n                    \n                \n                    \n                        \n                                Defined in src/services/finder.service.ts:17\n                        \n                    \n\n            \n                \n                    Базовый URL для запросов поиска\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        furnitureName$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.inputFurnitureNameSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/services/finder.service.ts:23\n                        \n                    \n\n            \n                \n                    Observable для подписки на изменения названия мебели\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        inputFurnitureNameSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject('')\n                    \n                \n                    \n                        \n                                Defined in src/services/finder.service.ts:20\n                        \n                    \n\n            \n                \n                    BehaviorSubject для хранения текущего названия мебели для поиска\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { BehaviorSubject, firstValueFrom } from 'rxjs';\n\n/**\n * Сервис для поиска мебели по названию\n * @class FinderService\n * @injectable\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class FinderService {\n\n  /** Базовый URL для запросов поиска */\n  private baseServiceUrl = baseUrl + 'find?q=';\n\n  /** BehaviorSubject для хранения текущего названия мебели для поиска */\n  private inputFurnitureNameSubject = new BehaviorSubject('');\n\n  /** Observable для подписки на изменения названия мебели */\n  furnitureName$ = this.inputFurnitureNameSubject.asObservable();\n\n  /**\n   * Конструктор сервиса\n   * @param httpModule - HTTP клиент для выполнения запросов\n   */\n  constructor(private httpModule: HttpClient) { }\n\n  /**\n   * Устанавливает текущее название мебели для поиска\n   * @param name - Название мебели\n   */\n  setFurnitureName(name: string): void {\n    this.inputFurnitureNameSubject.next(name);\n  }\n\n  /**\n   * Выполняет поиск мебели по названию, возвращая до 10 найденных публикаций\n   * @param query - Строка запроса поиска\n   * @returns Promise с результатами поиска (массив публикаций или любая структура, возвращаемая сервером)\n   */\n  GETfindFurnitures(query: string): Promise {\n    return firstValueFrom(this.httpModule.get(this.baseServiceUrl + query));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FurnitureCardControlService.html":{"url":"injectables/FurnitureCardControlService.html","title":"injectable - FurnitureCardControlService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FurnitureCardControlService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/furniture-card-control.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для управления карточками мебели\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseServiceUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                DELETEfurnitureCard\n                            \n                            \n                                    Async\n                                GETfurnitureCard\n                            \n                            \n                                POSTcreateFurnitureCard\n                            \n                            \n                                PUTupdateFurnitureCard\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpModule: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/services/furniture-card-control.service.ts:112\n                            \n                        \n\n                \n                    \n                            Конструктор сервиса\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        httpModule\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                HTTP клиент для запросов\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        DELETEfurnitureCard\n                        \n                    \n                \n            \n            \n                \nDELETEfurnitureCard(jwt: string, furnitureCardId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/furniture-card-control.service.ts:214\n                        \n                    \n\n\n            \n                \n                        Удаление карточки мебели по ID и JWT токену\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nJWT токен пользователя\n\n\n                                            \n                                        \n                                        \n                                                furnitureCardId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID карточки мебели для удаления\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise с сообщением результата удаления\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        GETfurnitureCard\n                        \n                    \n                \n            \n            \n                \n                        \n                    GETfurnitureCard(furnitureCardId: string, jwt?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/furniture-card-control.service.ts:127\n                        \n                    \n\n\n            \n                \n                        Получение карточки мебели по ID и опциональному JWT токену\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                furnitureCardId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID карточки мебели\n\n\n                                            \n                                        \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nJWT токен пользователя (опционально)\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise с объектом, содержащим данные карточки и флаг совпадения автора\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        POSTcreateFurnitureCard\n                        \n                    \n                \n            \n            \n                \nPOSTcreateFurnitureCard(furnitureData: furnitureFromServerData, jwt: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/furniture-card-control.service.ts:178\n                        \n                    \n\n\n            \n                \n                        Создание новой карточки мебели\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                furnitureData\n                                            \n                                                            furnitureFromServerData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nДанные новой карточки мебели\n\n\n                                            \n                                        \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nJWT токен пользователя\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise с данными созданной карточки, включая её ID\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PUTupdateFurnitureCard\n                        \n                    \n                \n            \n            \n                \nPUTupdateFurnitureCard(furnitureCardUpdateData: furnitureFromServerData, furnitureCardId: string, jwt: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/furniture-card-control.service.ts:195\n                        \n                    \n\n\n            \n                \n                        Обновление существующей карточки мебели\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                furnitureCardUpdateData\n                                            \n                                                            furnitureFromServerData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nОбновленные данные карточки мебели\n\n\n                                            \n                                        \n                                        \n                                                furnitureCardId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID карточки мебели для обновления\n\n\n                                            \n                                        \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nJWT токен пользователя\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise с сообщением результата обновления\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseServiceUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : baseUrl + 'furniture/card'\n                    \n                \n                    \n                        \n                                Defined in src/services/furniture-card-control.service.ts:112\n                        \n                    \n\n            \n                \n                    Базовый URL для запросов к API мебели\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { imageSliderClientData, imageSliderFromServerData } from '../components/image-slider/image-slider.component';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные магазина с ценой и URL\n * @interface shopData\n */\nexport interface shopData {\n  /** Цена мебели */\n  cost: number;\n  /** URL магазина или товара */\n  url: string;\n}\n\n/**\n * Пропорции мебели (ширина, длина, высота)\n * @interface furnitureProportions\n */\nexport interface furnitureProportions {\n  /** Ширина мебели (или null, если не задана) */\n  width: number | null;\n  /** Длина мебели (или null, если не задана) */\n  length: number | null;\n  /** Высота мебели (или null, если не задана) */\n  height: number | null;\n}\n\n/**\n * Данные цвета на клиенте, включая слайдер изображений\n * @interface colorClientData\n */\nexport interface colorClientData {\n  /** Цвет мебели */\n  color: string;\n  /** Данные для слайдера изображений */\n  imagesData: imageSliderClientData;\n}\n\n/**\n * Данные цвета с сервера, включая слайдер изображений\n * @interface colorFromServerData\n */\nexport interface colorFromServerData {\n  /** Цвет мебели */\n  color: string;\n  /** Данные для слайдера изображений */\n  imagesData: imageSliderFromServerData;\n}\n\n/**\n * Дополнительные данные мебели с динамическими ключами\n * @interface additionalData\n */\nexport interface additionalData {\n  /** Категория мебели (опционально) */\n  category?: string;\n  /** Другие динамические свойства */\n  [key: string]: string | undefined;\n}\n\n/**\n * Базовые данные мебели, общие для клиента и сервера\n * @interface furnitureBaseData\n */\ninterface furnitureBaseData {\n  /** Название мебели */\n  name: string;\n  /** Описание мебели */\n  description: string;\n  /** Пропорции мебели */\n  proportions: furnitureProportions;\n  /** Список магазинов с ценами и URL */\n  shops: shopData[];\n  /** Дополнительные данные */\n  additionalData: additionalData;\n}\n\n/**\n * Данные мебели на клиенте с цветами\n * @interface furnitureClientData\n * @extends furnitureBaseData\n */\nexport interface furnitureClientData extends furnitureBaseData {\n  /** Список цветов с данными для клиента */\n  colors: colorClientData[];\n}\n\n/**\n * Данные мебели с сервера с цветами\n * @interface furnitureFromServerData\n * @extends furnitureBaseData\n */\nexport interface furnitureFromServerData extends furnitureBaseData {\n  /** Список цветов с данными с сервера */\n  colors: colorFromServerData[];\n}\n\n/**\n * Сервис для управления карточками мебели\n * @class FurnitureCardControlService\n * @injectable\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class FurnitureCardControlService {\n\n  /** Базовый URL для запросов к API мебели */\n  private baseServiceUrl = baseUrl + 'furniture/card';\n\n  /**\n   * Конструктор сервиса\n   * @param httpModule HTTP клиент для запросов\n   */\n  constructor(private httpModule: HttpClient) { }\n\n  /**\n   * Получение карточки мебели по ID и опциональному JWT токену\n   * @param furnitureCardId - ID карточки мебели\n   * @param [jwt] - JWT токен пользователя (опционально)\n   * @returns Promise с объектом, содержащим данные карточки и флаг совпадения автора\n   * @throws Ошибка при некорректной структуре ответа или при ошибках запроса\n   */\n  async GETfurnitureCard(\n    furnitureCardId: string,\n    jwt?: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams().set('furnitureCardId', furnitureCardId);\n\n    if (jwt !== undefined) {\n      HTTP_PARAMS = HTTP_PARAMS.set('jwt', jwt);\n    }\n\n    try {\n      const response = await firstValueFrom(\n        this.httpModule.get(this.baseServiceUrl, { params: HTTP_PARAMS })\n      ) as {\n        furnitureCard: furnitureFromServerData;\n        authorMatched: boolean;\n      };\n\n      if (!response?.furnitureCard) {\n        throw new Error('Invalid response structure: furnitureCard missing');\n      }\n\n      // Добавляем полный URL к изображениям\n      const transformedFurnitureCard = {\n        ...response.furnitureCard,\n        colors: response.furnitureCard.colors.map(colorData => ({\n          color: colorData.color,\n          imagesData: {\n            idMainImage: colorData.imagesData.idMainImage,\n            images: colorData.imagesData.images.map(url => baseUrl + url)\n          }\n        }))\n      };\n\n      return {\n        furnitureCard: transformedFurnitureCard,\n        authorMatched: response.authorMatched\n      };\n\n    } catch (error) {\n      console.error('Error in GETfurnitureCard:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Создание новой карточки мебели\n   * @param furnitureData - Данные новой карточки мебели\n   * @param jwt - JWT токен пользователя\n   * @returns Promise с данными созданной карточки, включая её ID\n   */\n  POSTcreateFurnitureCard(\n    furnitureData: furnitureFromServerData,\n    jwt: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams().set('jwt', jwt);\n    return firstValueFrom(\n      this.httpModule.post(this.baseServiceUrl, furnitureData, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n\n  /**\n   * Обновление существующей карточки мебели\n   * @param furnitureCardUpdateData - Обновленные данные карточки мебели\n   * @param furnitureCardId - ID карточки мебели для обновления\n   * @param jwt - JWT токен пользователя\n   * @returns Promise с сообщением результата обновления\n   */\n  PUTupdateFurnitureCard(\n    furnitureCardUpdateData: furnitureFromServerData,\n    furnitureCardId: string,\n    jwt: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId);\n    return firstValueFrom(\n      this.httpModule.put(this.baseServiceUrl, furnitureCardUpdateData, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n\n  /**\n   * Удаление карточки мебели по ID и JWT токену\n   * @param jwt - JWT токен пользователя\n   * @param furnitureCardId - ID карточки мебели для удаления\n   * @returns Promise с сообщением результата удаления\n   */\n  DELETEfurnitureCard(jwt: string, furnitureCardId: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId);\n    return firstValueFrom(\n      this.httpModule.delete(this.baseServiceUrl, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FurnitureModelControlService.html":{"url":"injectables/FurnitureModelControlService.html","title":"injectable - FurnitureModelControlService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FurnitureModelControlService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/furniture-model-control.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseServiceUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                DELETEfurnitureModel\n                            \n                            \n                                GETfurnitureModel\n                            \n                            \n                                POSTuploadFurnitureModel\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpModule: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/services/furniture-model-control.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpModule\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        DELETEfurnitureModel\n                        \n                    \n                \n            \n            \n                \nDELETEfurnitureModel(jwt: string, furnitureCardId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/furniture-model-control.service.ts:57\n                        \n                    \n\n\n            \n                \n                        Удаление 3D модели мебели по ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nJWT токен пользователя\n\n\n                                            \n                                        \n                                        \n                                                furnitureCardId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID модели мебели для удаления\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nРезультат запроса с сообщением\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        GETfurnitureModel\n                        \n                    \n                \n            \n            \n                \nGETfurnitureModel(jwt: string, furnitureCardId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/furniture-model-control.service.ts:21\n                        \n                    \n\n\n            \n                \n                        Получение 3D модели мебели по ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nJWT токен пользователя для авторизации\n\n\n                                            \n                                        \n                                        \n                                                furnitureCardId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID модели мебели\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nФайл модели в формате Blob\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        POSTuploadFurnitureModel\n                        \n                    \n                \n            \n            \n                \nPOSTuploadFurnitureModel(modelFile: Blob, jwt: string, furnitureCardId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/furniture-model-control.service.ts:38\n                        \n                    \n\n\n            \n                \n                        Загрузка 3D модели мебели на сервер\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                modelFile\n                                            \n                                                        Blob\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nФайл модели для загрузки\n\n\n                                            \n                                        \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nJWT токен пользователя\n\n\n                                            \n                                        \n                                        \n                                                furnitureCardId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID мебели, к которой относится модель\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nРезультат запроса с сообщением\n\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseServiceUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : baseUrl + 'furniture/model'\n                    \n                \n                    \n                        \n                                Defined in src/services/furniture-model-control.service.ts:11\n                        \n                    \n\n            \n                \n                    Базовый URL для API запросов к моделям мебели\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { firstValueFrom } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FurnitureModelControlService {\n  /** Базовый URL для API запросов к моделям мебели */\n  private baseServiceUrl = baseUrl + 'furniture/model';\n\n  constructor(private httpModule: HttpClient) { }\n\n  /**\n   * Получение 3D модели мебели по ID\n   * @param {string} jwt - JWT токен пользователя для авторизации\n   * @param {string} furnitureCardId - ID модели мебели\n   * @returns {Promise} - Файл модели в формате Blob\n   */\n  GETfurnitureModel(jwt: string, furnitureCardId: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId);\n\n    return firstValueFrom(\n      this.httpModule.get(this.baseServiceUrl, { params: HTTP_PARAMS, responseType: 'blob' })\n    ) as Promise;\n  }\n\n  /**\n   * Загрузка 3D модели мебели на сервер\n   * @param {Blob} modelFile - Файл модели для загрузки\n   * @param {string} jwt - JWT токен пользователя\n   * @param {string} furnitureCardId - ID мебели, к которой относится модель\n   * @returns {Promise} - Результат запроса с сообщением\n   */\n  POSTuploadFurnitureModel(modelFile: Blob, jwt: string, furnitureCardId: string): Promise {\n    const formData = new FormData();\n    formData.append('model', modelFile);\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId)\n      .set('fileName', (modelFile as any).name);\n\n    return firstValueFrom(\n      this.httpModule.post(this.baseServiceUrl, formData, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n\n  /**\n   * Удаление 3D модели мебели по ID\n   * @param {string} jwt - JWT токен пользователя\n   * @param {string} furnitureCardId - ID модели мебели для удаления\n   * @returns {Promise} - Результат запроса с сообщением\n   */\n  DELETEfurnitureModel(jwt: string, furnitureCardId: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId);\n\n    return firstValueFrom(\n      this.httpModule.delete(this.baseServiceUrl, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interceptors/HttpErrorInterceptor.html":{"url":"interceptors/HttpErrorInterceptor.html","title":"interceptor - HttpErrorInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Interceptors\n  HttpErrorInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interceptors/http-error.interceptor.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(notification: NotificationService)\n                    \n                \n                        \n                            \n                                Defined in src/interceptors/http-error.interceptor.ts:14\n                            \n                        \n\n                \n                    \n                            Конструктор интерсептора ошибок HTTP\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        notification\n                                                  \n                                                        \n                                                                        NotificationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Сервис уведомлений для отображения ошибок\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(request: HttpRequest, next: HttpHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/interceptors/http-error.interceptor.ts:30\n                        \n                    \n\n\n            \n                \n                        Перехватчик HTTP-запросов для обработки ошибок\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        HttpRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    HTTP-запрос\n\n                                            \n                                        \n                                        \n                                                next\n                                            \n                                                        HttpHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Обработчик HTTP-запроса\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable>\n\n                        \n                            \n                                Observable с HTTP-событиями, с обработкой ошибок\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpErrorResponse\n} from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { NotificationService } from '../services/notification.service';\n\n@Injectable()\nexport class HttpErrorInterceptor implements HttpInterceptor {\n\n  /**\n   * Конструктор интерсептора ошибок HTTP\n   * @param notification Сервис уведомлений для отображения ошибок\n   */\n  constructor(\n    private notification: NotificationService,\n  ) {}\n\n  /**\n   * Перехватчик HTTP-запросов для обработки ошибок\n   * @param request HTTP-запрос\n   * @param next Обработчик HTTP-запроса\n   * @returns Observable с HTTP-событиями, с обработкой ошибок\n   */\n  intercept(request: HttpRequest, next: HttpHandler): Observable> {\n    return next.handle(request).pipe(\n      catchError((error: HttpErrorResponse) => {\n        // Показываем сообщение об ошибке через NotificationService\n        this.notification.setError(error.error.message, 5000);\n        // Пробрасываем ошибку дальше\n        return throwError(() => error);\n      })\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ImageSliderComponent.html":{"url":"components/ImageSliderComponent.html","title":"component - ImageSliderComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ImageSliderComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/components/image-slider/image-slider.component.ts\n\n\n\n    \n        Description\n    \n    \n        Компонент слайдера изображений.\nОтображает изображения с возможностью выбора главного изображения.\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-image-slider\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            NgIf\n                            NgFor\n                            TuiCarousel\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./image-slider.component.html\n            \n\n\n\n            \n                styleUrl\n                ./image-slider.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                index\n                            \n                            \n                                    Protected\n                                isMobileView\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                changeMainImage\n                            \n                            \n                                    \n                                    Private\n                                checkViewport\n                            \n                            \n                                    Protected\n                                getItemsCount\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                changeModeSlider\n                            \n                            \n                                imagesData\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                window:resize\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        changeModeSlider\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in src/components/image-slider/image-slider.component.ts:58\n                            \n                        \n                \n                    \n                        Входной параметр, который может менять режим слайдера (не используется явно в коде).\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        imagesData\n                    \n                \n                \n                    \n                        Type :         imageSliderFromServerData\n\n                    \n                \n                        \n                            \n                                    Defined in src/components/image-slider/image-slider.component.ts:52\n                            \n                        \n                \n                    \n                        Входные данные с изображениями с сервера.\nСодержит массив URL и индекс главного изображения.\n\n                    \n                \n            \n        \n\n\n\n    \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        window:resize\n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \nwindow:resize()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/image-slider/image-slider.component.ts:73\n                        \n                    \n\n\n            \n                \n                        Отслеживание изменения размера окна браузера.\nОбновляет флаг isMobileView при изменении ширины окна.\n\n\n                \n            \n        \n    \n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        changeMainImage\n                        \n                    \n                \n            \n            \n                \n                        \n                    changeMainImage(index: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/image-slider/image-slider.component.ts:81\n                        \n                    \n\n\n            \n                \n                        Меняет индекс главного изображения (idMainImage) в данных.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                index\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Индекс изображения, выбранного пользователем\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        checkViewport\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkViewport()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('window:resize', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in src/components/image-slider/image-slider.component.ts:73\n                        \n                    \n\n\n            \n                \n                        Отслеживание изменения размера окна браузера.\nОбновляет флаг isMobileView при изменении ширины окна.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        getItemsCount\n                        \n                    \n                \n            \n            \n                \n                        \n                    getItemsCount()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/image-slider/image-slider.component.ts:91\n                        \n                    \n\n\n            \n                \n                        Возвращает количество элементов для отображения в слайдере.\nЕсли изображений меньше 3 — возвращает длину массива,\nиначе 1 для мобильного и 3 для десктопного вида.\n\n\n                        \n                            Returns :         number\n\n                        \n                            \n                                Количество видимых элементов слайдера\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/image-slider/image-slider.component.ts:64\n                        \n                    \n\n\n            \n                \n                        Инициализация компонента.\nПроверяет ширину экрана при загрузке.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        index\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/components/image-slider/image-slider.component.ts:40\n                        \n                    \n\n            \n                \n                    Текущий индекс выбранного слайда (используется для локального отслеживания).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        isMobileView\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/components/image-slider/image-slider.component.ts:45\n                        \n                    \n\n            \n                \n                    Флаг, указывающий, находится ли текущее отображение в мобильном виде (ширина \n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, HostListener, Input, OnInit } from '@angular/core';\nimport { NgIf, NgFor } from '@angular/common';\nimport { TuiCarousel } from '@taiga-ui/kit';\n\n/**\n * Интерфейс данных для слайдера с клиентскими изображениями в формате Blob.\n */\nexport interface imageSliderClientData {\n  /** Массив изображений в формате Blob */\n  images: Blob[];\n  /** Индекс главного (выбранного) изображения */\n  idMainImage: number;\n}\n\n/**\n * Интерфейс данных для слайдера с изображениями с сервера в виде URL-строк.\n */\nexport interface imageSliderFromServerData {\n  /** Массив URL-строк изображений */\n  images: string[];\n  /** Индекс главного (выбранного) изображения */\n  idMainImage: number;\n}\n\n/**\n * Компонент слайдера изображений.\n * Отображает изображения с возможностью выбора главного изображения.\n */\n@Component({\n  selector: 'app-image-slider',\n  standalone: true,\n  imports: [NgIf, NgFor, TuiCarousel],\n  templateUrl: './image-slider.component.html',\n  styleUrl: './image-slider.component.scss'\n})\nexport class ImageSliderComponent implements OnInit {\n  /**\n   * Текущий индекс выбранного слайда (используется для локального отслеживания).\n   */\n  protected index: number = 0;\n\n  /**\n   * Флаг, указывающий, находится ли текущее отображение в мобильном виде (ширина \n    \n\n    \n        \n  \n    \n      \n      {{imagesData.idMainImage===i?'Основная':'Сделать основной'}}\n    \n  \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                  {{imagesData.idMainImage===i?\\'Основная\\':\\'Сделать основной\\'}}      '\n    var COMPONENTS = [{'name': 'AccountPageComponent', 'selector': 'app-account-page'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreateFurnitureComponent', 'selector': 'app-create-furniture'},{'name': 'CreateFurniturePageComponent', 'selector': 'app-create-furniture-page'},{'name': 'FinderComponent', 'selector': 'app-finder'},{'name': 'ImageSliderComponent', 'selector': 'app-image-slider'},{'name': 'LoginPageComponent', 'selector': 'app-login-page'},{'name': 'MainPageComponent', 'selector': 'app-main-page'},{'name': 'NavigationPanelComponent', 'selector': 'app-navigation-panel'},{'name': 'NotificationComponent', 'selector': 'app-notification'},{'name': 'PlanHouseComponent', 'selector': 'app-plan-house'},{'name': 'PlanHousePageComponent', 'selector': 'app-plan-house-page'},{'name': 'SceneComponent', 'selector': 'app-scene'},{'name': 'ShopPageComponent', 'selector': 'app-shop-page'},{'name': 'ViewFurnitureComponent', 'selector': 'app-view-furniture'}];\n    var DIRECTIVES = [{'name': 'AutoHeightDirective', 'selector': '[appAutoHeight]'}];\n    var ACTUAL_COMPONENT = {'name': 'ImageSliderComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/MainPageComponent.html":{"url":"components/MainPageComponent.html","title":"component - MainPageComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  MainPageComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/components/main-page/main-page.component.ts\n\n\n\n    \n        Description\n    \n    \n        Компонент главной страницы.\nУправляет отображением различных секций для создания мебели, планировки дома и просмотра мебели.\n\n    \n\n\n    \n        Implements\n    \n    \n                AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-main-page\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                                CreateFurnitureComponent\n                                ViewFurnitureComponent\n                                PlanHouseComponent\n                            NgClass\n                                NavigationPanelComponent\n                            RouterLink\n                            NgIf\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./main-page.component.html\n            \n\n\n\n            \n                styleUrl\n                ./main-page.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                furnitureExampleData\n                            \n                            \n                                    Protected\n                                furnitureTemplate\n                            \n                            \n                                    Protected\n                                isMobileView\n                            \n                            \n                                    Protected\n                                planHouseExampleData\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Private\n                                checkViewport\n                            \n                            \n                                    Protected\n                                focusFinder\n                            \n                            \n                                    Protected\n                                navigateToPage\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Protected\n                                openCreateFurniture\n                            \n                            \n                                    Protected\n                                openViewFurniture\n                            \n                        \n                    \n                \n\n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                window:resize\n                            \n                        \n                    \n                \n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(elementRef: ElementRef, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/components/main-page/main-page.component.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        elementRef\n                                                  \n                                                        \n                                                                    ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n    \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        window:resize\n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \nwindow:resize()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/main-page/main-page.component.ts:67\n                        \n                    \n\n\n            \n                \n                        Слушатель события изменения размера окна.\nОбновляет флаг isMobileView.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Событие resize окна\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        checkViewport\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkViewport()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('window:resize', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in src/components/main-page/main-page.component.ts:67\n                        \n                    \n\n\n            \n                \n                        Слушатель события изменения размера окна.\nОбновляет флаг isMobileView.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        focusFinder\n                        \n                    \n                \n            \n            \n                \n                        \n                    focusFinder()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/main-page/main-page.component.ts:74\n                        \n                    \n\n\n            \n                \n                        Фокусирует элемент ввода с классом 'finderInput', если он существует.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        navigateToPage\n                        \n                    \n                \n            \n            \n                \n                        \n                    navigateToPage(link: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/main-page/main-page.component.ts:98\n                        \n                    \n\n\n            \n                \n                        Навигация по приложению.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                link\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Ссылка для перехода на другую страницу\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/main-page/main-page.component.ts:44\n                        \n                    \n\n\n            \n                \n                        Инициализация компонента после загрузки представления.\nОтключает события для дочерних элементов в компонентах CreateFurniture и PlanHouse.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/main-page/main-page.component.ts:57\n                        \n                    \n\n\n            \n                \n                        Проверка на мобильную версию при инициализации компонента.\nУстанавливает флаг isMobileView в зависимости от ширины окна.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        openCreateFurniture\n                        \n                    \n                \n            \n            \n                \n                        \n                    openCreateFurniture()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/main-page/main-page.component.ts:90\n                        \n                    \n\n\n            \n                \n                        Открывает шаблон для создания новой мебели.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        openViewFurniture\n                        \n                    \n                \n            \n            \n                \n                        \n                    openViewFurniture()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/main-page/main-page.component.ts:83\n                        \n                    \n\n\n            \n                \n                        Открывает шаблон для просмотра мебели.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        furnitureExampleData\n                        \n                    \n                \n            \n                \n                    \n                        Default value : furnitureExampleData\n                    \n                \n                    \n                        \n                                Defined in src/components/main-page/main-page.component.ts:32\n                        \n                    \n\n            \n                \n                    Пример данных мебели\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        furnitureTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"view\" | \"create\"\n\n                    \n                \n                \n                    \n                        Default value : 'create'\n                    \n                \n                    \n                        \n                                Defined in src/components/main-page/main-page.component.ts:29\n                        \n                    \n\n            \n                \n                    Текущий отображаемый шаблон: 'view' или 'create'\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        isMobileView\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/components/main-page/main-page.component.ts:38\n                        \n                    \n\n            \n                \n                    Флаг для определения, находится ли пользователь на мобильном устройстве\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        planHouseExampleData\n                        \n                    \n                \n            \n                \n                    \n                        Default value : planHouseExampleData\n                    \n                \n                    \n                        \n                                Defined in src/components/main-page/main-page.component.ts:35\n                        \n                    \n\n            \n                \n                    Пример данных планировки дома\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { AfterViewInit, Component, ElementRef, HostListener } from '@angular/core';\nimport { CreateFurnitureComponent } from '../create-furnitre/create-furniture.component';\nimport { ViewFurnitureComponent } from '../view-furniture/view-furniture.component';\nimport { PlanHouseComponent } from '../plan-house/plan-house.component';\nimport { NgClass, NgIf } from '@angular/common';\nimport { NavigationPanelComponent } from '../navigation-panel/navigation-panel.component';\nimport { Router, RouterLink } from '@angular/router';\nimport { furnitureExampleData, planHouseExampleData } from '../../usable/main-page.mock';\n\n/**\n * Компонент главной страницы.\n * Управляет отображением различных секций для создания мебели, планировки дома и просмотра мебели.\n */\n@Component({\n  selector: 'app-main-page',\n  standalone: true,\n  imports: [CreateFurnitureComponent, ViewFurnitureComponent, PlanHouseComponent, NgClass, NavigationPanelComponent, RouterLink, NgIf],\n  templateUrl: './main-page.component.html',\n  styleUrl: './main-page.component.scss'\n})\nexport class MainPageComponent implements AfterViewInit {\n\n  constructor(\n    private elementRef: ElementRef, /** Элемент компонента */\n    private router: Router /** Сервис для навигации */\n  ) {}\n\n  /** Текущий отображаемый шаблон: 'view' или 'create' */\n  protected furnitureTemplate: 'view' | 'create' = 'create';\n\n  /** Пример данных мебели */\n  protected furnitureExampleData = furnitureExampleData;\n\n  /** Пример данных планировки дома */\n  protected planHouseExampleData = planHouseExampleData;\n\n  /** Флаг для определения, находится ли пользователь на мобильном устройстве */\n  protected isMobileView: boolean = false;\n\n  /**\n   * Инициализация компонента после загрузки представления.\n   * Отключает события для дочерних элементов в компонентах CreateFurniture и PlanHouse.\n   */\n  ngAfterViewInit(): void {\n    (this.elementRef.nativeElement.querySelectorAll('app-create-furniture,app-plan-house') as NodeListOf).forEach(elem => {\n      elem.querySelectorAll('*').forEach(child => {\n        child.setAttribute('tabindex', \"-1\"); /** Отключает фокусировку для дочерних элементов */\n        child.style.pointerEvents = 'none'; /** Отключает взаимодействие с дочерними элементами */\n      });\n    });\n  }\n\n  /**\n   * Проверка на мобильную версию при инициализации компонента.\n   * Устанавливает флаг isMobileView в зависимости от ширины окна.\n   */\n  ngOnInit() {\n    this.checkViewport();\n  }\n\n  /**\n   * Слушатель события изменения размера окна.\n   * Обновляет флаг isMobileView.\n   * @param event Событие resize окна\n   */\n  @HostListener('window:resize', ['$event'])\n  private checkViewport() {\n    this.isMobileView = window.innerWidth \n    \n\n    \n        \n    \n        \n            \n            \n            \n            \n        \n    \n    \n        \n            \n            \n            \n            \n        \n        HOUSEQUALITY\n        \n            Shop\n            Furniture\n            Project\n            Profile\n        \n    \n\n\n    \n    \n        \n            Ваш идеальный дом\n            HouseQuality - платформа для создания идеального дома. Зайдите в наш магазин цифрового дизайна и начните свое путешествие!\n            \n                \n                    Стиль\n                    Ваша идея\n                \n                \n                    Дом\n                    Ваша зона\n                \n                \n                    План\n                    Новый вид\n                \n                \n                    Мебель\n                    Большой выбор\n                \n            \n        \n\n        \n            Создаем и воплощаем ваши мечты\n            \n                Добавить мебель\n                Посмотреть мебель\n            \n        \n\n        \n            \n\n            \n        \n\n        \n            Создайте свой дом\n            Добавьте комнаты и передвиньте их\n        \n        \n    \n\n\n\n    \n        \n            Найти мебель\n            Аккаунт\n        \n        \n            Добавить мебель\n            Планировка\n        \n    \n    HouseQuality 2025\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                                                                                                    HOUSEQUALITY                    Shop            Furniture            Project            Profile                                        Ваш идеальный дом            HouseQuality - платформа для создания идеального дома. Зайдите в наш магазин цифрового дизайна и начните свое путешествие!                                                Стиль                    Ваша идея                                                    Дом                    Ваша зона                                                    План                    Новый вид                                                    Мебель                    Большой выбор                                                        Создаем и воплощаем ваши мечты                            Добавить мебель                Посмотреть мебель                                                                                Создайте свой дом            Добавьте комнаты и передвиньте их                                            Найти мебель            Аккаунт                            Добавить мебель            Планировка                HouseQuality 2025'\n    var COMPONENTS = [{'name': 'AccountPageComponent', 'selector': 'app-account-page'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreateFurnitureComponent', 'selector': 'app-create-furniture'},{'name': 'CreateFurniturePageComponent', 'selector': 'app-create-furniture-page'},{'name': 'FinderComponent', 'selector': 'app-finder'},{'name': 'ImageSliderComponent', 'selector': 'app-image-slider'},{'name': 'LoginPageComponent', 'selector': 'app-login-page'},{'name': 'MainPageComponent', 'selector': 'app-main-page'},{'name': 'NavigationPanelComponent', 'selector': 'app-navigation-panel'},{'name': 'NotificationComponent', 'selector': 'app-notification'},{'name': 'PlanHouseComponent', 'selector': 'app-plan-house'},{'name': 'PlanHousePageComponent', 'selector': 'app-plan-house-page'},{'name': 'SceneComponent', 'selector': 'app-scene'},{'name': 'ShopPageComponent', 'selector': 'app-shop-page'},{'name': 'ViewFurnitureComponent', 'selector': 'app-view-furniture'}];\n    var DIRECTIVES = [{'name': 'AutoHeightDirective', 'selector': '[appAutoHeight]'}];\n    var ACTUAL_COMPONENT = {'name': 'MainPageComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NavigationPanelComponent.html":{"url":"components/NavigationPanelComponent.html","title":"component - NavigationPanelComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NavigationPanelComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/components/navigation-panel/navigation-panel.component.ts\n\n\n\n    \n        Description\n    \n    \n        Компонент навигационной панели.\nОтображает меню навигации и компонент поиска.\nПоддерживает адаптивность под мобильные устройства.\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-navigation-panel\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            RouterLink\n                                FinderComponent\n                            NgIf\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./navigation-panel.component.html\n            \n\n\n\n            \n                styleUrl\n                ./navigation-panel.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                isMobileView\n                            \n                            \n                                    Protected\n                                menuOpen\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Private\n                                checkViewport\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Protected\n                                toggleMenu\n                            \n                        \n                    \n                \n\n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                window:resize\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n\n\n\n    \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        window:resize\n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \nwindow:resize()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/navigation-panel/navigation-panel.component.ts:40\n                        \n                    \n\n\n            \n                \n                        Обработчик события изменения размера окна.\nПроверяет ширину окна и обновляет флаг isMobileView.\nЕсли устройство не мобильное — закрывает меню.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Событие изменения размера окна\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        checkViewport\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkViewport()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('window:resize', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in src/components/navigation-panel/navigation-panel.component.ts:40\n                        \n                    \n\n\n            \n                \n                        Обработчик события изменения размера окна.\nПроверяет ширину окна и обновляет флаг isMobileView.\nЕсли устройство не мобильное — закрывает меню.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/navigation-panel/navigation-panel.component.ts:29\n                        \n                    \n\n\n            \n                \n                        Жизненный цикл OnInit.\nВыполняет начальную проверку размера экрана.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        toggleMenu\n                        \n                    \n                \n            \n            \n                \n                        \n                    toggleMenu()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/navigation-panel/navigation-panel.component.ts:50\n                        \n                    \n\n\n            \n                \n                        Переключает состояние меню (открыто/закрыто).\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        isMobileView\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/components/navigation-panel/navigation-panel.component.ts:23\n                        \n                    \n\n            \n                \n                    Флаг, указывающий, отображается ли компонент в мобильной версии\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        menuOpen\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/components/navigation-panel/navigation-panel.component.ts:20\n                        \n                    \n\n            \n                \n                    Состояние открытия выпадающего меню (используется на мобильных устройствах)\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, HostListener, OnInit } from '@angular/core';\nimport { RouterLink } from '@angular/router';\nimport { FinderComponent } from '../finder/finder.component';\nimport { NgIf } from '@angular/common';\n\n/**\n * Компонент навигационной панели.\n * Отображает меню навигации и компонент поиска.\n * Поддерживает адаптивность под мобильные устройства.\n */\n@Component({\n  selector: 'app-navigation-panel',\n  standalone: true,\n  imports: [RouterLink, FinderComponent, NgIf],\n  templateUrl: './navigation-panel.component.html',\n  styleUrl: './navigation-panel.component.scss'\n})\nexport class NavigationPanelComponent implements OnInit {\n  /** Состояние открытия выпадающего меню (используется на мобильных устройствах) */\n  protected menuOpen = false;\n\n  /** Флаг, указывающий, отображается ли компонент в мобильной версии */\n  protected isMobileView = false;\n\n  /**\n   * Жизненный цикл OnInit.\n   * Выполняет начальную проверку размера экрана.\n   */\n  ngOnInit() {\n    this.checkViewport();\n  }\n\n  /**\n   * Обработчик события изменения размера окна.\n   * Проверяет ширину окна и обновляет флаг `isMobileView`.\n   * Если устройство не мобильное — закрывает меню.\n   * @param event Событие изменения размера окна\n   */\n  @HostListener('window:resize', ['$event'])\n  private checkViewport() {\n    this.isMobileView = window.innerWidth \n    \n\n    \n        \n    HQ\n\n    \n        \n    \n\n    \n        \n        \n            \n                \n            \n            \n                \n                    \n                \n            \n            \n                \n            \n            \n                \n            \n        \n    \n\n    \n        \n        \n            \n            Аккаунт\n        \n        \n            \n                \n            \n            План\n        \n        \n            \n            Мебель\n        \n        \n            \n            Магазин\n        \n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    HQ                                                                                                                                                                                                                                                                                                Аккаунт                                                                    План                                        Мебель                                        Магазин            '\n    var COMPONENTS = [{'name': 'AccountPageComponent', 'selector': 'app-account-page'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreateFurnitureComponent', 'selector': 'app-create-furniture'},{'name': 'CreateFurniturePageComponent', 'selector': 'app-create-furniture-page'},{'name': 'FinderComponent', 'selector': 'app-finder'},{'name': 'ImageSliderComponent', 'selector': 'app-image-slider'},{'name': 'LoginPageComponent', 'selector': 'app-login-page'},{'name': 'MainPageComponent', 'selector': 'app-main-page'},{'name': 'NavigationPanelComponent', 'selector': 'app-navigation-panel'},{'name': 'NotificationComponent', 'selector': 'app-notification'},{'name': 'PlanHouseComponent', 'selector': 'app-plan-house'},{'name': 'PlanHousePageComponent', 'selector': 'app-plan-house-page'},{'name': 'SceneComponent', 'selector': 'app-scene'},{'name': 'ShopPageComponent', 'selector': 'app-shop-page'},{'name': 'ViewFurnitureComponent', 'selector': 'app-view-furniture'}];\n    var DIRECTIVES = [{'name': 'AutoHeightDirective', 'selector': '[appAutoHeight]'}];\n    var ACTUAL_COMPONENT = {'name': 'NavigationPanelComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NotificationComponent.html":{"url":"components/NotificationComponent.html","title":"component - NotificationComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NotificationComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/components/notification/notification.component.ts\n\n\n\n    \n        Description\n    \n    \n        Компонент отображения уведомлений об ошибках и успехах.\nТакже содержит методы выхода из аккаунта и перезагрузки страницы.\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-notification\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            NgClass\n                            NgIf\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./notification.component.html\n            \n\n\n\n            \n                styleUrl\n                ./notification.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                errorMessage\n                            \n                            \n                                    Protected\n                                successMessage\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logout\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Protected\n                                reloadPage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(notificationService: NotificationService, cookieService: AccountCookieService)\n                    \n                \n                        \n                            \n                                Defined in src/components/notification/notification.component.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        notificationService\n                                                  \n                                                        \n                                                                        NotificationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cookieService\n                                                  \n                                                        \n                                                                        AccountCookieService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logout\n                        \n                    \n                \n            \n            \n                \n                        \n                    logout()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/notification/notification.component.ts:53\n                        \n                    \n\n\n            \n                \n                        Удаляет JWT и тип аккаунта из cookie, затем перезагружает страницу.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/notification/notification.component.ts:33\n                        \n                    \n\n\n            \n                \n                        Подписка на потоки сообщений при инициализации компонента.\nПолученные сообщения сохраняются в соответствующие свойства.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        reloadPage\n                        \n                    \n                \n            \n            \n                \n                        \n                    reloadPage()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/notification/notification.component.ts:46\n                        \n                    \n\n\n            \n                \n                        Перезагружает текущую страницу.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        errorMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/components/notification/notification.component.ts:24\n                        \n                    \n\n            \n                \n                    Сообщение об ошибке, получаемое из NotificationService\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        successMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/components/notification/notification.component.ts:27\n                        \n                    \n\n            \n                \n                    Сообщение об успешном действии, получаемое из NotificationService\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { NgClass, NgIf } from '@angular/common';\nimport { Component, OnInit } from '@angular/core';\nimport { NotificationService } from '../../services/notification.service';\nimport { AccountCookieService } from '../../services/account-cookie.service';\n\n/**\n * Компонент отображения уведомлений об ошибках и успехах.\n * Также содержит методы выхода из аккаунта и перезагрузки страницы.\n */\n@Component({\n  selector: 'app-notification',\n  standalone: true,\n  imports: [NgClass, NgIf],\n  templateUrl: './notification.component.html',\n  styleUrl: './notification.component.scss'\n})\nexport class NotificationComponent implements OnInit {\n  constructor(\n    private notificationService: NotificationService,\n    private cookieService: AccountCookieService\n  ) {}\n\n  /** Сообщение об ошибке, получаемое из NotificationService */\n  protected errorMessage!: string;\n\n  /** Сообщение об успешном действии, получаемое из NotificationService */\n  protected successMessage!: string;\n\n  /**\n   * Подписка на потоки сообщений при инициализации компонента.\n   * Полученные сообщения сохраняются в соответствующие свойства.\n   */\n  ngOnInit(): void {\n    this.notificationService.error$.subscribe(message => {\n      this.errorMessage = message;\n    });\n\n    this.notificationService.success$.subscribe(message => {\n      this.successMessage = message;\n    });\n  }\n\n  /**\n   * Перезагружает текущую страницу.\n   */\n  protected reloadPage(): void {\n    window.location.reload();\n  }\n\n  /**\n   * Удаляет JWT и тип аккаунта из cookie, затем перезагружает страницу.\n   */\n  protected logout(): void {\n    this.cookieService.deleteJwt();\n    this.cookieService.deleteAccountType();\n    this.reloadPage();\n  }\n}\n\n    \n\n    \n        \n    \n    \n        {{errorMessage?'Что-то пошло не так':'Успешно'}}\n        {{errorMessage||successMessage}}\n    \n    \n        \n            \n        \n        \n            \n        \n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                {{errorMessage?\\'Что-то пошло не так\\':\\'Успешно\\'}}        {{errorMessage||successMessage}}                                                                    '\n    var COMPONENTS = [{'name': 'AccountPageComponent', 'selector': 'app-account-page'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreateFurnitureComponent', 'selector': 'app-create-furniture'},{'name': 'CreateFurniturePageComponent', 'selector': 'app-create-furniture-page'},{'name': 'FinderComponent', 'selector': 'app-finder'},{'name': 'ImageSliderComponent', 'selector': 'app-image-slider'},{'name': 'LoginPageComponent', 'selector': 'app-login-page'},{'name': 'MainPageComponent', 'selector': 'app-main-page'},{'name': 'NavigationPanelComponent', 'selector': 'app-navigation-panel'},{'name': 'NotificationComponent', 'selector': 'app-notification'},{'name': 'PlanHouseComponent', 'selector': 'app-plan-house'},{'name': 'PlanHousePageComponent', 'selector': 'app-plan-house-page'},{'name': 'SceneComponent', 'selector': 'app-scene'},{'name': 'ShopPageComponent', 'selector': 'app-shop-page'},{'name': 'ViewFurnitureComponent', 'selector': 'app-view-furniture'}];\n    var DIRECTIVES = [{'name': 'AutoHeightDirective', 'selector': '[appAutoHeight]'}];\n    var ACTUAL_COMPONENT = {'name': 'NotificationComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NotificationService.html":{"url":"injectables/NotificationService.html","title":"injectable - NotificationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NotificationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/notification.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для управления уведомлениями об ошибках и успехах.\nПозволяет подписываться на сообщения и автоматически очищать их через заданный промежуток времени.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                error$\n                            \n                            \n                                    Private\n                                errorSubject\n                            \n                            \n                                success$\n                            \n                            \n                                    Private\n                                successSubject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                clearError\n                            \n                            \n                                setError\n                            \n                            \n                                setSuccess\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        clearError\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearError()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/notification.service.ts:53\n                        \n                    \n\n\n            \n                \n                        Очищает сообщения об ошибках и успехах\n(устанавливает значения в пустую строку)\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setError\n                        \n                    \n                \n            \n            \n                \nsetError(message: string, delay: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/notification.service.ts:34\n                        \n                    \n\n\n            \n                \n                        Устанавливает сообщение об ошибке и очищает его после задержки\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Текст ошибки для отображения\n\n                                            \n                                        \n                                        \n                                                delay\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Задержка в миллисекундах перед автоматическим удалением сообщения\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setSuccess\n                        \n                    \n                \n            \n            \n                \nsetSuccess(message: string, delay: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/notification.service.ts:44\n                        \n                    \n\n\n            \n                \n                        Устанавливает сообщение об успешном действии и очищает его после задержки\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Текст успешного сообщения\n\n                                            \n                                        \n                                        \n                                                delay\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Задержка в миллисекундах перед автоматическим удалением сообщения\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        error$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.errorSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/services/notification.service.ts:24\n                        \n                    \n\n            \n                \n                    Observable для подписки на сообщения об ошибках\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        errorSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject('')\n                    \n                \n                    \n                        \n                                Defined in src/services/notification.service.ts:16\n                        \n                    \n\n            \n                \n                    BehaviorSubject для ошибок, содержит строку с сообщением об ошибке или пустую строку.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        success$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.successSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/services/notification.service.ts:27\n                        \n                    \n\n            \n                \n                    Observable для подписки на успешные сообщения\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        successSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject('')\n                    \n                \n                    \n                        \n                                Defined in src/services/notification.service.ts:21\n                        \n                    \n\n            \n                \n                    BehaviorSubject для успешных сообщений, содержит строку с сообщением успеха или пустую строку.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n/**\n * Сервис для управления уведомлениями об ошибках и успехах.\n * Позволяет подписываться на сообщения и автоматически очищать их через заданный промежуток времени.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotificationService {\n\n  /** \n   * BehaviorSubject для ошибок, содержит строку с сообщением об ошибке или пустую строку.\n   */\n  private errorSubject = new BehaviorSubject('');\n\n  /** \n   * BehaviorSubject для успешных сообщений, содержит строку с сообщением успеха или пустую строку.\n   */\n  private successSubject = new BehaviorSubject('');\n\n  /** Observable для подписки на сообщения об ошибках */\n  error$ = this.errorSubject.asObservable();\n\n  /** Observable для подписки на успешные сообщения */\n  success$ = this.successSubject.asObservable();\n\n  /**\n   * Устанавливает сообщение об ошибке и очищает его после задержки\n   * @param message Текст ошибки для отображения\n   * @param delay Задержка в миллисекундах перед автоматическим удалением сообщения\n   */\n  setError(message: string, delay: number): void {\n    this.errorSubject.next(message);\n    setTimeout(() => this.clearError(), delay);\n  }\n\n  /**\n   * Устанавливает сообщение об успешном действии и очищает его после задержки\n   * @param message Текст успешного сообщения\n   * @param delay Задержка в миллисекундах перед автоматическим удалением сообщения\n   */\n  setSuccess(message: string, delay: number): void {\n    this.successSubject.next(message);\n    setTimeout(() => this.clearError(), delay);\n  }\n\n  /**\n   * Очищает сообщения об ошибках и успехах\n   * (устанавливает значения в пустую строку)\n   */\n  private clearError(): void {\n    this.errorSubject.next('');\n    this.successSubject.next('');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/PlanHousePageComponent.html":{"url":"components/PlanHousePageComponent.html","title":"component - PlanHousePageComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  PlanHousePageComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/components/plan-house-page/plan-house-page.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                AfterViewInit\n                OnInit\n                AfterViewChecked\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-plan-house-page\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                                NavigationPanelComponent\n                                PlanHouseComponent\n                            NgFor\n                            NgIf\n                            ReactiveFormsModule\n                            NgIf\n                            NgClass\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./plan-house-page.component.html\n            \n\n\n\n            \n                styleUrl\n                ./plan-house-page.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                accountData\n                            \n                            \n                                    Private\n                                addModule\n                            \n                            \n                                    Protected\n                                checkDesktop\n                            \n                            \n                                    Private\n                                currentPlanHouse\n                            \n                            \n                                    Protected\n                                currentProjectId\n                            \n                            \n                                    Private\n                                hasRoomIdBeenProcessed\n                            \n                            \n                                    \n                                    Private\n                                planHouse\n                            \n                            \n                                    Protected\n                                projectNameForm\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                closeAddModule\n                            \n                            \n                                    Protected\n                                closeProject\n                            \n                            \n                                    Protected\n                                    Async\n                                createProject\n                            \n                            \n                                    Protected\n                                    Async\n                                deleteProject\n                            \n                            \n                                    Protected\n                                getCurrentViewRoom\n                            \n                            \n                                ngAfterViewChecked\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Protected\n                                openAddModule\n                            \n                            \n                                    Protected\n                                openProject\n                            \n                            \n                                    Private\n                                    Async\n                                pageInit\n                            \n                            \n                                    Protected\n                                    Async\n                                saveProject\n                            \n                            \n                                    Protected\n                                updatePlanData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(accountService: AccountService, accountCookieService: AccountCookieService, router: Router, route: ActivatedRoute, elemenetRef: ElementRef, renderer: Renderer2, projectService: ProjectService, notification: NotificationService, location: Location)\n                    \n                \n                        \n                            \n                                Defined in src/components/plan-house-page/plan-house-page.component.ts:42\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        accountService\n                                                  \n                                                        \n                                                                        AccountService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accountCookieService\n                                                  \n                                                        \n                                                                        AccountCookieService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        route\n                                                  \n                                                        \n                                                                    ActivatedRoute\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        elemenetRef\n                                                  \n                                                        \n                                                                    ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                    Renderer2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        projectService\n                                                  \n                                                        \n                                                                        ProjectService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        notification\n                                                  \n                                                        \n                                                                        NotificationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        location\n                                                  \n                                                        \n                                                                    Location\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        closeAddModule\n                        \n                    \n                \n            \n            \n                \n                        \n                    closeAddModule()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/plan-house-page/plan-house-page.component.ts:211\n                        \n                    \n\n\n            \n                \n                        Закрывает модуль добавления проекта.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        closeProject\n                        \n                    \n                \n            \n            \n                \n                        \n                    closeProject()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/plan-house-page/plan-house-page.component.ts:227\n                        \n                    \n\n\n            \n                \n                        Закрывает текущий проект и убирает planId из URL.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Async\n                        createProject\n                        \n                    \n                \n            \n            \n                \n                        \n                    createProject()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/plan-house-page/plan-house-page.component.ts:135\n                        \n                    \n\n\n            \n                \n                        Создает новый проект с именем из формы.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Async\n                        deleteProject\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteProject(indexProject: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/plan-house-page/plan-house-page.component.ts:178\n                        \n                    \n\n\n            \n                \n                        Удаляет указанный проект пользователя.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                indexProject\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Индекс проекта в массиве\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        getCurrentViewRoom\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCurrentViewRoom()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/plan-house-page/plan-house-page.component.ts:194\n                        \n                    \n\n\n            \n                \n                        Возвращает текущую выбранную комнату в планировке.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngAfterViewChecked\n                        \n                    \n                \n            \n            \n                \nngAfterViewChecked()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/plan-house-page/plan-house-page.component.ts:97\n                        \n                    \n\n\n            \n                \n                        При загрузке проверяет наличие roomId и открывает комнату, если нужно.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/plan-house-page/plan-house-page.component.ts:90\n                        \n                    \n\n\n            \n                \n                        Получает DOM-элемент кнопки добавления проекта после инициализации view.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/plan-house-page/plan-house-page.component.ts:78\n                        \n                    \n\n\n            \n                \n                        Инициализация компонента.\nПроверяет наличие JWT, при отсутствии — редирект на страницу логина.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        openAddModule\n                        \n                    \n                \n            \n            \n                \n                        \n                    openAddModule()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/plan-house-page/plan-house-page.component.ts:219\n                        \n                    \n\n\n            \n                \n                        Открывает модуль добавления проекта.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        openProject\n                        \n                    \n                \n            \n            \n                \n                        \n                    openProject(indexProject: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/plan-house-page/plan-house-page.component.ts:238\n                        \n                    \n\n\n            \n                \n                        Открывает проект по его индексу и обновляет URL.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                indexProject\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Индекс проекта в массиве\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        pageInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    pageInit(jwt: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/plan-house-page/plan-house-page.component.ts:116\n                        \n                    \n\n\n            \n                \n                        Загружает данные аккаунта и инициализирует текущий проект по параметру в URL.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    JWT-токен из cookies\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Async\n                        saveProject\n                        \n                    \n                \n            \n            \n                \n                        \n                    saveProject()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/plan-house-page/plan-house-page.component.ts:151\n                        \n                    \n\n\n            \n                \n                        Сохраняет текущий открытый проект на сервер.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        updatePlanData\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePlanData(planHouse: roomData[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/plan-house-page/plan-house-page.component.ts:203\n                        \n                    \n\n\n            \n                \n                        Обновляет локальные данные проекта при изменении планировки.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                planHouse\n                                            \n                                                        roomData[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Новый массив данных комнат\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        accountData\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/components/plan-house-page/plan-house-page.component.ts:65\n                        \n                    \n\n            \n                \n                    Данные аккаунта пользователя с массивом проектов\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        addModule\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HTMLSpanElement\n\n                    \n                \n                    \n                        \n                                Defined in src/components/plan-house-page/plan-house-page.component.ts:59\n                        \n                    \n\n            \n                \n                    DOM-элемент кнопки добавления проекта\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        checkDesktop\n                        \n                    \n                \n            \n                \n                    \n                        Default value : checkDesktop\n                    \n                \n                    \n                        \n                                Defined in src/components/plan-house-page/plan-house-page.component.ts:189\n                        \n                    \n\n            \n                \n                    Проверка, является ли текущее устройство десктопом\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        currentPlanHouse\n                        \n                    \n                \n            \n                \n                    \n                        Type :     roomData[] | undefined\n\n                    \n                \n                    \n                        \n                                Defined in src/components/plan-house-page/plan-house-page.component.ts:62\n                        \n                    \n\n            \n                \n                    Данные текущего плана комнат\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        currentProjectId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | undefined\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                    \n                        \n                                Defined in src/components/plan-house-page/plan-house-page.component.ts:68\n                        \n                    \n\n            \n                \n                    Индекс текущего выбранного проекта\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hasRoomIdBeenProcessed\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/components/plan-house-page/plan-house-page.component.ts:56\n                        \n                    \n\n            \n                \n                    Флаг, чтобы комната не открывалась повторно\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                        planHouse\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PlanHouseComponent\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('planHouse')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/components/plan-house-page/plan-house-page.component.ts:72\n                        \n                    \n\n            \n                \n                    Ссылка на дочерний компонент планировки дома\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        projectNameForm\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new FormGroup({\n    name: new FormControl('', [Validators.required])\n  })\n                    \n                \n                    \n                        \n                                Defined in src/components/plan-house-page/plan-house-page.component.ts:245\n                        \n                    \n\n            \n                \n                    Форма для ввода названия проекта\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import {\n  AfterViewChecked,\n  AfterViewInit,\n  Component,\n  ElementRef,\n  OnInit,\n  Renderer2,\n  ViewChild\n} from '@angular/core';\nimport { NavigationPanelComponent } from '../navigation-panel/navigation-panel.component';\nimport { PlanHouseComponent } from '../plan-house/plan-house.component';\nimport { Location, NgClass, NgFor, NgIf } from '@angular/common';\nimport { accountFullData, AccountService } from '../../services/account.service';\nimport { AccountCookieService } from '../../services/account-cookie.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormControl, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { projectServerInformation, ProjectService, roomData } from '../../services/project.service';\nimport { NotificationService } from '../../services/notification.service';\nimport { checkDesktop } from '../../usable/reusable-functions.used';\n\n@Component({\n  selector: 'app-plan-house-page',\n  standalone: true,\n  imports: [\n    NavigationPanelComponent,\n    PlanHouseComponent,\n    NgFor,\n    NgIf,\n    ReactiveFormsModule,\n    NgIf,\n    NgClass\n  ],\n  templateUrl: './plan-house-page.component.html',\n  styleUrl: './plan-house-page.component.scss'\n})\nexport class PlanHousePageComponent implements AfterViewInit, OnInit, AfterViewChecked {\n  constructor(\n    private accountService: AccountService,\n    private accountCookieService: AccountCookieService,\n    private router: Router,\n    private route: ActivatedRoute,\n    private elemenetRef: ElementRef,\n    private renderer: Renderer2,\n    private projectService: ProjectService,\n    private notification: NotificationService,\n    private location: Location\n  ) {}\n\n  /** Флаг, чтобы комната не открывалась повторно */\n  private hasRoomIdBeenProcessed = false;\n\n  /** DOM-элемент кнопки добавления проекта */\n  private addModule!: HTMLSpanElement;\n\n  /** Данные текущего плана комнат */\n  private currentPlanHouse: roomData[] | undefined;\n\n  /** Данные аккаунта пользователя с массивом проектов */\n  protected accountData!: accountFullData & { projects: projectServerInformation[] };\n\n  /** Индекс текущего выбранного проекта */\n  protected currentProjectId: number | undefined = undefined;\n\n  /** Ссылка на дочерний компонент планировки дома */\n  @ViewChild('planHouse')\n  private planHouse!: PlanHouseComponent;\n\n  /**\n   * Инициализация компонента.\n   * Проверяет наличие JWT, при отсутствии — редирект на страницу логина.\n   */\n  ngOnInit(): void {\n    const JWT = this.accountCookieService.getJwt();\n    if (!JWT) {\n      this.router.navigateByUrl('/login');\n      return;\n    }\n    this.pageInit(JWT);\n  }\n\n  /**\n   * Получает DOM-элемент кнопки добавления проекта после инициализации view.\n   */\n  ngAfterViewInit(): void {\n    this.addModule = this.elemenetRef.nativeElement.querySelector('.addModule');\n  }\n\n  /**\n   * При загрузке проверяет наличие roomId и открывает комнату, если нужно.\n   */\n  ngAfterViewChecked(): void {\n    if (this.hasRoomIdBeenProcessed || !this.planHouse || !this.route.snapshot.params['roomId']) return;\n    const ROOM_ID = parseInt(this.route.snapshot.params['roomId']!);\n    setTimeout(() => {\n      if (typeof ROOM_ID === 'number') {\n        this.planHouse.currentViewRoom = ROOM_ID;\n        this.planHouse.currentIdClickedRoom = ROOM_ID;\n        this.planHouse.openViewRoom(ROOM_ID);\n        this.planHouse.sceneOpenToggle = true;\n        this.planHouse.guideTemplate = this.planHouse.roomGuideTemplate;\n        this.hasRoomIdBeenProcessed = true;\n      }\n    }, 0);\n  }\n\n  /**\n   * Загружает данные аккаунта и инициализирует текущий проект по параметру в URL.\n   * @param jwt JWT-токен из cookies\n   */\n  private async pageInit(jwt: string) {\n    try {\n      this.accountData = (await this.accountService.GETaccount(jwt)).accountData;\n\n      this.route.paramMap.subscribe(params => {\n        if (params.get('planId') === null) return;\n        const PLAN_ID = parseInt(params.get('planId')!);\n        if (this.accountData.projects.length >= PLAN_ID && PLAN_ID >= 0) {\n          this.currentProjectId = PLAN_ID;\n        }\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  /**\n   * Создает новый проект с именем из формы.\n   */\n  protected async createProject() {\n    this.closeAddModule();\n    const JWT = this.accountCookieService.getJwt();\n    if (!this.projectNameForm.value || !this.projectNameForm.value.name || !JWT) return;\n    try {\n      const newProject = await this.projectService.POSTcreateProject(JWT, this.projectNameForm.value.name);\n      this.accountData.projects = [...this.accountData.projects, newProject.projectData];\n      this.notification.setSuccess('Проект создан', 5000);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  /**\n   * Сохраняет текущий открытый проект на сервер.\n   */\n  protected async saveProject() {\n    if (this.currentProjectId === undefined) return;\n\n    const CURRENT_PROJECT_ID = this.accountData.projects[this.currentProjectId]._id;\n    const ROOM_DATA = this.currentPlanHouse;\n    if (ROOM_DATA === undefined) return;\n\n    const JWT = this.accountCookieService.getJwt();\n    if (!JWT) return;\n\n    const PROJECT_DATA = {\n      rooms: ROOM_DATA,\n      name: this.accountData.projects[this.currentProjectId].name\n    };\n\n    try {\n      await this.projectService.PUTupdateProject(JWT, CURRENT_PROJECT_ID, PROJECT_DATA);\n      this.notification.setSuccess('Проект обновлен', 5000);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  /**\n   * Удаляет указанный проект пользователя.\n   * @param indexProject Индекс проекта в массиве\n   */\n  protected async deleteProject(indexProject: number) {\n    const JWT = this.accountCookieService.getJwt();\n    const CURRENT_PROJECT_ID = this.accountData.projects[indexProject]._id;\n    if (!JWT || !CURRENT_PROJECT_ID) return;\n\n    await this.projectService.DELETEdeleteProject(JWT, CURRENT_PROJECT_ID);\n    this.notification.setSuccess('Проект удален', 5000);\n    this.accountData.projects.splice(indexProject, 1);\n  }\n\n  /** Проверка, является ли текущее устройство десктопом */\n  protected checkDesktop = checkDesktop;\n\n  /**\n   * Возвращает текущую выбранную комнату в планировке.\n   */\n  protected getCurrentViewRoom() {\n    if (this.planHouse === undefined) return undefined;\n    return this.planHouse.currentViewRoom;\n  }\n\n  /**\n   * Обновляет локальные данные проекта при изменении планировки.\n   * @param planHouse Новый массив данных комнат\n   */\n  protected updatePlanData(planHouse: roomData[]) {\n    this.currentPlanHouse = planHouse;\n    this.accountData.projects[this.currentProjectId!].rooms = planHouse;\n  }\n\n  /**\n   * Закрывает модуль добавления проекта.\n   */\n  protected closeAddModule() {\n    if (!this.addModule) return;\n    this.renderer.addClass(this.addModule, 'disabled');\n  }\n\n  /**\n   * Открывает модуль добавления проекта.\n   */\n  protected openAddModule() {\n    if (!this.addModule) return;\n    this.renderer.removeClass(this.addModule, 'disabled');\n  }\n\n  /**\n   * Закрывает текущий проект и убирает `planId` из URL.\n   */\n  protected closeProject() {\n    this.saveProject();\n    this.currentProjectId = undefined;\n    const NEW_URL = this.location.path().split('/').slice(0, -1).join('/');\n    this.location.replaceState(NEW_URL);\n  }\n\n  /**\n   * Открывает проект по его индексу и обновляет URL.\n   * @param indexProject Индекс проекта в массиве\n   */\n  protected openProject(indexProject: number) {\n    const NEW_URL = this.location.path() + '/' + indexProject;\n    this.location.replaceState(NEW_URL);\n    this.currentProjectId = indexProject;\n  }\n\n  /** Форма для ввода названия проекта */\n  protected projectNameForm = new FormGroup({\n    name: new FormControl('', [Validators.required])\n  });\n}\n\n    \n\n    \n        \n  \n  Просмотр этой страницы с мобильных устройств невозможен. Пожалуйста, используйте компьютер.\n  \n    \n      \n        \n          {{projectData.name}}\n          \n            \n            \n          \n        \n        \n          \n        \n      \n      \n        Создать\n        \n      \n    \n    \n      \n        \n      \n      \n    \n  \n\n\n  \n    \n      \n    \n    \n      Название плана\n      \n        Название\n        \n      \n      Continue\n    \n  \n\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    Просмотр этой страницы с мобильных устройств невозможен. Пожалуйста, используйте компьютер.                              {{projectData.name}}                                                                                                  Создать                                                                                Название плана              Название                    Continue      '\n    var COMPONENTS = [{'name': 'AccountPageComponent', 'selector': 'app-account-page'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreateFurnitureComponent', 'selector': 'app-create-furniture'},{'name': 'CreateFurniturePageComponent', 'selector': 'app-create-furniture-page'},{'name': 'FinderComponent', 'selector': 'app-finder'},{'name': 'ImageSliderComponent', 'selector': 'app-image-slider'},{'name': 'LoginPageComponent', 'selector': 'app-login-page'},{'name': 'MainPageComponent', 'selector': 'app-main-page'},{'name': 'NavigationPanelComponent', 'selector': 'app-navigation-panel'},{'name': 'NotificationComponent', 'selector': 'app-notification'},{'name': 'PlanHouseComponent', 'selector': 'app-plan-house'},{'name': 'PlanHousePageComponent', 'selector': 'app-plan-house-page'},{'name': 'SceneComponent', 'selector': 'app-scene'},{'name': 'ShopPageComponent', 'selector': 'app-shop-page'},{'name': 'ViewFurnitureComponent', 'selector': 'app-view-furniture'}];\n    var DIRECTIVES = [{'name': 'AutoHeightDirective', 'selector': '[appAutoHeight]'}];\n    var ACTUAL_COMPONENT = {'name': 'PlanHousePageComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProjectService.html":{"url":"injectables/ProjectService.html","title":"injectable - ProjectService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProjectService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/project.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для управления проектами: создание, удаление, получение, обновление и генерация отчетов\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseServiceUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                DELETEdeleteProject\n                            \n                            \n                                GETgetProject\n                            \n                            \n                                    Async\n                                GETgetReportOfRoom\n                            \n                            \n                                POSTcreateProject\n                            \n                            \n                                PUTupdateProject\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpModule: HttpClient, reportService: ReportService)\n                    \n                \n                        \n                            \n                                Defined in src/services/project.service.ts:53\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpModule\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reportService\n                                                  \n                                                        \n                                                                        ReportService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        DELETEdeleteProject\n                        \n                    \n                \n            \n            \n                \nDELETEdeleteProject(jwt: string, projectId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/project.service.ts:79\n                        \n                    \n\n\n            \n                \n                        Удаление проекта\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    JWT токен для авторизации\n\n                                            \n                                        \n                                        \n                                                projectId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID проекта, который нужно удалить\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Промис с сообщением об удалении\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        GETgetProject\n                        \n                    \n                \n            \n            \n                \nGETgetProject(jwt: string, projectId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/project.service.ts:92\n                        \n                    \n\n\n            \n                \n                        Получение проекта по ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    JWT токен для авторизации\n\n                                            \n                                        \n                                        \n                                                projectId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID проекта, который нужно получить\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Промис с данными проекта\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        GETgetReportOfRoom\n                        \n                    \n                \n            \n            \n                \n                        \n                    GETgetReportOfRoom(jwt: string, roomId: string, renderImage: Blob)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/project.service.ts:120\n                        \n                    \n\n\n            \n                \n                        Получение отчета о комнате и генерация PDF отчета\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    JWT токен для авторизации\n\n                                            \n                                        \n                                        \n                                                roomId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID комнаты, по которой нужно получить отчет\n\n                                            \n                                        \n                                        \n                                                renderImage\n                                            \n                                                        Blob\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Изображение рендера комнаты в формате Blob\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Промис, завершающийся после создания отчета\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        POSTcreateProject\n                        \n                    \n                \n            \n            \n                \nPOSTcreateProject(jwt: string, name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/project.service.ts:66\n                        \n                    \n\n\n            \n                \n                        Создание нового проекта\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    JWT токен для авторизации\n\n                                            \n                                        \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Название проекта\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Промис с объектом, содержащим данные проекта\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PUTupdateProject\n                        \n                    \n                \n            \n            \n                \nPUTupdateProject(jwt: string, projectId: string, projectInformation: projectInformation)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/project.service.ts:106\n                        \n                    \n\n\n            \n                \n                        Обновление данных проекта\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    JWT токен для авторизации\n\n                                            \n                                        \n                                        \n                                                projectId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID проекта, который нужно обновить\n\n                                            \n                                        \n                                        \n                                                projectInformation\n                                            \n                                                            projectInformation\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Новые данные проекта\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Промис с сообщением об успешном обновлении\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseServiceUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : baseUrl + 'project/'\n                    \n                \n                    \n                        \n                                Defined in src/services/project.service.ts:53\n                        \n                    \n\n            \n                \n                    Базовый URL для API запросов к проектам\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { baseUrl } from '.';\nimport { modelInterface, objectSceneInterface } from '../components/scene/scene.component';\nimport { firstValueFrom } from 'rxjs';\nimport { reportResponse } from './report.service';\nimport { ReportService } from './report.service';\n\n/**\n * Интерфейс описания комнаты\n */\nexport interface roomData {\n  /** Название комнаты */\n  name: string;\n  /** Сетка размещения (например, '1 / 2 / 3 / 4') */\n  gridArea: string;\n  /** Пропорции комнаты (ширина, высота, глубина) */\n  roomProportions: modelInterface;\n  /** Список объектов, размещённых в комнате */\n  objects: objectSceneInterface[];\n  /** (Необязательно) ID комнаты */\n  _id?: string;\n}\n\n/**\n * Интерфейс информации о проекте\n */\nexport interface projectInformation {\n  /** Название проекта */\n  name: string;\n  /** Список комнат в проекте */\n  rooms: roomData[];\n}\n\n/**\n * Интерфейс информации о проекте, получаемой с сервера\n */\nexport interface projectServerInformation extends projectInformation {\n  /** ID проекта */\n  _id: string;\n  /** ID автора проекта */\n  authorId: string;\n}\n\n/**\n * Сервис для управления проектами: создание, удаление, получение, обновление и генерация отчетов\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProjectService {\n  /** Базовый URL для API запросов к проектам */\n  private baseServiceUrl = baseUrl + 'project/';\n\n  constructor(\n    private httpModule: HttpClient,\n    private reportService: ReportService\n  ) {}\n\n  /**\n   * Создание нового проекта\n   * @param jwt JWT токен для авторизации\n   * @param name Название проекта\n   * @returns Промис с объектом, содержащим данные проекта\n   */\n  POSTcreateProject(jwt: string, name: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('name', name);\n    return firstValueFrom(this.httpModule.post(this.baseServiceUrl, HTTP_PARAMS)) as Promise;\n  }\n\n  /**\n   * Удаление проекта\n   * @param jwt JWT токен для авторизации\n   * @param projectId ID проекта, который нужно удалить\n   * @returns Промис с сообщением об удалении\n   */\n  DELETEdeleteProject(jwt: string, projectId: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('projectId', projectId);\n    return firstValueFrom(this.httpModule.delete(this.baseServiceUrl, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Получение проекта по ID\n   * @param jwt JWT токен для авторизации\n   * @param projectId ID проекта, который нужно получить\n   * @returns Промис с данными проекта\n   */\n  GETgetProject(jwt: string, projectId: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('projectId', projectId);\n    return firstValueFrom(this.httpModule.get(this.baseServiceUrl, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Обновление данных проекта\n   * @param jwt JWT токен для авторизации\n   * @param projectId ID проекта, который нужно обновить\n   * @param projectInformation Новые данные проекта\n   * @returns Промис с сообщением об успешном обновлении\n   */\n  PUTupdateProject(jwt: string, projectId: string, projectInformation: projectInformation): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('projectId', projectId);\n    return firstValueFrom(this.httpModule.put(this.baseServiceUrl, projectInformation, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Получение отчета о комнате и генерация PDF отчета\n   * @param jwt JWT токен для авторизации\n   * @param roomId ID комнаты, по которой нужно получить отчет\n   * @param renderImage Изображение рендера комнаты в формате Blob\n   * @returns Промис, завершающийся после создания отчета\n   */\n  async GETgetReportOfRoom(jwt: string, roomId: string, renderImage: Blob): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('roomId', roomId);\n\n    const RESPONSE = await firstValueFrom(this.httpModule.get(this.baseServiceUrl + 'room', { params: HTTP_PARAMS })) as reportResponse;\n\n    RESPONSE.furnitures = RESPONSE.furnitures.map(furnitureData => {\n      furnitureData.previewUrl = baseUrl + furnitureData.previewUrl;\n      return furnitureData;\n    });\n\n    this.reportService.createReport(RESPONSE, renderImage);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ReportService.html":{"url":"injectables/ReportService.html","title":"injectable - ReportService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ReportService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/report.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для генерации HTML-отчёта по комнате и мебели.\nОткрывает отчет в новой вкладке и скачивает его.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                costPipe\n                            \n                            \n                                createReport\n                            \n                            \n                                    Private\n                                createReportHTML\n                            \n                            \n                                    Private\n                                downloadHtml\n                            \n                            \n                                    Private\n                                generateHtmlContent\n                            \n                            \n                                    Private\n                                openHtmlInNewTab\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/services/report.service.ts:29\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        costPipe\n                        \n                    \n                \n            \n            \n                \n                        \n                    costPipe(cost: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/report.service.ts:321\n                        \n                    \n\n\n            \n                \n                        Форматирует цену с разделителями тысяч.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cost\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nСтоимость\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                Отформатированная строка с ценой\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createReport\n                        \n                    \n                \n            \n            \n                \ncreateReport(roomData: reportResponse, renderImage: Blob)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/report.service.ts:39\n                        \n                    \n\n\n            \n                \n                        Инициирует создание HTML-отчета.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                roomData\n                                            \n                                                            reportResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nДанные комнаты и мебели\n\n\n                                            \n                                        \n                                        \n                                                renderImage\n                                            \n                                                        Blob\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nИзображение визуализации комнаты\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        createReportHTML\n                        \n                    \n                \n            \n            \n                \n                        \n                    createReportHTML(roomData: reportResponse, renderImage: Blob)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/report.service.ts:51\n                        \n                    \n\n\n            \n                \n                        Создаёт HTML-страницу отчета и открывает её.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                roomData\n                                            \n                                                            reportResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nДанные комнаты\n\n\n                                            \n                                        \n                                        \n                                                renderImage\n                                            \n                                                        Blob\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nРендер комнаты\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        downloadHtml\n                        \n                    \n                \n            \n            \n                \n                        \n                    downloadHtml(roomName: string, htmlUrl: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/report.service.ts:348\n                        \n                    \n\n\n            \n                \n                        Загружает HTML-файл отчета.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                roomName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nНазвание комнаты (для имени файла)\n\n\n                                            \n                                        \n                                        \n                                                htmlUrl\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nURL HTML-файла\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        generateHtmlContent\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateHtmlContent(roomData: reportResponse, renderUrl: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/report.service.ts:72\n                        \n                    \n\n\n            \n                \n                        Генерирует HTML-содержимое отчета.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                roomData\n                                            \n                                                            reportResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nДанные комнаты и мебели\n\n\n                                            \n                                        \n                                        \n                                                renderUrl\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nURL рендер-изображения\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                HTML-контент отчета\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        openHtmlInNewTab\n                        \n                    \n                \n            \n            \n                \n                        \n                    openHtmlInNewTab(roomName: string, htmlContent: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/report.service.ts:333\n                        \n                    \n\n\n            \n                \n                        Открывает HTML-контент в новой вкладке и запускает загрузку.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                roomName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nНазвание комнаты (используется для имени файла)\n\n\n                                            \n                                        \n                                        \n                                                htmlContent\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nСодержимое HTML\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { baseClientUrl } from '.';\nimport { modelInterface } from '../components/scene/scene.component';\nimport { shopData } from './furniture-card-control.service';\n\nexport interface reportResponse {\n    name: string;\n    proportions: modelInterface,\n    furnitures: {\n        name: string;\n        furnitureCardId: string;\n        previewUrl: string;\n        proportions: modelInterface;\n        shops: shopData[];\n        category: string;\n    }[]\n}\n\n/**\n * Сервис для генерации HTML-отчёта по комнате и мебели.\n * Открывает отчет в новой вкладке и скачивает его.\n *\n * @export\n * @class ReportService\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class ReportService {\n    constructor() { }\n\n    /**\n     * Инициирует создание HTML-отчета.\n     *\n     * @param {reportResponse} roomData - Данные комнаты и мебели\n     * @param {Blob} renderImage - Изображение визуализации комнаты\n     * @memberof ReportService\n     */\n    createReport(roomData: reportResponse, renderImage: Blob): void {\n        this.createReportHTML(roomData, renderImage);\n    }\n\n    /**\n     * Создаёт HTML-страницу отчета и открывает её.\n     *\n     * @private\n     * @param {reportResponse} roomData - Данные комнаты\n     * @param {Blob} renderImage - Рендер комнаты\n     * @memberof ReportService\n     */\n    private createReportHTML(roomData: reportResponse, renderImage: Blob): void {\n        const reader = new FileReader();\n\n        reader.onload = () => {\n            const imageUrl = reader.result as string;\n            const htmlContent = this.generateHtmlContent(roomData, imageUrl);\n            this.openHtmlInNewTab(roomData.name, htmlContent);\n        };\n\n        reader.readAsDataURL(renderImage);\n    }\n\n    /**\n     * Генерирует HTML-содержимое отчета.\n     *\n     * @private\n     * @param {reportResponse} roomData - Данные комнаты и мебели\n     * @param {string} renderUrl - URL рендер-изображения\n     * @returns {string} HTML-контент отчета\n     * @memberof ReportService\n     */\n    private generateHtmlContent(roomData: reportResponse, renderUrl: string): string {\n        return `\n      \n\n\n\n    \n    \n    Отчет по комнате ${roomData.name}\n    \n        @font-face {\n            font-family: 'Calypso';\n            src: url('http://localhost:4200/assets/fonts/Calypso.ttf') format('truetype');\n        }\n\n        @font-face {\n            font-family: 'Courier New';\n            src: url('http://localhost:4200/assets/fonts/Courier New.ttf') format('truetype');\n        }\n\n        body {\n            margin: 0;\n            padding: 40px;\n            background-color: black;\n            color: #DAD7CD;\n            font-family: 'Courier New', monospace;\n            line-height: 1.6;\n            display: flex;\n            flex-direction: column;\n        }\n\n        .title {\n            font-family: 'Calypso', sans-serif;\n            text-align: center;\n            font-size: 3rem;\n            margin-bottom: 40px;\n            color: #A3B18A;\n            text-transform: uppercase;\n            letter-spacing: 2px;\n        }\n\n        .renderTitle {\n            font-family: 'Courier New', monospace;\n            font-weight: 400;\n            font-size: 1.5rem;\n            margin: 30px 0 15px;\n            color: #A3B18A;\n            border-bottom: 2px solid #A3B18A;\n            padding-bottom: 8px;\n            width:fit-content;\n            align-self: center;\n        }\n\n        .furnituresSpanTitle {\n            font-family: 'Calypso', sans-serif;\n            font-size: 2rem;\n            margin: 40px 0 20px;\n            color: #A3B18A;\n            display: block;\n            text-align: center;\n        }\n\n        .furniture {\n            display: flex;\n            flex-direction: column;\n            border-radius: 15px;\n            padding: 25px;\n            margin-bottom: 30px;\n            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);\n            transition: transform 0.3s ease;\n        }\n\n        .furnitureTitle {\n            font-family: 'Courier New', monospace;\n            font-weight: 400;\n            margin: 0 auto 15px;\n            font-size: 1.3rem;\n            color: #DAD7CD;\n        }\n\n        .furnitureImage {\n            margin: 0 auto;\n            max-width: 100%;\n            border-radius: 10px;\n            margin-bottom: 20px;\n        }\n\n        .furnitureFooter {\n            display: flex;\n            gap: 30px;\n            flex-direction: row;\n            justify-content: center;\n            flex-wrap: wrap;\n        }\n\n        .paramsTitle,\n        .shopsTitle {\n            font-family: 'Calypso', sans-serif;\n            font-size: 1.2rem;\n            color: #A3B18A;\n            margin-bottom: 15px;\n        }\n\n        .paramsSpan {\n            width: fit-content;\n            min-width: 200px;\n        }\n\n        .paramsList {\n            list-style-type: none;\n            padding: 0;\n            margin: 0;\n        }\n\n        .paramsItem {\n            margin-bottom: 8px;\n            position: relative;\n            padding-left: 20px;\n        }\n\n        .shopsSpan {\n            min-width: 200px;\n        }\n\n        a {\n            display: inline-block;\n            background-color: white;\n            color: black;\n            text-decoration: none;\n            padding: 5px 20px;\n            border-radius: 10px;\n            transition: all 0.3s ease;\n            border: 2px solid transparent;\n            width:250px;\n            max-width: 250px;\n            text-align: center;\n            font-family: 'Courier New';\n            font-weight: 400;\n            font-size: 0.8rem\n        }\n\n        a:hover {\n            background-color: transparent;\n            color: white;\n            border-color: white;\n        }\n\n        img {\n            width: 100%;\n            max-height: 500px;\n            object-fit: contain;\n            border-radius: 10px;\n            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);\n            margin-bottom: 30px;\n        }\n\n        .openLink {\n            width:250px;\n            max-width: 250px;\n            margin: 0 auto;\n            margin-top: 20px;\n        }\n        .furnitureLink{\n            background-color: #A3B18A;\n            color:white;\n            &:hover{\n                background-color: #344E41;\n                border: 2px solid #344E41;\n            }\n        }\n\n        @media (max-width: 768px) {\n            .furnitureFooter {\n                flex-direction: column;\n                align-items: center;\n                gap: 20px;\n                width: 100%;\n            }\n\n            .paramsSpan,\n            .shopsSpan {\n                width: 90%;\n            }\n\n            .openLink,.shopLink {\n                box-sizing: border-box;\n                width: 100%;\n            }\n\n            .title {\n                font-size: 2rem;\n            }\n\n            body {\n                padding: 20px;\n            }\n        }\n    \n\nОтчет по комнате${roomData.name}\nВид сверху\n\n\nДобавленная мебель\n${roomData.furnitures.map(furniture => `\n    \n    ${furniture.name}\n    \n    \n    \n     Параметры \n    \n     Ширина: ${furniture.proportions.width}cм \n     Высота: ${furniture.proportions.height}cм \n     Длина: ${furniture.proportions.length}cм \n    \n    \n    \n    ${furniture.shops.map(shopData => `\n         Магазины \n        \n      \n      ${this.costPipe(shopData.cost)}\n      \n      \n      `).join('')\n            }\n    \n    \n     Посмотреть мебель \n    \n    `).join('')}\nПосмотреть проект\n\n\n    `;\n    }\n\n    /**\n     * Форматирует цену с разделителями тысяч.\n     *\n     * @private\n     * @param {number} cost - Стоимость\n     * @returns {string} Отформатированная строка с ценой\n     * @memberof ReportService\n     */\n    private costPipe(cost: number): string {\n        return cost.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.');\n    }\n\n    /**\n     * Открывает HTML-контент в новой вкладке и запускает загрузку.\n     *\n     * @private\n     * @param {string} roomName - Название комнаты (используется для имени файла)\n     * @param {string} htmlContent - Содержимое HTML\n     * @memberof ReportService\n     */\n    private openHtmlInNewTab(roomName: string, htmlContent: string): void {\n        const blob = new Blob([htmlContent], { type: 'text/html' });\n        const url = URL.createObjectURL(blob);\n        window.open(url, '_blank');\n        this.downloadHtml(roomName, url);\n    }\n\n    /**\n     * Загружает HTML-файл отчета.\n     *\n     * @private\n     * @param {string} roomName - Название комнаты (для имени файла)\n     * @param {string} htmlUrl - URL HTML-файла\n     * @memberof ReportService\n     */\n    private downloadHtml(roomName: string, htmlUrl: string): void {\n        const downloadButton = document.createElement('a');\n        downloadButton.href = htmlUrl;\n        downloadButton.download = `${roomName}-report.html`;\n        downloadButton.click();\n        URL.revokeObjectURL(htmlUrl);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ServerImageControlService.html":{"url":"injectables/ServerImageControlService.html","title":"injectable - ServerImageControlService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ServerImageControlService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/server-image-control.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseServiceUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                DELETEproject\n                            \n                            \n                                DELETEprojectColor\n                            \n                            \n                                GETaccountAvatar\n                            \n                            \n                                GETallProjectImages\n                            \n                            \n                                GETmainImage\n                            \n                            \n                                POSTuploadProjectImages\n                            \n                            \n                                POSTuploadUserAvatar\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpModule: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/services/server-image-control.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpModule\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        DELETEproject\n                        \n                    \n                \n            \n            \n                \nDELETEproject(jwt: string, furnitureCardId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/server-image-control.service.ts:80\n                        \n                    \n\n\n            \n                \n                        Удаление проекта по ID карточки мебели.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    JWT токен пользователя.\n\n                                            \n                                        \n                                        \n                                                furnitureCardId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID карточки мебели.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Промис с сообщением об успешном удалении проекта.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DELETEprojectColor\n                        \n                    \n                \n            \n            \n                \nDELETEprojectColor(jwt: string, furnitureCardId: string, color: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/server-image-control.service.ts:65\n                        \n                    \n\n\n            \n                \n                        Удаление цвета проекта (мебели).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    JWT токен пользователя.\n\n                                            \n                                        \n                                        \n                                                furnitureCardId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID карточки мебели.\n\n                                            \n                                        \n                                        \n                                                color\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Цвет, который нужно удалить.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Промис с сообщением об успешном удалении.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        GETaccountAvatar\n                        \n                    \n                \n            \n            \n                \nGETaccountAvatar(jwt: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/server-image-control.service.ts:20\n                        \n                    \n\n\n            \n                \n                        Получение URL аватара пользователя.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    JWT токен пользователя.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                Строка с URL для получения аватара.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        GETallProjectImages\n                        \n                    \n                \n            \n            \n                \nGETallProjectImages(furnitureCardId: string, color: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/server-image-control.service.ts:94\n                        \n                    \n\n\n            \n                \n                        Получение всех изображений проекта по цвету и ID карточки мебели.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                furnitureCardId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID карточки мебели.\n\n                                            \n                                        \n                                        \n                                                color\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Цвет мебели.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Промис с URL изображений и ID главного изображения.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        GETmainImage\n                        \n                    \n                \n            \n            \n                \nGETmainImage(furnitureCardId: string, color: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/server-image-control.service.ts:108\n                        \n                    \n\n\n            \n                \n                        Получение URL главного изображения по ID карточки мебели и цвету.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                furnitureCardId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID карточки мебели.\n\n                                            \n                                        \n                                        \n                                                color\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Цвет мебели.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                Строка с URL главного изображения.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        POSTuploadProjectImages\n                        \n                    \n                \n            \n            \n                \nPOSTuploadProjectImages(color: string, imagesData: imageSliderClientData, jwt: string, furnitureCardId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/server-image-control.service.ts:45\n                        \n                    \n\n\n            \n                \n                        Загрузка изображений проекта.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                color\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Цвет мебели.\n\n                                            \n                                        \n                                        \n                                                imagesData\n                                            \n                                                            imageSliderClientData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Данные изображений (включая главную).\n\n                                            \n                                        \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    JWT токен пользователя.\n\n                                            \n                                        \n                                        \n                                                furnitureCardId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID карточки мебели.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Промис с сообщением об успешной загрузке.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        POSTuploadUserAvatar\n                        \n                    \n                \n            \n            \n                \nPOSTuploadUserAvatar(imageFile: Blob, jwt: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/server-image-control.service.ts:30\n                        \n                    \n\n\n            \n                \n                        Загрузка аватара пользователя.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                imageFile\n                                            \n                                                        Blob\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Изображение аватара.\n\n                                            \n                                        \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    JWT токен пользователя.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Промис с сообщением об успешной загрузке.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseServiceUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : baseUrl + 'furniture/images/'\n                    \n                \n                    \n                        \n                                Defined in src/services/server-image-control.service.ts:11\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { baseUrl } from '.';\nimport { firstValueFrom } from 'rxjs';\nimport { imageSliderClientData } from '../components/image-slider/image-slider.component';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ServerImageControlService {\n  private baseServiceUrl = baseUrl + 'furniture/images/';\n\n  constructor(private httpModule: HttpClient) {}\n\n  /**\n   * Получение URL аватара пользователя.\n   * @param {string} jwt JWT токен пользователя.\n   * @returns {string} Строка с URL для получения аватара.\n   */\n  GETaccountAvatar(jwt: string): string {\n    return `${baseUrl}/account/avatar?jwt=${jwt}`;\n  }\n\n  /**\n   * Загрузка аватара пользователя.\n   * @param {Blob} imageFile Изображение аватара.\n   * @param {string} jwt JWT токен пользователя.\n   * @returns {Promise} Промис с сообщением об успешной загрузке.\n   */\n  POSTuploadUserAvatar(imageFile: Blob, jwt: string): Promise {\n    const formData = new FormData();\n    formData.append('image', imageFile);\n    const HTTP_PARAMS = new HttpParams().set('jwt', jwt);\n    return firstValueFrom(this.httpModule.post(`${baseUrl}/account/avatar`, formData, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Загрузка изображений проекта.\n   * @param {string} color Цвет мебели.\n   * @param {imageSliderClientData} imagesData Данные изображений (включая главную).\n   * @param {string} jwt JWT токен пользователя.\n   * @param {string} furnitureCardId ID карточки мебели.\n   * @returns {Promise} Промис с сообщением об успешной загрузке.\n   */\n  POSTuploadProjectImages(color: string, imagesData: imageSliderClientData, jwt: string, furnitureCardId: string): Promise {\n    const formData = new FormData();\n    imagesData.images.forEach((file) => formData.append('images', file));\n\n    const HTTP_PARAMS = new HttpParams()\n      .set('furnitureCardId', furnitureCardId)\n      .set('color', color)\n      .set('idMainImage', imagesData.idMainImage)\n      .set('jwt', jwt);\n\n    return firstValueFrom(this.httpModule.post(this.baseServiceUrl + 'upload', formData, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Удаление цвета проекта (мебели).\n   * @param {string} jwt JWT токен пользователя.\n   * @param {string} furnitureCardId ID карточки мебели.\n   * @param {string} color Цвет, который нужно удалить.\n   * @returns {Promise} Промис с сообщением об успешном удалении.\n   */\n  DELETEprojectColor(jwt: string, furnitureCardId: string, color: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId)\n      .set('color', color);\n\n    return firstValueFrom(this.httpModule.delete(this.baseServiceUrl + 'delete/color', { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Удаление проекта по ID карточки мебели.\n   * @param {string} jwt JWT токен пользователя.\n   * @param {string} furnitureCardId ID карточки мебели.\n   * @returns {Promise} Промис с сообщением об успешном удалении проекта.\n   */\n  DELETEproject(jwt: string, furnitureCardId: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId);\n\n    return firstValueFrom(this.httpModule.delete(this.baseServiceUrl + 'delete/project', { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Получение всех изображений проекта по цвету и ID карточки мебели.\n   * @param {string} furnitureCardId ID карточки мебели.\n   * @param {string} color Цвет мебели.\n   * @returns {Promise} Промис с URL изображений и ID главного изображения.\n   */\n  GETallProjectImages(furnitureCardId: string, color: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('furnitureCardId', furnitureCardId)\n      .set('color', color);\n\n    return firstValueFrom(this.httpModule.get(this.baseServiceUrl + 'all', { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Получение URL главного изображения по ID карточки мебели и цвету.\n   * @param {string} furnitureCardId ID карточки мебели.\n   * @param {string} color Цвет мебели.\n   * @returns {string} Строка с URL главного изображения.\n   */\n  GETmainImage(furnitureCardId: string, color: string): string {\n    return `${this.baseServiceUrl}main?furnitureCardId=${furnitureCardId}&color=${color}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ShopService.html":{"url":"injectables/ShopService.html","title":"injectable - ShopService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ShopService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/shop.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для получения данных о мебели из магазина, с учетом фильтрации и пагинации.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                abortController\n                            \n                            \n                                    Private\n                                baseServiceUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getFindOptionsByResult\n                            \n                            \n                                    Async\n                                GETgetCategoryData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpModule: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/services/shop.service.ts:78\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpModule\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getFindOptionsByResult\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFindOptionsByResult(resultsArray: furnitureShopData[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/shop.service.ts:151\n                        \n                    \n\n\n            \n                \n                        Формирует объект фильтров на основе полученных данных о мебели.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                resultsArray\n                                            \n                                                            furnitureShopData[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nМассив карточек мебели\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         clientFilters\n\n                        \n                            \n                                Объект клиентских фильтров (цвета, минимальная и максимальная цена)\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        GETgetCategoryData\n                        \n                    \n                \n            \n            \n                \n                        \n                    GETgetCategoryData(categoryName: string, startRange: number, queryData?: queryData)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/shop.service.ts:97\n                        \n                    \n\n\n            \n                \n                        Выполняет GET-запрос на получение данных по категории мебели.\nПоддерживает фильтрацию и стартовую позицию для пагинации.\nПри повторном вызове отменяет предыдущий запрос.\n\nresultsArray: массив карточек мебели с обновлёнными URL превью\nresultsClientFiltersData: агрегированные данные фильтров для клиента\n\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                categoryName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nНазвание категории мебели.\n\n\n                                            \n                                        \n                                        \n                                                startRange\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nНачальный индекс (offset) выборки.\n\n\n                                            \n                                        \n                                        \n                                                queryData\n                                            \n                                                            queryData\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nОбъект фильтров (опционально).\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Промис с объектом, содержащим:\n\nresultsArray: массив карточек мебели с обновлёнными URL превью\nresultsClientFiltersData: агрегированные данные фильтров для клиента\n\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        abortController\n                        \n                    \n                \n            \n                \n                    \n                        Type :     AbortController | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/services/shop.service.ts:78\n                        \n                    \n\n            \n                \n                    Активный AbortController для отмены предыдущих запросов\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseServiceUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : baseUrl + 'shop'\n                    \n                \n                    \n                        \n                                Defined in src/services/shop.service.ts:75\n                        \n                    \n\n            \n                \n                    Базовый URL сервиса\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { firstValueFrom } from 'rxjs';\nimport { modelInterface } from '../components/scene/scene.component';\n\n/**\n * Интерфейс объекта фильтров, отправляемых на сервер.\n*/\nexport interface queryData {\n  /** Любое ключ:значение */\n  [key: string]: optionSelectQueryData | optionRangeQueryData;\n}\n\n/**\n * Фильтр типа \"выбор из списка\".\n */\ninterface optionSelectQueryData {\n  /** Тип фильтра */\n  type: 'select';\n  /** Выбранные значения */\n  value: string[];\n}\n\n/**\n * Фильтр типа \"диапазон значений\".\n*/\ninterface optionRangeQueryData {\n  /** Тип фильтра */\n  type: 'range';\n  /** Минимум в диапазоне */\n  min: number;\n  /** Максимум в диапазоне */\n  max: number;\n}\n\n/**\n * Интерфейс данных о мебели, получаемых из магазина.\n */\nexport interface furnitureShopData {\n  /** Название */\n  name: string;\n  /** Стоимость мебели */\n  cost: number;\n  /** Неполный Url превью (вначало надо вставить baseUrl сервера) */\n  previewUrl: string;\n  /** Id мебели */\n  furnitureCardId: string;\n  /** Массив цветов мебели */\n  colors: string[];\n  /** Габариты мебели */\n  proportions: modelInterface;\n}\n\n/**\n * Интерфейс клиентских фильтров, значения которых формируются на основе ответа от сервера.\n */\nexport interface clientFilters {\n  /** Цвета мебели */\n  colors: string[];\n  /** Минимальная стоимость */\n  minCost: number;\n  /** Максимальная стоимость */\n  maxCost: number;\n}\n\n/**\n * Сервис для получения данных о мебели из магазина, с учетом фильтрации и пагинации.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ShopService {\n  /** Базовый URL сервиса */\n  private baseServiceUrl = baseUrl + 'shop';\n\n  /** Активный AbortController для отмены предыдущих запросов */\n  private abortController: AbortController | null = null;\n\n  constructor(private httpModule: HttpClient) { }\n\n  /**\n   * Выполняет GET-запрос на получение данных по категории мебели.\n   * Поддерживает фильтрацию и стартовую позицию для пагинации.\n   * При повторном вызове отменяет предыдущий запрос.\n   *\n   * @param categoryName - Название категории мебели.\n   * @param startRange - Начальный индекс (offset) выборки.\n   * @param queryData - Объект фильтров (опционально).\n   *\n   * @returns Промис с объектом, содержащим:\n   * - `resultsArray`: массив карточек мебели с обновлёнными URL превью\n   * - `resultsClientFiltersData`: агрегированные данные фильтров для клиента\n   *\n   * @throws {Error} В случае сетевой ошибки или отмены запроса.\n   */\n  async GETgetCategoryData(categoryName: string, startRange: number, queryData?: queryData) {\n    if (this.abortController) {\n      this.abortController.abort();\n    }\n\n    this.abortController = new AbortController();\n\n    try {\n      let requestUrl = `${this.baseServiceUrl}?category=${categoryName}&startRange=${startRange}`;\n\n      if (queryData && Object.keys(queryData).length > 0) {\n        const params = new URLSearchParams();\n        params.append('filters', JSON.stringify(queryData));\n        requestUrl += `&${new URLSearchParams(params).toString()}`;\n      }\n\n      const response = await fetch(\n        requestUrl,\n        { signal: this.abortController.signal }\n      );\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Ошибка: ${response.status} — ${errorText}`);\n      }\n\n      const RESPONSE = await response.json() as { resultsArray: furnitureShopData[] };\n      const RESULTS_ARRAY = RESPONSE.resultsArray;\n\n      const UPDATED_RESULTS = RESULTS_ARRAY.map(furniture => ({\n        ...furniture,\n        previewUrl: baseUrl + furniture.previewUrl\n      }));\n\n      return {\n        resultsArray: UPDATED_RESULTS,\n        resultsClientFiltersData: this.getFindOptionsByResult(UPDATED_RESULTS)\n      };\n\n    } catch (error: any) {\n      if (error.name === 'AbortError') {\n      } else {\n        console.error('Ошибка запроса:', error);\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Формирует объект фильтров на основе полученных данных о мебели.\n   *\n   * @param resultsArray - Массив карточек мебели\n   * @returns Объект клиентских фильтров (цвета, минимальная и максимальная цена)\n   */\n  private getFindOptionsByResult(resultsArray: furnitureShopData[]) {\n    let filtersObject: clientFilters = {\n      colors: [],\n      minCost: Infinity,\n      maxCost: -Infinity\n    };\n\n    resultsArray.forEach(furnitureData => {\n      if (furnitureData.cost  filtersObject.maxCost) filtersObject.maxCost = furnitureData.cost;\n\n      filtersObject.colors.push(...furnitureData.colors);\n    });\n\n    filtersObject.minCost = filtersObject.minCost!== Infinity ? filtersObject.minCost : 0;\n    filtersObject.maxCost = filtersObject.maxCost!== -Infinity ? filtersObject.maxCost : 0;\n\n    filtersObject.colors = [...new Set(filtersObject.colors)];\n    return filtersObject;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ViewFurnitureComponent.html":{"url":"components/ViewFurnitureComponent.html","title":"component - ViewFurnitureComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ViewFurnitureComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/components/view-furniture/view-furniture.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-view-furniture\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                                ImageSliderComponent\n                            NgFor\n                            NgIf\n                            ReactiveFormsModule\n                            CostFormatPipe\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./view-furniture.component.html\n            \n\n\n\n            \n                styleUrl\n                ./view-furniture.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                currentColorId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                copyShopLink\n                            \n                            \n                                    Async\n                                ngOnChanges\n                            \n                            \n                                    Protected\n                                openFurnitureVariant\n                            \n                            \n                                    Protected\n                                proccessDescription\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                furnitureCardId\n                            \n                            \n                                furnitureData\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(elementRef: ElementRef, clipboardService: ClipboardService, furnitureCardService: FurnitureCardControlService, notification: NotificationService)\n                    \n                \n                        \n                            \n                                Defined in src/components/view-furniture/view-furniture.component.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        elementRef\n                                                  \n                                                        \n                                                                    ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        clipboardService\n                                                  \n                                                        \n                                                                    ClipboardService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        furnitureCardService\n                                                  \n                                                        \n                                                                        FurnitureCardControlService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        notification\n                                                  \n                                                        \n                                                                        NotificationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        furnitureCardId\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/components/view-furniture/view-furniture.component.ts:30\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        furnitureData\n                    \n                \n                \n                    \n                        Type :         furnitureFromServerData\n\n                    \n                \n                        \n                            \n                                    Defined in src/components/view-furniture/view-furniture.component.ts:34\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        copyShopLink\n                        \n                    \n                \n            \n            \n                \n                        \n                    copyShopLink(furnitureUrl: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/view-furniture/view-furniture.component.ts:77\n                        \n                    \n\n\n            \n                \n                        Копирование ссылки на магазин\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                furnitureUrl\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnChanges()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/view-furniture/view-furniture.component.ts:36\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        openFurnitureVariant\n                        \n                    \n                \n            \n            \n                \n                        \n                    openFurnitureVariant(colorButton: EventTarget)\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/view-furniture/view-furniture.component.ts:46\n                        \n                    \n\n\n            \n                \n                        Смена цвета мебели на выбранный вариант\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                colorButton\n                                            \n                                                        EventTarget\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        proccessDescription\n                        \n                    \n                \n            \n            \n                \n                        \n                    proccessDescription(description: string, proportions: furnitureProportions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/view-furniture/view-furniture.component.ts:73\n                        \n                    \n\n\n            \n                \n                        Добавление габаритов к описанию мебели\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                description\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                proportions\n                                            \n                                                            furnitureProportions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        currentColorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/components/view-furniture/view-furniture.component.ts:26\n                        \n                    \n\n            \n                \n                    Текущий индекс выбранного цвета\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, ElementRef, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { ImageSliderComponent } from '../image-slider/image-slider.component';\nimport { NgFor, NgIf } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ClipboardService } from 'ngx-clipboard';\nimport { FurnitureCardControlService, furnitureFromServerData, furnitureProportions } from '../../services/furniture-card-control.service';\nimport { NotificationService } from '../../services/notification.service';\nimport { CostFormatPipe } from '../../pipes/cost-format.pipe';\n\n@Component({\n  selector: 'app-view-furniture',\n  standalone: true,\n  imports: [ImageSliderComponent, NgFor, NgIf, ReactiveFormsModule, CostFormatPipe],\n  templateUrl: './view-furniture.component.html',\n  styleUrl: './view-furniture.component.scss'\n})\nexport class ViewFurnitureComponent implements OnChanges {\n  constructor(\n    private elementRef: ElementRef,\n    private clipboardService: ClipboardService,\n    private furnitureCardService: FurnitureCardControlService,\n    private notification: NotificationService\n  ) { }\n\n  /** Текущий индекс выбранного цвета */\n  protected currentColorId: number = 0\n\n  @Input()\n  /** ID карточки мебели, передаваемый как входной параметр */\n  furnitureCardId?: string\n\n  @Input()\n  /** Данные карточки мебели, загружаемые из сервиса */\n  furnitureData?: furnitureFromServerData;\n\n  async ngOnChanges() {\n    if (this.furnitureCardId === undefined) return\n    try {\n      this.furnitureData = (await this.furnitureCardService.GETfurnitureCard(this.furnitureCardId)).furnitureCard\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  /** Смена цвета мебели на выбранный вариант */\n  protected openFurnitureVariant(colorButton: EventTarget) {\n    const COLOR_BUTTON_ELEMENT = colorButton as HTMLButtonElement;\n    const COLORS_ELEMENT = this.elementRef.nativeElement.querySelector('.colors') as HTMLSpanElement;\n    const idColor = COLOR_BUTTON_ELEMENT.getAttribute('data-idcolor');\n    if (!idColor) return;\n\n    const COLORS_VARIANTS = COLORS_ELEMENT.querySelectorAll('.colorVariant')\n    let beforeColors: HTMLButtonElement[] = [], afterColors: HTMLButtonElement[] = []\n    COLORS_VARIANTS.forEach((colorVariant, indexVariant) => {\n      if (indexVariant > +idColor) {\n        afterColors = [...afterColors, colorVariant as HTMLButtonElement]\n      } else if (indexVariant  {\n      (colorVariant as HTMLButtonElement).style.setProperty('--index', (newIndex + 1).toString())\n    })\n    setTimeout(() => {\n      COLOR_BUTTON_ELEMENT.style.setProperty('margin-right', '115px')\n    }, 500)\n    setTimeout(() => {\n      this.currentColorId = +idColor\n      COLOR_BUTTON_ELEMENT.style.setProperty('margin-right', '0')\n    }, 1250)\n  }\n  /** Добавление габаритов к описанию мебели */\n  protected proccessDescription(description: string, proportions: furnitureProportions) {\n    return `Ширина: ${proportions.width} см\\nДлина: ${proportions.length} см\\nВысота: ${proportions.height} см\\n${description}`;\n  }\n  /** Копирование ссылки на магазин */\n  protected copyShopLink(furnitureUrl: string) {\n    this.clipboardService.copyFromContent(furnitureUrl)\n  }\n}\n\n    \n\n    \n        \n    {{furnitureData.name}}\n    \n    \n        \n        \n    \n    \n        \n            \n            \n                \n            \n        \n        \n            \n                Описание\n                {{proccessDescription(furnitureData.description,furnitureData.proportions)}}\n            \n            \n                Магазины\n                \n                    \n                        {{shopData.cost | costFormat}}\n                        \n                            \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    {{furnitureData.name}}                                                                                                                                        Описание                {{proccessDescription(furnitureData.description,furnitureData.proportions)}}                                        Магазины                                                            {{shopData.cost | costFormat}}                                                                                                                                        '\n    var COMPONENTS = [{'name': 'AccountPageComponent', 'selector': 'app-account-page'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CreateFurnitureComponent', 'selector': 'app-create-furniture'},{'name': 'CreateFurniturePageComponent', 'selector': 'app-create-furniture-page'},{'name': 'FinderComponent', 'selector': 'app-finder'},{'name': 'ImageSliderComponent', 'selector': 'app-image-slider'},{'name': 'LoginPageComponent', 'selector': 'app-login-page'},{'name': 'MainPageComponent', 'selector': 'app-main-page'},{'name': 'NavigationPanelComponent', 'selector': 'app-navigation-panel'},{'name': 'NotificationComponent', 'selector': 'app-notification'},{'name': 'PlanHouseComponent', 'selector': 'app-plan-house'},{'name': 'PlanHousePageComponent', 'selector': 'app-plan-house-page'},{'name': 'SceneComponent', 'selector': 'app-scene'},{'name': 'ShopPageComponent', 'selector': 'app-shop-page'},{'name': 'ViewFurnitureComponent', 'selector': 'app-view-furniture'}];\n    var DIRECTIVES = [{'name': 'AutoHeightDirective', 'selector': '[appAutoHeight]'}];\n    var ACTUAL_COMPONENT = {'name': 'ViewFurnitureComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/accountFullData.html":{"url":"interfaces/accountFullData.html","title":"interface - accountFullData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  accountFullData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/account.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Полные данные аккаунта пользователя\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            avatarUrl\n                                        \n                                \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            furnitures\n                                        \n                                \n                                \n                                        \n                                            nickname\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            password\n                                        \n                                \n                                \n                                        \n                                            projects\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        avatarUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        avatarUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    URL аватара\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Email пользователя\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        furnitures\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        furnitures:         furnitureAccountData[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         furnitureAccountData[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Массив мебели, связанной с аккаунтом\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nickname\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nickname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Никнейм пользователя\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Пароль пользователя (необязательный)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        projects\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        projects:         projectInformation[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         projectInformation[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Массив проектов пользователя\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { projectInformation, projectServerInformation } from './project.service';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { AccountCookieService } from './account-cookie.service';\nimport { baseUrl } from '.';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные для изменения аккаунта с email\n */\nexport interface changeAccountDataEmail {\n  /** JWT токен */\n  jwt: string;\n  /** Тип аккаунта (email) */\n  accountType: 'email';\n  /** Пароль пользователя */\n  password: string;\n}\n\n/**\n * Полные данные аккаунта пользователя\n */\nexport interface accountFullData {\n  /** URL аватара */\n  avatarUrl: string;\n  /** Никнейм пользователя */\n  nickname: string;\n  /** Email пользователя */\n  email: string;\n  /** Массив проектов пользователя */\n  projects: projectInformation[];\n  /** Массив мебели, связанной с аккаунтом */\n  furnitures: furnitureAccountData[];\n  /** Пароль пользователя (необязательный) */\n  password?: string;\n}\n\n/**\n * Данные для изменения вторичных данных аккаунта\n */\nexport interface changeSecondaryData {\n  /** JWT токен */\n  jwt: string;\n  /** Новый никнейм */\n  nickname: string;\n}\n\n/**\n * Данные по мебели, связанной с аккаунтом\n */\nexport interface furnitureAccountData {\n  /** Идентификатор мебели */\n  _id: string;\n  /** Название мебели */\n  name: string;\n  /** URL превью изображения мебели */\n  previewUrl: string;\n}\n\n/** Тип аккаунта */\nexport type accountType = 'google' | 'email';\n\n/** Тип данных для изменения аккаунта (на данный момент только email) */\nexport type changeAccountData = changeAccountDataEmail;\n\n/**\n * Данные для создания аккаунта с email\n */\ninterface createEmailAccountData {\n  /** Email */\n  email: string;\n  /** Пароль */\n  password: string;\n  /** Никнейм */\n  nickname: string;\n  /** Тип аккаунта (email) */\n  accountType: 'email';\n}\n\n/** Тип данных для создания аккаунта */\nexport type createAccountData = createEmailAccountData;\n\n/**\n * Функция-помощник для проверки, что аккаунт с типом email\n * @param account Объект аккаунта\n * @returns true, если аккаунт с типом email\n */\nexport function isEmailAccount(account: { accountType: accountType }): account is changeAccountDataEmail {\n  return account.accountType === 'email';\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccountService {\n  /** Базовый URL для аккаунт-сервисов */\n  private baseServiceUrl = baseUrl + 'account';\n\n  constructor(\n    private httpModule: HttpClient,\n    private accountCookieService: AccountCookieService\n  ) { }\n\n  /**\n   * Создание нового пользователя\n   * @param createAccountData Основная информация о пользователе (никнейм, email, пароль)\n   * @returns Promise с сообщением об успешном создании пользователя\n   */\n  POSTcreateAccount(createAccountData: createAccountData) {\n    let HTTP_PARAMS = new HttpParams()\n      .set('accountType', createAccountData.accountType)\n      .set('nickname', createAccountData.nickname);\n\n    if (isEmailAccount(createAccountData)) {\n      HTTP_PARAMS = HTTP_PARAMS\n        .set('email', createAccountData.email)\n        .set('password', createAccountData.password);\n    }\n\n    return firstValueFrom(this.httpModule.post(this.baseServiceUrl, HTTP_PARAMS)) as Promise;\n  }\n\n  /**\n   * Удаление JWT токена пользователя\n   * @param jwt JWT токен\n   * @returns Promise с сообщением об успешном удалении токена\n   */\n  DELETEaccountJwt(jwt: string) {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt);\n    return firstValueFrom(this.httpModule.delete(this.baseServiceUrl + '/jwt/delete', { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Обновление вторичных данных аккаунта (например, никнейм)\n   * @param changeData Данные для изменения\n   * @returns Promise с сообщением об успешном обновлении\n   */\n  PUTupdateSecondaryAccountData(changeData: changeSecondaryData) {\n    console.log('changeData', changeData);\n    const HTTP_PARAMS = new HttpParams({\n      fromObject: {\n        nickname: changeData.nickname,\n        jwt: changeData.jwt\n      }\n    });\n    console.log(HTTP_PARAMS.toString());\n    return firstValueFrom(this.httpModule.put(this.baseServiceUrl, null, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Удаление аккаунта пользователя\n   * @param jwt JWT токен\n   * @returns Promise с сообщением об успешном удалении пользователя\n   */\n  DELETEaccount(jwt: string) {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt);\n    return firstValueFrom(this.httpModule.delete(this.baseServiceUrl, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Получение полной информации об аккаунте пользователя\n   * @param jwt JWT токен\n   * @returns Promise с данными аккаунта (включая проекты и мебель)\n   */\n  async GETaccount(jwt: string) {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt);\n    try {\n      let { accountData } = await firstValueFrom(this.httpModule.get(this.baseServiceUrl, { params: HTTP_PARAMS })) as { accountData: accountFullData & { projects: projectServerInformation[] } };\n      accountData.furnitures = accountData.furnitures.map(furnitureData => {\n        return {\n          ...furnitureData,\n          previewUrl: baseUrl + furnitureData.previewUrl\n        };\n      });\n      return { accountData: accountData };\n    } catch (error) {\n      console.error('Error in GETfurnitureCard:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Проверка наличия JWT токена в куках\n   * @returns true, если JWT токен найден, иначе false\n   */\n  checkJwt(): boolean {\n    return this.accountCookieService.getJwt() ? true : false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/additionalData.html":{"url":"interfaces/additionalData.html","title":"interface - additionalData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  additionalData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/furniture-card-control.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Дополнительные данные мебели с динамическими ключами\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            category\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    string | undefined\n\n                    \n                \n                        \n                            \n                                Defined in src/services/furniture-card-control.service.ts:59\n                            \n                        \n                \n                    \n                        Другие динамические свойства\n\n                    \n                \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        category\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        category:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Категория мебели (опционально)\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { imageSliderClientData, imageSliderFromServerData } from '../components/image-slider/image-slider.component';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные магазина с ценой и URL\n * @interface shopData\n */\nexport interface shopData {\n  /** Цена мебели */\n  cost: number;\n  /** URL магазина или товара */\n  url: string;\n}\n\n/**\n * Пропорции мебели (ширина, длина, высота)\n * @interface furnitureProportions\n */\nexport interface furnitureProportions {\n  /** Ширина мебели (или null, если не задана) */\n  width: number | null;\n  /** Длина мебели (или null, если не задана) */\n  length: number | null;\n  /** Высота мебели (или null, если не задана) */\n  height: number | null;\n}\n\n/**\n * Данные цвета на клиенте, включая слайдер изображений\n * @interface colorClientData\n */\nexport interface colorClientData {\n  /** Цвет мебели */\n  color: string;\n  /** Данные для слайдера изображений */\n  imagesData: imageSliderClientData;\n}\n\n/**\n * Данные цвета с сервера, включая слайдер изображений\n * @interface colorFromServerData\n */\nexport interface colorFromServerData {\n  /** Цвет мебели */\n  color: string;\n  /** Данные для слайдера изображений */\n  imagesData: imageSliderFromServerData;\n}\n\n/**\n * Дополнительные данные мебели с динамическими ключами\n * @interface additionalData\n */\nexport interface additionalData {\n  /** Категория мебели (опционально) */\n  category?: string;\n  /** Другие динамические свойства */\n  [key: string]: string | undefined;\n}\n\n/**\n * Базовые данные мебели, общие для клиента и сервера\n * @interface furnitureBaseData\n */\ninterface furnitureBaseData {\n  /** Название мебели */\n  name: string;\n  /** Описание мебели */\n  description: string;\n  /** Пропорции мебели */\n  proportions: furnitureProportions;\n  /** Список магазинов с ценами и URL */\n  shops: shopData[];\n  /** Дополнительные данные */\n  additionalData: additionalData;\n}\n\n/**\n * Данные мебели на клиенте с цветами\n * @interface furnitureClientData\n * @extends furnitureBaseData\n */\nexport interface furnitureClientData extends furnitureBaseData {\n  /** Список цветов с данными для клиента */\n  colors: colorClientData[];\n}\n\n/**\n * Данные мебели с сервера с цветами\n * @interface furnitureFromServerData\n * @extends furnitureBaseData\n */\nexport interface furnitureFromServerData extends furnitureBaseData {\n  /** Список цветов с данными с сервера */\n  colors: colorFromServerData[];\n}\n\n/**\n * Сервис для управления карточками мебели\n * @class FurnitureCardControlService\n * @injectable\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class FurnitureCardControlService {\n\n  /** Базовый URL для запросов к API мебели */\n  private baseServiceUrl = baseUrl + 'furniture/card';\n\n  /**\n   * Конструктор сервиса\n   * @param httpModule HTTP клиент для запросов\n   */\n  constructor(private httpModule: HttpClient) { }\n\n  /**\n   * Получение карточки мебели по ID и опциональному JWT токену\n   * @param furnitureCardId - ID карточки мебели\n   * @param [jwt] - JWT токен пользователя (опционально)\n   * @returns Promise с объектом, содержащим данные карточки и флаг совпадения автора\n   * @throws Ошибка при некорректной структуре ответа или при ошибках запроса\n   */\n  async GETfurnitureCard(\n    furnitureCardId: string,\n    jwt?: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams().set('furnitureCardId', furnitureCardId);\n\n    if (jwt !== undefined) {\n      HTTP_PARAMS = HTTP_PARAMS.set('jwt', jwt);\n    }\n\n    try {\n      const response = await firstValueFrom(\n        this.httpModule.get(this.baseServiceUrl, { params: HTTP_PARAMS })\n      ) as {\n        furnitureCard: furnitureFromServerData;\n        authorMatched: boolean;\n      };\n\n      if (!response?.furnitureCard) {\n        throw new Error('Invalid response structure: furnitureCard missing');\n      }\n\n      // Добавляем полный URL к изображениям\n      const transformedFurnitureCard = {\n        ...response.furnitureCard,\n        colors: response.furnitureCard.colors.map(colorData => ({\n          color: colorData.color,\n          imagesData: {\n            idMainImage: colorData.imagesData.idMainImage,\n            images: colorData.imagesData.images.map(url => baseUrl + url)\n          }\n        }))\n      };\n\n      return {\n        furnitureCard: transformedFurnitureCard,\n        authorMatched: response.authorMatched\n      };\n\n    } catch (error) {\n      console.error('Error in GETfurnitureCard:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Создание новой карточки мебели\n   * @param furnitureData - Данные новой карточки мебели\n   * @param jwt - JWT токен пользователя\n   * @returns Promise с данными созданной карточки, включая её ID\n   */\n  POSTcreateFurnitureCard(\n    furnitureData: furnitureFromServerData,\n    jwt: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams().set('jwt', jwt);\n    return firstValueFrom(\n      this.httpModule.post(this.baseServiceUrl, furnitureData, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n\n  /**\n   * Обновление существующей карточки мебели\n   * @param furnitureCardUpdateData - Обновленные данные карточки мебели\n   * @param furnitureCardId - ID карточки мебели для обновления\n   * @param jwt - JWT токен пользователя\n   * @returns Promise с сообщением результата обновления\n   */\n  PUTupdateFurnitureCard(\n    furnitureCardUpdateData: furnitureFromServerData,\n    furnitureCardId: string,\n    jwt: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId);\n    return firstValueFrom(\n      this.httpModule.put(this.baseServiceUrl, furnitureCardUpdateData, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n\n  /**\n   * Удаление карточки мебели по ID и JWT токену\n   * @param jwt - JWT токен пользователя\n   * @param furnitureCardId - ID карточки мебели для удаления\n   * @returns Promise с сообщением результата удаления\n   */\n  DELETEfurnitureCard(jwt: string, furnitureCardId: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId);\n    return firstValueFrom(\n      this.httpModule.delete(this.baseServiceUrl, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/baseFilter.html":{"url":"interfaces/baseFilter.html","title":"interface - baseFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  baseFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/category.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Базовый фильтр\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            field\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        field\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        field:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Поле, по которому фильтр\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Имя фильтра\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные категории\n */\nexport interface categoryData {\n  /** Название категории */\n  name: string;\n  /** Перевод категории в единственном числе */\n  translateOne: string;\n  /** Перевод категории во множественном числе */\n  translateMany: string;\n  /** Массив фильтров категории */\n  filters: filter[];\n}\n\n/**\n * Базовый фильтр\n */\ninterface baseFilter {\n  /** Имя фильтра */\n  name: string;\n  /** Поле, по которому фильтр */\n  field: string;\n}\n\n/**\n * Опция для select-фильтра\n */\nexport interface option {\n  /** Название опции */\n  name: string;\n  /** Значение опции для запроса */\n  queryValue: string;\n}\n\n/**\n * Фильтр типа select\n */\ninterface selectFilter extends baseFilter {\n  /** Тип фильтра */\n  type: 'select';\n  /** Варианты выбора */\n  options: option[];\n}\n\n/**\n * Фильтр типа range\n */\ninterface rangeFilter extends baseFilter {\n  /** Тип фильтра */\n  type: 'range';\n  /** Минимальное значение */\n  minValue: number;\n  /** Максимальное значение */\n  maxValue: number;\n}\n\n/**\n * Тип фильтра: select или range\n */\nexport type filter = rangeFilter | selectFilter;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CategoryService {\n  /** Базовый URL для работы с категориями */\n  private baseServiceUrl = baseUrl + 'category';\n\n  constructor(\n    private httpModule: HttpClient\n  ) { }\n\n  /**\n   * Получение всех категорий\n   * @returns Promise с массивом категорий\n   */\n  GETgetAllCategories() {\n    return firstValueFrom(this.httpModule.get(this.baseServiceUrl)) as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/categoryData.html":{"url":"interfaces/categoryData.html","title":"interface - categoryData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  categoryData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/category.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Данные категории\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            filters\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            translateMany\n                                        \n                                \n                                \n                                        \n                                            translateOne\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        filters\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        filters:         filter[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         filter[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Массив фильтров категории\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Название категории\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        translateMany\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        translateMany:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Перевод категории во множественном числе\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        translateOne\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        translateOne:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Перевод категории в единственном числе\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные категории\n */\nexport interface categoryData {\n  /** Название категории */\n  name: string;\n  /** Перевод категории в единственном числе */\n  translateOne: string;\n  /** Перевод категории во множественном числе */\n  translateMany: string;\n  /** Массив фильтров категории */\n  filters: filter[];\n}\n\n/**\n * Базовый фильтр\n */\ninterface baseFilter {\n  /** Имя фильтра */\n  name: string;\n  /** Поле, по которому фильтр */\n  field: string;\n}\n\n/**\n * Опция для select-фильтра\n */\nexport interface option {\n  /** Название опции */\n  name: string;\n  /** Значение опции для запроса */\n  queryValue: string;\n}\n\n/**\n * Фильтр типа select\n */\ninterface selectFilter extends baseFilter {\n  /** Тип фильтра */\n  type: 'select';\n  /** Варианты выбора */\n  options: option[];\n}\n\n/**\n * Фильтр типа range\n */\ninterface rangeFilter extends baseFilter {\n  /** Тип фильтра */\n  type: 'range';\n  /** Минимальное значение */\n  minValue: number;\n  /** Максимальное значение */\n  maxValue: number;\n}\n\n/**\n * Тип фильтра: select или range\n */\nexport type filter = rangeFilter | selectFilter;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CategoryService {\n  /** Базовый URL для работы с категориями */\n  private baseServiceUrl = baseUrl + 'category';\n\n  constructor(\n    private httpModule: HttpClient\n  ) { }\n\n  /**\n   * Получение всех категорий\n   * @returns Promise с массивом категорий\n   */\n  GETgetAllCategories() {\n    return firstValueFrom(this.httpModule.get(this.baseServiceUrl)) as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/changeAccountDataEmail.html":{"url":"interfaces/changeAccountDataEmail.html","title":"interface - changeAccountDataEmail","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  changeAccountDataEmail\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/account.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Данные для изменения аккаунта с email\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            accountType\n                                        \n                                \n                                \n                                        \n                                            jwt\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accountType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accountType:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                            \n                                \n                                    Тип аккаунта (email)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        jwt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        jwt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    JWT токен\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Пароль пользователя\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { projectInformation, projectServerInformation } from './project.service';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { AccountCookieService } from './account-cookie.service';\nimport { baseUrl } from '.';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные для изменения аккаунта с email\n */\nexport interface changeAccountDataEmail {\n  /** JWT токен */\n  jwt: string;\n  /** Тип аккаунта (email) */\n  accountType: 'email';\n  /** Пароль пользователя */\n  password: string;\n}\n\n/**\n * Полные данные аккаунта пользователя\n */\nexport interface accountFullData {\n  /** URL аватара */\n  avatarUrl: string;\n  /** Никнейм пользователя */\n  nickname: string;\n  /** Email пользователя */\n  email: string;\n  /** Массив проектов пользователя */\n  projects: projectInformation[];\n  /** Массив мебели, связанной с аккаунтом */\n  furnitures: furnitureAccountData[];\n  /** Пароль пользователя (необязательный) */\n  password?: string;\n}\n\n/**\n * Данные для изменения вторичных данных аккаунта\n */\nexport interface changeSecondaryData {\n  /** JWT токен */\n  jwt: string;\n  /** Новый никнейм */\n  nickname: string;\n}\n\n/**\n * Данные по мебели, связанной с аккаунтом\n */\nexport interface furnitureAccountData {\n  /** Идентификатор мебели */\n  _id: string;\n  /** Название мебели */\n  name: string;\n  /** URL превью изображения мебели */\n  previewUrl: string;\n}\n\n/** Тип аккаунта */\nexport type accountType = 'google' | 'email';\n\n/** Тип данных для изменения аккаунта (на данный момент только email) */\nexport type changeAccountData = changeAccountDataEmail;\n\n/**\n * Данные для создания аккаунта с email\n */\ninterface createEmailAccountData {\n  /** Email */\n  email: string;\n  /** Пароль */\n  password: string;\n  /** Никнейм */\n  nickname: string;\n  /** Тип аккаунта (email) */\n  accountType: 'email';\n}\n\n/** Тип данных для создания аккаунта */\nexport type createAccountData = createEmailAccountData;\n\n/**\n * Функция-помощник для проверки, что аккаунт с типом email\n * @param account Объект аккаунта\n * @returns true, если аккаунт с типом email\n */\nexport function isEmailAccount(account: { accountType: accountType }): account is changeAccountDataEmail {\n  return account.accountType === 'email';\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccountService {\n  /** Базовый URL для аккаунт-сервисов */\n  private baseServiceUrl = baseUrl + 'account';\n\n  constructor(\n    private httpModule: HttpClient,\n    private accountCookieService: AccountCookieService\n  ) { }\n\n  /**\n   * Создание нового пользователя\n   * @param createAccountData Основная информация о пользователе (никнейм, email, пароль)\n   * @returns Promise с сообщением об успешном создании пользователя\n   */\n  POSTcreateAccount(createAccountData: createAccountData) {\n    let HTTP_PARAMS = new HttpParams()\n      .set('accountType', createAccountData.accountType)\n      .set('nickname', createAccountData.nickname);\n\n    if (isEmailAccount(createAccountData)) {\n      HTTP_PARAMS = HTTP_PARAMS\n        .set('email', createAccountData.email)\n        .set('password', createAccountData.password);\n    }\n\n    return firstValueFrom(this.httpModule.post(this.baseServiceUrl, HTTP_PARAMS)) as Promise;\n  }\n\n  /**\n   * Удаление JWT токена пользователя\n   * @param jwt JWT токен\n   * @returns Promise с сообщением об успешном удалении токена\n   */\n  DELETEaccountJwt(jwt: string) {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt);\n    return firstValueFrom(this.httpModule.delete(this.baseServiceUrl + '/jwt/delete', { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Обновление вторичных данных аккаунта (например, никнейм)\n   * @param changeData Данные для изменения\n   * @returns Promise с сообщением об успешном обновлении\n   */\n  PUTupdateSecondaryAccountData(changeData: changeSecondaryData) {\n    console.log('changeData', changeData);\n    const HTTP_PARAMS = new HttpParams({\n      fromObject: {\n        nickname: changeData.nickname,\n        jwt: changeData.jwt\n      }\n    });\n    console.log(HTTP_PARAMS.toString());\n    return firstValueFrom(this.httpModule.put(this.baseServiceUrl, null, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Удаление аккаунта пользователя\n   * @param jwt JWT токен\n   * @returns Promise с сообщением об успешном удалении пользователя\n   */\n  DELETEaccount(jwt: string) {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt);\n    return firstValueFrom(this.httpModule.delete(this.baseServiceUrl, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Получение полной информации об аккаунте пользователя\n   * @param jwt JWT токен\n   * @returns Promise с данными аккаунта (включая проекты и мебель)\n   */\n  async GETaccount(jwt: string) {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt);\n    try {\n      let { accountData } = await firstValueFrom(this.httpModule.get(this.baseServiceUrl, { params: HTTP_PARAMS })) as { accountData: accountFullData & { projects: projectServerInformation[] } };\n      accountData.furnitures = accountData.furnitures.map(furnitureData => {\n        return {\n          ...furnitureData,\n          previewUrl: baseUrl + furnitureData.previewUrl\n        };\n      });\n      return { accountData: accountData };\n    } catch (error) {\n      console.error('Error in GETfurnitureCard:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Проверка наличия JWT токена в куках\n   * @returns true, если JWT токен найден, иначе false\n   */\n  checkJwt(): boolean {\n    return this.accountCookieService.getJwt() ? true : false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/changeSecondaryData.html":{"url":"interfaces/changeSecondaryData.html","title":"interface - changeSecondaryData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  changeSecondaryData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/account.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Данные для изменения вторичных данных аккаунта\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            jwt\n                                        \n                                \n                                \n                                        \n                                            nickname\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        jwt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        jwt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    JWT токен\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nickname\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nickname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Новый никнейм\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { projectInformation, projectServerInformation } from './project.service';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { AccountCookieService } from './account-cookie.service';\nimport { baseUrl } from '.';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные для изменения аккаунта с email\n */\nexport interface changeAccountDataEmail {\n  /** JWT токен */\n  jwt: string;\n  /** Тип аккаунта (email) */\n  accountType: 'email';\n  /** Пароль пользователя */\n  password: string;\n}\n\n/**\n * Полные данные аккаунта пользователя\n */\nexport interface accountFullData {\n  /** URL аватара */\n  avatarUrl: string;\n  /** Никнейм пользователя */\n  nickname: string;\n  /** Email пользователя */\n  email: string;\n  /** Массив проектов пользователя */\n  projects: projectInformation[];\n  /** Массив мебели, связанной с аккаунтом */\n  furnitures: furnitureAccountData[];\n  /** Пароль пользователя (необязательный) */\n  password?: string;\n}\n\n/**\n * Данные для изменения вторичных данных аккаунта\n */\nexport interface changeSecondaryData {\n  /** JWT токен */\n  jwt: string;\n  /** Новый никнейм */\n  nickname: string;\n}\n\n/**\n * Данные по мебели, связанной с аккаунтом\n */\nexport interface furnitureAccountData {\n  /** Идентификатор мебели */\n  _id: string;\n  /** Название мебели */\n  name: string;\n  /** URL превью изображения мебели */\n  previewUrl: string;\n}\n\n/** Тип аккаунта */\nexport type accountType = 'google' | 'email';\n\n/** Тип данных для изменения аккаунта (на данный момент только email) */\nexport type changeAccountData = changeAccountDataEmail;\n\n/**\n * Данные для создания аккаунта с email\n */\ninterface createEmailAccountData {\n  /** Email */\n  email: string;\n  /** Пароль */\n  password: string;\n  /** Никнейм */\n  nickname: string;\n  /** Тип аккаунта (email) */\n  accountType: 'email';\n}\n\n/** Тип данных для создания аккаунта */\nexport type createAccountData = createEmailAccountData;\n\n/**\n * Функция-помощник для проверки, что аккаунт с типом email\n * @param account Объект аккаунта\n * @returns true, если аккаунт с типом email\n */\nexport function isEmailAccount(account: { accountType: accountType }): account is changeAccountDataEmail {\n  return account.accountType === 'email';\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccountService {\n  /** Базовый URL для аккаунт-сервисов */\n  private baseServiceUrl = baseUrl + 'account';\n\n  constructor(\n    private httpModule: HttpClient,\n    private accountCookieService: AccountCookieService\n  ) { }\n\n  /**\n   * Создание нового пользователя\n   * @param createAccountData Основная информация о пользователе (никнейм, email, пароль)\n   * @returns Promise с сообщением об успешном создании пользователя\n   */\n  POSTcreateAccount(createAccountData: createAccountData) {\n    let HTTP_PARAMS = new HttpParams()\n      .set('accountType', createAccountData.accountType)\n      .set('nickname', createAccountData.nickname);\n\n    if (isEmailAccount(createAccountData)) {\n      HTTP_PARAMS = HTTP_PARAMS\n        .set('email', createAccountData.email)\n        .set('password', createAccountData.password);\n    }\n\n    return firstValueFrom(this.httpModule.post(this.baseServiceUrl, HTTP_PARAMS)) as Promise;\n  }\n\n  /**\n   * Удаление JWT токена пользователя\n   * @param jwt JWT токен\n   * @returns Promise с сообщением об успешном удалении токена\n   */\n  DELETEaccountJwt(jwt: string) {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt);\n    return firstValueFrom(this.httpModule.delete(this.baseServiceUrl + '/jwt/delete', { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Обновление вторичных данных аккаунта (например, никнейм)\n   * @param changeData Данные для изменения\n   * @returns Promise с сообщением об успешном обновлении\n   */\n  PUTupdateSecondaryAccountData(changeData: changeSecondaryData) {\n    console.log('changeData', changeData);\n    const HTTP_PARAMS = new HttpParams({\n      fromObject: {\n        nickname: changeData.nickname,\n        jwt: changeData.jwt\n      }\n    });\n    console.log(HTTP_PARAMS.toString());\n    return firstValueFrom(this.httpModule.put(this.baseServiceUrl, null, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Удаление аккаунта пользователя\n   * @param jwt JWT токен\n   * @returns Promise с сообщением об успешном удалении пользователя\n   */\n  DELETEaccount(jwt: string) {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt);\n    return firstValueFrom(this.httpModule.delete(this.baseServiceUrl, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Получение полной информации об аккаунте пользователя\n   * @param jwt JWT токен\n   * @returns Promise с данными аккаунта (включая проекты и мебель)\n   */\n  async GETaccount(jwt: string) {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt);\n    try {\n      let { accountData } = await firstValueFrom(this.httpModule.get(this.baseServiceUrl, { params: HTTP_PARAMS })) as { accountData: accountFullData & { projects: projectServerInformation[] } };\n      accountData.furnitures = accountData.furnitures.map(furnitureData => {\n        return {\n          ...furnitureData,\n          previewUrl: baseUrl + furnitureData.previewUrl\n        };\n      });\n      return { accountData: accountData };\n    } catch (error) {\n      console.error('Error in GETfurnitureCard:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Проверка наличия JWT токена в куках\n   * @returns true, если JWT токен найден, иначе false\n   */\n  checkJwt(): boolean {\n    return this.accountCookieService.getJwt() ? true : false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/clientFilters.html":{"url":"interfaces/clientFilters.html","title":"interface - clientFilters","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  clientFilters\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/shop.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс клиентских фильтров, значения которых формируются на основе ответа от сервера.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            colors\n                                        \n                                \n                                \n                                        \n                                            maxCost\n                                        \n                                \n                                \n                                        \n                                            minCost\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        colors\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        colors:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Цвета мебели\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxCost\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        maxCost:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Максимальная стоимость\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        minCost\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        minCost:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Минимальная стоимость\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { firstValueFrom } from 'rxjs';\nimport { modelInterface } from '../components/scene/scene.component';\n\n/**\n * Интерфейс объекта фильтров, отправляемых на сервер.\n*/\nexport interface queryData {\n  /** Любое ключ:значение */\n  [key: string]: optionSelectQueryData | optionRangeQueryData;\n}\n\n/**\n * Фильтр типа \"выбор из списка\".\n */\ninterface optionSelectQueryData {\n  /** Тип фильтра */\n  type: 'select';\n  /** Выбранные значения */\n  value: string[];\n}\n\n/**\n * Фильтр типа \"диапазон значений\".\n*/\ninterface optionRangeQueryData {\n  /** Тип фильтра */\n  type: 'range';\n  /** Минимум в диапазоне */\n  min: number;\n  /** Максимум в диапазоне */\n  max: number;\n}\n\n/**\n * Интерфейс данных о мебели, получаемых из магазина.\n */\nexport interface furnitureShopData {\n  /** Название */\n  name: string;\n  /** Стоимость мебели */\n  cost: number;\n  /** Неполный Url превью (вначало надо вставить baseUrl сервера) */\n  previewUrl: string;\n  /** Id мебели */\n  furnitureCardId: string;\n  /** Массив цветов мебели */\n  colors: string[];\n  /** Габариты мебели */\n  proportions: modelInterface;\n}\n\n/**\n * Интерфейс клиентских фильтров, значения которых формируются на основе ответа от сервера.\n */\nexport interface clientFilters {\n  /** Цвета мебели */\n  colors: string[];\n  /** Минимальная стоимость */\n  minCost: number;\n  /** Максимальная стоимость */\n  maxCost: number;\n}\n\n/**\n * Сервис для получения данных о мебели из магазина, с учетом фильтрации и пагинации.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ShopService {\n  /** Базовый URL сервиса */\n  private baseServiceUrl = baseUrl + 'shop';\n\n  /** Активный AbortController для отмены предыдущих запросов */\n  private abortController: AbortController | null = null;\n\n  constructor(private httpModule: HttpClient) { }\n\n  /**\n   * Выполняет GET-запрос на получение данных по категории мебели.\n   * Поддерживает фильтрацию и стартовую позицию для пагинации.\n   * При повторном вызове отменяет предыдущий запрос.\n   *\n   * @param categoryName - Название категории мебели.\n   * @param startRange - Начальный индекс (offset) выборки.\n   * @param queryData - Объект фильтров (опционально).\n   *\n   * @returns Промис с объектом, содержащим:\n   * - `resultsArray`: массив карточек мебели с обновлёнными URL превью\n   * - `resultsClientFiltersData`: агрегированные данные фильтров для клиента\n   *\n   * @throws {Error} В случае сетевой ошибки или отмены запроса.\n   */\n  async GETgetCategoryData(categoryName: string, startRange: number, queryData?: queryData) {\n    if (this.abortController) {\n      this.abortController.abort();\n    }\n\n    this.abortController = new AbortController();\n\n    try {\n      let requestUrl = `${this.baseServiceUrl}?category=${categoryName}&startRange=${startRange}`;\n\n      if (queryData && Object.keys(queryData).length > 0) {\n        const params = new URLSearchParams();\n        params.append('filters', JSON.stringify(queryData));\n        requestUrl += `&${new URLSearchParams(params).toString()}`;\n      }\n\n      const response = await fetch(\n        requestUrl,\n        { signal: this.abortController.signal }\n      );\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Ошибка: ${response.status} — ${errorText}`);\n      }\n\n      const RESPONSE = await response.json() as { resultsArray: furnitureShopData[] };\n      const RESULTS_ARRAY = RESPONSE.resultsArray;\n\n      const UPDATED_RESULTS = RESULTS_ARRAY.map(furniture => ({\n        ...furniture,\n        previewUrl: baseUrl + furniture.previewUrl\n      }));\n\n      return {\n        resultsArray: UPDATED_RESULTS,\n        resultsClientFiltersData: this.getFindOptionsByResult(UPDATED_RESULTS)\n      };\n\n    } catch (error: any) {\n      if (error.name === 'AbortError') {\n      } else {\n        console.error('Ошибка запроса:', error);\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Формирует объект фильтров на основе полученных данных о мебели.\n   *\n   * @param resultsArray - Массив карточек мебели\n   * @returns Объект клиентских фильтров (цвета, минимальная и максимальная цена)\n   */\n  private getFindOptionsByResult(resultsArray: furnitureShopData[]) {\n    let filtersObject: clientFilters = {\n      colors: [],\n      minCost: Infinity,\n      maxCost: -Infinity\n    };\n\n    resultsArray.forEach(furnitureData => {\n      if (furnitureData.cost  filtersObject.maxCost) filtersObject.maxCost = furnitureData.cost;\n\n      filtersObject.colors.push(...furnitureData.colors);\n    });\n\n    filtersObject.minCost = filtersObject.minCost!== Infinity ? filtersObject.minCost : 0;\n    filtersObject.maxCost = filtersObject.maxCost!== -Infinity ? filtersObject.maxCost : 0;\n\n    filtersObject.colors = [...new Set(filtersObject.colors)];\n    return filtersObject;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/clientProportions.html":{"url":"interfaces/clientProportions.html","title":"interface - clientProportions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  clientProportions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/create-furniture-page/create-furniture-page.component.ts\n        \n\n\n            \n                Description\n            \n            \n                Данные для формы габаритов мебели на клиенте.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            height\n                                        \n                                \n                                \n                                        \n                                            length\n                                        \n                                \n                                \n                                        \n                                            width\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        height:     number | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        length\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        length:     number | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        width:     number | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ChangeDetectorRef, Component, DoCheck, ElementRef, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { NavigationPanelComponent } from '../navigation-panel/navigation-panel.component';\nimport { CreateFurnitureComponent } from '../create-furnitre/create-furniture.component';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AccountCookieService } from '../../services/account-cookie.service';\nimport { FurnitureCardControlService, furnitureFromServerData } from '../../services/furniture-card-control.service';\nimport { ServerImageControlService } from '../../services/server-image-control.service';\nimport { NgIf } from '@angular/common';\nimport { FurnitureModelControlService } from '../../services/furniture-model-control.service';\nimport { NotificationService } from '../../services/notification.service';\nimport { imageSliderClientData } from '../image-slider/image-slider.component';\nimport { Subscription } from 'rxjs';\n\n/** Данные для формы габаритов мебели на клиенте.*/\ninterface clientProportions {\n  width: number | null;\n  height: number | null;\n  length: number | null;\n}\n\n/**\n * Компонент страницы создания и редактирования мебели.\n * Отвечает за загрузку данных, валидацию, сохранение и удаление мебели.\n */\n@Component({\n  selector: 'app-create-furniture-page',\n  standalone: true,\n  imports: [NavigationPanelComponent, CreateFurnitureComponent, NgIf],\n  templateUrl: './create-furniture-page.component.html',\n  styleUrl: './create-furniture-page.component.scss'\n})\nexport class CreateFurniturePageComponent implements OnInit, OnDestroy {\n\n  /** Подписка на изменения маршрута в приложении.*/\n  private routeSub!: Subscription;\n  /** Id страницы.*/\n  protected idPage!: string;\n  \n  @ViewChild(CreateFurnitureComponent)\n  /** Переменная для взаимодействия с методами дочернего компонента.*/\n  private createFurnitureComponent!: CreateFurnitureComponent;\n  \n  @ViewChild(CreateFurnitureComponent, { read: ElementRef })\n  /** Переменная для взаимодействия с html дочернего компонента.*/\n  private createFurnitureComponentRef!: ElementRef;\n\n  /**\n   * Данные мебели с дополнительным полем пропорций клиента.\n   */\n  protected furnitureData: furnitureFromServerData & { proportions: clientProportions } = {\n    name: '',\n    description: '',\n    colors: [],\n    shops: [],\n    additionalData: {},\n    proportions: {\n      width: null,\n      height: null,\n      length: null\n    }\n  };\n\n  constructor(\n    private route: ActivatedRoute,\n    private cookieService: AccountCookieService,\n    private furnitureCardService: FurnitureCardControlService,\n    private serverImageControl: ServerImageControlService,\n    private router: Router,\n    private furnitureModelService: FurnitureModelControlService,\n    private notification: NotificationService\n  ) { }\n\n  /**\n   * Инициализация компонента:\n   * - проверяет JWT,\n   * - подписывается на изменения параметров маршрута,\n   * - загружает мебель, если id не \"new\".\n   */\n  ngOnInit(): void {\n    const JWT = this.cookieService.getJwt();\n    if (!JWT) {\n      this.router.navigateByUrl('/login');\n      return;\n    }\n    this.routeSub = this.route.paramMap.subscribe(params => {\n      this.idPage = params.get('id') ?? 'new';\n      this.clearFurnitureCard();\n      if (this.idPage !== 'new') this.pageInit(JWT);\n    });\n  }\n\n  /**\n   * Отписка от подписки при уничтожении компонента.\n   */\n  ngOnDestroy() {\n    this.routeSub.unsubscribe();\n  }\n\n  /**\n   * Загружает данные мебели по id и JWT.\n   * Если автор не совпадает, происходит перенаправление на создание новой мебели.\n   * @param jwt - JWT токен пользователя.\n   */\n  private async pageInit(jwt: string) {\n    try {\n      const RESPONSE = await this.furnitureCardService.GETfurnitureCard(this.idPage, jwt);\n      if (RESPONSE.authorMatched === false) {\n        this.router.navigateByUrl('/create/new');\n        return;\n      }\n      this.furnitureData = RESPONSE.furnitureCard;\n      this.createFurnitureComponent.currentColorId = 0;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  /**\n   * Преобразует массив URL строк изображений в массив Blob объектов.\n   * @param imagesArray - массив URL строк изображений.\n   * @returns Promise с массивом Blob объектов.\n   */\n  private async transformUrlArrayToBlob(imagesArray: string[]): Promise {\n    const IMAGES_BLOB_ARRAY: Blob[] = await Promise.all(\n      imagesArray.map(async (blobUrl): Promise => {\n        const RESPONSE = await fetch(blobUrl.toString());\n        const BLOB = await RESPONSE.blob();\n        return BLOB;\n      })\n    );\n    return IMAGES_BLOB_ARRAY;\n  }\n\n  /**\n   * Удаляет мебель, 3D модель и связанные изображения с сервера.\n   */\n  protected async deleteFurnitureCard() {\n    const JWT = this.cookieService.getJwt();\n    if (!JWT) return;\n    try {\n      await this.furnitureModelService.DELETEfurnitureModel(JWT, this.idPage);\n      await this.serverImageControl.DELETEproject(JWT, this.idPage);\n      await this.furnitureCardService.DELETEfurnitureCard(JWT, this.idPage);\n      this.router.navigateByUrl('/account');\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  /**\n   * Создаёт новую мебель:\n   * - проверяет валидность,\n   * - создаёт карточку,\n   * - загружает изображения по цветам,\n   * - загружает 3D модель,\n   * - показывает уведомление и перенаправляет пользователя.\n   */\n  protected async createFurnitureCard() {\n    const JWT = this.cookieService.getJwt();\n    if (!this.checkValid('create') || !JWT) return;\n    try {\n      const FURNITURE_DATA = this.createFurnitureComponent.furnitureData;\n      const FURNITURE_ID = (await this.furnitureCardService.POSTcreateFurnitureCard(FURNITURE_DATA, JWT)).furnitureData._id;\n\n      // Загрузка изображений по цветам\n      FURNITURE_DATA.colors.forEach(async (colorData) => {\n        const imagesBlobArray = await this.transformUrlArrayToBlob(colorData.imagesData.images);\n        const imagesData: imageSliderClientData = {\n          images: imagesBlobArray,\n          idMainImage: colorData.imagesData.idMainImage\n        };\n        await this.serverImageControl.POSTuploadProjectImages(colorData.color, imagesData, JWT, FURNITURE_ID);\n      });\n\n      // Загрузка 3D модели\n      const FURNITURE_MODEL_BLOB = this.createFurnitureComponent.furnitureModelInput.files![0];\n      await this.furnitureModelService.POSTuploadFurnitureModel(FURNITURE_MODEL_BLOB, JWT, FURNITURE_ID);\n\n      this.notification.setSuccess('Мебель добавлена', 5000);\n      this.router.navigateByUrl('/account');\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  /**\n   * Обновляет данные мебели:\n   * - проверяет валидность,\n   * - обновляет карточку мебели,\n   * - обновляет изображения,\n   * - при необходимости загружает новую 3D модель,\n   * - показывает уведомление об успешном обновлении.\n   */\n  protected async updateFurnitureCard() {\n    const JWT = this.cookieService.getJwt();\n    if (!this.checkValid('update') || !JWT) return;\n    try {\n      const FURNITURE_DATA = this.createFurnitureComponent.furnitureData;\n      await this.furnitureCardService.PUTupdateFurnitureCard(FURNITURE_DATA, this.idPage, JWT);\n\n      // Загрузка изображений по цветам, если есть\n      FURNITURE_DATA.colors.forEach(async (colorData) => {\n        if (colorData.imagesData.images.length === 0) return;\n        const IMAGES_BLOB_ARRAY = await this.transformUrlArrayToBlob(colorData.imagesData.images);\n        const IMAGES_DATA: imageSliderClientData = {\n          images: IMAGES_BLOB_ARRAY,\n          idMainImage: colorData.imagesData.idMainImage\n        };\n        await this.serverImageControl.POSTuploadProjectImages(colorData.color, IMAGES_DATA, JWT, this.idPage);\n      });\n\n      // Загрузка 3D модели, если файл выбран\n      const FURNITURE_MODEL_BLOB = this.createFurnitureComponent.furnitureModelInput.files!;\n      if (FURNITURE_MODEL_BLOB[0]) {\n        await this.furnitureModelService.POSTuploadFurnitureModel(FURNITURE_MODEL_BLOB[0], JWT, this.idPage);\n      }\n\n      this.notification.setSuccess('Мебель обновлена', 5000);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  /**\n   * Проверяет валидность данных мебели.\n   * @param typeRequest - тип операции ('create' или 'update').\n   * @param action - если true, то при ошибке вызываются уведомления и открываются необходимые модули.\n   * @returns true, если данные валидны, иначе false.\n   */\n  protected checkValid(typeRequest: 'update' | 'create'): boolean {\n    const { colors, shops, proportions, name } = this.furnitureData;\n    const FURNITURE_MODEL_BLOB = this.createFurnitureComponent.furnitureModelInput.files![0];\n\n    if (colors.length == 0) {\n      this.createFurnitureComponent.openColorModule();\n      return false;\n    }\n    if (name.length == 0) {\n      const nameInput = this.createFurnitureComponentRef.nativeElement.querySelector(\n        '.furnitureTitle'\n      ) as HTMLInputElement;\n\n      if (nameInput) {\n        nameInput.focus();\n      }\n      this.notification.setError('Заполните название мебели', 5000);\n      return false;\n    }\n    if (!proportions.height || !proportions.width || !proportions.length) {\n      this.createFurnitureComponent.openAdditional();\n      this.notification.setError('Заполните параметры', 5000);\n      return false;\n    }\n    if (!FURNITURE_MODEL_BLOB && typeRequest === 'create') {\n      const uploadInput = this.createFurnitureComponentRef.nativeElement.querySelector(\n        '.furnitureModelInput'\n      ) as HTMLInputElement;\n\n      if (uploadInput) {\n        uploadInput.click();\n      }\n      this.notification.setError('Загрузите 3D модель', 5000);\n      return false;\n    }\n    if (shops.length == 0) {\n      this.createFurnitureComponent.openShopsModule();\n      this.notification.setError('Добавьте магазины', 5000);\n      return false;\n    }\n    for (let colorData of colors) {\n      if (colorData.imagesData.images.length == 0 && typeRequest === 'create') {\n        const uploadInput = this.createFurnitureComponentRef.nativeElement.querySelector(\n          '.uploadImagesInput'\n        ) as HTMLInputElement;\n\n        if (uploadInput) {\n          uploadInput.click();\n        }\n        this.notification.setError('Загрузите изображения', 5000);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Очищает данные мебели в компоненте.\n   */\n  protected clearFurnitureCard() {\n    if (this.createFurnitureComponent) this.createFurnitureComponent.currentColorId = undefined;\n    this.furnitureData = {\n      name: '',\n      description: '',\n      colors: [],\n      shops: [],\n      additionalData: {},\n      proportions: {\n        width: null,\n        height: null,\n        length: null\n      }\n    };\n  }\n\n  /**\n   * Возвращает цвет, который планируется удалить (для расчётов и логирования).\n   * @returns цвет (строка) текущего выделенного цвета или undefined.\n   */\n  protected deleteColorCalculate(): string | undefined {\n    if (!this.createFurnitureComponent || this.createFurnitureComponent.currentColorId === undefined) return undefined;\n    return this.createFurnitureComponent.furnitureData.colors[this.createFurnitureComponent.currentColorId].color;\n  }\n\n  /**\n   * Удаляет текущий цвет, если цветов больше одного.\n   * Если цветов один — показывает ошибку.\n   */\n  protected deleteColor() {\n    if (this.createFurnitureComponent.furnitureData.colors.length \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/colorClientData.html":{"url":"interfaces/colorClientData.html","title":"interface - colorClientData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  colorClientData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/furniture-card-control.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Данные цвета на клиенте, включая слайдер изображений\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            color\n                                        \n                                \n                                \n                                        \n                                            imagesData\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        color:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Цвет мебели\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        imagesData\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        imagesData:         imageSliderClientData\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         imageSliderClientData\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Данные для слайдера изображений\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { imageSliderClientData, imageSliderFromServerData } from '../components/image-slider/image-slider.component';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные магазина с ценой и URL\n * @interface shopData\n */\nexport interface shopData {\n  /** Цена мебели */\n  cost: number;\n  /** URL магазина или товара */\n  url: string;\n}\n\n/**\n * Пропорции мебели (ширина, длина, высота)\n * @interface furnitureProportions\n */\nexport interface furnitureProportions {\n  /** Ширина мебели (или null, если не задана) */\n  width: number | null;\n  /** Длина мебели (или null, если не задана) */\n  length: number | null;\n  /** Высота мебели (или null, если не задана) */\n  height: number | null;\n}\n\n/**\n * Данные цвета на клиенте, включая слайдер изображений\n * @interface colorClientData\n */\nexport interface colorClientData {\n  /** Цвет мебели */\n  color: string;\n  /** Данные для слайдера изображений */\n  imagesData: imageSliderClientData;\n}\n\n/**\n * Данные цвета с сервера, включая слайдер изображений\n * @interface colorFromServerData\n */\nexport interface colorFromServerData {\n  /** Цвет мебели */\n  color: string;\n  /** Данные для слайдера изображений */\n  imagesData: imageSliderFromServerData;\n}\n\n/**\n * Дополнительные данные мебели с динамическими ключами\n * @interface additionalData\n */\nexport interface additionalData {\n  /** Категория мебели (опционально) */\n  category?: string;\n  /** Другие динамические свойства */\n  [key: string]: string | undefined;\n}\n\n/**\n * Базовые данные мебели, общие для клиента и сервера\n * @interface furnitureBaseData\n */\ninterface furnitureBaseData {\n  /** Название мебели */\n  name: string;\n  /** Описание мебели */\n  description: string;\n  /** Пропорции мебели */\n  proportions: furnitureProportions;\n  /** Список магазинов с ценами и URL */\n  shops: shopData[];\n  /** Дополнительные данные */\n  additionalData: additionalData;\n}\n\n/**\n * Данные мебели на клиенте с цветами\n * @interface furnitureClientData\n * @extends furnitureBaseData\n */\nexport interface furnitureClientData extends furnitureBaseData {\n  /** Список цветов с данными для клиента */\n  colors: colorClientData[];\n}\n\n/**\n * Данные мебели с сервера с цветами\n * @interface furnitureFromServerData\n * @extends furnitureBaseData\n */\nexport interface furnitureFromServerData extends furnitureBaseData {\n  /** Список цветов с данными с сервера */\n  colors: colorFromServerData[];\n}\n\n/**\n * Сервис для управления карточками мебели\n * @class FurnitureCardControlService\n * @injectable\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class FurnitureCardControlService {\n\n  /** Базовый URL для запросов к API мебели */\n  private baseServiceUrl = baseUrl + 'furniture/card';\n\n  /**\n   * Конструктор сервиса\n   * @param httpModule HTTP клиент для запросов\n   */\n  constructor(private httpModule: HttpClient) { }\n\n  /**\n   * Получение карточки мебели по ID и опциональному JWT токену\n   * @param furnitureCardId - ID карточки мебели\n   * @param [jwt] - JWT токен пользователя (опционально)\n   * @returns Promise с объектом, содержащим данные карточки и флаг совпадения автора\n   * @throws Ошибка при некорректной структуре ответа или при ошибках запроса\n   */\n  async GETfurnitureCard(\n    furnitureCardId: string,\n    jwt?: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams().set('furnitureCardId', furnitureCardId);\n\n    if (jwt !== undefined) {\n      HTTP_PARAMS = HTTP_PARAMS.set('jwt', jwt);\n    }\n\n    try {\n      const response = await firstValueFrom(\n        this.httpModule.get(this.baseServiceUrl, { params: HTTP_PARAMS })\n      ) as {\n        furnitureCard: furnitureFromServerData;\n        authorMatched: boolean;\n      };\n\n      if (!response?.furnitureCard) {\n        throw new Error('Invalid response structure: furnitureCard missing');\n      }\n\n      // Добавляем полный URL к изображениям\n      const transformedFurnitureCard = {\n        ...response.furnitureCard,\n        colors: response.furnitureCard.colors.map(colorData => ({\n          color: colorData.color,\n          imagesData: {\n            idMainImage: colorData.imagesData.idMainImage,\n            images: colorData.imagesData.images.map(url => baseUrl + url)\n          }\n        }))\n      };\n\n      return {\n        furnitureCard: transformedFurnitureCard,\n        authorMatched: response.authorMatched\n      };\n\n    } catch (error) {\n      console.error('Error in GETfurnitureCard:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Создание новой карточки мебели\n   * @param furnitureData - Данные новой карточки мебели\n   * @param jwt - JWT токен пользователя\n   * @returns Promise с данными созданной карточки, включая её ID\n   */\n  POSTcreateFurnitureCard(\n    furnitureData: furnitureFromServerData,\n    jwt: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams().set('jwt', jwt);\n    return firstValueFrom(\n      this.httpModule.post(this.baseServiceUrl, furnitureData, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n\n  /**\n   * Обновление существующей карточки мебели\n   * @param furnitureCardUpdateData - Обновленные данные карточки мебели\n   * @param furnitureCardId - ID карточки мебели для обновления\n   * @param jwt - JWT токен пользователя\n   * @returns Promise с сообщением результата обновления\n   */\n  PUTupdateFurnitureCard(\n    furnitureCardUpdateData: furnitureFromServerData,\n    furnitureCardId: string,\n    jwt: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId);\n    return firstValueFrom(\n      this.httpModule.put(this.baseServiceUrl, furnitureCardUpdateData, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n\n  /**\n   * Удаление карточки мебели по ID и JWT токену\n   * @param jwt - JWT токен пользователя\n   * @param furnitureCardId - ID карточки мебели для удаления\n   * @returns Promise с сообщением результата удаления\n   */\n  DELETEfurnitureCard(jwt: string, furnitureCardId: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId);\n    return firstValueFrom(\n      this.httpModule.delete(this.baseServiceUrl, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/colorFromServerData.html":{"url":"interfaces/colorFromServerData.html","title":"interface - colorFromServerData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  colorFromServerData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/furniture-card-control.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Данные цвета с сервера, включая слайдер изображений\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            color\n                                        \n                                \n                                \n                                        \n                                            imagesData\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        color:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Цвет мебели\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        imagesData\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        imagesData:         imageSliderFromServerData\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         imageSliderFromServerData\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Данные для слайдера изображений\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { imageSliderClientData, imageSliderFromServerData } from '../components/image-slider/image-slider.component';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные магазина с ценой и URL\n * @interface shopData\n */\nexport interface shopData {\n  /** Цена мебели */\n  cost: number;\n  /** URL магазина или товара */\n  url: string;\n}\n\n/**\n * Пропорции мебели (ширина, длина, высота)\n * @interface furnitureProportions\n */\nexport interface furnitureProportions {\n  /** Ширина мебели (или null, если не задана) */\n  width: number | null;\n  /** Длина мебели (или null, если не задана) */\n  length: number | null;\n  /** Высота мебели (или null, если не задана) */\n  height: number | null;\n}\n\n/**\n * Данные цвета на клиенте, включая слайдер изображений\n * @interface colorClientData\n */\nexport interface colorClientData {\n  /** Цвет мебели */\n  color: string;\n  /** Данные для слайдера изображений */\n  imagesData: imageSliderClientData;\n}\n\n/**\n * Данные цвета с сервера, включая слайдер изображений\n * @interface colorFromServerData\n */\nexport interface colorFromServerData {\n  /** Цвет мебели */\n  color: string;\n  /** Данные для слайдера изображений */\n  imagesData: imageSliderFromServerData;\n}\n\n/**\n * Дополнительные данные мебели с динамическими ключами\n * @interface additionalData\n */\nexport interface additionalData {\n  /** Категория мебели (опционально) */\n  category?: string;\n  /** Другие динамические свойства */\n  [key: string]: string | undefined;\n}\n\n/**\n * Базовые данные мебели, общие для клиента и сервера\n * @interface furnitureBaseData\n */\ninterface furnitureBaseData {\n  /** Название мебели */\n  name: string;\n  /** Описание мебели */\n  description: string;\n  /** Пропорции мебели */\n  proportions: furnitureProportions;\n  /** Список магазинов с ценами и URL */\n  shops: shopData[];\n  /** Дополнительные данные */\n  additionalData: additionalData;\n}\n\n/**\n * Данные мебели на клиенте с цветами\n * @interface furnitureClientData\n * @extends furnitureBaseData\n */\nexport interface furnitureClientData extends furnitureBaseData {\n  /** Список цветов с данными для клиента */\n  colors: colorClientData[];\n}\n\n/**\n * Данные мебели с сервера с цветами\n * @interface furnitureFromServerData\n * @extends furnitureBaseData\n */\nexport interface furnitureFromServerData extends furnitureBaseData {\n  /** Список цветов с данными с сервера */\n  colors: colorFromServerData[];\n}\n\n/**\n * Сервис для управления карточками мебели\n * @class FurnitureCardControlService\n * @injectable\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class FurnitureCardControlService {\n\n  /** Базовый URL для запросов к API мебели */\n  private baseServiceUrl = baseUrl + 'furniture/card';\n\n  /**\n   * Конструктор сервиса\n   * @param httpModule HTTP клиент для запросов\n   */\n  constructor(private httpModule: HttpClient) { }\n\n  /**\n   * Получение карточки мебели по ID и опциональному JWT токену\n   * @param furnitureCardId - ID карточки мебели\n   * @param [jwt] - JWT токен пользователя (опционально)\n   * @returns Promise с объектом, содержащим данные карточки и флаг совпадения автора\n   * @throws Ошибка при некорректной структуре ответа или при ошибках запроса\n   */\n  async GETfurnitureCard(\n    furnitureCardId: string,\n    jwt?: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams().set('furnitureCardId', furnitureCardId);\n\n    if (jwt !== undefined) {\n      HTTP_PARAMS = HTTP_PARAMS.set('jwt', jwt);\n    }\n\n    try {\n      const response = await firstValueFrom(\n        this.httpModule.get(this.baseServiceUrl, { params: HTTP_PARAMS })\n      ) as {\n        furnitureCard: furnitureFromServerData;\n        authorMatched: boolean;\n      };\n\n      if (!response?.furnitureCard) {\n        throw new Error('Invalid response structure: furnitureCard missing');\n      }\n\n      // Добавляем полный URL к изображениям\n      const transformedFurnitureCard = {\n        ...response.furnitureCard,\n        colors: response.furnitureCard.colors.map(colorData => ({\n          color: colorData.color,\n          imagesData: {\n            idMainImage: colorData.imagesData.idMainImage,\n            images: colorData.imagesData.images.map(url => baseUrl + url)\n          }\n        }))\n      };\n\n      return {\n        furnitureCard: transformedFurnitureCard,\n        authorMatched: response.authorMatched\n      };\n\n    } catch (error) {\n      console.error('Error in GETfurnitureCard:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Создание новой карточки мебели\n   * @param furnitureData - Данные новой карточки мебели\n   * @param jwt - JWT токен пользователя\n   * @returns Promise с данными созданной карточки, включая её ID\n   */\n  POSTcreateFurnitureCard(\n    furnitureData: furnitureFromServerData,\n    jwt: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams().set('jwt', jwt);\n    return firstValueFrom(\n      this.httpModule.post(this.baseServiceUrl, furnitureData, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n\n  /**\n   * Обновление существующей карточки мебели\n   * @param furnitureCardUpdateData - Обновленные данные карточки мебели\n   * @param furnitureCardId - ID карточки мебели для обновления\n   * @param jwt - JWT токен пользователя\n   * @returns Promise с сообщением результата обновления\n   */\n  PUTupdateFurnitureCard(\n    furnitureCardUpdateData: furnitureFromServerData,\n    furnitureCardId: string,\n    jwt: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId);\n    return firstValueFrom(\n      this.httpModule.put(this.baseServiceUrl, furnitureCardUpdateData, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n\n  /**\n   * Удаление карточки мебели по ID и JWT токену\n   * @param jwt - JWT токен пользователя\n   * @param furnitureCardId - ID карточки мебели для удаления\n   * @returns Promise с сообщением результата удаления\n   */\n  DELETEfurnitureCard(jwt: string, furnitureCardId: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId);\n    return firstValueFrom(\n      this.httpModule.delete(this.baseServiceUrl, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.component.ts\n            \n            component\n            AppComponent\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/app.config.server.ts\n            \n            variable\n            config\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app.config.server.ts\n            \n            variable\n            serverConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app.config.ts\n            \n            variable\n            appConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/account-page/account-page.component.ts\n            \n            component\n            AccountPageComponent\n            \n                94 %\n                (16/17)\n            \n        \n        \n            \n                \n                src/components/account-page/account-page.component.ts\n            \n            interface\n            editForm\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/components/create-furnitre/create-furniture.component.ts\n            \n            component\n            CreateFurnitureComponent\n            \n                97 %\n                (36/37)\n            \n        \n        \n            \n                \n                src/components/create-furniture-page/create-furniture-page.component.ts\n            \n            component\n            CreateFurniturePageComponent\n            \n                84 %\n                (16/19)\n            \n        \n        \n            \n                \n                src/components/create-furniture-page/create-furniture-page.component.ts\n            \n            interface\n            clientProportions\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/components/finder/finder.component.ts\n            \n            component\n            FinderComponent\n            \n                93 %\n                (15/16)\n            \n        \n        \n            \n                \n                src/components/finder/finder.component.ts\n            \n            interface\n            foundFurniture\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/components/image-slider/image-slider.component.ts\n            \n            component\n            ImageSliderComponent\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/components/image-slider/image-slider.component.ts\n            \n            interface\n            imageSliderClientData\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/components/image-slider/image-slider.component.ts\n            \n            interface\n            imageSliderFromServerData\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/components/login-page/login-page.component.ts\n            \n            component\n            LoginPageComponent\n            \n                96 %\n                (25/26)\n            \n        \n        \n            \n                \n                src/components/main-page/main-page.component.ts\n            \n            component\n            MainPageComponent\n            \n                92 %\n                (13/14)\n            \n        \n        \n            \n                \n                src/components/navigation-panel/navigation-panel.component.ts\n            \n            component\n            NavigationPanelComponent\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/components/notification/notification.component.ts\n            \n            component\n            NotificationComponent\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/components/plan-house-page/plan-house-page.component.ts\n            \n            component\n            PlanHousePageComponent\n            \n                91 %\n                (21/23)\n            \n        \n        \n            \n                \n                src/components/plan-house/plan-house.component.ts\n            \n            component\n            PlanHouseComponent\n            \n                43 %\n                (32/74)\n            \n        \n        \n            \n                \n                src/components/plan-house/plan-house.component.ts\n            \n            interface\n            roomSpanSettings\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                        src/components/scene/loaders/index.ts\n            \n            function\n            loadModel\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/components/scene/loaders/loaders/fbx.loader.ts\n            \n            function\n            loadFBXModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/components/scene/loaders/loaders/gltf-glb.loader.ts\n            \n            function\n            loadGLTFModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/components/scene/loaders/loaders/obj.loader.ts\n            \n            function\n            loadOBJModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/components/scene/scene.component.ts\n            \n            component\n            SceneComponent\n            \n                79 %\n                (35/44)\n            \n        \n        \n            \n                \n                src/components/scene/scene.component.ts\n            \n            interface\n            modelInterface\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/components/scene/scene.component.ts\n            \n            interface\n            objectLoadInterface\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/components/scene/scene.component.ts\n            \n            interface\n            objectSceneInterface\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/components/scene/scene.component.ts\n            \n            interface\n            roomData\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/components/shop-page/shop-page.component.ts\n            \n            component\n            ShopPageComponent\n            \n                95 %\n                (38/40)\n            \n        \n        \n            \n                \n                src/components/view-furniture/view-furniture.component.ts\n            \n            component\n            ViewFurnitureComponent\n            \n                44 %\n                (4/9)\n            \n        \n        \n            \n                \n                src/directives/auto-height.directive.ts\n            \n            directive\n            AutoHeightDirective\n            \n                66 %\n                (4/6)\n            \n        \n        \n            \n                \n                src/interceptors/http-error.interceptor.ts\n            \n            interceptor\n            HttpErrorInterceptor\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                        src/main.server.ts\n            \n            variable\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/pipes/cost-format.pipe.ts\n            \n            pipe\n            CostFormatPipe\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/services/account-cookie.service.ts\n            \n            injectable\n            AccountCookieService\n            \n                81 %\n                (9/11)\n            \n        \n        \n            \n                \n                src/services/account.service.ts\n            \n            injectable\n            AccountService\n            \n                77 %\n                (7/9)\n            \n        \n        \n            \n                \n                src/services/account.service.ts\n            \n            interface\n            accountFullData\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/services/account.service.ts\n            \n            interface\n            changeAccountDataEmail\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/services/account.service.ts\n            \n            interface\n            changeSecondaryData\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/services/account.service.ts\n            \n            interface\n            createEmailAccountData\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/services/account.service.ts\n            \n            interface\n            furnitureAccountData\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                        src/services/account.service.ts\n            \n            function\n            isEmailAccount\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/services/account.service.ts\n            \n            type alias\n            accountType\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/services/account.service.ts\n            \n            type alias\n            changeAccountData\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/services/account.service.ts\n            \n            type alias\n            createAccountData\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/services/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                71 %\n                (5/7)\n            \n        \n        \n            \n                \n                src/services/auth.service.ts\n            \n            interface\n            emailAuthData\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/services/auth.service.ts\n            \n            interface\n            googleAuthData\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                        src/services/auth.service.ts\n            \n            type alias\n            authData\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/services/category.service.ts\n            \n            injectable\n            CategoryService\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                src/services/category.service.ts\n            \n            interface\n            baseFilter\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/services/category.service.ts\n            \n            interface\n            categoryData\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/services/category.service.ts\n            \n            interface\n            option\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/services/category.service.ts\n            \n            interface\n            rangeFilter\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/services/category.service.ts\n            \n            interface\n            selectFilter\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                        src/services/category.service.ts\n            \n            type alias\n            filter\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/services/client-image-control.service.ts\n            \n            injectable\n            ClientImageControlService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/services/finder.service.ts\n            \n            injectable\n            FinderService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/services/furniture-card-control.service.ts\n            \n            injectable\n            FurnitureCardControlService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/services/furniture-card-control.service.ts\n            \n            interface\n            additionalData\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/services/furniture-card-control.service.ts\n            \n            interface\n            colorClientData\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/services/furniture-card-control.service.ts\n            \n            interface\n            colorFromServerData\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/services/furniture-card-control.service.ts\n            \n            interface\n            furnitureBaseData\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/services/furniture-card-control.service.ts\n            \n            interface\n            furnitureClientData\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/services/furniture-card-control.service.ts\n            \n            interface\n            furnitureFromServerData\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/services/furniture-card-control.service.ts\n            \n            interface\n            furnitureProportions\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/services/furniture-card-control.service.ts\n            \n            interface\n            shopData\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/services/furniture-model-control.service.ts\n            \n            injectable\n            FurnitureModelControlService\n            \n                66 %\n                (4/6)\n            \n        \n        \n            \n                \n                        src/services/index.ts\n            \n            variable\n            baseClientUrl\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/services/index.ts\n            \n            variable\n            baseUrl\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/services/notification.service.ts\n            \n            injectable\n            NotificationService\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/services/project.service.ts\n            \n            injectable\n            ProjectService\n            \n                87 %\n                (7/8)\n            \n        \n        \n            \n                \n                src/services/project.service.ts\n            \n            interface\n            projectInformation\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/services/project.service.ts\n            \n            interface\n            projectServerInformation\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/services/project.service.ts\n            \n            interface\n            roomData\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/services/report.service.ts\n            \n            injectable\n            ReportService\n            \n                87 %\n                (7/8)\n            \n        \n        \n            \n                \n                src/services/report.service.ts\n            \n            interface\n            reportResponse\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/services/server-image-control.service.ts\n            \n            injectable\n            ServerImageControlService\n            \n                70 %\n                (7/10)\n            \n        \n        \n            \n                \n                src/services/shop.service.ts\n            \n            injectable\n            ShopService\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/services/shop.service.ts\n            \n            interface\n            clientFilters\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/services/shop.service.ts\n            \n            interface\n            furnitureShopData\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/services/shop.service.ts\n            \n            interface\n            optionRangeQueryData\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/services/shop.service.ts\n            \n            interface\n            optionSelectQueryData\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/services/shop.service.ts\n            \n            interface\n            queryData\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/usable/reusable-functions.used.ts\n            \n            function\n            checkDesktop\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/createEmailAccountData.html":{"url":"interfaces/createEmailAccountData.html","title":"interface - createEmailAccountData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  createEmailAccountData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/account.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Данные для создания аккаунта с email\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            accountType\n                                        \n                                \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            nickname\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accountType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accountType:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                            \n                                \n                                    Тип аккаунта (email)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Email\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nickname\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nickname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Никнейм\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Пароль\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { projectInformation, projectServerInformation } from './project.service';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { AccountCookieService } from './account-cookie.service';\nimport { baseUrl } from '.';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные для изменения аккаунта с email\n */\nexport interface changeAccountDataEmail {\n  /** JWT токен */\n  jwt: string;\n  /** Тип аккаунта (email) */\n  accountType: 'email';\n  /** Пароль пользователя */\n  password: string;\n}\n\n/**\n * Полные данные аккаунта пользователя\n */\nexport interface accountFullData {\n  /** URL аватара */\n  avatarUrl: string;\n  /** Никнейм пользователя */\n  nickname: string;\n  /** Email пользователя */\n  email: string;\n  /** Массив проектов пользователя */\n  projects: projectInformation[];\n  /** Массив мебели, связанной с аккаунтом */\n  furnitures: furnitureAccountData[];\n  /** Пароль пользователя (необязательный) */\n  password?: string;\n}\n\n/**\n * Данные для изменения вторичных данных аккаунта\n */\nexport interface changeSecondaryData {\n  /** JWT токен */\n  jwt: string;\n  /** Новый никнейм */\n  nickname: string;\n}\n\n/**\n * Данные по мебели, связанной с аккаунтом\n */\nexport interface furnitureAccountData {\n  /** Идентификатор мебели */\n  _id: string;\n  /** Название мебели */\n  name: string;\n  /** URL превью изображения мебели */\n  previewUrl: string;\n}\n\n/** Тип аккаунта */\nexport type accountType = 'google' | 'email';\n\n/** Тип данных для изменения аккаунта (на данный момент только email) */\nexport type changeAccountData = changeAccountDataEmail;\n\n/**\n * Данные для создания аккаунта с email\n */\ninterface createEmailAccountData {\n  /** Email */\n  email: string;\n  /** Пароль */\n  password: string;\n  /** Никнейм */\n  nickname: string;\n  /** Тип аккаунта (email) */\n  accountType: 'email';\n}\n\n/** Тип данных для создания аккаунта */\nexport type createAccountData = createEmailAccountData;\n\n/**\n * Функция-помощник для проверки, что аккаунт с типом email\n * @param account Объект аккаунта\n * @returns true, если аккаунт с типом email\n */\nexport function isEmailAccount(account: { accountType: accountType }): account is changeAccountDataEmail {\n  return account.accountType === 'email';\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccountService {\n  /** Базовый URL для аккаунт-сервисов */\n  private baseServiceUrl = baseUrl + 'account';\n\n  constructor(\n    private httpModule: HttpClient,\n    private accountCookieService: AccountCookieService\n  ) { }\n\n  /**\n   * Создание нового пользователя\n   * @param createAccountData Основная информация о пользователе (никнейм, email, пароль)\n   * @returns Promise с сообщением об успешном создании пользователя\n   */\n  POSTcreateAccount(createAccountData: createAccountData) {\n    let HTTP_PARAMS = new HttpParams()\n      .set('accountType', createAccountData.accountType)\n      .set('nickname', createAccountData.nickname);\n\n    if (isEmailAccount(createAccountData)) {\n      HTTP_PARAMS = HTTP_PARAMS\n        .set('email', createAccountData.email)\n        .set('password', createAccountData.password);\n    }\n\n    return firstValueFrom(this.httpModule.post(this.baseServiceUrl, HTTP_PARAMS)) as Promise;\n  }\n\n  /**\n   * Удаление JWT токена пользователя\n   * @param jwt JWT токен\n   * @returns Promise с сообщением об успешном удалении токена\n   */\n  DELETEaccountJwt(jwt: string) {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt);\n    return firstValueFrom(this.httpModule.delete(this.baseServiceUrl + '/jwt/delete', { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Обновление вторичных данных аккаунта (например, никнейм)\n   * @param changeData Данные для изменения\n   * @returns Promise с сообщением об успешном обновлении\n   */\n  PUTupdateSecondaryAccountData(changeData: changeSecondaryData) {\n    console.log('changeData', changeData);\n    const HTTP_PARAMS = new HttpParams({\n      fromObject: {\n        nickname: changeData.nickname,\n        jwt: changeData.jwt\n      }\n    });\n    console.log(HTTP_PARAMS.toString());\n    return firstValueFrom(this.httpModule.put(this.baseServiceUrl, null, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Удаление аккаунта пользователя\n   * @param jwt JWT токен\n   * @returns Promise с сообщением об успешном удалении пользователя\n   */\n  DELETEaccount(jwt: string) {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt);\n    return firstValueFrom(this.httpModule.delete(this.baseServiceUrl, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Получение полной информации об аккаунте пользователя\n   * @param jwt JWT токен\n   * @returns Promise с данными аккаунта (включая проекты и мебель)\n   */\n  async GETaccount(jwt: string) {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt);\n    try {\n      let { accountData } = await firstValueFrom(this.httpModule.get(this.baseServiceUrl, { params: HTTP_PARAMS })) as { accountData: accountFullData & { projects: projectServerInformation[] } };\n      accountData.furnitures = accountData.furnitures.map(furnitureData => {\n        return {\n          ...furnitureData,\n          previewUrl: baseUrl + furnitureData.previewUrl\n        };\n      });\n      return { accountData: accountData };\n    } catch (error) {\n      console.error('Error in GETfurnitureCard:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Проверка наличия JWT токена в куках\n   * @returns true, если JWT токен найден, иначе false\n   */\n  checkJwt(): boolean {\n    return this.accountCookieService.getJwt() ? true : false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^19.2.9\n        \n            @angular/common : ^19.2.9\n        \n            @angular/core : ^19.2.9\n        \n            @angular/forms : ^19.2.9\n        \n            @angular/platform-browser : ^19.2.9\n        \n            @angular/router : ^19.2.9\n        \n            @angular/service-worker : ^19.2.9\n        \n            @taiga-ui/cdk : ^4.36.0\n        \n            @taiga-ui/core : ^4.36.0\n        \n            @taiga-ui/event-plugins : ^4.0.2\n        \n            @taiga-ui/kit : ^4.37.0\n        \n            @taiga-ui/legacy : ^4.37.0\n        \n            compressorjs : ^1.2.1\n        \n            html2canvas : ^1.4.1\n        \n            html2pdf.js : ^0.10.3\n        \n            jspdf : ^3.0.1\n        \n            lodash : ^4.17.21\n        \n            ngx-clipboard : ^16.0.0\n        \n            ngx-cookie-service : ^19.1.2\n        \n            ngx-spinner : ^19.0.0\n        \n            puppeteer : ^24.8.2\n        \n            rxjs : ~7.8.2\n        \n            three : ^0.176.0\n        \n            zone.js : ~0.15.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/editForm.html":{"url":"interfaces/editForm.html","title":"interface - editForm","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  editForm\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/account-page/account-page.component.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс для формы редактирования аккаунта\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            nickname\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            password\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        nickname\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nickname:     FormControl\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     FormControl\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Контрол для редактирования никнейма\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:     FormControl\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     FormControl\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Контрол для редактирования пароля (необязательный)\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { NavigationPanelComponent } from '../navigation-panel/navigation-panel.component';\nimport { CommonModule, NgFor, NgIf } from '@angular/common';\nimport { accountFullData, AccountService, accountType } from '../../services/account.service';\nimport { FormGroup, ReactiveFormsModule, FormControl, Validators, AbstractControl } from '@angular/forms';\nimport { Router, RouterLink } from '@angular/router';\nimport { AccountCookieService } from '../../services/account-cookie.service';\nimport { ServerImageControlService } from '../../services/server-image-control.service';\nimport { ClientImageControlService } from '../../services/client-image-control.service';\nimport { AuthService } from '../../services/auth.service';\nimport { NotificationService } from '../../services/notification.service';\n/**\n * Интерфейс для формы редактирования аккаунта\n */\ninterface editForm {\n  /** Контрол для редактирования никнейма */\n  nickname: FormControl;\n  /** Контрол для редактирования пароля (необязательный) */\n  password?: FormControl;\n}\n\n/**\n * Компонент страницы аккаунта пользователя\n */\n@Component({\n  selector: 'app-account-page',\n  standalone: true,\n  imports: [NavigationPanelComponent, NgFor, NgIf, ReactiveFormsModule, CommonModule, RouterLink],\n  templateUrl: './account-page.component.html',\n  styleUrls: ['./account-page.component.scss']\n})\nexport class AccountPageComponent implements OnInit {\n  /**\n   * Данные аккаунта пользователя\n   */\n  protected accountData?: accountFullData;\n\n  /**\n   * Флаг открытия формы редактирования\n   */\n  protected isEditFormOpen = false;\n\n  /**\n   * Группа контролов формы редактирования\n   */\n  protected editForm!: FormGroup;\n\n  constructor(\n    private accountService: AccountService,\n    private router: Router,\n    private accountCookieService: AccountCookieService,\n    private imageServerControlService: ServerImageControlService,\n    private imageClientControlService: ClientImageControlService,\n    private authService: AuthService,\n    private notification: NotificationService\n  ) { }\n\n  /**\n   * Инициализация компонента\n   * Проверяет авторизацию и загружает данные пользователя,\n   * инициализирует форму редактирования\n   */\n  ngOnInit(): void {\n    this.checkAuthAndLoadData();\n    this.initEditForm();\n  }\n\n  /**\n   * Обновляет вторичные данные аккаунта (например, никнейм)\n   * @param jwt JWT токен пользователя\n   */\n  private async updateSecondaryAccountData(jwt: string) {\n    if (!this.accountData) return;\n\n    const CHANGE_DATA = {\n      jwt: jwt,\n      nickname: this.editForm.value.nickname!\n    };\n\n    try {\n      await this.accountService.PUTupdateSecondaryAccountData(CHANGE_DATA);\n      this.accountData.nickname = this.editForm.value.nickname!;\n      this.notification.setSuccess('Данные обновлены', 5000);\n    } catch (error) {\n      this.notification.setError('Ошибка обновления никнейма', 5000);\n      console.error(error);\n      throw error;\n    }\n  }\n\n  /**\n   * Сохраняет изменения данных аккаунта\n   */\n  protected async saveChanges() {\n    if (!this.accountData || !this.editForm.valid) {\n      this.notification.setError('Некорректные данные формы', 5000);\n      return;\n    }\n\n    const JWT = this.accountCookieService.getJwt();\n    const ACCOUNT_TYPE = this.accountCookieService.getUserType() as accountType;\n    if (!JWT || !ACCOUNT_TYPE) {\n      this.notification.setError('Ошибка аутентификации', 5000);\n      return;\n    }\n\n    try {\n      await this.updateSecondaryAccountData(JWT);\n      await this.updateBaseDataIfNeeded(JWT, ACCOUNT_TYPE);\n      this.closeEditForm();\n      this.notification.setSuccess('Данные обновлены', 5000);\n    } catch (error) {\n      this.notification.setError('Ошибка сохранения данных', 5000);\n      console.error(error);\n    }\n  }\n\n  /**\n   * Обновляет основные данные аккаунта, если это необходимо\n   * @param jwt JWT токен пользователя\n   * @param accountType Тип аккаунта ('email' или 'google')\n   */\n  private async updateBaseDataIfNeeded(jwt: string, accountType: accountType) {\n    if (this.accountData?.password === undefined || !this.editForm.value.password || accountType === 'google') return;\n\n    const CHANGE_DATA = {\n      jwt: jwt,\n      accountType: accountType,\n      password: this.editForm.value.password\n    };\n\n    try {\n      await this.authService.PUTupdateBaseData(CHANGE_DATA);\n      this.accountData.password = this.editForm.value.password;\n    } catch (error) {\n      this.notification.setError('Ошибка обновления пароля', 5000);\n      console.error(error);\n      throw error;\n    }\n  }\n\n  /**\n   * Загружает данные пользователя с сервера по JWT\n   * @param jwt JWT токен пользователя\n   */\n  private async loadUserData(jwt: string) {\n    try {\n      const ACCOUNT_DATA = (await this.accountService.GETaccount(jwt)).accountData;\n      this.accountData = {\n        email: ACCOUNT_DATA.email,\n        nickname: ACCOUNT_DATA.nickname,\n        projects: ACCOUNT_DATA.projects,\n        avatarUrl: this.imageServerControlService.GETaccountAvatar(jwt),\n        furnitures: ACCOUNT_DATA.furnitures\n      };\n\n      if (ACCOUNT_DATA.password !== undefined) {\n        this.accountData.password = ACCOUNT_DATA.password;\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  /**\n   * Обработка загрузки аватара пользователя\n   * @param event Событие выбора файла\n   */\n  protected async uploadAvatar(event: Event) {\n    const JWT = this.accountCookieService.getJwt();\n    if (!JWT || !this.accountData) {\n      return;\n    }\n\n    const TARGET = event.target as HTMLInputElement;\n    const FILE = TARGET.files?.[0];\n    if (!FILE) {\n      this.notification.setError('Файл не выбран', 5000);\n      return;\n    }\n\n    try {\n      const COMPRESSED_IMAGE = await this.imageClientControlService.compressImage(FILE);\n      if (!COMPRESSED_IMAGE) {\n        this.notification.setError('Ошибка сжатия изображения', 5000);\n        return;\n      }\n\n      await this.imageServerControlService.POSTuploadUserAvatar(COMPRESSED_IMAGE, JWT);\n      this.accountData.avatarUrl = URL.createObjectURL(COMPRESSED_IMAGE);\n      this.notification.setSuccess('Аватар обновлен', 5000);\n    } catch (error) {\n      this.notification.setError('Ошибка загрузки аватара', 5000);\n      console.error(error);\n    }\n  }\n\n  /**\n   * Проверяет авторизацию пользователя и загружает данные аккаунта\n   */\n  private checkAuthAndLoadData() {\n    const JWT = this.accountCookieService.getJwt();\n    if (!JWT) {\n      this.router.navigateByUrl('/login');\n      return;\n    }\n    this.loadUserData(JWT);\n  }\n\n  /**\n   * Инициализирует форму редактирования с валидаторами\n   */\n  private initEditForm() {\n    this.editForm = new FormGroup({\n      nickname: new FormControl(this.accountData?.nickname, [\n        Validators.required,\n        Validators.minLength(3),\n        Validators.maxLength(30)\n      ])\n    });\n\n    if (this.accountCookieService.getUserType() === 'email') {\n      this.editForm.addControl('password', new FormControl(this.accountData?.password, [\n        Validators.required,\n        Validators.minLength(6)\n      ]));\n    }\n  }\n\n  /**\n   * Открывает форму редактирования\n   */\n  protected openEditForm() {\n    if (!this.accountData) {\n      this.notification.setError('Данные пользователя не загружены', 5000);\n      return;\n    }\n    this.isEditFormOpen = true;\n  }\n\n  /**\n   * Закрывает форму редактирования и сбрасывает изменения\n   */\n  protected closeEditForm() {\n    this.isEditFormOpen = false;\n    if (this.accountData) {\n      // Важно: здесь не происходит обновления значений, а скорее попытка сравнить (исправить можно)\n      this.accountData.nickname != this.editForm.value.nickname;\n      if (this.accountData.password) {\n        this.accountData.password != this.editForm.value.password;\n      }\n    }\n    this.editForm.reset();\n  }\n\n  /**\n   * Открывает страницу проекта по id\n   * @param projectId ID проекта\n   */\n  protected openProject(projectId: number) {\n    this.router.navigateByUrl('/plan/' + projectId);\n  }\n\n  /**\n   * Выход из аккаунта:\n   * удаляет JWT и тип аккаунта из куков, вызывает удаление JWT на сервере,\n   * и перенаправляет на главную страницу\n   */\n  protected logout() {\n    const JWT = this.accountCookieService.getJwt();\n    if (JWT) this.accountService.DELETEaccountJwt(JWT);\n    this.accountCookieService.deleteJwt();\n    this.accountCookieService.deleteAccountType();\n    this.router.navigateByUrl('/');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/emailAuthData.html":{"url":"interfaces/emailAuthData.html","title":"interface - emailAuthData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  emailAuthData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Данные для аутентификации через email\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            accountType\n                                        \n                                \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accountType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accountType:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                            \n                                \n                                    Тип аккаунта - 'email'\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Email пользователя\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Пароль пользователя\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { accountType, changeAccountDataEmail, changeAccountData } from './account.service';\nimport { baseUrl } from '.';\nimport { isEmailAccount } from './account.service';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные для аутентификации через email\n */\nexport interface emailAuthData {\n  /** Email пользователя */\n  email: string;\n  /** Пароль пользователя */\n  password: string;\n  /** Тип аккаунта - 'email' */\n  accountType: 'email';\n}\n\n/**\n * Данные для аутентификации через Google\n */\nexport interface googleAuthData {\n  /** Тип аккаунта - 'google' */\n  accountType: 'google';\n}\n\n/**\n * Объединённый тип данных для аутентификации\n */\nexport type authData = googleAuthData | emailAuthData;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  /** Базовый URL для auth-роутов */\n  private baseServiceUrl = baseUrl + 'auth/';\n\n  constructor(\n    private httpModule: HttpClient\n  ) { }\n\n  /**\n   * Создание длинного JWT токена\n   * @param authData Данные для входа (email+пароль или google)\n   * @returns Promise с JWT токеном\n   */\n  POSTcreateLongJWT(authData: authData) {\n    let HTTP_PARAMS = new HttpParams()\n      .set('accountType', authData.accountType);\n\n    if (isEmailAccount(authData)) {\n      HTTP_PARAMS = HTTP_PARAMS\n        .set('email', authData.email)\n        .set('password', authData.password);\n    }\n\n    return firstValueFrom(this.httpModule.post(this.baseServiceUrl + 'jwt/long', HTTP_PARAMS)) as Promise;\n  }\n\n  /**\n   * Создание короткого (временного) JWT токена\n   * @param email Email пользователя\n   * @returns Promise с временным JWT токеном\n   */\n  POSTcreateShortJWT(email: string) {\n    let HTTP_PARAMS = new HttpParams()\n      .set('email', email);\n\n    return firstValueFrom(this.httpModule.post(this.baseServiceUrl + 'jwt/temporary', { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Обновление базовой информации о пользователе\n   * @param changeData Новые данные для обновления аккаунта\n   * @returns Promise с сообщением об успехе обновления\n   */\n  PUTupdateBaseData(changeData: changeAccountData) {\n    const paramObject: any = {\n      accountType: changeData.accountType,\n      jwt: changeData.jwt\n    };\n\n    if (isEmailAccount(changeData)) {\n      paramObject.password = changeData.password;\n    }\n\n    const HTTP_PARAMS = new HttpParams({ fromObject: paramObject });\n    console.log(HTTP_PARAMS.toString());\n\n    return firstValueFrom(this.httpModule.put(this.baseServiceUrl + 'account', changeData)) as Promise;\n  }\n\n  /**\n   * Запрос кода сброса пароля по email\n   * @param email Email пользователя\n   * @returns Promise с кодом для сброса пароля\n   */\n  GETrequestPasswordCode(email: string) {\n    let HTTP_PARAMS = new HttpParams()\n      .set('email', email);\n\n    return firstValueFrom(this.httpModule.get(this.baseServiceUrl + 'account/code', { params: HTTP_PARAMS })) as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/foundFurniture.html":{"url":"interfaces/foundFurniture.html","title":"interface - foundFurniture","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  foundFurniture\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/finder/finder.component.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс, описывающий найденную мебель.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            category\n                                        \n                                \n                                \n                                        \n                                            colorRequest\n                                        \n                                \n                                \n                                        \n                                            cost\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        category\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        category:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Категория мебели\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        colorRequest\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        colorRequest:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Цвет, указанный в запросе\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cost\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cost:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Цена мебели\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Уникальный идентификатор мебели\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Название мебели\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { NgClass, NgFor, NgIf } from '@angular/common';\nimport { AfterViewInit, Component, ElementRef, Renderer2 } from '@angular/core';\nimport { FinderService } from '../../services/finder.service';\nimport { ServerImageControlService } from '../../services/server-image-control.service';\nimport { ActivatedRoute, RouterLink } from '@angular/router';\nimport { checkDesktop } from '../../usable/reusable-functions.used';\nimport { CostFormatPipe } from '../../pipes/cost-format.pipe';\n\n/**\n * Интерфейс, описывающий найденную мебель.\n */\ninterface foundFurniture {\n  /** Название мебели */\n  name: string;\n  /** Цена мебели */\n  cost: number;\n  /** Цвет, указанный в запросе */\n  colorRequest: string;\n  /** Уникальный идентификатор мебели */\n  id: string;\n  /** Категория мебели */\n  category: string;\n}\n\n/**\n * Компонент поиска мебели.\n * Позволяет искать мебель по названию и отображать результаты.\n */\n@Component({\n  selector: 'app-finder',\n  standalone: true,\n  imports: [NgClass, NgFor, NgIf, RouterLink, CostFormatPipe, RouterLink],\n  templateUrl: './finder.component.html',\n  styleUrl: './finder.component.scss'\n})\nexport class FinderComponent implements AfterViewInit {\n  /**\n   * Ссылка на HTML-элемент с результатами поиска (список вариантов).\n   */\n  private variantsSpan!: HTMLSpanElement;\n\n  /**\n   * Ссылка на HTML-элемент текстового поля ввода.\n   */\n  private inputElement!: HTMLInputElement;\n\n  /**\n   * Массив найденных объектов мебели.\n   */\n  protected foundFurniture?: foundFurniture[];\n\n  /**\n   * Таймер для реализации дебаунса ввода.\n   */\n  private debounceTimer: any = null;\n\n  constructor(\n    private finderService: FinderService,\n    private elementRef: ElementRef,\n    private renderer: Renderer2,\n    private imageService: ServerImageControlService,\n    private route: ActivatedRoute\n  ) { }\n\n  /**\n   * Инициализация после рендера компонента:\n   * Получение необходимых DOM-элементов для управления поиском.\n   */\n  ngAfterViewInit(): void {\n    this.variantsSpan = this.elementRef.nativeElement.querySelector('.variantsSpan') as HTMLSpanElement;\n    this.inputElement = this.elementRef.nativeElement.querySelector('.finderInput') as HTMLInputElement;\n  }\n\n  /**\n   * Выполняет поиск мебели на сервере по заданной строке.\n   * @param findString Строка для поиска мебели\n   */\n  private async findFurnitures(findString: string) {\n    const RECEIVED_DATA = await this.finderService.GETfindFurnitures(findString) as foundFurniture[];\n    this.openFoundResultsList();\n\n    if (RECEIVED_DATA.length > 0) {\n      this.closeFoundResultsList();\n      setTimeout(() => {\n        this.foundFurniture = RECEIVED_DATA;\n        this.openFoundResultsList();\n      }, 400);\n    } else {\n      // Если результатов нет, очищаем массив foundFurniture\n      this.foundFurniture !== undefined ? this.foundFurniture.length = 0 : this.foundFurniture = [];\n    }\n  }\n\n  /**\n   * Открывает список найденных результатов (добавляет CSS класс).\n   */\n  private openFoundResultsList() {\n    if (!this.variantsSpan) return;\n    this.renderer.addClass(this.variantsSpan, 'variantsSpanOpen');\n  }\n\n  /**\n   * Закрывает список найденных результатов (удаляет CSS класс).\n   */\n  private closeFoundResultsList() {\n    if (!this.variantsSpan) return;\n    this.renderer.removeClass(this.variantsSpan, 'variantsSpanOpen');\n  }\n\n  /**\n   * Утилитная функция проверки, запущено ли приложение на десктопе.\n   */\n  protected checkDesktop = checkDesktop;\n\n  /**\n   * Очищает поле ввода и скрывает список результатов.\n   */\n  protected clearInput() {\n    this.inputElement.value = '';\n    this.inputProcess();\n    this.closeFoundResultsList();\n  }\n\n  /**\n   * Проверяет, находится ли пользователь на странице магазина.\n   * Если да, устанавливает в сервисе имя мебели.\n   * @param name Имя мебели для поиска\n   * @returns true если на странице магазина, иначе false\n   */\n  private checkShopPage(name: string): boolean {\n    let CURRENT_ROUTE = this.route.root;\n    while (CURRENT_ROUTE.firstChild) {\n      CURRENT_ROUTE = CURRENT_ROUTE.firstChild;\n    }\n    const component = CURRENT_ROUTE.snapshot.routeConfig?.component;\n    if (component && component.name === '_ShopPageComponent') {\n      this.finderService.setFurnitureName(name);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Обрабатывает ввод пользователя с задержкой (debounce).\n   * Запускает поиск, если введена строка.\n   */\n  protected inputProcess() {\n    const VALUE = this.inputElement.value;\n    clearTimeout(this.debounceTimer);\n    this.debounceTimer = setTimeout(() => {\n      if (VALUE.length === 0) {\n        if (this.checkShopPage(VALUE)) this.closeFoundResultsList();\n        return;\n      }\n      if (this.checkShopPage(VALUE)) return;\n\n      this.findFurnitures(VALUE);\n    }, 300);\n  }\n\n  /**\n   * Возвращает URL главного изображения мебели по id и цвету.\n   * @param idFurniture Идентификатор мебели\n   * @param color Цвет мебели\n   * @returns URL изображения\n   */\n  protected getImage(idFurniture: string, color: string): string {\n    return this.imageService.GETmainImage(idFurniture, color);\n  }\n\n  /**\n   * Формирует URL для перехода на страницу мебели.\n   * @param idFurniture Идентификатор мебели\n   * @param category Категория мебели\n   * @returns URL для маршрутизации\n   */\n  protected getUrl(idFurniture: string, category: string): string {\n    return `/shop/${category ?? 'all'}/${idFurniture}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            checkDesktop   (src/.../reusable-functions.used.ts)\n                        \n                        \n                            isEmailAccount   (src/.../account.service.ts)\n                        \n                        \n                            loadFBXModel   (src/.../fbx.loader.ts)\n                        \n                        \n                            loadGLTFModel   (src/.../gltf-glb.loader.ts)\n                        \n                        \n                            loadModel   (src/.../index.ts)\n                        \n                        \n                            loadOBJModel   (src/.../obj.loader.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/usable/reusable-functions.used.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        checkDesktop\n                        \n                    \n                \n            \n            \n                \ncheckDesktop()\n                \n            \n\n\n\n\n            \n                \n                        Проверяет, является ли устройство десктопом или нет\n\n\n                \n            \n        \n    \n    src/services/account.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isEmailAccount\n                        \n                    \n                \n            \n            \n                \nisEmailAccount(account)\n                \n            \n\n\n\n\n            \n                \n                        Функция-помощник для проверки, что аккаунт с типом email\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                account\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Объект аккаунта\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         changeAccountDataEmail\n\n                        \n                            \n                                true, если аккаунт с типом email\n\n                            \n                \n            \n        \n    \n    src/components/scene/loaders/loaders/fbx.loader.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        loadFBXModel\n                        \n                    \n                \n            \n            \n                \nloadFBXModel(url: string, manager?: LoadingManager)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                manager\n                                            \n                                                        LoadingManager\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/components/scene/loaders/loaders/gltf-glb.loader.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        loadGLTFModel\n                        \n                    \n                \n            \n            \n                \nloadGLTFModel(url: string, manager?: LoadingManager)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                manager\n                                            \n                                                        LoadingManager\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/components/scene/loaders/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        loadModel\n                        \n                    \n                \n            \n            \n                \nloadModel(blob: Blob, manager?: LoadingManager)\n                \n            \n\n\n\n\n            \n                \n                        Загружает 3D-модель из Blob-объекта, определяя её формат по MIME-типу.\nПоддерживаются форматы: glTF/glb, FBX, OBJ.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                blob\n                                            \n                                                        Blob\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nФайл модели в виде Blob.\n\n\n                                            \n                                        \n                                        \n                                                manager\n                                            \n                                                        LoadingManager\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nНеобязательный менеджер загрузки для отслеживания прогресса.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Загруженная 3D-модель как объект Three.js.\n\n                            \n                \n            \n        \n    \n    src/components/scene/loaders/loaders/obj.loader.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        loadOBJModel\n                        \n                    \n                \n            \n            \n                \nloadOBJModel(url: string, manager?: LoadingManager)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                manager\n                                            \n                                                        LoadingManager\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/furnitureAccountData.html":{"url":"interfaces/furnitureAccountData.html","title":"interface - furnitureAccountData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  furnitureAccountData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/account.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Данные по мебели, связанной с аккаунтом\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            _id\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            previewUrl\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        _id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        _id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Идентификатор мебели\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Название мебели\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        previewUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        previewUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    URL превью изображения мебели\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { projectInformation, projectServerInformation } from './project.service';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { AccountCookieService } from './account-cookie.service';\nimport { baseUrl } from '.';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные для изменения аккаунта с email\n */\nexport interface changeAccountDataEmail {\n  /** JWT токен */\n  jwt: string;\n  /** Тип аккаунта (email) */\n  accountType: 'email';\n  /** Пароль пользователя */\n  password: string;\n}\n\n/**\n * Полные данные аккаунта пользователя\n */\nexport interface accountFullData {\n  /** URL аватара */\n  avatarUrl: string;\n  /** Никнейм пользователя */\n  nickname: string;\n  /** Email пользователя */\n  email: string;\n  /** Массив проектов пользователя */\n  projects: projectInformation[];\n  /** Массив мебели, связанной с аккаунтом */\n  furnitures: furnitureAccountData[];\n  /** Пароль пользователя (необязательный) */\n  password?: string;\n}\n\n/**\n * Данные для изменения вторичных данных аккаунта\n */\nexport interface changeSecondaryData {\n  /** JWT токен */\n  jwt: string;\n  /** Новый никнейм */\n  nickname: string;\n}\n\n/**\n * Данные по мебели, связанной с аккаунтом\n */\nexport interface furnitureAccountData {\n  /** Идентификатор мебели */\n  _id: string;\n  /** Название мебели */\n  name: string;\n  /** URL превью изображения мебели */\n  previewUrl: string;\n}\n\n/** Тип аккаунта */\nexport type accountType = 'google' | 'email';\n\n/** Тип данных для изменения аккаунта (на данный момент только email) */\nexport type changeAccountData = changeAccountDataEmail;\n\n/**\n * Данные для создания аккаунта с email\n */\ninterface createEmailAccountData {\n  /** Email */\n  email: string;\n  /** Пароль */\n  password: string;\n  /** Никнейм */\n  nickname: string;\n  /** Тип аккаунта (email) */\n  accountType: 'email';\n}\n\n/** Тип данных для создания аккаунта */\nexport type createAccountData = createEmailAccountData;\n\n/**\n * Функция-помощник для проверки, что аккаунт с типом email\n * @param account Объект аккаунта\n * @returns true, если аккаунт с типом email\n */\nexport function isEmailAccount(account: { accountType: accountType }): account is changeAccountDataEmail {\n  return account.accountType === 'email';\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccountService {\n  /** Базовый URL для аккаунт-сервисов */\n  private baseServiceUrl = baseUrl + 'account';\n\n  constructor(\n    private httpModule: HttpClient,\n    private accountCookieService: AccountCookieService\n  ) { }\n\n  /**\n   * Создание нового пользователя\n   * @param createAccountData Основная информация о пользователе (никнейм, email, пароль)\n   * @returns Promise с сообщением об успешном создании пользователя\n   */\n  POSTcreateAccount(createAccountData: createAccountData) {\n    let HTTP_PARAMS = new HttpParams()\n      .set('accountType', createAccountData.accountType)\n      .set('nickname', createAccountData.nickname);\n\n    if (isEmailAccount(createAccountData)) {\n      HTTP_PARAMS = HTTP_PARAMS\n        .set('email', createAccountData.email)\n        .set('password', createAccountData.password);\n    }\n\n    return firstValueFrom(this.httpModule.post(this.baseServiceUrl, HTTP_PARAMS)) as Promise;\n  }\n\n  /**\n   * Удаление JWT токена пользователя\n   * @param jwt JWT токен\n   * @returns Promise с сообщением об успешном удалении токена\n   */\n  DELETEaccountJwt(jwt: string) {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt);\n    return firstValueFrom(this.httpModule.delete(this.baseServiceUrl + '/jwt/delete', { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Обновление вторичных данных аккаунта (например, никнейм)\n   * @param changeData Данные для изменения\n   * @returns Promise с сообщением об успешном обновлении\n   */\n  PUTupdateSecondaryAccountData(changeData: changeSecondaryData) {\n    console.log('changeData', changeData);\n    const HTTP_PARAMS = new HttpParams({\n      fromObject: {\n        nickname: changeData.nickname,\n        jwt: changeData.jwt\n      }\n    });\n    console.log(HTTP_PARAMS.toString());\n    return firstValueFrom(this.httpModule.put(this.baseServiceUrl, null, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Удаление аккаунта пользователя\n   * @param jwt JWT токен\n   * @returns Promise с сообщением об успешном удалении пользователя\n   */\n  DELETEaccount(jwt: string) {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt);\n    return firstValueFrom(this.httpModule.delete(this.baseServiceUrl, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Получение полной информации об аккаунте пользователя\n   * @param jwt JWT токен\n   * @returns Promise с данными аккаунта (включая проекты и мебель)\n   */\n  async GETaccount(jwt: string) {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt);\n    try {\n      let { accountData } = await firstValueFrom(this.httpModule.get(this.baseServiceUrl, { params: HTTP_PARAMS })) as { accountData: accountFullData & { projects: projectServerInformation[] } };\n      accountData.furnitures = accountData.furnitures.map(furnitureData => {\n        return {\n          ...furnitureData,\n          previewUrl: baseUrl + furnitureData.previewUrl\n        };\n      });\n      return { accountData: accountData };\n    } catch (error) {\n      console.error('Error in GETfurnitureCard:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Проверка наличия JWT токена в куках\n   * @returns true, если JWT токен найден, иначе false\n   */\n  checkJwt(): boolean {\n    return this.accountCookieService.getJwt() ? true : false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/furnitureBaseData.html":{"url":"interfaces/furnitureBaseData.html","title":"interface - furnitureBaseData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  furnitureBaseData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/furniture-card-control.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Базовые данные мебели, общие для клиента и сервера\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            additionalData\n                                        \n                                \n                                \n                                        \n                                            description\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            proportions\n                                        \n                                \n                                \n                                        \n                                            shops\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        additionalData\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        additionalData:         additionalData\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         additionalData\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Дополнительные данные\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Описание мебели\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Название мебели\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        proportions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        proportions:         furnitureProportions\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         furnitureProportions\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Пропорции мебели\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        shops\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        shops:         shopData[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         shopData[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Список магазинов с ценами и URL\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { imageSliderClientData, imageSliderFromServerData } from '../components/image-slider/image-slider.component';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные магазина с ценой и URL\n * @interface shopData\n */\nexport interface shopData {\n  /** Цена мебели */\n  cost: number;\n  /** URL магазина или товара */\n  url: string;\n}\n\n/**\n * Пропорции мебели (ширина, длина, высота)\n * @interface furnitureProportions\n */\nexport interface furnitureProportions {\n  /** Ширина мебели (или null, если не задана) */\n  width: number | null;\n  /** Длина мебели (или null, если не задана) */\n  length: number | null;\n  /** Высота мебели (или null, если не задана) */\n  height: number | null;\n}\n\n/**\n * Данные цвета на клиенте, включая слайдер изображений\n * @interface colorClientData\n */\nexport interface colorClientData {\n  /** Цвет мебели */\n  color: string;\n  /** Данные для слайдера изображений */\n  imagesData: imageSliderClientData;\n}\n\n/**\n * Данные цвета с сервера, включая слайдер изображений\n * @interface colorFromServerData\n */\nexport interface colorFromServerData {\n  /** Цвет мебели */\n  color: string;\n  /** Данные для слайдера изображений */\n  imagesData: imageSliderFromServerData;\n}\n\n/**\n * Дополнительные данные мебели с динамическими ключами\n * @interface additionalData\n */\nexport interface additionalData {\n  /** Категория мебели (опционально) */\n  category?: string;\n  /** Другие динамические свойства */\n  [key: string]: string | undefined;\n}\n\n/**\n * Базовые данные мебели, общие для клиента и сервера\n * @interface furnitureBaseData\n */\ninterface furnitureBaseData {\n  /** Название мебели */\n  name: string;\n  /** Описание мебели */\n  description: string;\n  /** Пропорции мебели */\n  proportions: furnitureProportions;\n  /** Список магазинов с ценами и URL */\n  shops: shopData[];\n  /** Дополнительные данные */\n  additionalData: additionalData;\n}\n\n/**\n * Данные мебели на клиенте с цветами\n * @interface furnitureClientData\n * @extends furnitureBaseData\n */\nexport interface furnitureClientData extends furnitureBaseData {\n  /** Список цветов с данными для клиента */\n  colors: colorClientData[];\n}\n\n/**\n * Данные мебели с сервера с цветами\n * @interface furnitureFromServerData\n * @extends furnitureBaseData\n */\nexport interface furnitureFromServerData extends furnitureBaseData {\n  /** Список цветов с данными с сервера */\n  colors: colorFromServerData[];\n}\n\n/**\n * Сервис для управления карточками мебели\n * @class FurnitureCardControlService\n * @injectable\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class FurnitureCardControlService {\n\n  /** Базовый URL для запросов к API мебели */\n  private baseServiceUrl = baseUrl + 'furniture/card';\n\n  /**\n   * Конструктор сервиса\n   * @param httpModule HTTP клиент для запросов\n   */\n  constructor(private httpModule: HttpClient) { }\n\n  /**\n   * Получение карточки мебели по ID и опциональному JWT токену\n   * @param furnitureCardId - ID карточки мебели\n   * @param [jwt] - JWT токен пользователя (опционально)\n   * @returns Promise с объектом, содержащим данные карточки и флаг совпадения автора\n   * @throws Ошибка при некорректной структуре ответа или при ошибках запроса\n   */\n  async GETfurnitureCard(\n    furnitureCardId: string,\n    jwt?: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams().set('furnitureCardId', furnitureCardId);\n\n    if (jwt !== undefined) {\n      HTTP_PARAMS = HTTP_PARAMS.set('jwt', jwt);\n    }\n\n    try {\n      const response = await firstValueFrom(\n        this.httpModule.get(this.baseServiceUrl, { params: HTTP_PARAMS })\n      ) as {\n        furnitureCard: furnitureFromServerData;\n        authorMatched: boolean;\n      };\n\n      if (!response?.furnitureCard) {\n        throw new Error('Invalid response structure: furnitureCard missing');\n      }\n\n      // Добавляем полный URL к изображениям\n      const transformedFurnitureCard = {\n        ...response.furnitureCard,\n        colors: response.furnitureCard.colors.map(colorData => ({\n          color: colorData.color,\n          imagesData: {\n            idMainImage: colorData.imagesData.idMainImage,\n            images: colorData.imagesData.images.map(url => baseUrl + url)\n          }\n        }))\n      };\n\n      return {\n        furnitureCard: transformedFurnitureCard,\n        authorMatched: response.authorMatched\n      };\n\n    } catch (error) {\n      console.error('Error in GETfurnitureCard:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Создание новой карточки мебели\n   * @param furnitureData - Данные новой карточки мебели\n   * @param jwt - JWT токен пользователя\n   * @returns Promise с данными созданной карточки, включая её ID\n   */\n  POSTcreateFurnitureCard(\n    furnitureData: furnitureFromServerData,\n    jwt: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams().set('jwt', jwt);\n    return firstValueFrom(\n      this.httpModule.post(this.baseServiceUrl, furnitureData, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n\n  /**\n   * Обновление существующей карточки мебели\n   * @param furnitureCardUpdateData - Обновленные данные карточки мебели\n   * @param furnitureCardId - ID карточки мебели для обновления\n   * @param jwt - JWT токен пользователя\n   * @returns Promise с сообщением результата обновления\n   */\n  PUTupdateFurnitureCard(\n    furnitureCardUpdateData: furnitureFromServerData,\n    furnitureCardId: string,\n    jwt: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId);\n    return firstValueFrom(\n      this.httpModule.put(this.baseServiceUrl, furnitureCardUpdateData, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n\n  /**\n   * Удаление карточки мебели по ID и JWT токену\n   * @param jwt - JWT токен пользователя\n   * @param furnitureCardId - ID карточки мебели для удаления\n   * @returns Promise с сообщением результата удаления\n   */\n  DELETEfurnitureCard(jwt: string, furnitureCardId: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId);\n    return firstValueFrom(\n      this.httpModule.delete(this.baseServiceUrl, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/furnitureClientData.html":{"url":"interfaces/furnitureClientData.html","title":"interface - furnitureClientData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  furnitureClientData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/furniture-card-control.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Данные мебели на клиенте с цветами\n\n            \n\n            \n                Extends\n            \n            \n                            furnitureBaseData\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            colors\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        colors\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        colors:         colorClientData[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         colorClientData[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Список цветов с данными для клиента\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { imageSliderClientData, imageSliderFromServerData } from '../components/image-slider/image-slider.component';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные магазина с ценой и URL\n * @interface shopData\n */\nexport interface shopData {\n  /** Цена мебели */\n  cost: number;\n  /** URL магазина или товара */\n  url: string;\n}\n\n/**\n * Пропорции мебели (ширина, длина, высота)\n * @interface furnitureProportions\n */\nexport interface furnitureProportions {\n  /** Ширина мебели (или null, если не задана) */\n  width: number | null;\n  /** Длина мебели (или null, если не задана) */\n  length: number | null;\n  /** Высота мебели (или null, если не задана) */\n  height: number | null;\n}\n\n/**\n * Данные цвета на клиенте, включая слайдер изображений\n * @interface colorClientData\n */\nexport interface colorClientData {\n  /** Цвет мебели */\n  color: string;\n  /** Данные для слайдера изображений */\n  imagesData: imageSliderClientData;\n}\n\n/**\n * Данные цвета с сервера, включая слайдер изображений\n * @interface colorFromServerData\n */\nexport interface colorFromServerData {\n  /** Цвет мебели */\n  color: string;\n  /** Данные для слайдера изображений */\n  imagesData: imageSliderFromServerData;\n}\n\n/**\n * Дополнительные данные мебели с динамическими ключами\n * @interface additionalData\n */\nexport interface additionalData {\n  /** Категория мебели (опционально) */\n  category?: string;\n  /** Другие динамические свойства */\n  [key: string]: string | undefined;\n}\n\n/**\n * Базовые данные мебели, общие для клиента и сервера\n * @interface furnitureBaseData\n */\ninterface furnitureBaseData {\n  /** Название мебели */\n  name: string;\n  /** Описание мебели */\n  description: string;\n  /** Пропорции мебели */\n  proportions: furnitureProportions;\n  /** Список магазинов с ценами и URL */\n  shops: shopData[];\n  /** Дополнительные данные */\n  additionalData: additionalData;\n}\n\n/**\n * Данные мебели на клиенте с цветами\n * @interface furnitureClientData\n * @extends furnitureBaseData\n */\nexport interface furnitureClientData extends furnitureBaseData {\n  /** Список цветов с данными для клиента */\n  colors: colorClientData[];\n}\n\n/**\n * Данные мебели с сервера с цветами\n * @interface furnitureFromServerData\n * @extends furnitureBaseData\n */\nexport interface furnitureFromServerData extends furnitureBaseData {\n  /** Список цветов с данными с сервера */\n  colors: colorFromServerData[];\n}\n\n/**\n * Сервис для управления карточками мебели\n * @class FurnitureCardControlService\n * @injectable\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class FurnitureCardControlService {\n\n  /** Базовый URL для запросов к API мебели */\n  private baseServiceUrl = baseUrl + 'furniture/card';\n\n  /**\n   * Конструктор сервиса\n   * @param httpModule HTTP клиент для запросов\n   */\n  constructor(private httpModule: HttpClient) { }\n\n  /**\n   * Получение карточки мебели по ID и опциональному JWT токену\n   * @param furnitureCardId - ID карточки мебели\n   * @param [jwt] - JWT токен пользователя (опционально)\n   * @returns Promise с объектом, содержащим данные карточки и флаг совпадения автора\n   * @throws Ошибка при некорректной структуре ответа или при ошибках запроса\n   */\n  async GETfurnitureCard(\n    furnitureCardId: string,\n    jwt?: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams().set('furnitureCardId', furnitureCardId);\n\n    if (jwt !== undefined) {\n      HTTP_PARAMS = HTTP_PARAMS.set('jwt', jwt);\n    }\n\n    try {\n      const response = await firstValueFrom(\n        this.httpModule.get(this.baseServiceUrl, { params: HTTP_PARAMS })\n      ) as {\n        furnitureCard: furnitureFromServerData;\n        authorMatched: boolean;\n      };\n\n      if (!response?.furnitureCard) {\n        throw new Error('Invalid response structure: furnitureCard missing');\n      }\n\n      // Добавляем полный URL к изображениям\n      const transformedFurnitureCard = {\n        ...response.furnitureCard,\n        colors: response.furnitureCard.colors.map(colorData => ({\n          color: colorData.color,\n          imagesData: {\n            idMainImage: colorData.imagesData.idMainImage,\n            images: colorData.imagesData.images.map(url => baseUrl + url)\n          }\n        }))\n      };\n\n      return {\n        furnitureCard: transformedFurnitureCard,\n        authorMatched: response.authorMatched\n      };\n\n    } catch (error) {\n      console.error('Error in GETfurnitureCard:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Создание новой карточки мебели\n   * @param furnitureData - Данные новой карточки мебели\n   * @param jwt - JWT токен пользователя\n   * @returns Promise с данными созданной карточки, включая её ID\n   */\n  POSTcreateFurnitureCard(\n    furnitureData: furnitureFromServerData,\n    jwt: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams().set('jwt', jwt);\n    return firstValueFrom(\n      this.httpModule.post(this.baseServiceUrl, furnitureData, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n\n  /**\n   * Обновление существующей карточки мебели\n   * @param furnitureCardUpdateData - Обновленные данные карточки мебели\n   * @param furnitureCardId - ID карточки мебели для обновления\n   * @param jwt - JWT токен пользователя\n   * @returns Promise с сообщением результата обновления\n   */\n  PUTupdateFurnitureCard(\n    furnitureCardUpdateData: furnitureFromServerData,\n    furnitureCardId: string,\n    jwt: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId);\n    return firstValueFrom(\n      this.httpModule.put(this.baseServiceUrl, furnitureCardUpdateData, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n\n  /**\n   * Удаление карточки мебели по ID и JWT токену\n   * @param jwt - JWT токен пользователя\n   * @param furnitureCardId - ID карточки мебели для удаления\n   * @returns Promise с сообщением результата удаления\n   */\n  DELETEfurnitureCard(jwt: string, furnitureCardId: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId);\n    return firstValueFrom(\n      this.httpModule.delete(this.baseServiceUrl, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/furnitureFromServerData.html":{"url":"interfaces/furnitureFromServerData.html","title":"interface - furnitureFromServerData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  furnitureFromServerData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/furniture-card-control.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Данные мебели с сервера с цветами\n\n            \n\n            \n                Extends\n            \n            \n                            furnitureBaseData\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            colors\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        colors\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        colors:         colorFromServerData[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         colorFromServerData[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Список цветов с данными с сервера\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { imageSliderClientData, imageSliderFromServerData } from '../components/image-slider/image-slider.component';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные магазина с ценой и URL\n * @interface shopData\n */\nexport interface shopData {\n  /** Цена мебели */\n  cost: number;\n  /** URL магазина или товара */\n  url: string;\n}\n\n/**\n * Пропорции мебели (ширина, длина, высота)\n * @interface furnitureProportions\n */\nexport interface furnitureProportions {\n  /** Ширина мебели (или null, если не задана) */\n  width: number | null;\n  /** Длина мебели (или null, если не задана) */\n  length: number | null;\n  /** Высота мебели (или null, если не задана) */\n  height: number | null;\n}\n\n/**\n * Данные цвета на клиенте, включая слайдер изображений\n * @interface colorClientData\n */\nexport interface colorClientData {\n  /** Цвет мебели */\n  color: string;\n  /** Данные для слайдера изображений */\n  imagesData: imageSliderClientData;\n}\n\n/**\n * Данные цвета с сервера, включая слайдер изображений\n * @interface colorFromServerData\n */\nexport interface colorFromServerData {\n  /** Цвет мебели */\n  color: string;\n  /** Данные для слайдера изображений */\n  imagesData: imageSliderFromServerData;\n}\n\n/**\n * Дополнительные данные мебели с динамическими ключами\n * @interface additionalData\n */\nexport interface additionalData {\n  /** Категория мебели (опционально) */\n  category?: string;\n  /** Другие динамические свойства */\n  [key: string]: string | undefined;\n}\n\n/**\n * Базовые данные мебели, общие для клиента и сервера\n * @interface furnitureBaseData\n */\ninterface furnitureBaseData {\n  /** Название мебели */\n  name: string;\n  /** Описание мебели */\n  description: string;\n  /** Пропорции мебели */\n  proportions: furnitureProportions;\n  /** Список магазинов с ценами и URL */\n  shops: shopData[];\n  /** Дополнительные данные */\n  additionalData: additionalData;\n}\n\n/**\n * Данные мебели на клиенте с цветами\n * @interface furnitureClientData\n * @extends furnitureBaseData\n */\nexport interface furnitureClientData extends furnitureBaseData {\n  /** Список цветов с данными для клиента */\n  colors: colorClientData[];\n}\n\n/**\n * Данные мебели с сервера с цветами\n * @interface furnitureFromServerData\n * @extends furnitureBaseData\n */\nexport interface furnitureFromServerData extends furnitureBaseData {\n  /** Список цветов с данными с сервера */\n  colors: colorFromServerData[];\n}\n\n/**\n * Сервис для управления карточками мебели\n * @class FurnitureCardControlService\n * @injectable\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class FurnitureCardControlService {\n\n  /** Базовый URL для запросов к API мебели */\n  private baseServiceUrl = baseUrl + 'furniture/card';\n\n  /**\n   * Конструктор сервиса\n   * @param httpModule HTTP клиент для запросов\n   */\n  constructor(private httpModule: HttpClient) { }\n\n  /**\n   * Получение карточки мебели по ID и опциональному JWT токену\n   * @param furnitureCardId - ID карточки мебели\n   * @param [jwt] - JWT токен пользователя (опционально)\n   * @returns Promise с объектом, содержащим данные карточки и флаг совпадения автора\n   * @throws Ошибка при некорректной структуре ответа или при ошибках запроса\n   */\n  async GETfurnitureCard(\n    furnitureCardId: string,\n    jwt?: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams().set('furnitureCardId', furnitureCardId);\n\n    if (jwt !== undefined) {\n      HTTP_PARAMS = HTTP_PARAMS.set('jwt', jwt);\n    }\n\n    try {\n      const response = await firstValueFrom(\n        this.httpModule.get(this.baseServiceUrl, { params: HTTP_PARAMS })\n      ) as {\n        furnitureCard: furnitureFromServerData;\n        authorMatched: boolean;\n      };\n\n      if (!response?.furnitureCard) {\n        throw new Error('Invalid response structure: furnitureCard missing');\n      }\n\n      // Добавляем полный URL к изображениям\n      const transformedFurnitureCard = {\n        ...response.furnitureCard,\n        colors: response.furnitureCard.colors.map(colorData => ({\n          color: colorData.color,\n          imagesData: {\n            idMainImage: colorData.imagesData.idMainImage,\n            images: colorData.imagesData.images.map(url => baseUrl + url)\n          }\n        }))\n      };\n\n      return {\n        furnitureCard: transformedFurnitureCard,\n        authorMatched: response.authorMatched\n      };\n\n    } catch (error) {\n      console.error('Error in GETfurnitureCard:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Создание новой карточки мебели\n   * @param furnitureData - Данные новой карточки мебели\n   * @param jwt - JWT токен пользователя\n   * @returns Promise с данными созданной карточки, включая её ID\n   */\n  POSTcreateFurnitureCard(\n    furnitureData: furnitureFromServerData,\n    jwt: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams().set('jwt', jwt);\n    return firstValueFrom(\n      this.httpModule.post(this.baseServiceUrl, furnitureData, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n\n  /**\n   * Обновление существующей карточки мебели\n   * @param furnitureCardUpdateData - Обновленные данные карточки мебели\n   * @param furnitureCardId - ID карточки мебели для обновления\n   * @param jwt - JWT токен пользователя\n   * @returns Promise с сообщением результата обновления\n   */\n  PUTupdateFurnitureCard(\n    furnitureCardUpdateData: furnitureFromServerData,\n    furnitureCardId: string,\n    jwt: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId);\n    return firstValueFrom(\n      this.httpModule.put(this.baseServiceUrl, furnitureCardUpdateData, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n\n  /**\n   * Удаление карточки мебели по ID и JWT токену\n   * @param jwt - JWT токен пользователя\n   * @param furnitureCardId - ID карточки мебели для удаления\n   * @returns Promise с сообщением результата удаления\n   */\n  DELETEfurnitureCard(jwt: string, furnitureCardId: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId);\n    return firstValueFrom(\n      this.httpModule.delete(this.baseServiceUrl, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/furnitureProportions.html":{"url":"interfaces/furnitureProportions.html","title":"interface - furnitureProportions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  furnitureProportions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/furniture-card-control.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Пропорции мебели (ширина, длина, высота)\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            height\n                                        \n                                \n                                \n                                        \n                                            length\n                                        \n                                \n                                \n                                        \n                                            width\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        height:     number | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | null\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Высота мебели (или null, если не задана)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        length\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        length:     number | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | null\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Длина мебели (или null, если не задана)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        width:     number | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | null\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Ширина мебели (или null, если не задана)\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { imageSliderClientData, imageSliderFromServerData } from '../components/image-slider/image-slider.component';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные магазина с ценой и URL\n * @interface shopData\n */\nexport interface shopData {\n  /** Цена мебели */\n  cost: number;\n  /** URL магазина или товара */\n  url: string;\n}\n\n/**\n * Пропорции мебели (ширина, длина, высота)\n * @interface furnitureProportions\n */\nexport interface furnitureProportions {\n  /** Ширина мебели (или null, если не задана) */\n  width: number | null;\n  /** Длина мебели (или null, если не задана) */\n  length: number | null;\n  /** Высота мебели (или null, если не задана) */\n  height: number | null;\n}\n\n/**\n * Данные цвета на клиенте, включая слайдер изображений\n * @interface colorClientData\n */\nexport interface colorClientData {\n  /** Цвет мебели */\n  color: string;\n  /** Данные для слайдера изображений */\n  imagesData: imageSliderClientData;\n}\n\n/**\n * Данные цвета с сервера, включая слайдер изображений\n * @interface colorFromServerData\n */\nexport interface colorFromServerData {\n  /** Цвет мебели */\n  color: string;\n  /** Данные для слайдера изображений */\n  imagesData: imageSliderFromServerData;\n}\n\n/**\n * Дополнительные данные мебели с динамическими ключами\n * @interface additionalData\n */\nexport interface additionalData {\n  /** Категория мебели (опционально) */\n  category?: string;\n  /** Другие динамические свойства */\n  [key: string]: string | undefined;\n}\n\n/**\n * Базовые данные мебели, общие для клиента и сервера\n * @interface furnitureBaseData\n */\ninterface furnitureBaseData {\n  /** Название мебели */\n  name: string;\n  /** Описание мебели */\n  description: string;\n  /** Пропорции мебели */\n  proportions: furnitureProportions;\n  /** Список магазинов с ценами и URL */\n  shops: shopData[];\n  /** Дополнительные данные */\n  additionalData: additionalData;\n}\n\n/**\n * Данные мебели на клиенте с цветами\n * @interface furnitureClientData\n * @extends furnitureBaseData\n */\nexport interface furnitureClientData extends furnitureBaseData {\n  /** Список цветов с данными для клиента */\n  colors: colorClientData[];\n}\n\n/**\n * Данные мебели с сервера с цветами\n * @interface furnitureFromServerData\n * @extends furnitureBaseData\n */\nexport interface furnitureFromServerData extends furnitureBaseData {\n  /** Список цветов с данными с сервера */\n  colors: colorFromServerData[];\n}\n\n/**\n * Сервис для управления карточками мебели\n * @class FurnitureCardControlService\n * @injectable\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class FurnitureCardControlService {\n\n  /** Базовый URL для запросов к API мебели */\n  private baseServiceUrl = baseUrl + 'furniture/card';\n\n  /**\n   * Конструктор сервиса\n   * @param httpModule HTTP клиент для запросов\n   */\n  constructor(private httpModule: HttpClient) { }\n\n  /**\n   * Получение карточки мебели по ID и опциональному JWT токену\n   * @param furnitureCardId - ID карточки мебели\n   * @param [jwt] - JWT токен пользователя (опционально)\n   * @returns Promise с объектом, содержащим данные карточки и флаг совпадения автора\n   * @throws Ошибка при некорректной структуре ответа или при ошибках запроса\n   */\n  async GETfurnitureCard(\n    furnitureCardId: string,\n    jwt?: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams().set('furnitureCardId', furnitureCardId);\n\n    if (jwt !== undefined) {\n      HTTP_PARAMS = HTTP_PARAMS.set('jwt', jwt);\n    }\n\n    try {\n      const response = await firstValueFrom(\n        this.httpModule.get(this.baseServiceUrl, { params: HTTP_PARAMS })\n      ) as {\n        furnitureCard: furnitureFromServerData;\n        authorMatched: boolean;\n      };\n\n      if (!response?.furnitureCard) {\n        throw new Error('Invalid response structure: furnitureCard missing');\n      }\n\n      // Добавляем полный URL к изображениям\n      const transformedFurnitureCard = {\n        ...response.furnitureCard,\n        colors: response.furnitureCard.colors.map(colorData => ({\n          color: colorData.color,\n          imagesData: {\n            idMainImage: colorData.imagesData.idMainImage,\n            images: colorData.imagesData.images.map(url => baseUrl + url)\n          }\n        }))\n      };\n\n      return {\n        furnitureCard: transformedFurnitureCard,\n        authorMatched: response.authorMatched\n      };\n\n    } catch (error) {\n      console.error('Error in GETfurnitureCard:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Создание новой карточки мебели\n   * @param furnitureData - Данные новой карточки мебели\n   * @param jwt - JWT токен пользователя\n   * @returns Promise с данными созданной карточки, включая её ID\n   */\n  POSTcreateFurnitureCard(\n    furnitureData: furnitureFromServerData,\n    jwt: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams().set('jwt', jwt);\n    return firstValueFrom(\n      this.httpModule.post(this.baseServiceUrl, furnitureData, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n\n  /**\n   * Обновление существующей карточки мебели\n   * @param furnitureCardUpdateData - Обновленные данные карточки мебели\n   * @param furnitureCardId - ID карточки мебели для обновления\n   * @param jwt - JWT токен пользователя\n   * @returns Promise с сообщением результата обновления\n   */\n  PUTupdateFurnitureCard(\n    furnitureCardUpdateData: furnitureFromServerData,\n    furnitureCardId: string,\n    jwt: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId);\n    return firstValueFrom(\n      this.httpModule.put(this.baseServiceUrl, furnitureCardUpdateData, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n\n  /**\n   * Удаление карточки мебели по ID и JWT токену\n   * @param jwt - JWT токен пользователя\n   * @param furnitureCardId - ID карточки мебели для удаления\n   * @returns Promise с сообщением результата удаления\n   */\n  DELETEfurnitureCard(jwt: string, furnitureCardId: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId);\n    return firstValueFrom(\n      this.httpModule.delete(this.baseServiceUrl, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/furnitureShopData.html":{"url":"interfaces/furnitureShopData.html","title":"interface - furnitureShopData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  furnitureShopData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/shop.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс данных о мебели, получаемых из магазина.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            colors\n                                        \n                                \n                                \n                                        \n                                            cost\n                                        \n                                \n                                \n                                        \n                                            furnitureCardId\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            previewUrl\n                                        \n                                \n                                \n                                        \n                                            proportions\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        colors\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        colors:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Массив цветов мебели\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cost\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cost:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Стоимость мебели\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        furnitureCardId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        furnitureCardId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Id мебели\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Название\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        previewUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        previewUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Неполный Url превью (вначало надо вставить baseUrl сервера)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        proportions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        proportions:         modelInterface\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         modelInterface\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Габариты мебели\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { firstValueFrom } from 'rxjs';\nimport { modelInterface } from '../components/scene/scene.component';\n\n/**\n * Интерфейс объекта фильтров, отправляемых на сервер.\n*/\nexport interface queryData {\n  /** Любое ключ:значение */\n  [key: string]: optionSelectQueryData | optionRangeQueryData;\n}\n\n/**\n * Фильтр типа \"выбор из списка\".\n */\ninterface optionSelectQueryData {\n  /** Тип фильтра */\n  type: 'select';\n  /** Выбранные значения */\n  value: string[];\n}\n\n/**\n * Фильтр типа \"диапазон значений\".\n*/\ninterface optionRangeQueryData {\n  /** Тип фильтра */\n  type: 'range';\n  /** Минимум в диапазоне */\n  min: number;\n  /** Максимум в диапазоне */\n  max: number;\n}\n\n/**\n * Интерфейс данных о мебели, получаемых из магазина.\n */\nexport interface furnitureShopData {\n  /** Название */\n  name: string;\n  /** Стоимость мебели */\n  cost: number;\n  /** Неполный Url превью (вначало надо вставить baseUrl сервера) */\n  previewUrl: string;\n  /** Id мебели */\n  furnitureCardId: string;\n  /** Массив цветов мебели */\n  colors: string[];\n  /** Габариты мебели */\n  proportions: modelInterface;\n}\n\n/**\n * Интерфейс клиентских фильтров, значения которых формируются на основе ответа от сервера.\n */\nexport interface clientFilters {\n  /** Цвета мебели */\n  colors: string[];\n  /** Минимальная стоимость */\n  minCost: number;\n  /** Максимальная стоимость */\n  maxCost: number;\n}\n\n/**\n * Сервис для получения данных о мебели из магазина, с учетом фильтрации и пагинации.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ShopService {\n  /** Базовый URL сервиса */\n  private baseServiceUrl = baseUrl + 'shop';\n\n  /** Активный AbortController для отмены предыдущих запросов */\n  private abortController: AbortController | null = null;\n\n  constructor(private httpModule: HttpClient) { }\n\n  /**\n   * Выполняет GET-запрос на получение данных по категории мебели.\n   * Поддерживает фильтрацию и стартовую позицию для пагинации.\n   * При повторном вызове отменяет предыдущий запрос.\n   *\n   * @param categoryName - Название категории мебели.\n   * @param startRange - Начальный индекс (offset) выборки.\n   * @param queryData - Объект фильтров (опционально).\n   *\n   * @returns Промис с объектом, содержащим:\n   * - `resultsArray`: массив карточек мебели с обновлёнными URL превью\n   * - `resultsClientFiltersData`: агрегированные данные фильтров для клиента\n   *\n   * @throws {Error} В случае сетевой ошибки или отмены запроса.\n   */\n  async GETgetCategoryData(categoryName: string, startRange: number, queryData?: queryData) {\n    if (this.abortController) {\n      this.abortController.abort();\n    }\n\n    this.abortController = new AbortController();\n\n    try {\n      let requestUrl = `${this.baseServiceUrl}?category=${categoryName}&startRange=${startRange}`;\n\n      if (queryData && Object.keys(queryData).length > 0) {\n        const params = new URLSearchParams();\n        params.append('filters', JSON.stringify(queryData));\n        requestUrl += `&${new URLSearchParams(params).toString()}`;\n      }\n\n      const response = await fetch(\n        requestUrl,\n        { signal: this.abortController.signal }\n      );\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Ошибка: ${response.status} — ${errorText}`);\n      }\n\n      const RESPONSE = await response.json() as { resultsArray: furnitureShopData[] };\n      const RESULTS_ARRAY = RESPONSE.resultsArray;\n\n      const UPDATED_RESULTS = RESULTS_ARRAY.map(furniture => ({\n        ...furniture,\n        previewUrl: baseUrl + furniture.previewUrl\n      }));\n\n      return {\n        resultsArray: UPDATED_RESULTS,\n        resultsClientFiltersData: this.getFindOptionsByResult(UPDATED_RESULTS)\n      };\n\n    } catch (error: any) {\n      if (error.name === 'AbortError') {\n      } else {\n        console.error('Ошибка запроса:', error);\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Формирует объект фильтров на основе полученных данных о мебели.\n   *\n   * @param resultsArray - Массив карточек мебели\n   * @returns Объект клиентских фильтров (цвета, минимальная и максимальная цена)\n   */\n  private getFindOptionsByResult(resultsArray: furnitureShopData[]) {\n    let filtersObject: clientFilters = {\n      colors: [],\n      minCost: Infinity,\n      maxCost: -Infinity\n    };\n\n    resultsArray.forEach(furnitureData => {\n      if (furnitureData.cost  filtersObject.maxCost) filtersObject.maxCost = furnitureData.cost;\n\n      filtersObject.colors.push(...furnitureData.colors);\n    });\n\n    filtersObject.minCost = filtersObject.minCost!== Infinity ? filtersObject.minCost : 0;\n    filtersObject.maxCost = filtersObject.maxCost!== -Infinity ? filtersObject.maxCost : 0;\n\n    filtersObject.colors = [...new Set(filtersObject.colors)];\n    return filtersObject;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/googleAuthData.html":{"url":"interfaces/googleAuthData.html","title":"interface - googleAuthData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  googleAuthData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Данные для аутентификации через Google\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            accountType\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accountType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accountType:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                            \n                                \n                                    Тип аккаунта - 'google'\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { accountType, changeAccountDataEmail, changeAccountData } from './account.service';\nimport { baseUrl } from '.';\nimport { isEmailAccount } from './account.service';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные для аутентификации через email\n */\nexport interface emailAuthData {\n  /** Email пользователя */\n  email: string;\n  /** Пароль пользователя */\n  password: string;\n  /** Тип аккаунта - 'email' */\n  accountType: 'email';\n}\n\n/**\n * Данные для аутентификации через Google\n */\nexport interface googleAuthData {\n  /** Тип аккаунта - 'google' */\n  accountType: 'google';\n}\n\n/**\n * Объединённый тип данных для аутентификации\n */\nexport type authData = googleAuthData | emailAuthData;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  /** Базовый URL для auth-роутов */\n  private baseServiceUrl = baseUrl + 'auth/';\n\n  constructor(\n    private httpModule: HttpClient\n  ) { }\n\n  /**\n   * Создание длинного JWT токена\n   * @param authData Данные для входа (email+пароль или google)\n   * @returns Promise с JWT токеном\n   */\n  POSTcreateLongJWT(authData: authData) {\n    let HTTP_PARAMS = new HttpParams()\n      .set('accountType', authData.accountType);\n\n    if (isEmailAccount(authData)) {\n      HTTP_PARAMS = HTTP_PARAMS\n        .set('email', authData.email)\n        .set('password', authData.password);\n    }\n\n    return firstValueFrom(this.httpModule.post(this.baseServiceUrl + 'jwt/long', HTTP_PARAMS)) as Promise;\n  }\n\n  /**\n   * Создание короткого (временного) JWT токена\n   * @param email Email пользователя\n   * @returns Promise с временным JWT токеном\n   */\n  POSTcreateShortJWT(email: string) {\n    let HTTP_PARAMS = new HttpParams()\n      .set('email', email);\n\n    return firstValueFrom(this.httpModule.post(this.baseServiceUrl + 'jwt/temporary', { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Обновление базовой информации о пользователе\n   * @param changeData Новые данные для обновления аккаунта\n   * @returns Promise с сообщением об успехе обновления\n   */\n  PUTupdateBaseData(changeData: changeAccountData) {\n    const paramObject: any = {\n      accountType: changeData.accountType,\n      jwt: changeData.jwt\n    };\n\n    if (isEmailAccount(changeData)) {\n      paramObject.password = changeData.password;\n    }\n\n    const HTTP_PARAMS = new HttpParams({ fromObject: paramObject });\n    console.log(HTTP_PARAMS.toString());\n\n    return firstValueFrom(this.httpModule.put(this.baseServiceUrl + 'account', changeData)) as Promise;\n  }\n\n  /**\n   * Запрос кода сброса пароля по email\n   * @param email Email пользователя\n   * @returns Promise с кодом для сброса пароля\n   */\n  GETrequestPasswordCode(email: string) {\n    let HTTP_PARAMS = new HttpParams()\n      .set('email', email);\n\n    return firstValueFrom(this.httpModule.get(this.baseServiceUrl + 'account/code', { params: HTTP_PARAMS })) as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/imageSliderClientData.html":{"url":"interfaces/imageSliderClientData.html","title":"interface - imageSliderClientData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  imageSliderClientData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/image-slider/image-slider.component.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс данных для слайдера с клиентскими изображениями в формате Blob.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            idMainImage\n                                        \n                                \n                                \n                                        \n                                            images\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        idMainImage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        idMainImage:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Индекс главного (выбранного) изображения\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        images\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        images:     Blob[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Blob[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Массив изображений в формате Blob\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Component, HostListener, Input, OnInit } from '@angular/core';\nimport { NgIf, NgFor } from '@angular/common';\nimport { TuiCarousel } from '@taiga-ui/kit';\n\n/**\n * Интерфейс данных для слайдера с клиентскими изображениями в формате Blob.\n */\nexport interface imageSliderClientData {\n  /** Массив изображений в формате Blob */\n  images: Blob[];\n  /** Индекс главного (выбранного) изображения */\n  idMainImage: number;\n}\n\n/**\n * Интерфейс данных для слайдера с изображениями с сервера в виде URL-строк.\n */\nexport interface imageSliderFromServerData {\n  /** Массив URL-строк изображений */\n  images: string[];\n  /** Индекс главного (выбранного) изображения */\n  idMainImage: number;\n}\n\n/**\n * Компонент слайдера изображений.\n * Отображает изображения с возможностью выбора главного изображения.\n */\n@Component({\n  selector: 'app-image-slider',\n  standalone: true,\n  imports: [NgIf, NgFor, TuiCarousel],\n  templateUrl: './image-slider.component.html',\n  styleUrl: './image-slider.component.scss'\n})\nexport class ImageSliderComponent implements OnInit {\n  /**\n   * Текущий индекс выбранного слайда (используется для локального отслеживания).\n   */\n  protected index: number = 0;\n\n  /**\n   * Флаг, указывающий, находится ли текущее отображение в мобильном виде (ширина \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/imageSliderFromServerData.html":{"url":"interfaces/imageSliderFromServerData.html","title":"interface - imageSliderFromServerData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  imageSliderFromServerData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/image-slider/image-slider.component.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс данных для слайдера с изображениями с сервера в виде URL-строк.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            idMainImage\n                                        \n                                \n                                \n                                        \n                                            images\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        idMainImage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        idMainImage:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Индекс главного (выбранного) изображения\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        images\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        images:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Массив URL-строк изображений\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Component, HostListener, Input, OnInit } from '@angular/core';\nimport { NgIf, NgFor } from '@angular/common';\nimport { TuiCarousel } from '@taiga-ui/kit';\n\n/**\n * Интерфейс данных для слайдера с клиентскими изображениями в формате Blob.\n */\nexport interface imageSliderClientData {\n  /** Массив изображений в формате Blob */\n  images: Blob[];\n  /** Индекс главного (выбранного) изображения */\n  idMainImage: number;\n}\n\n/**\n * Интерфейс данных для слайдера с изображениями с сервера в виде URL-строк.\n */\nexport interface imageSliderFromServerData {\n  /** Массив URL-строк изображений */\n  images: string[];\n  /** Индекс главного (выбранного) изображения */\n  idMainImage: number;\n}\n\n/**\n * Компонент слайдера изображений.\n * Отображает изображения с возможностью выбора главного изображения.\n */\n@Component({\n  selector: 'app-image-slider',\n  standalone: true,\n  imports: [NgIf, NgFor, TuiCarousel],\n  templateUrl: './image-slider.component.html',\n  styleUrl: './image-slider.component.scss'\n})\nexport class ImageSliderComponent implements OnInit {\n  /**\n   * Текущий индекс выбранного слайда (используется для локального отслеживания).\n   */\n  protected index: number = 0;\n\n  /**\n   * Флаг, указывающий, находится ли текущее отображение в мобильном виде (ширина \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    15 Components\n                \n            \n        \n        \n            \n                \n                    \n                    1 Directive\n                \n            \n        \n        \n            \n                \n                    \n                    13 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    1 Pipe\n                \n            \n        \n        \n            \n                \n                    \n                    39 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/modelInterface.html":{"url":"interfaces/modelInterface.html","title":"interface - modelInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  modelInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/scene/scene.component.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс для описания размеров модели.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            height\n                                        \n                                \n                                \n                                        \n                                            length\n                                        \n                                \n                                \n                                        \n                                            width\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        height:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Высота модели\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        length\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        length:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Длина модели\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        width:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Ширина модели\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Component, AfterViewInit, ElementRef, HostListener, Input, SimpleChanges, Output, EventEmitter, OnChanges, OnDestroy } from '@angular/core';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { NgxSpinnerModule, NgxSpinnerService } from 'ngx-spinner';\nimport { ProjectService, roomData as roomDataPlan } from '../../services/project.service';\nimport { loadModel } from './loaders';\nimport { FurnitureModelControlService } from '../../services/furniture-model-control.service';\nimport { AccountCookieService } from '../../services/account-cookie.service';\nimport { FurnitureCardControlService } from '../../services/furniture-card-control.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { NotificationService } from '../../services/notification.service';\nimport { Location, NgIf } from '@angular/common';\nimport { PlanHouseComponent } from '../plan-house/plan-house.component';\n\n/**\n * Интерфейс для описания размеров модели.\n */\nexport interface modelInterface {\n  /** Ширина модели */\n  width: number;\n  /** Высота модели */\n  height: number;\n  /** Длина модели */\n  length: number;\n}\n\n/**\n * Интерфейс для описания объекта сцены.\n */\nexport interface objectSceneInterface {\n  /** ID объекта */\n  objectId: string;\n  /** Расстояние по оси X в метрах */\n  xMetersDistance: number;\n  /** Расстояние по оси Z в метрах */\n  zMetersDistance: number;\n  /** Угол поворота по оси Y */\n  yRotate: number;\n}\n\n/**\n * Интерфейс для описания данных загрузки объекта.\n */\ninterface objectLoadInterface {\n  /** Расстояние по оси X */\n  xDistance: number;\n  /** Расстояние по оси Z */\n  zDistance: number;\n  /** Угол поворота по оси Y */\n  yRotate: number;\n}\n\n/**\n * Интерфейс для описания данных комнаты.\n */\ninterface roomData extends modelInterface {\n  /** Массив объектов в комнате */\n  objects: objectSceneInterface[];\n}\n\n@Component({\n  selector: 'app-scene',\n  standalone: true,\n  imports: [NgxSpinnerModule, NgIf],\n  templateUrl: './scene.component.html',\n  styleUrls: ['./scene.component.scss']\n})\nexport class SceneComponent implements AfterViewInit, OnChanges {\n  constructor(\n    private elementRef: ElementRef,\n    private spinner: NgxSpinnerService,\n    private furnitureModelService: FurnitureModelControlService,\n    private furnitureCardService: FurnitureCardControlService,\n    private accountCookieService: AccountCookieService,\n    private projectService: ProjectService,\n    private route: ActivatedRoute,\n    private notification: NotificationService,\n    private location: Location,\n    private planHouseComponent: PlanHouseComponent\n  ) { }\n\n  @Input()\n  /** Данные комнаты */\n  roomData!: roomDataPlan | undefined;\n\n  @Output()\n  /** Событие для сохранения объектов */\n  saveObjectsEmitter = new EventEmitter();\n\n  /** Рендерер Three.js */\n  private renderer!: THREE.WebGLRenderer;\n\n  /** Камера Three.js */\n  private camera!: THREE.PerspectiveCamera;\n\n  /** Сцена Three.js */\n  private scene!: THREE.Scene;\n\n  /** Контроллеры OrbitControls */\n  private controls!: OrbitControls;\n\n  /** ID текущего кадра анимации */\n  private animationFrameId: number | null = null;\n\n  /** Соотношение размеров холста */\n  private canvasRatioOfWindow = 1.5;\n\n  /** Пропорции комнаты */\n  private roomProportions!: modelInterface;\n\n  /** Луч для определения пересечений */\n  private raycaster = new THREE.Raycaster();\n\n  /** Координаты мыши */\n  private mouse = new THREE.Vector2();\n\n  /** Прямоугольная сетка комнаты */\n  private rectangleMesh!: THREE.Mesh;\n\n  /** Целевой объект для взаимодействия */\n  protected targetobject: THREE.Object3D | undefined = undefined;\n\n\n  ngAfterViewInit(): void {\n    this.initThreeJs();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.roomData = changes['roomData'].currentValue as roomDataPlan\n    if (!this.roomData || this.scene === undefined || this.roomData === changes['roomData'].previousValue) return\n    if (changes['roomData'].previousValue !== undefined) { this.clearRoom() }\n    this.camera.position.set(0, 5, 0)\n    this.camera.rotation.set(THREE.MathUtils.degToRad(-90), 0, 0)\n    this.roomProportions = this.roomData.roomProportions\n    this.createRoom();\n    this.rectangleMesh.rotation.x = THREE.MathUtils.degToRad(-90)\n\n    if (this.getObjectSize(this.rectangleMesh).width === 0) return\n    if (!this.planHouseComponent.sceneOpenToggle) return\n\n    this.loadRoom()\n    const FURNITURE_ID = this.route.snapshot.params['furnitureCardId']\n    if (!FURNITURE_ID || changes['roomData'].previousValue) return\n    this.fixPath()\n    this.addModel(FURNITURE_ID, true)\n  }\n\n  private async loadFurnitureModel(fileModel: Blob, furnitureSize: modelInterface, furnitureCardId: string, saveRoom: boolean, moveData?: objectLoadInterface) {\n    try {\n      const LOAD_OBJECT = await loadModel(fileModel)\n      if (moveData) { this.addObjectToScene(LOAD_OBJECT, furnitureSize, furnitureCardId, moveData) } else { this.addObjectToScene(LOAD_OBJECT, furnitureSize, furnitureCardId) }\n      if (saveRoom) this.saveRoom()\n    } catch (error) {\n    }\n  }\n  private async addModel(furnitureCardId: string, saveRoom: boolean, moveData?: objectLoadInterface) {\n    const JWT = this.accountCookieService.getJwt()\n    if (!JWT) return\n    try {\n      if (saveRoom) this.spinner.show()\n      const PROPORTIONS = (await this.furnitureCardService.GETfurnitureCard(furnitureCardId)).furnitureCard.proportions as modelInterface\n      const MODEL = await this.furnitureModelService.GETfurnitureModel(JWT, furnitureCardId)\n      await this.loadFurnitureModel(MODEL, PROPORTIONS, furnitureCardId, saveRoom, moveData)\n      this.spinner.hide()\n    } catch (error) {\n      this.spinner.hide()\n      this.notification.setError('Ошибка загрузки модели', 5000)\n      console.log(error)\n    }\n  }\n\n  private fixPath() {\n    const NEW_URL = this.location.path().split('/').slice(0, -1).join('/')\n    this.location.replaceState(NEW_URL)\n  }\n  /**\n   * Инициализация Three.js сцены.\n   */\n  private initThreeJs(): void {\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const HEMISPHERE_LIGHT = new THREE.HemisphereLight(0xaaaaaa, 0x000000, 2);\n    this.scene.add(HEMISPHERE_LIGHT);\n    this.renderer = new THREE.WebGLRenderer({ antialias: true, alpha: false });\n    const CANVAS_CONTAINER = this.elementRef.nativeElement.querySelector('#canvasContainer');\n    this.camera.position.z = 5;\n    this.renderer.setSize(window.innerWidth / this.canvasRatioOfWindow, window.innerHeight / this.canvasRatioOfWindow);\n    CANVAS_CONTAINER.appendChild(this.renderer.domElement);\n    this.animationFrameId = requestAnimationFrame(() => this.animate());\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  /**\n   * Анимация сцены.\n   */\n  private animate(): void {\n    this.animationFrameId = requestAnimationFrame(() => this.animate());\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  /**\n   * Создает геометрию прямоугольника с закругленными углами.\n   * @param width Ширина прямоугольника.\n   * @param height Высота прямоугольника.\n   * @param radius Радиус закругления.\n   * @param segments Количество сегментов.\n   * @returns Геометрия прямоугольника.\n   */\n  private createRoundedRectangleGeometry(width: number, height: number, radius: number, segments: number): THREE.BufferGeometry {\n    const SHAPE = new THREE.Shape();\n    SHAPE.moveTo(-width / 2 + radius, -height / 2);\n    SHAPE.lineTo(width / 2 - radius, -height / 2);\n    SHAPE.quadraticCurveTo(width / 2, -height / 2, width / 2, -height / 2 + radius);\n    SHAPE.lineTo(width / 2, height / 2 - radius);\n    SHAPE.quadraticCurveTo(width / 2, height / 2, width / 2 - radius, height / 2);\n    SHAPE.lineTo(-width / 2 + radius, height / 2);\n    SHAPE.quadraticCurveTo(-width / 2, height / 2, -width / 2, height / 2 - radius);\n    SHAPE.lineTo(-width / 2, -height / 2 + radius);\n    SHAPE.quadraticCurveTo(-width / 2, -height / 2, -width / 2 + radius, -height / 2);\n\n    const geometry = new THREE.ShapeGeometry(SHAPE, segments);\n\n    return geometry;\n  }\n\n  /**\n   * Создает комнату на сцене.\n   */\n  private createRoom(): void {\n    if (!this.roomData) return\n    const ROOM_PROPORTIONS = this.roomData.roomProportions\n    const RADIUS = 0.1\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n    this.controls.enableDamping = true;\n    this.controls.dampingFactor = 0.15;\n    this.controls.enableZoom = true;\n    this.controls.minDistance = 1;\n    this.controls.maxDistance = 10;\n    const paddingPolarAngle = 5;\n    this.controls.maxPolarAngle = THREE.MathUtils.degToRad(90 - paddingPolarAngle);\n    this.createRoomShape(ROOM_PROPORTIONS.width, ROOM_PROPORTIONS.length, RADIUS);\n    this.rectangleMesh.name = 'roomFloorBase';\n    this.rectangleMesh\n  }\n\n  /**\n   * Рассчитывает данные для сохранения объекта.\n   * @param object Объект сцены.\n   * @returns Данные для сохранения объекта.\n   */\n  private calculateObjectSaveData(object: THREE.Object3D): objectSceneInterface {\n    const FLOOR_SIZE = this.getObjectSize(this.rectangleMesh)\n    const OBJECT_POSITION = object.position\n    const objectSaveData: objectSceneInterface = {\n      objectId: (object.userData as any).id,\n      xMetersDistance: OBJECT_POSITION.x / FLOOR_SIZE.width * this.roomProportions.width,\n      zMetersDistance: OBJECT_POSITION.z / FLOOR_SIZE.length * this.roomProportions.length,\n      yRotate: object.rotation.y\n    }\n    return objectSaveData\n  }\n\n  /**\n   * Рассчитывает данные для перемещения объекта.\n   * @param objectSaveData Данные сохраненного объекта.\n   * @returns Данные для перемещения объекта.\n   */\n  private calculateMoveObjectData(objectSaveData: objectSceneInterface): objectLoadInterface {\n    const FLOOR_SIZE = this.getObjectSize(this.rectangleMesh)\n    return {\n      xDistance: objectSaveData.xMetersDistance * FLOOR_SIZE.width / this.roomProportions.width,\n      zDistance: objectSaveData.zMetersDistance * FLOOR_SIZE.length / this.roomProportions.length,\n      yRotate: objectSaveData.yRotate\n    }\n  }\n\n  /**\n   * Создает форму комнаты.\n   * @param widthRatio Соотношение ширины.\n   * @param heightRatio Соотношение высоты.\n   * @param radius Радиус закругления.\n   */\n  private createRoomShape(widthRatio: number, heightRatio: number, radius: number): void {\n    const CAMERA_FRUSTUM_BOUNDS = this.calculateFrustumBounds();\n    const SHAPE_RATIO = widthRatio / heightRatio;\n    let width: number, height: number;\n\n    if (SHAPE_RATIO  UPLOAD_OBJECT_SIZE.length ? RECTANGLE_SIZE.width / UPLOAD_OBJECT_SIZE.width : RECTANGLE_SIZE.length / UPLOAD_OBJECT_SIZE.length;\n    const REAL_PROPORTIONS_COEFFICIENT = UPLOAD_OBJECT_SIZE.width > UPLOAD_OBJECT_SIZE.length ? width / this.roomProportions.width : length / length;\n    const GENERAL_COEFFICIENT = REAL_PROPORTIONS_COEFFICIENT * SCENE_PROPORTIONS_COEFFICIENT;\n    object.scale.set(GENERAL_COEFFICIENT, GENERAL_COEFFICIENT, GENERAL_COEFFICIENT);\n  }\n\n  /**\n   * Загружает комнату с объектами.\n   */\n  public async loadRoom(): Promise {\n    const JWT = this.accountCookieService.getJwt()\n    if (!JWT || !this.roomData) return\n    const roomData: roomData = {\n      objects: this.roomData.objects,\n      ...this.roomData.roomProportions\n    }\n\n    this.spinner.show()\n    for (const object of roomData.objects) {\n      await this.addModel(object.objectId, false, this.calculateMoveObjectData(object));\n    }\n    this.spinner.hide()\n  }\n\n  /**\n   * Очищает комнату от объектов.\n   */\n  private clearRoom(): void {\n    for (let i = this.scene.children.length - 1; i >= 0; i--) {\n      const OBJECT = this.scene.children[i];\n      if (OBJECT.type !== 'Scene' && OBJECT.type !== 'HemisphereLight') {\n        this.scene.remove(OBJECT);\n      }\n    }\n  }\n\n  /**\n   * Обрабатывает изменение размера окна.\n   * @param event Событие изменения размера.\n   */\n  @HostListener('window:resize', ['$event'])\n  private onResize(event: Event): void {\n    this.renderer.setSize(window.innerWidth / this.canvasRatioOfWindow, window.innerHeight / this.canvasRatioOfWindow);\n    this.camera.aspect = window.innerWidth / window.innerHeight;\n    this.camera.updateProjectionMatrix();\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  /**\n   * Обрабатывает клик мыши.\n   * @param event Событие клика.\n   */\n  @HostListener('click', ['$event'])\n  private onMouseClick(event: MouseEvent): void {\n    if (this.targetobject) {\n      this.targetobject = undefined;\n      return;\n    }\n    const RECT = (event.target as HTMLCanvasElement).getBoundingClientRect();\n    const X = (event.clientX - RECT.left) / RECT.width * 2 - 1;\n    const Y = -(event.clientY - RECT.top) / RECT.height * 2 + 1;\n\n    this.mouse.x = X;\n    this.mouse.y = Y;\n    this.raycaster.setFromCamera(this.mouse, this.camera);\n\n    const INTERSECTIONS = this.raycaster.intersectObjects(this.scene.children);\n\n    const FOUND_INTERSECTION = INTERSECTIONS.find(intersect => {\n      return intersect.object.name !== 'roomFloorBase' && intersect.object.type !== 'Scene' && intersect.object.type !== 'HemisphereLight'\n    })?.object\n    if (!FOUND_INTERSECTION) return\n    this.targetobject = FOUND_INTERSECTION.parent ? FOUND_INTERSECTION.parent : FOUND_INTERSECTION\n  }\n\n  /**\n   * Поворачивает целевой объект.\n   * @param event Событие нажатия клавиши.\n   */\n  @HostListener('window:keydown', ['$event'])\n  private rotateTargetObject(event: KeyboardEvent): void {\n    if (!this.targetobject) return\n    let rotateAngle = -0.05\n\n    switch (event.key) {\n      case 'q':\n      case 'й':\n        this.targetobject.rotation.y -= rotateAngle\n        break\n      case 'e':\n      case 'у':\n        this.targetobject.rotation.y += rotateAngle\n    }\n  }\n\n  /**\n   * Обрабатывает перемещение мыши.\n   * @param event Событие перемещения мыши.\n   */\n  @HostListener('mousemove', ['$event'])\n  private onMousemove(event: MouseEvent): void {\n    if (!this.targetobject) return;\n\n    const RECT = (event.target as HTMLCanvasElement).getBoundingClientRect();\n    const X = (event.clientX - RECT.left) / RECT.width * 2 - 1;\n    const Y = -(event.clientY - RECT.top) / RECT.height * 2 + 1;\n\n    this.mouse.x = X;\n    this.mouse.y = Y;\n    this.raycaster.setFromCamera(this.mouse, this.camera);\n\n    const INTERSECTIONS = this.raycaster.intersectObject(this.rectangleMesh);\n    if (INTERSECTIONS.length === 0) return;\n\n    const INTERSECTIONS_X = INTERSECTIONS[0].point.x;\n    const INTERSECTION_Z = INTERSECTIONS[0].point.z;\n    const RECTANGLE_MESH_SIZE = this.getObjectSize(this.rectangleMesh);\n    const objectSize = this.getObjectSize(this.targetobject);\n\n    const minX = -RECTANGLE_MESH_SIZE.width / 2 + objectSize.width / 2;\n    const maxX = RECTANGLE_MESH_SIZE.width / 2 - objectSize.width / 2;\n\n    let newXObjectPosition = INTERSECTIONS_X;\n    if (newXObjectPosition  maxX) {\n      newXObjectPosition = maxX;\n    }\n\n    const MIN_Z = -RECTANGLE_MESH_SIZE.length / 2 + objectSize.length / 2;\n    const MAX_Z = RECTANGLE_MESH_SIZE.length / 2 - objectSize.length / 2;\n\n    let newZObjectPosition = INTERSECTION_Z;\n    if (newZObjectPosition  MAX_Z) {\n      newZObjectPosition = MAX_Z;\n    }\n\n    this.targetobject.position.set(newXObjectPosition, 0, newZObjectPosition);\n  }\n\n  /**\n   * Генерирует отчет по комнате.\n   */\n  protected async getReport(): Promise {\n    const JWT = this.accountCookieService.getJwt()\n    if (!JWT || !this.roomData?._id) return\n\n    const oldCameraPosition = this.camera.position.clone();\n    const oldCameraRotation = this.camera.rotation.clone();\n\n    this.camera.position.set(0, 7, 0)\n    this.camera.rotation.set(THREE.MathUtils.degToRad(-90), 0, 0)\n    this.renderer.render(this.scene, this.camera);\n    const imageDataURL = this.renderer.domElement.toDataURL('image/png')\n    const imageDataResponse = await fetch(imageDataURL)\n\n    this.camera.position.copy(oldCameraPosition);\n    this.camera.rotation.copy(oldCameraRotation);\n\n    if (!imageDataResponse.ok) {\n      this.notification.setError('Ошибка при рендере', 5000)\n    }\n    const imageDataBlob = await imageDataResponse.blob()\n\n    this.projectService.GETgetReportOfRoom(JWT, this.roomData?._id, imageDataBlob)\n  }\n\n  /**\n   * Удаляет выбранную модель.\n   */\n  protected deleteModel(): void {\n    if (!this.targetobject) return\n    this.scene.remove(this.targetobject)\n    this.saveRoom()\n  }\n\n  /**\n   * Сохраняет текущее состояние комнаты.\n   */\n  public saveRoom(): void {\n    if (!this.roomData) return\n    const OBJECTS_SCENE_ARRAY = this.scene.children.filter(object => {\n      if (\n        object.name !== 'roomFloorBase' &&\n        object.type !== 'Scene' &&\n        object.type !== 'HemisphereLight'\n      ) {\n        return true;\n      }\n      return false;\n    })\n      .map(object => {\n        return this.calculateObjectSaveData(object)\n      })\n    const ROOM_OBJECTS_DATA = OBJECTS_SCENE_ARRAY\n    this.roomData.objects = OBJECTS_SCENE_ARRAY\n    this.saveObjectsEmitter.emit(ROOM_OBJECTS_DATA)\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/objectLoadInterface.html":{"url":"interfaces/objectLoadInterface.html","title":"interface - objectLoadInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  objectLoadInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/scene/scene.component.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс для описания данных загрузки объекта.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            xDistance\n                                        \n                                \n                                \n                                        \n                                            yRotate\n                                        \n                                \n                                \n                                        \n                                            zDistance\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        xDistance\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        xDistance:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Расстояние по оси X\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        yRotate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        yRotate:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Угол поворота по оси Y\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        zDistance\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        zDistance:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Расстояние по оси Z\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Component, AfterViewInit, ElementRef, HostListener, Input, SimpleChanges, Output, EventEmitter, OnChanges, OnDestroy } from '@angular/core';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { NgxSpinnerModule, NgxSpinnerService } from 'ngx-spinner';\nimport { ProjectService, roomData as roomDataPlan } from '../../services/project.service';\nimport { loadModel } from './loaders';\nimport { FurnitureModelControlService } from '../../services/furniture-model-control.service';\nimport { AccountCookieService } from '../../services/account-cookie.service';\nimport { FurnitureCardControlService } from '../../services/furniture-card-control.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { NotificationService } from '../../services/notification.service';\nimport { Location, NgIf } from '@angular/common';\nimport { PlanHouseComponent } from '../plan-house/plan-house.component';\n\n/**\n * Интерфейс для описания размеров модели.\n */\nexport interface modelInterface {\n  /** Ширина модели */\n  width: number;\n  /** Высота модели */\n  height: number;\n  /** Длина модели */\n  length: number;\n}\n\n/**\n * Интерфейс для описания объекта сцены.\n */\nexport interface objectSceneInterface {\n  /** ID объекта */\n  objectId: string;\n  /** Расстояние по оси X в метрах */\n  xMetersDistance: number;\n  /** Расстояние по оси Z в метрах */\n  zMetersDistance: number;\n  /** Угол поворота по оси Y */\n  yRotate: number;\n}\n\n/**\n * Интерфейс для описания данных загрузки объекта.\n */\ninterface objectLoadInterface {\n  /** Расстояние по оси X */\n  xDistance: number;\n  /** Расстояние по оси Z */\n  zDistance: number;\n  /** Угол поворота по оси Y */\n  yRotate: number;\n}\n\n/**\n * Интерфейс для описания данных комнаты.\n */\ninterface roomData extends modelInterface {\n  /** Массив объектов в комнате */\n  objects: objectSceneInterface[];\n}\n\n@Component({\n  selector: 'app-scene',\n  standalone: true,\n  imports: [NgxSpinnerModule, NgIf],\n  templateUrl: './scene.component.html',\n  styleUrls: ['./scene.component.scss']\n})\nexport class SceneComponent implements AfterViewInit, OnChanges {\n  constructor(\n    private elementRef: ElementRef,\n    private spinner: NgxSpinnerService,\n    private furnitureModelService: FurnitureModelControlService,\n    private furnitureCardService: FurnitureCardControlService,\n    private accountCookieService: AccountCookieService,\n    private projectService: ProjectService,\n    private route: ActivatedRoute,\n    private notification: NotificationService,\n    private location: Location,\n    private planHouseComponent: PlanHouseComponent\n  ) { }\n\n  @Input()\n  /** Данные комнаты */\n  roomData!: roomDataPlan | undefined;\n\n  @Output()\n  /** Событие для сохранения объектов */\n  saveObjectsEmitter = new EventEmitter();\n\n  /** Рендерер Three.js */\n  private renderer!: THREE.WebGLRenderer;\n\n  /** Камера Three.js */\n  private camera!: THREE.PerspectiveCamera;\n\n  /** Сцена Three.js */\n  private scene!: THREE.Scene;\n\n  /** Контроллеры OrbitControls */\n  private controls!: OrbitControls;\n\n  /** ID текущего кадра анимации */\n  private animationFrameId: number | null = null;\n\n  /** Соотношение размеров холста */\n  private canvasRatioOfWindow = 1.5;\n\n  /** Пропорции комнаты */\n  private roomProportions!: modelInterface;\n\n  /** Луч для определения пересечений */\n  private raycaster = new THREE.Raycaster();\n\n  /** Координаты мыши */\n  private mouse = new THREE.Vector2();\n\n  /** Прямоугольная сетка комнаты */\n  private rectangleMesh!: THREE.Mesh;\n\n  /** Целевой объект для взаимодействия */\n  protected targetobject: THREE.Object3D | undefined = undefined;\n\n\n  ngAfterViewInit(): void {\n    this.initThreeJs();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.roomData = changes['roomData'].currentValue as roomDataPlan\n    if (!this.roomData || this.scene === undefined || this.roomData === changes['roomData'].previousValue) return\n    if (changes['roomData'].previousValue !== undefined) { this.clearRoom() }\n    this.camera.position.set(0, 5, 0)\n    this.camera.rotation.set(THREE.MathUtils.degToRad(-90), 0, 0)\n    this.roomProportions = this.roomData.roomProportions\n    this.createRoom();\n    this.rectangleMesh.rotation.x = THREE.MathUtils.degToRad(-90)\n\n    if (this.getObjectSize(this.rectangleMesh).width === 0) return\n    if (!this.planHouseComponent.sceneOpenToggle) return\n\n    this.loadRoom()\n    const FURNITURE_ID = this.route.snapshot.params['furnitureCardId']\n    if (!FURNITURE_ID || changes['roomData'].previousValue) return\n    this.fixPath()\n    this.addModel(FURNITURE_ID, true)\n  }\n\n  private async loadFurnitureModel(fileModel: Blob, furnitureSize: modelInterface, furnitureCardId: string, saveRoom: boolean, moveData?: objectLoadInterface) {\n    try {\n      const LOAD_OBJECT = await loadModel(fileModel)\n      if (moveData) { this.addObjectToScene(LOAD_OBJECT, furnitureSize, furnitureCardId, moveData) } else { this.addObjectToScene(LOAD_OBJECT, furnitureSize, furnitureCardId) }\n      if (saveRoom) this.saveRoom()\n    } catch (error) {\n    }\n  }\n  private async addModel(furnitureCardId: string, saveRoom: boolean, moveData?: objectLoadInterface) {\n    const JWT = this.accountCookieService.getJwt()\n    if (!JWT) return\n    try {\n      if (saveRoom) this.spinner.show()\n      const PROPORTIONS = (await this.furnitureCardService.GETfurnitureCard(furnitureCardId)).furnitureCard.proportions as modelInterface\n      const MODEL = await this.furnitureModelService.GETfurnitureModel(JWT, furnitureCardId)\n      await this.loadFurnitureModel(MODEL, PROPORTIONS, furnitureCardId, saveRoom, moveData)\n      this.spinner.hide()\n    } catch (error) {\n      this.spinner.hide()\n      this.notification.setError('Ошибка загрузки модели', 5000)\n      console.log(error)\n    }\n  }\n\n  private fixPath() {\n    const NEW_URL = this.location.path().split('/').slice(0, -1).join('/')\n    this.location.replaceState(NEW_URL)\n  }\n  /**\n   * Инициализация Three.js сцены.\n   */\n  private initThreeJs(): void {\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const HEMISPHERE_LIGHT = new THREE.HemisphereLight(0xaaaaaa, 0x000000, 2);\n    this.scene.add(HEMISPHERE_LIGHT);\n    this.renderer = new THREE.WebGLRenderer({ antialias: true, alpha: false });\n    const CANVAS_CONTAINER = this.elementRef.nativeElement.querySelector('#canvasContainer');\n    this.camera.position.z = 5;\n    this.renderer.setSize(window.innerWidth / this.canvasRatioOfWindow, window.innerHeight / this.canvasRatioOfWindow);\n    CANVAS_CONTAINER.appendChild(this.renderer.domElement);\n    this.animationFrameId = requestAnimationFrame(() => this.animate());\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  /**\n   * Анимация сцены.\n   */\n  private animate(): void {\n    this.animationFrameId = requestAnimationFrame(() => this.animate());\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  /**\n   * Создает геометрию прямоугольника с закругленными углами.\n   * @param width Ширина прямоугольника.\n   * @param height Высота прямоугольника.\n   * @param radius Радиус закругления.\n   * @param segments Количество сегментов.\n   * @returns Геометрия прямоугольника.\n   */\n  private createRoundedRectangleGeometry(width: number, height: number, radius: number, segments: number): THREE.BufferGeometry {\n    const SHAPE = new THREE.Shape();\n    SHAPE.moveTo(-width / 2 + radius, -height / 2);\n    SHAPE.lineTo(width / 2 - radius, -height / 2);\n    SHAPE.quadraticCurveTo(width / 2, -height / 2, width / 2, -height / 2 + radius);\n    SHAPE.lineTo(width / 2, height / 2 - radius);\n    SHAPE.quadraticCurveTo(width / 2, height / 2, width / 2 - radius, height / 2);\n    SHAPE.lineTo(-width / 2 + radius, height / 2);\n    SHAPE.quadraticCurveTo(-width / 2, height / 2, -width / 2, height / 2 - radius);\n    SHAPE.lineTo(-width / 2, -height / 2 + radius);\n    SHAPE.quadraticCurveTo(-width / 2, -height / 2, -width / 2 + radius, -height / 2);\n\n    const geometry = new THREE.ShapeGeometry(SHAPE, segments);\n\n    return geometry;\n  }\n\n  /**\n   * Создает комнату на сцене.\n   */\n  private createRoom(): void {\n    if (!this.roomData) return\n    const ROOM_PROPORTIONS = this.roomData.roomProportions\n    const RADIUS = 0.1\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n    this.controls.enableDamping = true;\n    this.controls.dampingFactor = 0.15;\n    this.controls.enableZoom = true;\n    this.controls.minDistance = 1;\n    this.controls.maxDistance = 10;\n    const paddingPolarAngle = 5;\n    this.controls.maxPolarAngle = THREE.MathUtils.degToRad(90 - paddingPolarAngle);\n    this.createRoomShape(ROOM_PROPORTIONS.width, ROOM_PROPORTIONS.length, RADIUS);\n    this.rectangleMesh.name = 'roomFloorBase';\n    this.rectangleMesh\n  }\n\n  /**\n   * Рассчитывает данные для сохранения объекта.\n   * @param object Объект сцены.\n   * @returns Данные для сохранения объекта.\n   */\n  private calculateObjectSaveData(object: THREE.Object3D): objectSceneInterface {\n    const FLOOR_SIZE = this.getObjectSize(this.rectangleMesh)\n    const OBJECT_POSITION = object.position\n    const objectSaveData: objectSceneInterface = {\n      objectId: (object.userData as any).id,\n      xMetersDistance: OBJECT_POSITION.x / FLOOR_SIZE.width * this.roomProportions.width,\n      zMetersDistance: OBJECT_POSITION.z / FLOOR_SIZE.length * this.roomProportions.length,\n      yRotate: object.rotation.y\n    }\n    return objectSaveData\n  }\n\n  /**\n   * Рассчитывает данные для перемещения объекта.\n   * @param objectSaveData Данные сохраненного объекта.\n   * @returns Данные для перемещения объекта.\n   */\n  private calculateMoveObjectData(objectSaveData: objectSceneInterface): objectLoadInterface {\n    const FLOOR_SIZE = this.getObjectSize(this.rectangleMesh)\n    return {\n      xDistance: objectSaveData.xMetersDistance * FLOOR_SIZE.width / this.roomProportions.width,\n      zDistance: objectSaveData.zMetersDistance * FLOOR_SIZE.length / this.roomProportions.length,\n      yRotate: objectSaveData.yRotate\n    }\n  }\n\n  /**\n   * Создает форму комнаты.\n   * @param widthRatio Соотношение ширины.\n   * @param heightRatio Соотношение высоты.\n   * @param radius Радиус закругления.\n   */\n  private createRoomShape(widthRatio: number, heightRatio: number, radius: number): void {\n    const CAMERA_FRUSTUM_BOUNDS = this.calculateFrustumBounds();\n    const SHAPE_RATIO = widthRatio / heightRatio;\n    let width: number, height: number;\n\n    if (SHAPE_RATIO  UPLOAD_OBJECT_SIZE.length ? RECTANGLE_SIZE.width / UPLOAD_OBJECT_SIZE.width : RECTANGLE_SIZE.length / UPLOAD_OBJECT_SIZE.length;\n    const REAL_PROPORTIONS_COEFFICIENT = UPLOAD_OBJECT_SIZE.width > UPLOAD_OBJECT_SIZE.length ? width / this.roomProportions.width : length / length;\n    const GENERAL_COEFFICIENT = REAL_PROPORTIONS_COEFFICIENT * SCENE_PROPORTIONS_COEFFICIENT;\n    object.scale.set(GENERAL_COEFFICIENT, GENERAL_COEFFICIENT, GENERAL_COEFFICIENT);\n  }\n\n  /**\n   * Загружает комнату с объектами.\n   */\n  public async loadRoom(): Promise {\n    const JWT = this.accountCookieService.getJwt()\n    if (!JWT || !this.roomData) return\n    const roomData: roomData = {\n      objects: this.roomData.objects,\n      ...this.roomData.roomProportions\n    }\n\n    this.spinner.show()\n    for (const object of roomData.objects) {\n      await this.addModel(object.objectId, false, this.calculateMoveObjectData(object));\n    }\n    this.spinner.hide()\n  }\n\n  /**\n   * Очищает комнату от объектов.\n   */\n  private clearRoom(): void {\n    for (let i = this.scene.children.length - 1; i >= 0; i--) {\n      const OBJECT = this.scene.children[i];\n      if (OBJECT.type !== 'Scene' && OBJECT.type !== 'HemisphereLight') {\n        this.scene.remove(OBJECT);\n      }\n    }\n  }\n\n  /**\n   * Обрабатывает изменение размера окна.\n   * @param event Событие изменения размера.\n   */\n  @HostListener('window:resize', ['$event'])\n  private onResize(event: Event): void {\n    this.renderer.setSize(window.innerWidth / this.canvasRatioOfWindow, window.innerHeight / this.canvasRatioOfWindow);\n    this.camera.aspect = window.innerWidth / window.innerHeight;\n    this.camera.updateProjectionMatrix();\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  /**\n   * Обрабатывает клик мыши.\n   * @param event Событие клика.\n   */\n  @HostListener('click', ['$event'])\n  private onMouseClick(event: MouseEvent): void {\n    if (this.targetobject) {\n      this.targetobject = undefined;\n      return;\n    }\n    const RECT = (event.target as HTMLCanvasElement).getBoundingClientRect();\n    const X = (event.clientX - RECT.left) / RECT.width * 2 - 1;\n    const Y = -(event.clientY - RECT.top) / RECT.height * 2 + 1;\n\n    this.mouse.x = X;\n    this.mouse.y = Y;\n    this.raycaster.setFromCamera(this.mouse, this.camera);\n\n    const INTERSECTIONS = this.raycaster.intersectObjects(this.scene.children);\n\n    const FOUND_INTERSECTION = INTERSECTIONS.find(intersect => {\n      return intersect.object.name !== 'roomFloorBase' && intersect.object.type !== 'Scene' && intersect.object.type !== 'HemisphereLight'\n    })?.object\n    if (!FOUND_INTERSECTION) return\n    this.targetobject = FOUND_INTERSECTION.parent ? FOUND_INTERSECTION.parent : FOUND_INTERSECTION\n  }\n\n  /**\n   * Поворачивает целевой объект.\n   * @param event Событие нажатия клавиши.\n   */\n  @HostListener('window:keydown', ['$event'])\n  private rotateTargetObject(event: KeyboardEvent): void {\n    if (!this.targetobject) return\n    let rotateAngle = -0.05\n\n    switch (event.key) {\n      case 'q':\n      case 'й':\n        this.targetobject.rotation.y -= rotateAngle\n        break\n      case 'e':\n      case 'у':\n        this.targetobject.rotation.y += rotateAngle\n    }\n  }\n\n  /**\n   * Обрабатывает перемещение мыши.\n   * @param event Событие перемещения мыши.\n   */\n  @HostListener('mousemove', ['$event'])\n  private onMousemove(event: MouseEvent): void {\n    if (!this.targetobject) return;\n\n    const RECT = (event.target as HTMLCanvasElement).getBoundingClientRect();\n    const X = (event.clientX - RECT.left) / RECT.width * 2 - 1;\n    const Y = -(event.clientY - RECT.top) / RECT.height * 2 + 1;\n\n    this.mouse.x = X;\n    this.mouse.y = Y;\n    this.raycaster.setFromCamera(this.mouse, this.camera);\n\n    const INTERSECTIONS = this.raycaster.intersectObject(this.rectangleMesh);\n    if (INTERSECTIONS.length === 0) return;\n\n    const INTERSECTIONS_X = INTERSECTIONS[0].point.x;\n    const INTERSECTION_Z = INTERSECTIONS[0].point.z;\n    const RECTANGLE_MESH_SIZE = this.getObjectSize(this.rectangleMesh);\n    const objectSize = this.getObjectSize(this.targetobject);\n\n    const minX = -RECTANGLE_MESH_SIZE.width / 2 + objectSize.width / 2;\n    const maxX = RECTANGLE_MESH_SIZE.width / 2 - objectSize.width / 2;\n\n    let newXObjectPosition = INTERSECTIONS_X;\n    if (newXObjectPosition  maxX) {\n      newXObjectPosition = maxX;\n    }\n\n    const MIN_Z = -RECTANGLE_MESH_SIZE.length / 2 + objectSize.length / 2;\n    const MAX_Z = RECTANGLE_MESH_SIZE.length / 2 - objectSize.length / 2;\n\n    let newZObjectPosition = INTERSECTION_Z;\n    if (newZObjectPosition  MAX_Z) {\n      newZObjectPosition = MAX_Z;\n    }\n\n    this.targetobject.position.set(newXObjectPosition, 0, newZObjectPosition);\n  }\n\n  /**\n   * Генерирует отчет по комнате.\n   */\n  protected async getReport(): Promise {\n    const JWT = this.accountCookieService.getJwt()\n    if (!JWT || !this.roomData?._id) return\n\n    const oldCameraPosition = this.camera.position.clone();\n    const oldCameraRotation = this.camera.rotation.clone();\n\n    this.camera.position.set(0, 7, 0)\n    this.camera.rotation.set(THREE.MathUtils.degToRad(-90), 0, 0)\n    this.renderer.render(this.scene, this.camera);\n    const imageDataURL = this.renderer.domElement.toDataURL('image/png')\n    const imageDataResponse = await fetch(imageDataURL)\n\n    this.camera.position.copy(oldCameraPosition);\n    this.camera.rotation.copy(oldCameraRotation);\n\n    if (!imageDataResponse.ok) {\n      this.notification.setError('Ошибка при рендере', 5000)\n    }\n    const imageDataBlob = await imageDataResponse.blob()\n\n    this.projectService.GETgetReportOfRoom(JWT, this.roomData?._id, imageDataBlob)\n  }\n\n  /**\n   * Удаляет выбранную модель.\n   */\n  protected deleteModel(): void {\n    if (!this.targetobject) return\n    this.scene.remove(this.targetobject)\n    this.saveRoom()\n  }\n\n  /**\n   * Сохраняет текущее состояние комнаты.\n   */\n  public saveRoom(): void {\n    if (!this.roomData) return\n    const OBJECTS_SCENE_ARRAY = this.scene.children.filter(object => {\n      if (\n        object.name !== 'roomFloorBase' &&\n        object.type !== 'Scene' &&\n        object.type !== 'HemisphereLight'\n      ) {\n        return true;\n      }\n      return false;\n    })\n      .map(object => {\n        return this.calculateObjectSaveData(object)\n      })\n    const ROOM_OBJECTS_DATA = OBJECTS_SCENE_ARRAY\n    this.roomData.objects = OBJECTS_SCENE_ARRAY\n    this.saveObjectsEmitter.emit(ROOM_OBJECTS_DATA)\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/objectSceneInterface.html":{"url":"interfaces/objectSceneInterface.html","title":"interface - objectSceneInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  objectSceneInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/scene/scene.component.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс для описания объекта сцены.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            objectId\n                                        \n                                \n                                \n                                        \n                                            xMetersDistance\n                                        \n                                \n                                \n                                        \n                                            yRotate\n                                        \n                                \n                                \n                                        \n                                            zMetersDistance\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        objectId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        objectId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    ID объекта\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        xMetersDistance\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        xMetersDistance:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Расстояние по оси X в метрах\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        yRotate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        yRotate:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Угол поворота по оси Y\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        zMetersDistance\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        zMetersDistance:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Расстояние по оси Z в метрах\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Component, AfterViewInit, ElementRef, HostListener, Input, SimpleChanges, Output, EventEmitter, OnChanges, OnDestroy } from '@angular/core';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { NgxSpinnerModule, NgxSpinnerService } from 'ngx-spinner';\nimport { ProjectService, roomData as roomDataPlan } from '../../services/project.service';\nimport { loadModel } from './loaders';\nimport { FurnitureModelControlService } from '../../services/furniture-model-control.service';\nimport { AccountCookieService } from '../../services/account-cookie.service';\nimport { FurnitureCardControlService } from '../../services/furniture-card-control.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { NotificationService } from '../../services/notification.service';\nimport { Location, NgIf } from '@angular/common';\nimport { PlanHouseComponent } from '../plan-house/plan-house.component';\n\n/**\n * Интерфейс для описания размеров модели.\n */\nexport interface modelInterface {\n  /** Ширина модели */\n  width: number;\n  /** Высота модели */\n  height: number;\n  /** Длина модели */\n  length: number;\n}\n\n/**\n * Интерфейс для описания объекта сцены.\n */\nexport interface objectSceneInterface {\n  /** ID объекта */\n  objectId: string;\n  /** Расстояние по оси X в метрах */\n  xMetersDistance: number;\n  /** Расстояние по оси Z в метрах */\n  zMetersDistance: number;\n  /** Угол поворота по оси Y */\n  yRotate: number;\n}\n\n/**\n * Интерфейс для описания данных загрузки объекта.\n */\ninterface objectLoadInterface {\n  /** Расстояние по оси X */\n  xDistance: number;\n  /** Расстояние по оси Z */\n  zDistance: number;\n  /** Угол поворота по оси Y */\n  yRotate: number;\n}\n\n/**\n * Интерфейс для описания данных комнаты.\n */\ninterface roomData extends modelInterface {\n  /** Массив объектов в комнате */\n  objects: objectSceneInterface[];\n}\n\n@Component({\n  selector: 'app-scene',\n  standalone: true,\n  imports: [NgxSpinnerModule, NgIf],\n  templateUrl: './scene.component.html',\n  styleUrls: ['./scene.component.scss']\n})\nexport class SceneComponent implements AfterViewInit, OnChanges {\n  constructor(\n    private elementRef: ElementRef,\n    private spinner: NgxSpinnerService,\n    private furnitureModelService: FurnitureModelControlService,\n    private furnitureCardService: FurnitureCardControlService,\n    private accountCookieService: AccountCookieService,\n    private projectService: ProjectService,\n    private route: ActivatedRoute,\n    private notification: NotificationService,\n    private location: Location,\n    private planHouseComponent: PlanHouseComponent\n  ) { }\n\n  @Input()\n  /** Данные комнаты */\n  roomData!: roomDataPlan | undefined;\n\n  @Output()\n  /** Событие для сохранения объектов */\n  saveObjectsEmitter = new EventEmitter();\n\n  /** Рендерер Three.js */\n  private renderer!: THREE.WebGLRenderer;\n\n  /** Камера Three.js */\n  private camera!: THREE.PerspectiveCamera;\n\n  /** Сцена Three.js */\n  private scene!: THREE.Scene;\n\n  /** Контроллеры OrbitControls */\n  private controls!: OrbitControls;\n\n  /** ID текущего кадра анимации */\n  private animationFrameId: number | null = null;\n\n  /** Соотношение размеров холста */\n  private canvasRatioOfWindow = 1.5;\n\n  /** Пропорции комнаты */\n  private roomProportions!: modelInterface;\n\n  /** Луч для определения пересечений */\n  private raycaster = new THREE.Raycaster();\n\n  /** Координаты мыши */\n  private mouse = new THREE.Vector2();\n\n  /** Прямоугольная сетка комнаты */\n  private rectangleMesh!: THREE.Mesh;\n\n  /** Целевой объект для взаимодействия */\n  protected targetobject: THREE.Object3D | undefined = undefined;\n\n\n  ngAfterViewInit(): void {\n    this.initThreeJs();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.roomData = changes['roomData'].currentValue as roomDataPlan\n    if (!this.roomData || this.scene === undefined || this.roomData === changes['roomData'].previousValue) return\n    if (changes['roomData'].previousValue !== undefined) { this.clearRoom() }\n    this.camera.position.set(0, 5, 0)\n    this.camera.rotation.set(THREE.MathUtils.degToRad(-90), 0, 0)\n    this.roomProportions = this.roomData.roomProportions\n    this.createRoom();\n    this.rectangleMesh.rotation.x = THREE.MathUtils.degToRad(-90)\n\n    if (this.getObjectSize(this.rectangleMesh).width === 0) return\n    if (!this.planHouseComponent.sceneOpenToggle) return\n\n    this.loadRoom()\n    const FURNITURE_ID = this.route.snapshot.params['furnitureCardId']\n    if (!FURNITURE_ID || changes['roomData'].previousValue) return\n    this.fixPath()\n    this.addModel(FURNITURE_ID, true)\n  }\n\n  private async loadFurnitureModel(fileModel: Blob, furnitureSize: modelInterface, furnitureCardId: string, saveRoom: boolean, moveData?: objectLoadInterface) {\n    try {\n      const LOAD_OBJECT = await loadModel(fileModel)\n      if (moveData) { this.addObjectToScene(LOAD_OBJECT, furnitureSize, furnitureCardId, moveData) } else { this.addObjectToScene(LOAD_OBJECT, furnitureSize, furnitureCardId) }\n      if (saveRoom) this.saveRoom()\n    } catch (error) {\n    }\n  }\n  private async addModel(furnitureCardId: string, saveRoom: boolean, moveData?: objectLoadInterface) {\n    const JWT = this.accountCookieService.getJwt()\n    if (!JWT) return\n    try {\n      if (saveRoom) this.spinner.show()\n      const PROPORTIONS = (await this.furnitureCardService.GETfurnitureCard(furnitureCardId)).furnitureCard.proportions as modelInterface\n      const MODEL = await this.furnitureModelService.GETfurnitureModel(JWT, furnitureCardId)\n      await this.loadFurnitureModel(MODEL, PROPORTIONS, furnitureCardId, saveRoom, moveData)\n      this.spinner.hide()\n    } catch (error) {\n      this.spinner.hide()\n      this.notification.setError('Ошибка загрузки модели', 5000)\n      console.log(error)\n    }\n  }\n\n  private fixPath() {\n    const NEW_URL = this.location.path().split('/').slice(0, -1).join('/')\n    this.location.replaceState(NEW_URL)\n  }\n  /**\n   * Инициализация Three.js сцены.\n   */\n  private initThreeJs(): void {\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const HEMISPHERE_LIGHT = new THREE.HemisphereLight(0xaaaaaa, 0x000000, 2);\n    this.scene.add(HEMISPHERE_LIGHT);\n    this.renderer = new THREE.WebGLRenderer({ antialias: true, alpha: false });\n    const CANVAS_CONTAINER = this.elementRef.nativeElement.querySelector('#canvasContainer');\n    this.camera.position.z = 5;\n    this.renderer.setSize(window.innerWidth / this.canvasRatioOfWindow, window.innerHeight / this.canvasRatioOfWindow);\n    CANVAS_CONTAINER.appendChild(this.renderer.domElement);\n    this.animationFrameId = requestAnimationFrame(() => this.animate());\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  /**\n   * Анимация сцены.\n   */\n  private animate(): void {\n    this.animationFrameId = requestAnimationFrame(() => this.animate());\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  /**\n   * Создает геометрию прямоугольника с закругленными углами.\n   * @param width Ширина прямоугольника.\n   * @param height Высота прямоугольника.\n   * @param radius Радиус закругления.\n   * @param segments Количество сегментов.\n   * @returns Геометрия прямоугольника.\n   */\n  private createRoundedRectangleGeometry(width: number, height: number, radius: number, segments: number): THREE.BufferGeometry {\n    const SHAPE = new THREE.Shape();\n    SHAPE.moveTo(-width / 2 + radius, -height / 2);\n    SHAPE.lineTo(width / 2 - radius, -height / 2);\n    SHAPE.quadraticCurveTo(width / 2, -height / 2, width / 2, -height / 2 + radius);\n    SHAPE.lineTo(width / 2, height / 2 - radius);\n    SHAPE.quadraticCurveTo(width / 2, height / 2, width / 2 - radius, height / 2);\n    SHAPE.lineTo(-width / 2 + radius, height / 2);\n    SHAPE.quadraticCurveTo(-width / 2, height / 2, -width / 2, height / 2 - radius);\n    SHAPE.lineTo(-width / 2, -height / 2 + radius);\n    SHAPE.quadraticCurveTo(-width / 2, -height / 2, -width / 2 + radius, -height / 2);\n\n    const geometry = new THREE.ShapeGeometry(SHAPE, segments);\n\n    return geometry;\n  }\n\n  /**\n   * Создает комнату на сцене.\n   */\n  private createRoom(): void {\n    if (!this.roomData) return\n    const ROOM_PROPORTIONS = this.roomData.roomProportions\n    const RADIUS = 0.1\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n    this.controls.enableDamping = true;\n    this.controls.dampingFactor = 0.15;\n    this.controls.enableZoom = true;\n    this.controls.minDistance = 1;\n    this.controls.maxDistance = 10;\n    const paddingPolarAngle = 5;\n    this.controls.maxPolarAngle = THREE.MathUtils.degToRad(90 - paddingPolarAngle);\n    this.createRoomShape(ROOM_PROPORTIONS.width, ROOM_PROPORTIONS.length, RADIUS);\n    this.rectangleMesh.name = 'roomFloorBase';\n    this.rectangleMesh\n  }\n\n  /**\n   * Рассчитывает данные для сохранения объекта.\n   * @param object Объект сцены.\n   * @returns Данные для сохранения объекта.\n   */\n  private calculateObjectSaveData(object: THREE.Object3D): objectSceneInterface {\n    const FLOOR_SIZE = this.getObjectSize(this.rectangleMesh)\n    const OBJECT_POSITION = object.position\n    const objectSaveData: objectSceneInterface = {\n      objectId: (object.userData as any).id,\n      xMetersDistance: OBJECT_POSITION.x / FLOOR_SIZE.width * this.roomProportions.width,\n      zMetersDistance: OBJECT_POSITION.z / FLOOR_SIZE.length * this.roomProportions.length,\n      yRotate: object.rotation.y\n    }\n    return objectSaveData\n  }\n\n  /**\n   * Рассчитывает данные для перемещения объекта.\n   * @param objectSaveData Данные сохраненного объекта.\n   * @returns Данные для перемещения объекта.\n   */\n  private calculateMoveObjectData(objectSaveData: objectSceneInterface): objectLoadInterface {\n    const FLOOR_SIZE = this.getObjectSize(this.rectangleMesh)\n    return {\n      xDistance: objectSaveData.xMetersDistance * FLOOR_SIZE.width / this.roomProportions.width,\n      zDistance: objectSaveData.zMetersDistance * FLOOR_SIZE.length / this.roomProportions.length,\n      yRotate: objectSaveData.yRotate\n    }\n  }\n\n  /**\n   * Создает форму комнаты.\n   * @param widthRatio Соотношение ширины.\n   * @param heightRatio Соотношение высоты.\n   * @param radius Радиус закругления.\n   */\n  private createRoomShape(widthRatio: number, heightRatio: number, radius: number): void {\n    const CAMERA_FRUSTUM_BOUNDS = this.calculateFrustumBounds();\n    const SHAPE_RATIO = widthRatio / heightRatio;\n    let width: number, height: number;\n\n    if (SHAPE_RATIO  UPLOAD_OBJECT_SIZE.length ? RECTANGLE_SIZE.width / UPLOAD_OBJECT_SIZE.width : RECTANGLE_SIZE.length / UPLOAD_OBJECT_SIZE.length;\n    const REAL_PROPORTIONS_COEFFICIENT = UPLOAD_OBJECT_SIZE.width > UPLOAD_OBJECT_SIZE.length ? width / this.roomProportions.width : length / length;\n    const GENERAL_COEFFICIENT = REAL_PROPORTIONS_COEFFICIENT * SCENE_PROPORTIONS_COEFFICIENT;\n    object.scale.set(GENERAL_COEFFICIENT, GENERAL_COEFFICIENT, GENERAL_COEFFICIENT);\n  }\n\n  /**\n   * Загружает комнату с объектами.\n   */\n  public async loadRoom(): Promise {\n    const JWT = this.accountCookieService.getJwt()\n    if (!JWT || !this.roomData) return\n    const roomData: roomData = {\n      objects: this.roomData.objects,\n      ...this.roomData.roomProportions\n    }\n\n    this.spinner.show()\n    for (const object of roomData.objects) {\n      await this.addModel(object.objectId, false, this.calculateMoveObjectData(object));\n    }\n    this.spinner.hide()\n  }\n\n  /**\n   * Очищает комнату от объектов.\n   */\n  private clearRoom(): void {\n    for (let i = this.scene.children.length - 1; i >= 0; i--) {\n      const OBJECT = this.scene.children[i];\n      if (OBJECT.type !== 'Scene' && OBJECT.type !== 'HemisphereLight') {\n        this.scene.remove(OBJECT);\n      }\n    }\n  }\n\n  /**\n   * Обрабатывает изменение размера окна.\n   * @param event Событие изменения размера.\n   */\n  @HostListener('window:resize', ['$event'])\n  private onResize(event: Event): void {\n    this.renderer.setSize(window.innerWidth / this.canvasRatioOfWindow, window.innerHeight / this.canvasRatioOfWindow);\n    this.camera.aspect = window.innerWidth / window.innerHeight;\n    this.camera.updateProjectionMatrix();\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  /**\n   * Обрабатывает клик мыши.\n   * @param event Событие клика.\n   */\n  @HostListener('click', ['$event'])\n  private onMouseClick(event: MouseEvent): void {\n    if (this.targetobject) {\n      this.targetobject = undefined;\n      return;\n    }\n    const RECT = (event.target as HTMLCanvasElement).getBoundingClientRect();\n    const X = (event.clientX - RECT.left) / RECT.width * 2 - 1;\n    const Y = -(event.clientY - RECT.top) / RECT.height * 2 + 1;\n\n    this.mouse.x = X;\n    this.mouse.y = Y;\n    this.raycaster.setFromCamera(this.mouse, this.camera);\n\n    const INTERSECTIONS = this.raycaster.intersectObjects(this.scene.children);\n\n    const FOUND_INTERSECTION = INTERSECTIONS.find(intersect => {\n      return intersect.object.name !== 'roomFloorBase' && intersect.object.type !== 'Scene' && intersect.object.type !== 'HemisphereLight'\n    })?.object\n    if (!FOUND_INTERSECTION) return\n    this.targetobject = FOUND_INTERSECTION.parent ? FOUND_INTERSECTION.parent : FOUND_INTERSECTION\n  }\n\n  /**\n   * Поворачивает целевой объект.\n   * @param event Событие нажатия клавиши.\n   */\n  @HostListener('window:keydown', ['$event'])\n  private rotateTargetObject(event: KeyboardEvent): void {\n    if (!this.targetobject) return\n    let rotateAngle = -0.05\n\n    switch (event.key) {\n      case 'q':\n      case 'й':\n        this.targetobject.rotation.y -= rotateAngle\n        break\n      case 'e':\n      case 'у':\n        this.targetobject.rotation.y += rotateAngle\n    }\n  }\n\n  /**\n   * Обрабатывает перемещение мыши.\n   * @param event Событие перемещения мыши.\n   */\n  @HostListener('mousemove', ['$event'])\n  private onMousemove(event: MouseEvent): void {\n    if (!this.targetobject) return;\n\n    const RECT = (event.target as HTMLCanvasElement).getBoundingClientRect();\n    const X = (event.clientX - RECT.left) / RECT.width * 2 - 1;\n    const Y = -(event.clientY - RECT.top) / RECT.height * 2 + 1;\n\n    this.mouse.x = X;\n    this.mouse.y = Y;\n    this.raycaster.setFromCamera(this.mouse, this.camera);\n\n    const INTERSECTIONS = this.raycaster.intersectObject(this.rectangleMesh);\n    if (INTERSECTIONS.length === 0) return;\n\n    const INTERSECTIONS_X = INTERSECTIONS[0].point.x;\n    const INTERSECTION_Z = INTERSECTIONS[0].point.z;\n    const RECTANGLE_MESH_SIZE = this.getObjectSize(this.rectangleMesh);\n    const objectSize = this.getObjectSize(this.targetobject);\n\n    const minX = -RECTANGLE_MESH_SIZE.width / 2 + objectSize.width / 2;\n    const maxX = RECTANGLE_MESH_SIZE.width / 2 - objectSize.width / 2;\n\n    let newXObjectPosition = INTERSECTIONS_X;\n    if (newXObjectPosition  maxX) {\n      newXObjectPosition = maxX;\n    }\n\n    const MIN_Z = -RECTANGLE_MESH_SIZE.length / 2 + objectSize.length / 2;\n    const MAX_Z = RECTANGLE_MESH_SIZE.length / 2 - objectSize.length / 2;\n\n    let newZObjectPosition = INTERSECTION_Z;\n    if (newZObjectPosition  MAX_Z) {\n      newZObjectPosition = MAX_Z;\n    }\n\n    this.targetobject.position.set(newXObjectPosition, 0, newZObjectPosition);\n  }\n\n  /**\n   * Генерирует отчет по комнате.\n   */\n  protected async getReport(): Promise {\n    const JWT = this.accountCookieService.getJwt()\n    if (!JWT || !this.roomData?._id) return\n\n    const oldCameraPosition = this.camera.position.clone();\n    const oldCameraRotation = this.camera.rotation.clone();\n\n    this.camera.position.set(0, 7, 0)\n    this.camera.rotation.set(THREE.MathUtils.degToRad(-90), 0, 0)\n    this.renderer.render(this.scene, this.camera);\n    const imageDataURL = this.renderer.domElement.toDataURL('image/png')\n    const imageDataResponse = await fetch(imageDataURL)\n\n    this.camera.position.copy(oldCameraPosition);\n    this.camera.rotation.copy(oldCameraRotation);\n\n    if (!imageDataResponse.ok) {\n      this.notification.setError('Ошибка при рендере', 5000)\n    }\n    const imageDataBlob = await imageDataResponse.blob()\n\n    this.projectService.GETgetReportOfRoom(JWT, this.roomData?._id, imageDataBlob)\n  }\n\n  /**\n   * Удаляет выбранную модель.\n   */\n  protected deleteModel(): void {\n    if (!this.targetobject) return\n    this.scene.remove(this.targetobject)\n    this.saveRoom()\n  }\n\n  /**\n   * Сохраняет текущее состояние комнаты.\n   */\n  public saveRoom(): void {\n    if (!this.roomData) return\n    const OBJECTS_SCENE_ARRAY = this.scene.children.filter(object => {\n      if (\n        object.name !== 'roomFloorBase' &&\n        object.type !== 'Scene' &&\n        object.type !== 'HemisphereLight'\n      ) {\n        return true;\n      }\n      return false;\n    })\n      .map(object => {\n        return this.calculateObjectSaveData(object)\n      })\n    const ROOM_OBJECTS_DATA = OBJECTS_SCENE_ARRAY\n    this.roomData.objects = OBJECTS_SCENE_ARRAY\n    this.saveObjectsEmitter.emit(ROOM_OBJECTS_DATA)\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/option.html":{"url":"interfaces/option.html","title":"interface - option","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  option\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/category.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Опция для select-фильтра\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            queryValue\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Название опции\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        queryValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        queryValue:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Значение опции для запроса\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные категории\n */\nexport interface categoryData {\n  /** Название категории */\n  name: string;\n  /** Перевод категории в единственном числе */\n  translateOne: string;\n  /** Перевод категории во множественном числе */\n  translateMany: string;\n  /** Массив фильтров категории */\n  filters: filter[];\n}\n\n/**\n * Базовый фильтр\n */\ninterface baseFilter {\n  /** Имя фильтра */\n  name: string;\n  /** Поле, по которому фильтр */\n  field: string;\n}\n\n/**\n * Опция для select-фильтра\n */\nexport interface option {\n  /** Название опции */\n  name: string;\n  /** Значение опции для запроса */\n  queryValue: string;\n}\n\n/**\n * Фильтр типа select\n */\ninterface selectFilter extends baseFilter {\n  /** Тип фильтра */\n  type: 'select';\n  /** Варианты выбора */\n  options: option[];\n}\n\n/**\n * Фильтр типа range\n */\ninterface rangeFilter extends baseFilter {\n  /** Тип фильтра */\n  type: 'range';\n  /** Минимальное значение */\n  minValue: number;\n  /** Максимальное значение */\n  maxValue: number;\n}\n\n/**\n * Тип фильтра: select или range\n */\nexport type filter = rangeFilter | selectFilter;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CategoryService {\n  /** Базовый URL для работы с категориями */\n  private baseServiceUrl = baseUrl + 'category';\n\n  constructor(\n    private httpModule: HttpClient\n  ) { }\n\n  /**\n   * Получение всех категорий\n   * @returns Promise с массивом категорий\n   */\n  GETgetAllCategories() {\n    return firstValueFrom(this.httpModule.get(this.baseServiceUrl)) as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/optionRangeQueryData.html":{"url":"interfaces/optionRangeQueryData.html","title":"interface - optionRangeQueryData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  optionRangeQueryData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/shop.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Фильтр типа \"диапазон значений\".\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            max\n                                        \n                                \n                                \n                                        \n                                            min\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        max\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        max:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Максимум в диапазоне\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        min\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        min:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Минимум в диапазоне\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                            \n                                \n                                    Тип фильтра\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { firstValueFrom } from 'rxjs';\nimport { modelInterface } from '../components/scene/scene.component';\n\n/**\n * Интерфейс объекта фильтров, отправляемых на сервер.\n*/\nexport interface queryData {\n  /** Любое ключ:значение */\n  [key: string]: optionSelectQueryData | optionRangeQueryData;\n}\n\n/**\n * Фильтр типа \"выбор из списка\".\n */\ninterface optionSelectQueryData {\n  /** Тип фильтра */\n  type: 'select';\n  /** Выбранные значения */\n  value: string[];\n}\n\n/**\n * Фильтр типа \"диапазон значений\".\n*/\ninterface optionRangeQueryData {\n  /** Тип фильтра */\n  type: 'range';\n  /** Минимум в диапазоне */\n  min: number;\n  /** Максимум в диапазоне */\n  max: number;\n}\n\n/**\n * Интерфейс данных о мебели, получаемых из магазина.\n */\nexport interface furnitureShopData {\n  /** Название */\n  name: string;\n  /** Стоимость мебели */\n  cost: number;\n  /** Неполный Url превью (вначало надо вставить baseUrl сервера) */\n  previewUrl: string;\n  /** Id мебели */\n  furnitureCardId: string;\n  /** Массив цветов мебели */\n  colors: string[];\n  /** Габариты мебели */\n  proportions: modelInterface;\n}\n\n/**\n * Интерфейс клиентских фильтров, значения которых формируются на основе ответа от сервера.\n */\nexport interface clientFilters {\n  /** Цвета мебели */\n  colors: string[];\n  /** Минимальная стоимость */\n  minCost: number;\n  /** Максимальная стоимость */\n  maxCost: number;\n}\n\n/**\n * Сервис для получения данных о мебели из магазина, с учетом фильтрации и пагинации.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ShopService {\n  /** Базовый URL сервиса */\n  private baseServiceUrl = baseUrl + 'shop';\n\n  /** Активный AbortController для отмены предыдущих запросов */\n  private abortController: AbortController | null = null;\n\n  constructor(private httpModule: HttpClient) { }\n\n  /**\n   * Выполняет GET-запрос на получение данных по категории мебели.\n   * Поддерживает фильтрацию и стартовую позицию для пагинации.\n   * При повторном вызове отменяет предыдущий запрос.\n   *\n   * @param categoryName - Название категории мебели.\n   * @param startRange - Начальный индекс (offset) выборки.\n   * @param queryData - Объект фильтров (опционально).\n   *\n   * @returns Промис с объектом, содержащим:\n   * - `resultsArray`: массив карточек мебели с обновлёнными URL превью\n   * - `resultsClientFiltersData`: агрегированные данные фильтров для клиента\n   *\n   * @throws {Error} В случае сетевой ошибки или отмены запроса.\n   */\n  async GETgetCategoryData(categoryName: string, startRange: number, queryData?: queryData) {\n    if (this.abortController) {\n      this.abortController.abort();\n    }\n\n    this.abortController = new AbortController();\n\n    try {\n      let requestUrl = `${this.baseServiceUrl}?category=${categoryName}&startRange=${startRange}`;\n\n      if (queryData && Object.keys(queryData).length > 0) {\n        const params = new URLSearchParams();\n        params.append('filters', JSON.stringify(queryData));\n        requestUrl += `&${new URLSearchParams(params).toString()}`;\n      }\n\n      const response = await fetch(\n        requestUrl,\n        { signal: this.abortController.signal }\n      );\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Ошибка: ${response.status} — ${errorText}`);\n      }\n\n      const RESPONSE = await response.json() as { resultsArray: furnitureShopData[] };\n      const RESULTS_ARRAY = RESPONSE.resultsArray;\n\n      const UPDATED_RESULTS = RESULTS_ARRAY.map(furniture => ({\n        ...furniture,\n        previewUrl: baseUrl + furniture.previewUrl\n      }));\n\n      return {\n        resultsArray: UPDATED_RESULTS,\n        resultsClientFiltersData: this.getFindOptionsByResult(UPDATED_RESULTS)\n      };\n\n    } catch (error: any) {\n      if (error.name === 'AbortError') {\n      } else {\n        console.error('Ошибка запроса:', error);\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Формирует объект фильтров на основе полученных данных о мебели.\n   *\n   * @param resultsArray - Массив карточек мебели\n   * @returns Объект клиентских фильтров (цвета, минимальная и максимальная цена)\n   */\n  private getFindOptionsByResult(resultsArray: furnitureShopData[]) {\n    let filtersObject: clientFilters = {\n      colors: [],\n      minCost: Infinity,\n      maxCost: -Infinity\n    };\n\n    resultsArray.forEach(furnitureData => {\n      if (furnitureData.cost  filtersObject.maxCost) filtersObject.maxCost = furnitureData.cost;\n\n      filtersObject.colors.push(...furnitureData.colors);\n    });\n\n    filtersObject.minCost = filtersObject.minCost!== Infinity ? filtersObject.minCost : 0;\n    filtersObject.maxCost = filtersObject.maxCost!== -Infinity ? filtersObject.maxCost : 0;\n\n    filtersObject.colors = [...new Set(filtersObject.colors)];\n    return filtersObject;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/optionSelectQueryData.html":{"url":"interfaces/optionSelectQueryData.html","title":"interface - optionSelectQueryData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  optionSelectQueryData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/shop.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Фильтр типа \"выбор из списка\".\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            type\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                            \n                                \n                                    Тип фильтра\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Выбранные значения\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { firstValueFrom } from 'rxjs';\nimport { modelInterface } from '../components/scene/scene.component';\n\n/**\n * Интерфейс объекта фильтров, отправляемых на сервер.\n*/\nexport interface queryData {\n  /** Любое ключ:значение */\n  [key: string]: optionSelectQueryData | optionRangeQueryData;\n}\n\n/**\n * Фильтр типа \"выбор из списка\".\n */\ninterface optionSelectQueryData {\n  /** Тип фильтра */\n  type: 'select';\n  /** Выбранные значения */\n  value: string[];\n}\n\n/**\n * Фильтр типа \"диапазон значений\".\n*/\ninterface optionRangeQueryData {\n  /** Тип фильтра */\n  type: 'range';\n  /** Минимум в диапазоне */\n  min: number;\n  /** Максимум в диапазоне */\n  max: number;\n}\n\n/**\n * Интерфейс данных о мебели, получаемых из магазина.\n */\nexport interface furnitureShopData {\n  /** Название */\n  name: string;\n  /** Стоимость мебели */\n  cost: number;\n  /** Неполный Url превью (вначало надо вставить baseUrl сервера) */\n  previewUrl: string;\n  /** Id мебели */\n  furnitureCardId: string;\n  /** Массив цветов мебели */\n  colors: string[];\n  /** Габариты мебели */\n  proportions: modelInterface;\n}\n\n/**\n * Интерфейс клиентских фильтров, значения которых формируются на основе ответа от сервера.\n */\nexport interface clientFilters {\n  /** Цвета мебели */\n  colors: string[];\n  /** Минимальная стоимость */\n  minCost: number;\n  /** Максимальная стоимость */\n  maxCost: number;\n}\n\n/**\n * Сервис для получения данных о мебели из магазина, с учетом фильтрации и пагинации.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ShopService {\n  /** Базовый URL сервиса */\n  private baseServiceUrl = baseUrl + 'shop';\n\n  /** Активный AbortController для отмены предыдущих запросов */\n  private abortController: AbortController | null = null;\n\n  constructor(private httpModule: HttpClient) { }\n\n  /**\n   * Выполняет GET-запрос на получение данных по категории мебели.\n   * Поддерживает фильтрацию и стартовую позицию для пагинации.\n   * При повторном вызове отменяет предыдущий запрос.\n   *\n   * @param categoryName - Название категории мебели.\n   * @param startRange - Начальный индекс (offset) выборки.\n   * @param queryData - Объект фильтров (опционально).\n   *\n   * @returns Промис с объектом, содержащим:\n   * - `resultsArray`: массив карточек мебели с обновлёнными URL превью\n   * - `resultsClientFiltersData`: агрегированные данные фильтров для клиента\n   *\n   * @throws {Error} В случае сетевой ошибки или отмены запроса.\n   */\n  async GETgetCategoryData(categoryName: string, startRange: number, queryData?: queryData) {\n    if (this.abortController) {\n      this.abortController.abort();\n    }\n\n    this.abortController = new AbortController();\n\n    try {\n      let requestUrl = `${this.baseServiceUrl}?category=${categoryName}&startRange=${startRange}`;\n\n      if (queryData && Object.keys(queryData).length > 0) {\n        const params = new URLSearchParams();\n        params.append('filters', JSON.stringify(queryData));\n        requestUrl += `&${new URLSearchParams(params).toString()}`;\n      }\n\n      const response = await fetch(\n        requestUrl,\n        { signal: this.abortController.signal }\n      );\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Ошибка: ${response.status} — ${errorText}`);\n      }\n\n      const RESPONSE = await response.json() as { resultsArray: furnitureShopData[] };\n      const RESULTS_ARRAY = RESPONSE.resultsArray;\n\n      const UPDATED_RESULTS = RESULTS_ARRAY.map(furniture => ({\n        ...furniture,\n        previewUrl: baseUrl + furniture.previewUrl\n      }));\n\n      return {\n        resultsArray: UPDATED_RESULTS,\n        resultsClientFiltersData: this.getFindOptionsByResult(UPDATED_RESULTS)\n      };\n\n    } catch (error: any) {\n      if (error.name === 'AbortError') {\n      } else {\n        console.error('Ошибка запроса:', error);\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Формирует объект фильтров на основе полученных данных о мебели.\n   *\n   * @param resultsArray - Массив карточек мебели\n   * @returns Объект клиентских фильтров (цвета, минимальная и максимальная цена)\n   */\n  private getFindOptionsByResult(resultsArray: furnitureShopData[]) {\n    let filtersObject: clientFilters = {\n      colors: [],\n      minCost: Infinity,\n      maxCost: -Infinity\n    };\n\n    resultsArray.forEach(furnitureData => {\n      if (furnitureData.cost  filtersObject.maxCost) filtersObject.maxCost = furnitureData.cost;\n\n      filtersObject.colors.push(...furnitureData.colors);\n    });\n\n    filtersObject.minCost = filtersObject.minCost!== Infinity ? filtersObject.minCost : 0;\n    filtersObject.maxCost = filtersObject.maxCost!== -Infinity ? filtersObject.maxCost : 0;\n\n    filtersObject.colors = [...new Set(filtersObject.colors)];\n    return filtersObject;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/projectInformation.html":{"url":"interfaces/projectInformation.html","title":"interface - projectInformation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  projectInformation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/project.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс информации о проекте\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            rooms\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Название проекта\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rooms\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rooms:     roomData[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     roomData[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Список комнат в проекте\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { baseUrl } from '.';\nimport { modelInterface, objectSceneInterface } from '../components/scene/scene.component';\nimport { firstValueFrom } from 'rxjs';\nimport { reportResponse } from './report.service';\nimport { ReportService } from './report.service';\n\n/**\n * Интерфейс описания комнаты\n */\nexport interface roomData {\n  /** Название комнаты */\n  name: string;\n  /** Сетка размещения (например, '1 / 2 / 3 / 4') */\n  gridArea: string;\n  /** Пропорции комнаты (ширина, высота, глубина) */\n  roomProportions: modelInterface;\n  /** Список объектов, размещённых в комнате */\n  objects: objectSceneInterface[];\n  /** (Необязательно) ID комнаты */\n  _id?: string;\n}\n\n/**\n * Интерфейс информации о проекте\n */\nexport interface projectInformation {\n  /** Название проекта */\n  name: string;\n  /** Список комнат в проекте */\n  rooms: roomData[];\n}\n\n/**\n * Интерфейс информации о проекте, получаемой с сервера\n */\nexport interface projectServerInformation extends projectInformation {\n  /** ID проекта */\n  _id: string;\n  /** ID автора проекта */\n  authorId: string;\n}\n\n/**\n * Сервис для управления проектами: создание, удаление, получение, обновление и генерация отчетов\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProjectService {\n  /** Базовый URL для API запросов к проектам */\n  private baseServiceUrl = baseUrl + 'project/';\n\n  constructor(\n    private httpModule: HttpClient,\n    private reportService: ReportService\n  ) {}\n\n  /**\n   * Создание нового проекта\n   * @param jwt JWT токен для авторизации\n   * @param name Название проекта\n   * @returns Промис с объектом, содержащим данные проекта\n   */\n  POSTcreateProject(jwt: string, name: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('name', name);\n    return firstValueFrom(this.httpModule.post(this.baseServiceUrl, HTTP_PARAMS)) as Promise;\n  }\n\n  /**\n   * Удаление проекта\n   * @param jwt JWT токен для авторизации\n   * @param projectId ID проекта, который нужно удалить\n   * @returns Промис с сообщением об удалении\n   */\n  DELETEdeleteProject(jwt: string, projectId: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('projectId', projectId);\n    return firstValueFrom(this.httpModule.delete(this.baseServiceUrl, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Получение проекта по ID\n   * @param jwt JWT токен для авторизации\n   * @param projectId ID проекта, который нужно получить\n   * @returns Промис с данными проекта\n   */\n  GETgetProject(jwt: string, projectId: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('projectId', projectId);\n    return firstValueFrom(this.httpModule.get(this.baseServiceUrl, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Обновление данных проекта\n   * @param jwt JWT токен для авторизации\n   * @param projectId ID проекта, который нужно обновить\n   * @param projectInformation Новые данные проекта\n   * @returns Промис с сообщением об успешном обновлении\n   */\n  PUTupdateProject(jwt: string, projectId: string, projectInformation: projectInformation): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('projectId', projectId);\n    return firstValueFrom(this.httpModule.put(this.baseServiceUrl, projectInformation, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Получение отчета о комнате и генерация PDF отчета\n   * @param jwt JWT токен для авторизации\n   * @param roomId ID комнаты, по которой нужно получить отчет\n   * @param renderImage Изображение рендера комнаты в формате Blob\n   * @returns Промис, завершающийся после создания отчета\n   */\n  async GETgetReportOfRoom(jwt: string, roomId: string, renderImage: Blob): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('roomId', roomId);\n\n    const RESPONSE = await firstValueFrom(this.httpModule.get(this.baseServiceUrl + 'room', { params: HTTP_PARAMS })) as reportResponse;\n\n    RESPONSE.furnitures = RESPONSE.furnitures.map(furnitureData => {\n      furnitureData.previewUrl = baseUrl + furnitureData.previewUrl;\n      return furnitureData;\n    });\n\n    this.reportService.createReport(RESPONSE, renderImage);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/projectServerInformation.html":{"url":"interfaces/projectServerInformation.html","title":"interface - projectServerInformation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  projectServerInformation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/project.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс информации о проекте, получаемой с сервера\n\n            \n\n            \n                Extends\n            \n            \n                            projectInformation\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            _id\n                                        \n                                \n                                \n                                        \n                                            authorId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        _id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        _id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    ID проекта\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        authorId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        authorId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    ID автора проекта\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { baseUrl } from '.';\nimport { modelInterface, objectSceneInterface } from '../components/scene/scene.component';\nimport { firstValueFrom } from 'rxjs';\nimport { reportResponse } from './report.service';\nimport { ReportService } from './report.service';\n\n/**\n * Интерфейс описания комнаты\n */\nexport interface roomData {\n  /** Название комнаты */\n  name: string;\n  /** Сетка размещения (например, '1 / 2 / 3 / 4') */\n  gridArea: string;\n  /** Пропорции комнаты (ширина, высота, глубина) */\n  roomProportions: modelInterface;\n  /** Список объектов, размещённых в комнате */\n  objects: objectSceneInterface[];\n  /** (Необязательно) ID комнаты */\n  _id?: string;\n}\n\n/**\n * Интерфейс информации о проекте\n */\nexport interface projectInformation {\n  /** Название проекта */\n  name: string;\n  /** Список комнат в проекте */\n  rooms: roomData[];\n}\n\n/**\n * Интерфейс информации о проекте, получаемой с сервера\n */\nexport interface projectServerInformation extends projectInformation {\n  /** ID проекта */\n  _id: string;\n  /** ID автора проекта */\n  authorId: string;\n}\n\n/**\n * Сервис для управления проектами: создание, удаление, получение, обновление и генерация отчетов\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProjectService {\n  /** Базовый URL для API запросов к проектам */\n  private baseServiceUrl = baseUrl + 'project/';\n\n  constructor(\n    private httpModule: HttpClient,\n    private reportService: ReportService\n  ) {}\n\n  /**\n   * Создание нового проекта\n   * @param jwt JWT токен для авторизации\n   * @param name Название проекта\n   * @returns Промис с объектом, содержащим данные проекта\n   */\n  POSTcreateProject(jwt: string, name: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('name', name);\n    return firstValueFrom(this.httpModule.post(this.baseServiceUrl, HTTP_PARAMS)) as Promise;\n  }\n\n  /**\n   * Удаление проекта\n   * @param jwt JWT токен для авторизации\n   * @param projectId ID проекта, который нужно удалить\n   * @returns Промис с сообщением об удалении\n   */\n  DELETEdeleteProject(jwt: string, projectId: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('projectId', projectId);\n    return firstValueFrom(this.httpModule.delete(this.baseServiceUrl, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Получение проекта по ID\n   * @param jwt JWT токен для авторизации\n   * @param projectId ID проекта, который нужно получить\n   * @returns Промис с данными проекта\n   */\n  GETgetProject(jwt: string, projectId: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('projectId', projectId);\n    return firstValueFrom(this.httpModule.get(this.baseServiceUrl, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Обновление данных проекта\n   * @param jwt JWT токен для авторизации\n   * @param projectId ID проекта, который нужно обновить\n   * @param projectInformation Новые данные проекта\n   * @returns Промис с сообщением об успешном обновлении\n   */\n  PUTupdateProject(jwt: string, projectId: string, projectInformation: projectInformation): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('projectId', projectId);\n    return firstValueFrom(this.httpModule.put(this.baseServiceUrl, projectInformation, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Получение отчета о комнате и генерация PDF отчета\n   * @param jwt JWT токен для авторизации\n   * @param roomId ID комнаты, по которой нужно получить отчет\n   * @param renderImage Изображение рендера комнаты в формате Blob\n   * @returns Промис, завершающийся после создания отчета\n   */\n  async GETgetReportOfRoom(jwt: string, roomId: string, renderImage: Blob): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('roomId', roomId);\n\n    const RESPONSE = await firstValueFrom(this.httpModule.get(this.baseServiceUrl + 'room', { params: HTTP_PARAMS })) as reportResponse;\n\n    RESPONSE.furnitures = RESPONSE.furnitures.map(furnitureData => {\n      furnitureData.previewUrl = baseUrl + furnitureData.previewUrl;\n      return furnitureData;\n    });\n\n    this.reportService.createReport(RESPONSE, renderImage);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/queryData.html":{"url":"interfaces/queryData.html","title":"interface - queryData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  queryData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/shop.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс объекта фильтров, отправляемых на сервер.\n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    optionSelectQueryData | optionRangeQueryData\n\n                    \n                \n                        \n                            \n                                Defined in src/services/shop.service.ts:10\n                            \n                        \n                \n                    \n                        Любое ключ:значение\n\n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { firstValueFrom } from 'rxjs';\nimport { modelInterface } from '../components/scene/scene.component';\n\n/**\n * Интерфейс объекта фильтров, отправляемых на сервер.\n*/\nexport interface queryData {\n  /** Любое ключ:значение */\n  [key: string]: optionSelectQueryData | optionRangeQueryData;\n}\n\n/**\n * Фильтр типа \"выбор из списка\".\n */\ninterface optionSelectQueryData {\n  /** Тип фильтра */\n  type: 'select';\n  /** Выбранные значения */\n  value: string[];\n}\n\n/**\n * Фильтр типа \"диапазон значений\".\n*/\ninterface optionRangeQueryData {\n  /** Тип фильтра */\n  type: 'range';\n  /** Минимум в диапазоне */\n  min: number;\n  /** Максимум в диапазоне */\n  max: number;\n}\n\n/**\n * Интерфейс данных о мебели, получаемых из магазина.\n */\nexport interface furnitureShopData {\n  /** Название */\n  name: string;\n  /** Стоимость мебели */\n  cost: number;\n  /** Неполный Url превью (вначало надо вставить baseUrl сервера) */\n  previewUrl: string;\n  /** Id мебели */\n  furnitureCardId: string;\n  /** Массив цветов мебели */\n  colors: string[];\n  /** Габариты мебели */\n  proportions: modelInterface;\n}\n\n/**\n * Интерфейс клиентских фильтров, значения которых формируются на основе ответа от сервера.\n */\nexport interface clientFilters {\n  /** Цвета мебели */\n  colors: string[];\n  /** Минимальная стоимость */\n  minCost: number;\n  /** Максимальная стоимость */\n  maxCost: number;\n}\n\n/**\n * Сервис для получения данных о мебели из магазина, с учетом фильтрации и пагинации.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ShopService {\n  /** Базовый URL сервиса */\n  private baseServiceUrl = baseUrl + 'shop';\n\n  /** Активный AbortController для отмены предыдущих запросов */\n  private abortController: AbortController | null = null;\n\n  constructor(private httpModule: HttpClient) { }\n\n  /**\n   * Выполняет GET-запрос на получение данных по категории мебели.\n   * Поддерживает фильтрацию и стартовую позицию для пагинации.\n   * При повторном вызове отменяет предыдущий запрос.\n   *\n   * @param categoryName - Название категории мебели.\n   * @param startRange - Начальный индекс (offset) выборки.\n   * @param queryData - Объект фильтров (опционально).\n   *\n   * @returns Промис с объектом, содержащим:\n   * - `resultsArray`: массив карточек мебели с обновлёнными URL превью\n   * - `resultsClientFiltersData`: агрегированные данные фильтров для клиента\n   *\n   * @throws {Error} В случае сетевой ошибки или отмены запроса.\n   */\n  async GETgetCategoryData(categoryName: string, startRange: number, queryData?: queryData) {\n    if (this.abortController) {\n      this.abortController.abort();\n    }\n\n    this.abortController = new AbortController();\n\n    try {\n      let requestUrl = `${this.baseServiceUrl}?category=${categoryName}&startRange=${startRange}`;\n\n      if (queryData && Object.keys(queryData).length > 0) {\n        const params = new URLSearchParams();\n        params.append('filters', JSON.stringify(queryData));\n        requestUrl += `&${new URLSearchParams(params).toString()}`;\n      }\n\n      const response = await fetch(\n        requestUrl,\n        { signal: this.abortController.signal }\n      );\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Ошибка: ${response.status} — ${errorText}`);\n      }\n\n      const RESPONSE = await response.json() as { resultsArray: furnitureShopData[] };\n      const RESULTS_ARRAY = RESPONSE.resultsArray;\n\n      const UPDATED_RESULTS = RESULTS_ARRAY.map(furniture => ({\n        ...furniture,\n        previewUrl: baseUrl + furniture.previewUrl\n      }));\n\n      return {\n        resultsArray: UPDATED_RESULTS,\n        resultsClientFiltersData: this.getFindOptionsByResult(UPDATED_RESULTS)\n      };\n\n    } catch (error: any) {\n      if (error.name === 'AbortError') {\n      } else {\n        console.error('Ошибка запроса:', error);\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Формирует объект фильтров на основе полученных данных о мебели.\n   *\n   * @param resultsArray - Массив карточек мебели\n   * @returns Объект клиентских фильтров (цвета, минимальная и максимальная цена)\n   */\n  private getFindOptionsByResult(resultsArray: furnitureShopData[]) {\n    let filtersObject: clientFilters = {\n      colors: [],\n      minCost: Infinity,\n      maxCost: -Infinity\n    };\n\n    resultsArray.forEach(furnitureData => {\n      if (furnitureData.cost  filtersObject.maxCost) filtersObject.maxCost = furnitureData.cost;\n\n      filtersObject.colors.push(...furnitureData.colors);\n    });\n\n    filtersObject.minCost = filtersObject.minCost!== Infinity ? filtersObject.minCost : 0;\n    filtersObject.maxCost = filtersObject.maxCost!== -Infinity ? filtersObject.maxCost : 0;\n\n    filtersObject.colors = [...new Set(filtersObject.colors)];\n    return filtersObject;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/rangeFilter.html":{"url":"interfaces/rangeFilter.html","title":"interface - rangeFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  rangeFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/category.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Фильтр типа range\n\n            \n\n            \n                Extends\n            \n            \n                            baseFilter\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            maxValue\n                                        \n                                \n                                \n                                        \n                                            minValue\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        maxValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        maxValue:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Максимальное значение\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        minValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        minValue:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Минимальное значение\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                            \n                                \n                                    Тип фильтра\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные категории\n */\nexport interface categoryData {\n  /** Название категории */\n  name: string;\n  /** Перевод категории в единственном числе */\n  translateOne: string;\n  /** Перевод категории во множественном числе */\n  translateMany: string;\n  /** Массив фильтров категории */\n  filters: filter[];\n}\n\n/**\n * Базовый фильтр\n */\ninterface baseFilter {\n  /** Имя фильтра */\n  name: string;\n  /** Поле, по которому фильтр */\n  field: string;\n}\n\n/**\n * Опция для select-фильтра\n */\nexport interface option {\n  /** Название опции */\n  name: string;\n  /** Значение опции для запроса */\n  queryValue: string;\n}\n\n/**\n * Фильтр типа select\n */\ninterface selectFilter extends baseFilter {\n  /** Тип фильтра */\n  type: 'select';\n  /** Варианты выбора */\n  options: option[];\n}\n\n/**\n * Фильтр типа range\n */\ninterface rangeFilter extends baseFilter {\n  /** Тип фильтра */\n  type: 'range';\n  /** Минимальное значение */\n  minValue: number;\n  /** Максимальное значение */\n  maxValue: number;\n}\n\n/**\n * Тип фильтра: select или range\n */\nexport type filter = rangeFilter | selectFilter;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CategoryService {\n  /** Базовый URL для работы с категориями */\n  private baseServiceUrl = baseUrl + 'category';\n\n  constructor(\n    private httpModule: HttpClient\n  ) { }\n\n  /**\n   * Получение всех категорий\n   * @returns Promise с массивом категорий\n   */\n  GETgetAllCategories() {\n    return firstValueFrom(this.httpModule.get(this.baseServiceUrl)) as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/reportResponse.html":{"url":"interfaces/reportResponse.html","title":"interface - reportResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  reportResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/report.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            furnitures\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            proportions\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        furnitures\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        furnitures:     literal type[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        proportions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        proportions:         modelInterface\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         modelInterface\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { baseClientUrl } from '.';\nimport { modelInterface } from '../components/scene/scene.component';\nimport { shopData } from './furniture-card-control.service';\n\nexport interface reportResponse {\n    name: string;\n    proportions: modelInterface,\n    furnitures: {\n        name: string;\n        furnitureCardId: string;\n        previewUrl: string;\n        proportions: modelInterface;\n        shops: shopData[];\n        category: string;\n    }[]\n}\n\n/**\n * Сервис для генерации HTML-отчёта по комнате и мебели.\n * Открывает отчет в новой вкладке и скачивает его.\n *\n * @export\n * @class ReportService\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class ReportService {\n    constructor() { }\n\n    /**\n     * Инициирует создание HTML-отчета.\n     *\n     * @param {reportResponse} roomData - Данные комнаты и мебели\n     * @param {Blob} renderImage - Изображение визуализации комнаты\n     * @memberof ReportService\n     */\n    createReport(roomData: reportResponse, renderImage: Blob): void {\n        this.createReportHTML(roomData, renderImage);\n    }\n\n    /**\n     * Создаёт HTML-страницу отчета и открывает её.\n     *\n     * @private\n     * @param {reportResponse} roomData - Данные комнаты\n     * @param {Blob} renderImage - Рендер комнаты\n     * @memberof ReportService\n     */\n    private createReportHTML(roomData: reportResponse, renderImage: Blob): void {\n        const reader = new FileReader();\n\n        reader.onload = () => {\n            const imageUrl = reader.result as string;\n            const htmlContent = this.generateHtmlContent(roomData, imageUrl);\n            this.openHtmlInNewTab(roomData.name, htmlContent);\n        };\n\n        reader.readAsDataURL(renderImage);\n    }\n\n    /**\n     * Генерирует HTML-содержимое отчета.\n     *\n     * @private\n     * @param {reportResponse} roomData - Данные комнаты и мебели\n     * @param {string} renderUrl - URL рендер-изображения\n     * @returns {string} HTML-контент отчета\n     * @memberof ReportService\n     */\n    private generateHtmlContent(roomData: reportResponse, renderUrl: string): string {\n        return `\n      \n\n\n\n    \n    \n    Отчет по комнате ${roomData.name}\n    \n        @font-face {\n            font-family: 'Calypso';\n            src: url('http://localhost:4200/assets/fonts/Calypso.ttf') format('truetype');\n        }\n\n        @font-face {\n            font-family: 'Courier New';\n            src: url('http://localhost:4200/assets/fonts/Courier New.ttf') format('truetype');\n        }\n\n        body {\n            margin: 0;\n            padding: 40px;\n            background-color: black;\n            color: #DAD7CD;\n            font-family: 'Courier New', monospace;\n            line-height: 1.6;\n            display: flex;\n            flex-direction: column;\n        }\n\n        .title {\n            font-family: 'Calypso', sans-serif;\n            text-align: center;\n            font-size: 3rem;\n            margin-bottom: 40px;\n            color: #A3B18A;\n            text-transform: uppercase;\n            letter-spacing: 2px;\n        }\n\n        .renderTitle {\n            font-family: 'Courier New', monospace;\n            font-weight: 400;\n            font-size: 1.5rem;\n            margin: 30px 0 15px;\n            color: #A3B18A;\n            border-bottom: 2px solid #A3B18A;\n            padding-bottom: 8px;\n            width:fit-content;\n            align-self: center;\n        }\n\n        .furnituresSpanTitle {\n            font-family: 'Calypso', sans-serif;\n            font-size: 2rem;\n            margin: 40px 0 20px;\n            color: #A3B18A;\n            display: block;\n            text-align: center;\n        }\n\n        .furniture {\n            display: flex;\n            flex-direction: column;\n            border-radius: 15px;\n            padding: 25px;\n            margin-bottom: 30px;\n            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);\n            transition: transform 0.3s ease;\n        }\n\n        .furnitureTitle {\n            font-family: 'Courier New', monospace;\n            font-weight: 400;\n            margin: 0 auto 15px;\n            font-size: 1.3rem;\n            color: #DAD7CD;\n        }\n\n        .furnitureImage {\n            margin: 0 auto;\n            max-width: 100%;\n            border-radius: 10px;\n            margin-bottom: 20px;\n        }\n\n        .furnitureFooter {\n            display: flex;\n            gap: 30px;\n            flex-direction: row;\n            justify-content: center;\n            flex-wrap: wrap;\n        }\n\n        .paramsTitle,\n        .shopsTitle {\n            font-family: 'Calypso', sans-serif;\n            font-size: 1.2rem;\n            color: #A3B18A;\n            margin-bottom: 15px;\n        }\n\n        .paramsSpan {\n            width: fit-content;\n            min-width: 200px;\n        }\n\n        .paramsList {\n            list-style-type: none;\n            padding: 0;\n            margin: 0;\n        }\n\n        .paramsItem {\n            margin-bottom: 8px;\n            position: relative;\n            padding-left: 20px;\n        }\n\n        .shopsSpan {\n            min-width: 200px;\n        }\n\n        a {\n            display: inline-block;\n            background-color: white;\n            color: black;\n            text-decoration: none;\n            padding: 5px 20px;\n            border-radius: 10px;\n            transition: all 0.3s ease;\n            border: 2px solid transparent;\n            width:250px;\n            max-width: 250px;\n            text-align: center;\n            font-family: 'Courier New';\n            font-weight: 400;\n            font-size: 0.8rem\n        }\n\n        a:hover {\n            background-color: transparent;\n            color: white;\n            border-color: white;\n        }\n\n        img {\n            width: 100%;\n            max-height: 500px;\n            object-fit: contain;\n            border-radius: 10px;\n            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);\n            margin-bottom: 30px;\n        }\n\n        .openLink {\n            width:250px;\n            max-width: 250px;\n            margin: 0 auto;\n            margin-top: 20px;\n        }\n        .furnitureLink{\n            background-color: #A3B18A;\n            color:white;\n            &:hover{\n                background-color: #344E41;\n                border: 2px solid #344E41;\n            }\n        }\n\n        @media (max-width: 768px) {\n            .furnitureFooter {\n                flex-direction: column;\n                align-items: center;\n                gap: 20px;\n                width: 100%;\n            }\n\n            .paramsSpan,\n            .shopsSpan {\n                width: 90%;\n            }\n\n            .openLink,.shopLink {\n                box-sizing: border-box;\n                width: 100%;\n            }\n\n            .title {\n                font-size: 2rem;\n            }\n\n            body {\n                padding: 20px;\n            }\n        }\n    \n\nОтчет по комнате${roomData.name}\nВид сверху\n\n\nДобавленная мебель\n${roomData.furnitures.map(furniture => `\n    \n    ${furniture.name}\n    \n    \n    \n     Параметры \n    \n     Ширина: ${furniture.proportions.width}cм \n     Высота: ${furniture.proportions.height}cм \n     Длина: ${furniture.proportions.length}cм \n    \n    \n    \n    ${furniture.shops.map(shopData => `\n         Магазины \n        \n      \n      ${this.costPipe(shopData.cost)}\n      \n      \n      `).join('')\n            }\n    \n    \n     Посмотреть мебель \n    \n    `).join('')}\nПосмотреть проект\n\n\n    `;\n    }\n\n    /**\n     * Форматирует цену с разделителями тысяч.\n     *\n     * @private\n     * @param {number} cost - Стоимость\n     * @returns {string} Отформатированная строка с ценой\n     * @memberof ReportService\n     */\n    private costPipe(cost: number): string {\n        return cost.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.');\n    }\n\n    /**\n     * Открывает HTML-контент в новой вкладке и запускает загрузку.\n     *\n     * @private\n     * @param {string} roomName - Название комнаты (используется для имени файла)\n     * @param {string} htmlContent - Содержимое HTML\n     * @memberof ReportService\n     */\n    private openHtmlInNewTab(roomName: string, htmlContent: string): void {\n        const blob = new Blob([htmlContent], { type: 'text/html' });\n        const url = URL.createObjectURL(blob);\n        window.open(url, '_blank');\n        this.downloadHtml(roomName, url);\n    }\n\n    /**\n     * Загружает HTML-файл отчета.\n     *\n     * @private\n     * @param {string} roomName - Название комнаты (для имени файла)\n     * @param {string} htmlUrl - URL HTML-файла\n     * @memberof ReportService\n     */\n    private downloadHtml(roomName: string, htmlUrl: string): void {\n        const downloadButton = document.createElement('a');\n        downloadButton.href = htmlUrl;\n        downloadButton.download = `${roomName}-report.html`;\n        downloadButton.click();\n        URL.revokeObjectURL(htmlUrl);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/roomData.html":{"url":"interfaces/roomData.html","title":"interface - roomData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  roomData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/project.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс описания комнаты\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            _id\n                                        \n                                \n                                \n                                        \n                                            gridArea\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            objects\n                                        \n                                \n                                \n                                        \n                                            roomProportions\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        _id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        _id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    (Необязательно) ID комнаты\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        gridArea\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        gridArea:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Сетка размещения (например, '1 / 2 / 3 / 4')\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Название комнаты\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        objects\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        objects:         objectSceneInterface[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         objectSceneInterface[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Список объектов, размещённых в комнате\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        roomProportions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        roomProportions:         modelInterface\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         modelInterface\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Пропорции комнаты (ширина, высота, глубина)\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { baseUrl } from '.';\nimport { modelInterface, objectSceneInterface } from '../components/scene/scene.component';\nimport { firstValueFrom } from 'rxjs';\nimport { reportResponse } from './report.service';\nimport { ReportService } from './report.service';\n\n/**\n * Интерфейс описания комнаты\n */\nexport interface roomData {\n  /** Название комнаты */\n  name: string;\n  /** Сетка размещения (например, '1 / 2 / 3 / 4') */\n  gridArea: string;\n  /** Пропорции комнаты (ширина, высота, глубина) */\n  roomProportions: modelInterface;\n  /** Список объектов, размещённых в комнате */\n  objects: objectSceneInterface[];\n  /** (Необязательно) ID комнаты */\n  _id?: string;\n}\n\n/**\n * Интерфейс информации о проекте\n */\nexport interface projectInformation {\n  /** Название проекта */\n  name: string;\n  /** Список комнат в проекте */\n  rooms: roomData[];\n}\n\n/**\n * Интерфейс информации о проекте, получаемой с сервера\n */\nexport interface projectServerInformation extends projectInformation {\n  /** ID проекта */\n  _id: string;\n  /** ID автора проекта */\n  authorId: string;\n}\n\n/**\n * Сервис для управления проектами: создание, удаление, получение, обновление и генерация отчетов\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProjectService {\n  /** Базовый URL для API запросов к проектам */\n  private baseServiceUrl = baseUrl + 'project/';\n\n  constructor(\n    private httpModule: HttpClient,\n    private reportService: ReportService\n  ) {}\n\n  /**\n   * Создание нового проекта\n   * @param jwt JWT токен для авторизации\n   * @param name Название проекта\n   * @returns Промис с объектом, содержащим данные проекта\n   */\n  POSTcreateProject(jwt: string, name: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('name', name);\n    return firstValueFrom(this.httpModule.post(this.baseServiceUrl, HTTP_PARAMS)) as Promise;\n  }\n\n  /**\n   * Удаление проекта\n   * @param jwt JWT токен для авторизации\n   * @param projectId ID проекта, который нужно удалить\n   * @returns Промис с сообщением об удалении\n   */\n  DELETEdeleteProject(jwt: string, projectId: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('projectId', projectId);\n    return firstValueFrom(this.httpModule.delete(this.baseServiceUrl, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Получение проекта по ID\n   * @param jwt JWT токен для авторизации\n   * @param projectId ID проекта, который нужно получить\n   * @returns Промис с данными проекта\n   */\n  GETgetProject(jwt: string, projectId: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('projectId', projectId);\n    return firstValueFrom(this.httpModule.get(this.baseServiceUrl, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Обновление данных проекта\n   * @param jwt JWT токен для авторизации\n   * @param projectId ID проекта, который нужно обновить\n   * @param projectInformation Новые данные проекта\n   * @returns Промис с сообщением об успешном обновлении\n   */\n  PUTupdateProject(jwt: string, projectId: string, projectInformation: projectInformation): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('projectId', projectId);\n    return firstValueFrom(this.httpModule.put(this.baseServiceUrl, projectInformation, { params: HTTP_PARAMS })) as Promise;\n  }\n\n  /**\n   * Получение отчета о комнате и генерация PDF отчета\n   * @param jwt JWT токен для авторизации\n   * @param roomId ID комнаты, по которой нужно получить отчет\n   * @param renderImage Изображение рендера комнаты в формате Blob\n   * @returns Промис, завершающийся после создания отчета\n   */\n  async GETgetReportOfRoom(jwt: string, roomId: string, renderImage: Blob): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('roomId', roomId);\n\n    const RESPONSE = await firstValueFrom(this.httpModule.get(this.baseServiceUrl + 'room', { params: HTTP_PARAMS })) as reportResponse;\n\n    RESPONSE.furnitures = RESPONSE.furnitures.map(furnitureData => {\n      furnitureData.previewUrl = baseUrl + furnitureData.previewUrl;\n      return furnitureData;\n    });\n\n    this.reportService.createReport(RESPONSE, renderImage);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/roomData-1.html":{"url":"interfaces/roomData-1.html","title":"interface - roomData-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  roomData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/scene/scene.component.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс для описания данных комнаты.\n\n            \n\n            \n                Extends\n            \n            \n                            modelInterface\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            objects\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        objects\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        objects:         objectSceneInterface[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         objectSceneInterface[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Массив объектов в комнате\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Component, AfterViewInit, ElementRef, HostListener, Input, SimpleChanges, Output, EventEmitter, OnChanges, OnDestroy } from '@angular/core';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { NgxSpinnerModule, NgxSpinnerService } from 'ngx-spinner';\nimport { ProjectService, roomData as roomDataPlan } from '../../services/project.service';\nimport { loadModel } from './loaders';\nimport { FurnitureModelControlService } from '../../services/furniture-model-control.service';\nimport { AccountCookieService } from '../../services/account-cookie.service';\nimport { FurnitureCardControlService } from '../../services/furniture-card-control.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { NotificationService } from '../../services/notification.service';\nimport { Location, NgIf } from '@angular/common';\nimport { PlanHouseComponent } from '../plan-house/plan-house.component';\n\n/**\n * Интерфейс для описания размеров модели.\n */\nexport interface modelInterface {\n  /** Ширина модели */\n  width: number;\n  /** Высота модели */\n  height: number;\n  /** Длина модели */\n  length: number;\n}\n\n/**\n * Интерфейс для описания объекта сцены.\n */\nexport interface objectSceneInterface {\n  /** ID объекта */\n  objectId: string;\n  /** Расстояние по оси X в метрах */\n  xMetersDistance: number;\n  /** Расстояние по оси Z в метрах */\n  zMetersDistance: number;\n  /** Угол поворота по оси Y */\n  yRotate: number;\n}\n\n/**\n * Интерфейс для описания данных загрузки объекта.\n */\ninterface objectLoadInterface {\n  /** Расстояние по оси X */\n  xDistance: number;\n  /** Расстояние по оси Z */\n  zDistance: number;\n  /** Угол поворота по оси Y */\n  yRotate: number;\n}\n\n/**\n * Интерфейс для описания данных комнаты.\n */\ninterface roomData extends modelInterface {\n  /** Массив объектов в комнате */\n  objects: objectSceneInterface[];\n}\n\n@Component({\n  selector: 'app-scene',\n  standalone: true,\n  imports: [NgxSpinnerModule, NgIf],\n  templateUrl: './scene.component.html',\n  styleUrls: ['./scene.component.scss']\n})\nexport class SceneComponent implements AfterViewInit, OnChanges {\n  constructor(\n    private elementRef: ElementRef,\n    private spinner: NgxSpinnerService,\n    private furnitureModelService: FurnitureModelControlService,\n    private furnitureCardService: FurnitureCardControlService,\n    private accountCookieService: AccountCookieService,\n    private projectService: ProjectService,\n    private route: ActivatedRoute,\n    private notification: NotificationService,\n    private location: Location,\n    private planHouseComponent: PlanHouseComponent\n  ) { }\n\n  @Input()\n  /** Данные комнаты */\n  roomData!: roomDataPlan | undefined;\n\n  @Output()\n  /** Событие для сохранения объектов */\n  saveObjectsEmitter = new EventEmitter();\n\n  /** Рендерер Three.js */\n  private renderer!: THREE.WebGLRenderer;\n\n  /** Камера Three.js */\n  private camera!: THREE.PerspectiveCamera;\n\n  /** Сцена Three.js */\n  private scene!: THREE.Scene;\n\n  /** Контроллеры OrbitControls */\n  private controls!: OrbitControls;\n\n  /** ID текущего кадра анимации */\n  private animationFrameId: number | null = null;\n\n  /** Соотношение размеров холста */\n  private canvasRatioOfWindow = 1.5;\n\n  /** Пропорции комнаты */\n  private roomProportions!: modelInterface;\n\n  /** Луч для определения пересечений */\n  private raycaster = new THREE.Raycaster();\n\n  /** Координаты мыши */\n  private mouse = new THREE.Vector2();\n\n  /** Прямоугольная сетка комнаты */\n  private rectangleMesh!: THREE.Mesh;\n\n  /** Целевой объект для взаимодействия */\n  protected targetobject: THREE.Object3D | undefined = undefined;\n\n\n  ngAfterViewInit(): void {\n    this.initThreeJs();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.roomData = changes['roomData'].currentValue as roomDataPlan\n    if (!this.roomData || this.scene === undefined || this.roomData === changes['roomData'].previousValue) return\n    if (changes['roomData'].previousValue !== undefined) { this.clearRoom() }\n    this.camera.position.set(0, 5, 0)\n    this.camera.rotation.set(THREE.MathUtils.degToRad(-90), 0, 0)\n    this.roomProportions = this.roomData.roomProportions\n    this.createRoom();\n    this.rectangleMesh.rotation.x = THREE.MathUtils.degToRad(-90)\n\n    if (this.getObjectSize(this.rectangleMesh).width === 0) return\n    if (!this.planHouseComponent.sceneOpenToggle) return\n\n    this.loadRoom()\n    const FURNITURE_ID = this.route.snapshot.params['furnitureCardId']\n    if (!FURNITURE_ID || changes['roomData'].previousValue) return\n    this.fixPath()\n    this.addModel(FURNITURE_ID, true)\n  }\n\n  private async loadFurnitureModel(fileModel: Blob, furnitureSize: modelInterface, furnitureCardId: string, saveRoom: boolean, moveData?: objectLoadInterface) {\n    try {\n      const LOAD_OBJECT = await loadModel(fileModel)\n      if (moveData) { this.addObjectToScene(LOAD_OBJECT, furnitureSize, furnitureCardId, moveData) } else { this.addObjectToScene(LOAD_OBJECT, furnitureSize, furnitureCardId) }\n      if (saveRoom) this.saveRoom()\n    } catch (error) {\n    }\n  }\n  private async addModel(furnitureCardId: string, saveRoom: boolean, moveData?: objectLoadInterface) {\n    const JWT = this.accountCookieService.getJwt()\n    if (!JWT) return\n    try {\n      if (saveRoom) this.spinner.show()\n      const PROPORTIONS = (await this.furnitureCardService.GETfurnitureCard(furnitureCardId)).furnitureCard.proportions as modelInterface\n      const MODEL = await this.furnitureModelService.GETfurnitureModel(JWT, furnitureCardId)\n      await this.loadFurnitureModel(MODEL, PROPORTIONS, furnitureCardId, saveRoom, moveData)\n      this.spinner.hide()\n    } catch (error) {\n      this.spinner.hide()\n      this.notification.setError('Ошибка загрузки модели', 5000)\n      console.log(error)\n    }\n  }\n\n  private fixPath() {\n    const NEW_URL = this.location.path().split('/').slice(0, -1).join('/')\n    this.location.replaceState(NEW_URL)\n  }\n  /**\n   * Инициализация Three.js сцены.\n   */\n  private initThreeJs(): void {\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const HEMISPHERE_LIGHT = new THREE.HemisphereLight(0xaaaaaa, 0x000000, 2);\n    this.scene.add(HEMISPHERE_LIGHT);\n    this.renderer = new THREE.WebGLRenderer({ antialias: true, alpha: false });\n    const CANVAS_CONTAINER = this.elementRef.nativeElement.querySelector('#canvasContainer');\n    this.camera.position.z = 5;\n    this.renderer.setSize(window.innerWidth / this.canvasRatioOfWindow, window.innerHeight / this.canvasRatioOfWindow);\n    CANVAS_CONTAINER.appendChild(this.renderer.domElement);\n    this.animationFrameId = requestAnimationFrame(() => this.animate());\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  /**\n   * Анимация сцены.\n   */\n  private animate(): void {\n    this.animationFrameId = requestAnimationFrame(() => this.animate());\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  /**\n   * Создает геометрию прямоугольника с закругленными углами.\n   * @param width Ширина прямоугольника.\n   * @param height Высота прямоугольника.\n   * @param radius Радиус закругления.\n   * @param segments Количество сегментов.\n   * @returns Геометрия прямоугольника.\n   */\n  private createRoundedRectangleGeometry(width: number, height: number, radius: number, segments: number): THREE.BufferGeometry {\n    const SHAPE = new THREE.Shape();\n    SHAPE.moveTo(-width / 2 + radius, -height / 2);\n    SHAPE.lineTo(width / 2 - radius, -height / 2);\n    SHAPE.quadraticCurveTo(width / 2, -height / 2, width / 2, -height / 2 + radius);\n    SHAPE.lineTo(width / 2, height / 2 - radius);\n    SHAPE.quadraticCurveTo(width / 2, height / 2, width / 2 - radius, height / 2);\n    SHAPE.lineTo(-width / 2 + radius, height / 2);\n    SHAPE.quadraticCurveTo(-width / 2, height / 2, -width / 2, height / 2 - radius);\n    SHAPE.lineTo(-width / 2, -height / 2 + radius);\n    SHAPE.quadraticCurveTo(-width / 2, -height / 2, -width / 2 + radius, -height / 2);\n\n    const geometry = new THREE.ShapeGeometry(SHAPE, segments);\n\n    return geometry;\n  }\n\n  /**\n   * Создает комнату на сцене.\n   */\n  private createRoom(): void {\n    if (!this.roomData) return\n    const ROOM_PROPORTIONS = this.roomData.roomProportions\n    const RADIUS = 0.1\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n    this.controls.enableDamping = true;\n    this.controls.dampingFactor = 0.15;\n    this.controls.enableZoom = true;\n    this.controls.minDistance = 1;\n    this.controls.maxDistance = 10;\n    const paddingPolarAngle = 5;\n    this.controls.maxPolarAngle = THREE.MathUtils.degToRad(90 - paddingPolarAngle);\n    this.createRoomShape(ROOM_PROPORTIONS.width, ROOM_PROPORTIONS.length, RADIUS);\n    this.rectangleMesh.name = 'roomFloorBase';\n    this.rectangleMesh\n  }\n\n  /**\n   * Рассчитывает данные для сохранения объекта.\n   * @param object Объект сцены.\n   * @returns Данные для сохранения объекта.\n   */\n  private calculateObjectSaveData(object: THREE.Object3D): objectSceneInterface {\n    const FLOOR_SIZE = this.getObjectSize(this.rectangleMesh)\n    const OBJECT_POSITION = object.position\n    const objectSaveData: objectSceneInterface = {\n      objectId: (object.userData as any).id,\n      xMetersDistance: OBJECT_POSITION.x / FLOOR_SIZE.width * this.roomProportions.width,\n      zMetersDistance: OBJECT_POSITION.z / FLOOR_SIZE.length * this.roomProportions.length,\n      yRotate: object.rotation.y\n    }\n    return objectSaveData\n  }\n\n  /**\n   * Рассчитывает данные для перемещения объекта.\n   * @param objectSaveData Данные сохраненного объекта.\n   * @returns Данные для перемещения объекта.\n   */\n  private calculateMoveObjectData(objectSaveData: objectSceneInterface): objectLoadInterface {\n    const FLOOR_SIZE = this.getObjectSize(this.rectangleMesh)\n    return {\n      xDistance: objectSaveData.xMetersDistance * FLOOR_SIZE.width / this.roomProportions.width,\n      zDistance: objectSaveData.zMetersDistance * FLOOR_SIZE.length / this.roomProportions.length,\n      yRotate: objectSaveData.yRotate\n    }\n  }\n\n  /**\n   * Создает форму комнаты.\n   * @param widthRatio Соотношение ширины.\n   * @param heightRatio Соотношение высоты.\n   * @param radius Радиус закругления.\n   */\n  private createRoomShape(widthRatio: number, heightRatio: number, radius: number): void {\n    const CAMERA_FRUSTUM_BOUNDS = this.calculateFrustumBounds();\n    const SHAPE_RATIO = widthRatio / heightRatio;\n    let width: number, height: number;\n\n    if (SHAPE_RATIO  UPLOAD_OBJECT_SIZE.length ? RECTANGLE_SIZE.width / UPLOAD_OBJECT_SIZE.width : RECTANGLE_SIZE.length / UPLOAD_OBJECT_SIZE.length;\n    const REAL_PROPORTIONS_COEFFICIENT = UPLOAD_OBJECT_SIZE.width > UPLOAD_OBJECT_SIZE.length ? width / this.roomProportions.width : length / length;\n    const GENERAL_COEFFICIENT = REAL_PROPORTIONS_COEFFICIENT * SCENE_PROPORTIONS_COEFFICIENT;\n    object.scale.set(GENERAL_COEFFICIENT, GENERAL_COEFFICIENT, GENERAL_COEFFICIENT);\n  }\n\n  /**\n   * Загружает комнату с объектами.\n   */\n  public async loadRoom(): Promise {\n    const JWT = this.accountCookieService.getJwt()\n    if (!JWT || !this.roomData) return\n    const roomData: roomData = {\n      objects: this.roomData.objects,\n      ...this.roomData.roomProportions\n    }\n\n    this.spinner.show()\n    for (const object of roomData.objects) {\n      await this.addModel(object.objectId, false, this.calculateMoveObjectData(object));\n    }\n    this.spinner.hide()\n  }\n\n  /**\n   * Очищает комнату от объектов.\n   */\n  private clearRoom(): void {\n    for (let i = this.scene.children.length - 1; i >= 0; i--) {\n      const OBJECT = this.scene.children[i];\n      if (OBJECT.type !== 'Scene' && OBJECT.type !== 'HemisphereLight') {\n        this.scene.remove(OBJECT);\n      }\n    }\n  }\n\n  /**\n   * Обрабатывает изменение размера окна.\n   * @param event Событие изменения размера.\n   */\n  @HostListener('window:resize', ['$event'])\n  private onResize(event: Event): void {\n    this.renderer.setSize(window.innerWidth / this.canvasRatioOfWindow, window.innerHeight / this.canvasRatioOfWindow);\n    this.camera.aspect = window.innerWidth / window.innerHeight;\n    this.camera.updateProjectionMatrix();\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  /**\n   * Обрабатывает клик мыши.\n   * @param event Событие клика.\n   */\n  @HostListener('click', ['$event'])\n  private onMouseClick(event: MouseEvent): void {\n    if (this.targetobject) {\n      this.targetobject = undefined;\n      return;\n    }\n    const RECT = (event.target as HTMLCanvasElement).getBoundingClientRect();\n    const X = (event.clientX - RECT.left) / RECT.width * 2 - 1;\n    const Y = -(event.clientY - RECT.top) / RECT.height * 2 + 1;\n\n    this.mouse.x = X;\n    this.mouse.y = Y;\n    this.raycaster.setFromCamera(this.mouse, this.camera);\n\n    const INTERSECTIONS = this.raycaster.intersectObjects(this.scene.children);\n\n    const FOUND_INTERSECTION = INTERSECTIONS.find(intersect => {\n      return intersect.object.name !== 'roomFloorBase' && intersect.object.type !== 'Scene' && intersect.object.type !== 'HemisphereLight'\n    })?.object\n    if (!FOUND_INTERSECTION) return\n    this.targetobject = FOUND_INTERSECTION.parent ? FOUND_INTERSECTION.parent : FOUND_INTERSECTION\n  }\n\n  /**\n   * Поворачивает целевой объект.\n   * @param event Событие нажатия клавиши.\n   */\n  @HostListener('window:keydown', ['$event'])\n  private rotateTargetObject(event: KeyboardEvent): void {\n    if (!this.targetobject) return\n    let rotateAngle = -0.05\n\n    switch (event.key) {\n      case 'q':\n      case 'й':\n        this.targetobject.rotation.y -= rotateAngle\n        break\n      case 'e':\n      case 'у':\n        this.targetobject.rotation.y += rotateAngle\n    }\n  }\n\n  /**\n   * Обрабатывает перемещение мыши.\n   * @param event Событие перемещения мыши.\n   */\n  @HostListener('mousemove', ['$event'])\n  private onMousemove(event: MouseEvent): void {\n    if (!this.targetobject) return;\n\n    const RECT = (event.target as HTMLCanvasElement).getBoundingClientRect();\n    const X = (event.clientX - RECT.left) / RECT.width * 2 - 1;\n    const Y = -(event.clientY - RECT.top) / RECT.height * 2 + 1;\n\n    this.mouse.x = X;\n    this.mouse.y = Y;\n    this.raycaster.setFromCamera(this.mouse, this.camera);\n\n    const INTERSECTIONS = this.raycaster.intersectObject(this.rectangleMesh);\n    if (INTERSECTIONS.length === 0) return;\n\n    const INTERSECTIONS_X = INTERSECTIONS[0].point.x;\n    const INTERSECTION_Z = INTERSECTIONS[0].point.z;\n    const RECTANGLE_MESH_SIZE = this.getObjectSize(this.rectangleMesh);\n    const objectSize = this.getObjectSize(this.targetobject);\n\n    const minX = -RECTANGLE_MESH_SIZE.width / 2 + objectSize.width / 2;\n    const maxX = RECTANGLE_MESH_SIZE.width / 2 - objectSize.width / 2;\n\n    let newXObjectPosition = INTERSECTIONS_X;\n    if (newXObjectPosition  maxX) {\n      newXObjectPosition = maxX;\n    }\n\n    const MIN_Z = -RECTANGLE_MESH_SIZE.length / 2 + objectSize.length / 2;\n    const MAX_Z = RECTANGLE_MESH_SIZE.length / 2 - objectSize.length / 2;\n\n    let newZObjectPosition = INTERSECTION_Z;\n    if (newZObjectPosition  MAX_Z) {\n      newZObjectPosition = MAX_Z;\n    }\n\n    this.targetobject.position.set(newXObjectPosition, 0, newZObjectPosition);\n  }\n\n  /**\n   * Генерирует отчет по комнате.\n   */\n  protected async getReport(): Promise {\n    const JWT = this.accountCookieService.getJwt()\n    if (!JWT || !this.roomData?._id) return\n\n    const oldCameraPosition = this.camera.position.clone();\n    const oldCameraRotation = this.camera.rotation.clone();\n\n    this.camera.position.set(0, 7, 0)\n    this.camera.rotation.set(THREE.MathUtils.degToRad(-90), 0, 0)\n    this.renderer.render(this.scene, this.camera);\n    const imageDataURL = this.renderer.domElement.toDataURL('image/png')\n    const imageDataResponse = await fetch(imageDataURL)\n\n    this.camera.position.copy(oldCameraPosition);\n    this.camera.rotation.copy(oldCameraRotation);\n\n    if (!imageDataResponse.ok) {\n      this.notification.setError('Ошибка при рендере', 5000)\n    }\n    const imageDataBlob = await imageDataResponse.blob()\n\n    this.projectService.GETgetReportOfRoom(JWT, this.roomData?._id, imageDataBlob)\n  }\n\n  /**\n   * Удаляет выбранную модель.\n   */\n  protected deleteModel(): void {\n    if (!this.targetobject) return\n    this.scene.remove(this.targetobject)\n    this.saveRoom()\n  }\n\n  /**\n   * Сохраняет текущее состояние комнаты.\n   */\n  public saveRoom(): void {\n    if (!this.roomData) return\n    const OBJECTS_SCENE_ARRAY = this.scene.children.filter(object => {\n      if (\n        object.name !== 'roomFloorBase' &&\n        object.type !== 'Scene' &&\n        object.type !== 'HemisphereLight'\n      ) {\n        return true;\n      }\n      return false;\n    })\n      .map(object => {\n        return this.calculateObjectSaveData(object)\n      })\n    const ROOM_OBJECTS_DATA = OBJECTS_SCENE_ARRAY\n    this.roomData.objects = OBJECTS_SCENE_ARRAY\n    this.saveObjectsEmitter.emit(ROOM_OBJECTS_DATA)\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/roomSpanSettings.html":{"url":"interfaces/roomSpanSettings.html","title":"interface - roomSpanSettings","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  roomSpanSettings\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/plan-house/plan-house.component.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс для настроек сетки комнаты.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            endX\n                                        \n                                \n                                \n                                        \n                                            endY\n                                        \n                                \n                                \n                                        \n                                            gap\n                                        \n                                \n                                \n                                        \n                                            startX\n                                        \n                                \n                                \n                                        \n                                            startY\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        endX\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        endX:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Конечная координата X\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        endY\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        endY:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Конечная координата Y\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        gap\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        gap:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Расстояние между элементами\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        startX\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        startX:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Начальная координата X\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        startY\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        startY:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Начальная координата Y\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { AfterViewInit, Component, Input, Renderer2, ElementRef, HostListener, EventEmitter, Output, ViewChild, OnInit, TemplateRef, ChangeDetectorRef } from '@angular/core';\nimport { modelInterface, SceneComponent } from '../scene/scene.component';\nimport { Location, NgFor, NgIf, NgTemplateOutlet } from '@angular/common';\nimport { FormGroup, FormControl, ReactiveFormsModule, Validators, ValidatorFn, AbstractControl, ValidationErrors } from '@angular/forms';\nimport { throttle } from 'lodash';\nimport { objectSceneInterface } from '../scene/scene.component'\nimport { categoryData, CategoryService } from '../../services/category.service';\nimport { NotificationService } from '../../services/notification.service';\nimport { AccountCookieService } from '../../services/account-cookie.service';\nimport { roomData } from '../../services/project.service';\n\n/**\n * Интерфейс для настроек сетки комнаты.\n */\ninterface roomSpanSettings {\n  /** Начальная координата X */\n  startX: number;\n  /** Начальная координата Y */\n  startY: number;\n  /** Конечная координата X */\n  endX: number;\n  /** Конечная координата Y */\n  endY: number;\n  /** Расстояние между элементами */\n  gap: number;\n}\n\n@Component({\n  selector: 'app-plan-house',\n  standalone: true,\n  imports: [NgTemplateOutlet, NgFor, ReactiveFormsModule, NgIf, SceneComponent],\n  templateUrl: './plan-house.component.html',\n  styleUrls: ['./plan-house.component.scss']\n})\nexport class PlanHouseComponent implements AfterViewInit, OnInit {\n  constructor(\n    private renderer: Renderer2,\n    private elementRef: ElementRef,\n    private categoryService: CategoryService,\n    private location: Location,\n    private notification: NotificationService,\n    private cdr: ChangeDetectorRef,\n    private accountCookieService: AccountCookieService\n  ) { }\n\n  /** Предыдущее значение grid-area для комнаты */\n  private previousGridArea!: string;\n\n  /** HTML-элемент для отображения комнаты */\n  private roomSpan!: HTMLSpanElement;\n\n  /** Настройки сетки комнаты */\n  private roomSpanSettings!: roomSpanSettings;\n\n  /** Флаг для отслеживания состояния перетаскивания */\n  private isDragging = false;\n\n  /** Флаг для отслеживания одиночного клика */\n  private isClick = false;\n\n  /** Таймер для обработки кликов */\n  private clickTimer: any;\n\n  /** Флаг для отслеживания двойного клика */\n  private isDoubleClick = false;\n\n  /** Кнопка для переключения модуля */\n  private toggleModuleButton!: HTMLButtonElement;\n\n  /** HTML-форма для ввода данных комнаты */\n  private formElement!: HTMLFormElement;\n\n  /** Старый размер комнаты при просмотре */\n  private oldSizeViewRoom: {\n    height: number;\n    width: number;\n  } | undefined = undefined;\n\n  /** Последний план дома */\n  protected lastPlanHouse: roomData | undefined = undefined;\n\n  /** Массив категорий */\n  protected categoryArray: categoryData[] = [];\n\n  /** Флаг для включения руководства */\n  protected isGuideIncluded: boolean = false;\n\n  /** Флаг для отображения руководства */\n  protected isGuideVisible: boolean = true;\n\n  /** Текущая комната для просмотра */\n  public currentViewRoom: undefined | number = undefined;\n\n  /** Флаг для переключения сцены */\n  public sceneOpenToggle: boolean = false;\n\n  /** ID текущей выбранной комнаты */\n  public currentIdClickedRoom: number | undefined = undefined;\n\n  /** Шаблон для руководства */\n  public guideTemplate!: TemplateRef;\n\n  @Input()\n  /** План дома */\n  planHouse!: roomData[];\n\n  @ViewChild('scene') \n  /** Компонент сцены */\n  sceneComponent!: SceneComponent;\n\n  @Output() \n  /** Событие инициализации */\n  initialized = new EventEmitter();\n\n  @Output()\n  /** Событие для передачи плана дома */\n  planHouseEmitter = new EventEmitter();\n\n  @Output()\n  /** Событие для сохранения */\n  callSaveEmitter = new EventEmitter();\n\n  @ViewChild('roomsGuideTemplate1', { static: true })\n  /** Шаблон руководства для комнат (1) */\n  roomsGuideTemplate1!: TemplateRef;\n\n  @ViewChild('roomsGuideTemplate2', { static: true })\n  /** Шаблон руководства для комнат (2) */\n  roomsGuideTemplate2!: TemplateRef;\n\n  @ViewChild('roomGuideTemplate', { static: true })\n  /** Шаблон руководства для комнаты */\n  roomGuideTemplate!: TemplateRef;\n\n  ngOnInit(): void {\n    this.checkGuideInclude();\n    this.initCategories();\n  }\n\n  ngAfterViewInit(): void {\n    const PARENT_ELEMENT = this.elementRef.nativeElement.parentElement;\n    if (PARENT_ELEMENT.classList.contains('projectPreviewSpan')) this.isGuideIncluded = false;\n\n    this.guideTemplate = this.roomsGuideTemplate1;\n    this.cdr.detectChanges();\n    this.roomSpan = this.elementRef.nativeElement.querySelector('.roomSpan') as HTMLSpanElement;\n    this.calculateRoomSpanSettings();\n    this.formElement = this.elementRef.nativeElement.querySelector('form') as HTMLFormElement;\n    this.toggleModuleButton = this.elementRef.nativeElement.querySelector('.addModuleBtn');\n    this.initialized.emit();\n  }\n\n  /**\n   * Инициализация категорий.\n   */\n  private async initCategories() {\n    this.categoryArray = (await this.categoryService.GETgetAllCategories()).categoryArray;\n  }\n\n  /**\n   * Отображение руководства.\n   */\n  private showGuide() {\n    this.isGuideVisible = true;\n  }\n\n  /**\n   * Проверка включения руководства.\n   */\n  private checkGuideInclude() {\n    this.isGuideIncluded = this.accountCookieService.getGuideRule() === 'false' ? false : true;\n    this.isGuideVisible = this.isGuideIncluded;\n  }\n\n  /**\n   * Эмитирует текущее состояние плана дома.\n   */\n  private emitPlanHouse() {\n    this.planHouseEmitter.emit(this.planHouse);\n  }\n\n  /**\n   * Сохраняет текущий план дома.\n   */\n  private saveHouse() {\n    this.callSaveEmitter.emit();\n  }\n\n  /**\n   * Находит свободное место для комнаты.\n   * @param roomProportions Пропорции комнаты.\n   * @returns Строка grid-area или false, если места нет.\n   */\n  private findFreeSpace(roomProportions: modelInterface): string | false {\n    const GRID_SIZE = 10;\n    const GRID_OCCUPIED: boolean[][] = Array.from({ length: GRID_SIZE }, () => Array(GRID_SIZE).fill(false));\n\n    this.planHouse.forEach(room => {\n      const [startRow, startColumn, endRow, endColumn] = room.gridArea.split('/').map(Number);\n\n      for (let row = startRow - 1; row  otherStartRow &&\n        startColumn  otherStartColumn\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n  /**\n   * Рассчитывает область сетки для объекта.\n   * @param objectX Координата X объекта.\n   * @param objectY Координата Y объекта.\n   * @returns Строка grid-area или undefined.\n   */\n  private calculateGridArea(objectX: number, objectY: number): string | undefined {\n    if (this.currentIdClickedRoom === undefined) return;\n    const ROOM_PROPORTIONS = this.planHouse[this.currentIdClickedRoom].roomProportions;\n    const RELATIVE_X = objectX - this.roomSpanSettings.startX;\n    const RELATIVE_Y = objectY - this.roomSpanSettings.startY - document.documentElement.scrollTop\n    const SIDE_AREA = (this.roomSpanSettings.endX - this.roomSpanSettings.startX) / 10 + this.roomSpanSettings.gap;\n    const START_COLUMN = Math.floor(RELATIVE_X / SIDE_AREA) + 1;\n    const START_ROW = Math.floor(RELATIVE_Y / SIDE_AREA) + 1;\n\n    const END_COLUMN = START_COLUMN + Math.round(ROOM_PROPORTIONS.width) - 1;\n    const END_ROW = START_ROW + Math.round(ROOM_PROPORTIONS.length) - 1;\n\n    if (END_COLUMN > 10 || END_ROW > 10) {\n      return undefined;\n    }\n\n    return `${START_ROW} / ${START_COLUMN} / ${END_ROW + 1} / ${END_COLUMN + 1}`;\n  }\n  /**\n   * Сбрасывает позицию комнаты.\n   * @param clientX Координата X.\n   * @param clientY Координата Y.\n   */\n  private resetRoomPosition(clientX: number, clientY: number) {\n    const TARGET_ELEMENT = this.roomSpan.querySelector(`[data-index=\"${this.currentIdClickedRoom}\"]`) as HTMLDivElement;\n    if (TARGET_ELEMENT) {\n      const GRID_AREA = this.calculateGridArea(clientX, clientY);\n\n      if (GRID_AREA && !this.isAreaOccupied(GRID_AREA, this.currentIdClickedRoom!)) {\n        this.renderer.setStyle(TARGET_ELEMENT, 'grid-area', GRID_AREA);\n        this.planHouse[this.currentIdClickedRoom!].gridArea = GRID_AREA;\n      } else {\n        this.renderer.setStyle(TARGET_ELEMENT, 'grid-area', this.previousGridArea);\n      }\n\n      this.renderer.removeStyle(TARGET_ELEMENT, 'background-color');\n      this.renderer.removeStyle(TARGET_ELEMENT, 'z-index');\n\n      this.currentIdClickedRoom = undefined;\n    }\n  }\n  @HostListener('document:mouseleave', ['$event'])\n  private onMouseLeave(event: MouseEvent) {\n    if (this.isDragging && this.currentIdClickedRoom !== undefined) {\n      this.onMouseUp(event);\n    }\n  }\n  @HostListener('document:touchend', ['$event'])\n  @HostListener('document:keyup.Enter', ['$event'])\n  @HostListener('document:mouseup', ['$event'])\n  private onMouseUp(event: MouseEvent | KeyboardEvent | TouchEvent) {\n    if (this.sceneOpenToggle === true) return\n    if (this.currentViewRoom !== undefined) return\n    if (this.isDragging && this.currentIdClickedRoom !== undefined) {\n      this.isDragging = false;\n      if (event instanceof MouseEvent) {\n\n        this.resetRoomPosition(event.clientX, event.clientY);\n      }\n      if (typeof TouchEvent !== 'undefined' && event instanceof TouchEvent) {\n        const touch = event.changedTouches[0];\n        this.resetRoomPosition(touch.clientX, touch.clientY);\n      }\n      const DRAGGED_ELEMENT = this.elementRef.nativeElement.querySelector('[style*=\"cursor: grabbing\"]');\n      if (DRAGGED_ELEMENT) {\n        this.renderer.removeStyle(DRAGGED_ELEMENT, 'cursor');\n        this.renderer.removeStyle(DRAGGED_ELEMENT, 'background-color')\n      }\n      this.currentIdClickedRoom = undefined\n      this.emitPlanHouse()\n    }\n    this.clickTimer = setTimeout(() => {\n      if (this.isClick && !this.isDragging) {\n        if (this.currentIdClickedRoom == undefined) return\n        this.toggleOpenRoomModule(this.currentIdClickedRoom)\n      }\n      this.isClick = false\n      this.isDoubleClick = false\n      this.isDragging = false\n      clearTimeout(this.clickTimer)\n    }, 250)\n\n  }\n  /**\n   * Обрабатывает событие перемещения мыши.\n   * @param event Событие мыши или касания.\n   */\n  @HostListener('document:mousemove', ['$event'])\n  @HostListener('document:touchmove', ['$event'])\n  private onMouseMove(event: MouseEvent | TouchEvent) {\n    event.preventDefault();\n    if (this.isDragging && this.currentIdClickedRoom !== undefined) {\n      const TARGET_ELEMENT = this.roomSpan.querySelector(`[data-index=\"${this.currentIdClickedRoom}\"]`) as HTMLDivElement;\n      if (!TARGET_ELEMENT) return;\n      const gridArea = event instanceof MouseEvent ? this.calculateGridArea(event.clientX, event.clientY) : this.calculateGridArea(event.changedTouches[0].clientX, event.changedTouches[0].clientY)\n      this.renderer.setStyle(TARGET_ELEMENT, 'z-index', '4');\n      if (gridArea) {\n        this.renderer.setStyle(TARGET_ELEMENT, 'grid-area', gridArea);\n\n        const isOccupied = this.isAreaOccupied(gridArea, this.currentIdClickedRoom);\n\n        if (isOccupied) {\n          this.renderer.setStyle(TARGET_ELEMENT, 'background-color', '#F18DC4');\n        } else {\n          this.renderer.setStyle(TARGET_ELEMENT, 'background-color', '#A3B18A');\n        }\n      }\n    }\n  }\n  @HostListener('document:keydown.ArrowUp', ['$event'])\n  @HostListener('document:keydown.ArrowDown', ['$event'])\n  @HostListener('document:keydown.ArrowRight', ['$event'])\n  @HostListener('document:keydown.ArrowLeft', ['$event'])\n  private moveRoom(event: KeyboardEvent) {\n    if (this.currentIdClickedRoom === undefined || !this.isDragging) return\n    const MOVE_ROOM_ELEMENT = this.elementRef.nativeElement.querySelector(`[data-index=\"${this.currentIdClickedRoom}\"]`) as HTMLDivElement;\n    let [startRow, startColumn, endRow, endColumn] = this.planHouse[this.currentIdClickedRoom].gridArea.split('/').map(Number);\n    switch (event.key) {\n      case 'ArrowUp':\n        startRow -= 1\n        endRow -= 1\n        break\n      case 'ArrowDown':\n        startRow += 1\n        endRow += 1\n        break\n      case 'ArrowRight':\n        startColumn += 1\n        endColumn += 1\n        break\n      case 'ArrowLeft':\n        startColumn -= 1\n        endColumn -= 1\n        break\n    }\n    if (startRow  11 || endColumn > 11) return\n    const NEW_GRID_AREA = `${startRow} / ${startColumn} / ${endRow} / ${endColumn}`\n    if (this.isAreaOccupied(NEW_GRID_AREA, this.currentIdClickedRoom)) return\n    this.renderer.setStyle(MOVE_ROOM_ELEMENT, 'grid-area', NEW_GRID_AREA)\n    this.planHouse[this.currentIdClickedRoom].gridArea = NEW_GRID_AREA\n  }\n  @HostListener('document:contextmenu', ['$event'])\n  private onContextMenu(event: MouseEvent): void {\n    event.preventDefault();\n  }\n  @HostListener('window:scroll')\n  private onScroll = throttle(() => {\n    if (this.currentIdClickedRoom === undefined) return\n    this.calculateRoomSpanSettings()\n  }, 100)\n  @HostListener('document:keydown.Escape')\n  private escapeDraggingMode() {\n    this.isDragging = false\n    this.currentIdClickedRoom = undefined\n    const DRAGGED_ELEMENT = this.elementRef.nativeElement.querySelector('[style*=\"cursor: grabbing\"]');\n    if (DRAGGED_ELEMENT) {\n      this.renderer.removeStyle(DRAGGED_ELEMENT, 'background-color')\n      this.renderer.removeStyle(DRAGGED_ELEMENT, 'cursor');\n    }\n  }\n  protected clickRoom(event: Event, indexRoom: number) {\n    if (this.currentViewRoom !== undefined) return;\n    this.currentIdClickedRoom = indexRoom;\n\n    const EVENT_TARGET = event.target as HTMLDivElement;\n    this.previousGridArea = window.getComputedStyle(EVENT_TARGET).getPropertyValue('grid-area');\n\n    if (this.isClick && !this.isDragging) {\n      this.isDoubleClick = true;\n      this.isClick = false;\n      this.openViewRoom(this.currentIdClickedRoom);\n    } else {\n      this.isClick = true;\n    }\n\n    setTimeout(() => {\n      if (this.isDoubleClick || !this.isClick) return;\n      this.calculateRoomSpanSettings()\n      this.renderer.setStyle(EVENT_TARGET, 'cursor', 'grabbing');\n      this.isDragging = true;\n      this.renderer.setStyle(EVENT_TARGET, 'background-color', '#A3B18A');\n      this.currentIdClickedRoom = indexRoom;\n      this.isClick = false;\n    }, 350);\n  }\n\n  protected closeGuide() {\n    this.accountCookieService.setGuideRule()\n    this.isGuideVisible = false;\n    if (this.guideTemplate == this.roomsGuideTemplate1) {\n      this.guideTemplate = this.roomsGuideTemplate2\n      this.showGuide()\n    }\n  }\n  protected turnoffGuides(turnoff: boolean) {\n    if (turnoff) {\n      this.accountCookieService.setGuideRule()\n      if (this.sceneOpenToggle === true && this.currentViewRoom !== undefined) {\n        this.guideTemplate = this.roomGuideTemplate\n      }\n    } else {\n      this.accountCookieService.deleteGuideRule()\n    }\n    this.checkGuideInclude()\n  }\n  protected updateRoomObjects(objects: objectSceneInterface[]) {\n    if (this.currentViewRoom === undefined) return\n    this.planHouse[this.currentViewRoom].objects = objects\n    this.emitPlanHouse()\n    this.saveHouse()\n  }\n  protected openScene() {\n    if (this.isGuideIncluded) {\n      this.guideTemplate = this.roomGuideTemplate\n      this.showGuide()\n    }\n    const NEW_URL = this.location.path() + '/' + this.currentViewRoom\n    this.location.replaceState(NEW_URL)\n    this.sceneOpenToggle = true\n    this.sceneComponent.loadRoom()\n  }\n  protected closeScene() {\n    const NEW_URL = this.location.path().split('/').slice(0, -1).join('/')\n    this.location.replaceState(NEW_URL)\n    this.sceneComponent.saveRoom()\n    this.sceneOpenToggle = false\n  }\n  protected closeViewRoom() {\n    const ROOM_ELEMENT = this.roomSpan.querySelector(`[data-index=\"${this.currentViewRoom}\"]`) as HTMLDivElement;\n    if (!ROOM_ELEMENT || !this.oldSizeViewRoom) return;\n    this.currentViewRoom = undefined;\n    this.currentIdClickedRoom = undefined\n    this.renderer.setStyle(ROOM_ELEMENT, 'width', this.oldSizeViewRoom.width + 'px')\n    this.renderer.setStyle(ROOM_ELEMENT, 'height', this.oldSizeViewRoom.height + 'px')\n    this.renderer.removeStyle(ROOM_ELEMENT, 'border');\n    this.renderer.removeClass(ROOM_ELEMENT, 'roomView');\n\n    this.renderer.setStyle(this.roomSpan, 'display', 'grid');\n\n    setTimeout(() => {\n      this.renderer.removeStyle(ROOM_ELEMENT, 'width');\n      this.renderer.removeStyle(ROOM_ELEMENT, 'height');\n    }, 768);\n  }\n  protected updateRoom() {\n    if (this.currentIdClickedRoom === undefined || !this.roomForm.value.name) return\n    if (this.roomForm.value.name === this.planHouse[this.currentIdClickedRoom].name) {\n      this.toggleOpenRoomModule()\n      return\n    }\n    this.planHouse[this.currentIdClickedRoom].name = this.roomForm.value.name\n\n    this.roomForm.patchValue({\n      width: null,\n      height: null,\n      length: null,\n      name: ''\n    });\n\n    this.emitPlanHouse()\n    this.toggleOpenRoomModule()\n    this.saveHouse()\n  }\n  protected addRoom() {\n    const { width, length, height, name } = this.roomForm.value\n    this.toggleOpenRoomModule()\n    const NEW_ROOM: roomData = {\n      name: name!,\n      roomProportions: {\n        width: +width!,\n        height: +height!,\n        length: +length!\n      },\n      objects: [],\n      gridArea: ''\n    }\n    const GRID_AREA = this.findFreeSpace(NEW_ROOM.roomProportions)\n    if (!GRID_AREA) {\n      return\n    }\n    NEW_ROOM.gridArea = GRID_AREA\n    this.planHouse = [...this.planHouse, NEW_ROOM]\n    this.emitPlanHouse()\n    this.saveHouse()\n  }\n\n  protected deleteRoom() {\n    if (this.currentIdClickedRoom !== undefined) {\n      this.planHouse.splice(this.currentIdClickedRoom, 1);\n      this.currentIdClickedRoom = undefined;\n      this.toggleOpenRoomModule()\n      this.emitPlanHouse()\n      this.saveHouse()\n      this.toggleControls(true)\n    }\n  }\n  protected toggleControls(enable: boolean): void {\n    if (enable) {\n      this.roomForm.get('width')?.enable();\n      this.roomForm.get('height')?.enable();\n      this.roomForm.get('length')?.enable();\n    } else {\n      this.roomForm.get('width')?.disable();\n      this.roomForm.get('height')?.disable();\n      this.roomForm.get('length')?.disable();\n    }\n  }\n  protected toggleOpenRoomModule(indexRoom?: number) {\n    if (!this.toggleModuleButton) return;\n    if (indexRoom !== undefined) {\n      const { width, height, length } = this.planHouse[indexRoom].roomProportions;\n      this.roomForm.patchValue({\n        width: width,\n        height: height,\n        length: length,\n        name: this.planHouse[indexRoom].name\n      });\n      this.toggleControls(this.currentIdClickedRoom === undefined)\n      this.formElement.classList.add('openAddModule');\n      this.renderer.setStyle(this.toggleModuleButton, 'rotate', '135deg');\n      return;\n    }\n    if (this.formElement.classList.contains('openAddModule')) {\n      this.formElement.classList.remove('openAddModule');\n      this.renderer.setStyle(this.toggleModuleButton, 'rotate', '0deg');\n      this.currentIdClickedRoom = undefined\n      this.roomForm.patchValue({\n        width: null,\n        height: null,\n        length: null,\n        name: ''\n      });\n    } else {\n      this.formElement.classList.add('openAddModule');\n      this.renderer.setStyle(this.toggleModuleButton, 'rotate', '135deg');\n    }\n  }\n  public openViewRoom(indexRoom: number) {\n    this.formElement.classList.remove('openAddModule');\n    this.currentViewRoom = indexRoom\n    this.lastPlanHouse = this.planHouse[indexRoom]\n    const ROOM_ELEMENT = this.roomSpan.querySelector(`[data-index=\"${indexRoom}\"]`) as HTMLDivElement\n    const { width: roomWidth, height: roomHeight } = ROOM_ELEMENT.getBoundingClientRect()\n    const { width: spanWidth, height: spanHeight } = this.roomSpan.getBoundingClientRect()\n    this.oldSizeViewRoom = {\n      height: roomHeight,\n      width: roomWidth\n    }\n\n    this.renderer.setStyle(ROOM_ELEMENT, 'width', roomWidth + 'px')\n    this.renderer.setStyle(ROOM_ELEMENT, 'height', roomHeight + 'px')\n\n    setTimeout(() => {\n      const COEFF_PROPORTIONS = roomWidth > roomHeight ? spanWidth / 2 / roomWidth : spanHeight / 2 / roomHeight\n\n      this.renderer.setStyle(ROOM_ELEMENT, 'width', roomWidth * COEFF_PROPORTIONS + 'px')\n      this.renderer.setStyle(ROOM_ELEMENT, 'height', roomHeight * COEFF_PROPORTIONS + 'px')\n      this.renderer.setStyle(ROOM_ELEMENT, 'border', 'white 3px dashed')\n\n      this.renderer.addClass(ROOM_ELEMENT, 'roomView')\n      this.renderer.setStyle(this.roomSpan, 'display', 'flex')\n    }, 0)\n  }\n  /**\n   * Форма для ввода данных комнаты.\n   */\n  protected roomForm = new FormGroup({\n    width: new FormControl(null, [\n      Validators.required,\n      Validators.min(0.1),\n      Validators.max(10),\n      Validators.pattern(/^\\d*\\.?\\d+$/)\n    ]),\n    height: new FormControl(null, [\n      Validators.required,\n      Validators.min(0.1),\n      Validators.max(10),\n      Validators.pattern(/^\\d*\\.?\\d+$/)\n    ]),\n    length: new FormControl(null, [\n      Validators.required,\n      Validators.min(0.1),\n      Validators.max(10),\n      Validators.pattern(/^\\d*\\.?\\d+$/)\n    ]),\n    name: new FormControl('', [\n      Validators.required,\n      Validators.maxLength(20)\n    ]),\n  });\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/selectFilter.html":{"url":"interfaces/selectFilter.html","title":"interface - selectFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  selectFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/category.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Фильтр типа select\n\n            \n\n            \n                Extends\n            \n            \n                            baseFilter\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            options\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        options\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        options:         option[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         option[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Варианты выбора\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                            \n                                \n                                    Тип фильтра\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные категории\n */\nexport interface categoryData {\n  /** Название категории */\n  name: string;\n  /** Перевод категории в единственном числе */\n  translateOne: string;\n  /** Перевод категории во множественном числе */\n  translateMany: string;\n  /** Массив фильтров категории */\n  filters: filter[];\n}\n\n/**\n * Базовый фильтр\n */\ninterface baseFilter {\n  /** Имя фильтра */\n  name: string;\n  /** Поле, по которому фильтр */\n  field: string;\n}\n\n/**\n * Опция для select-фильтра\n */\nexport interface option {\n  /** Название опции */\n  name: string;\n  /** Значение опции для запроса */\n  queryValue: string;\n}\n\n/**\n * Фильтр типа select\n */\ninterface selectFilter extends baseFilter {\n  /** Тип фильтра */\n  type: 'select';\n  /** Варианты выбора */\n  options: option[];\n}\n\n/**\n * Фильтр типа range\n */\ninterface rangeFilter extends baseFilter {\n  /** Тип фильтра */\n  type: 'range';\n  /** Минимальное значение */\n  minValue: number;\n  /** Максимальное значение */\n  maxValue: number;\n}\n\n/**\n * Тип фильтра: select или range\n */\nexport type filter = rangeFilter | selectFilter;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CategoryService {\n  /** Базовый URL для работы с категориями */\n  private baseServiceUrl = baseUrl + 'category';\n\n  constructor(\n    private httpModule: HttpClient\n  ) { }\n\n  /**\n   * Получение всех категорий\n   * @returns Promise с массивом категорий\n   */\n  GETgetAllCategories() {\n    return firstValueFrom(this.httpModule.get(this.baseServiceUrl)) as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/shopData.html":{"url":"interfaces/shopData.html","title":"interface - shopData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  shopData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/furniture-card-control.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Данные магазина с ценой и URL\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            cost\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cost\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cost:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Цена мебели\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    URL магазина или товара\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { baseUrl } from '.';\nimport { imageSliderClientData, imageSliderFromServerData } from '../components/image-slider/image-slider.component';\nimport { firstValueFrom } from 'rxjs';\n\n/**\n * Данные магазина с ценой и URL\n * @interface shopData\n */\nexport interface shopData {\n  /** Цена мебели */\n  cost: number;\n  /** URL магазина или товара */\n  url: string;\n}\n\n/**\n * Пропорции мебели (ширина, длина, высота)\n * @interface furnitureProportions\n */\nexport interface furnitureProportions {\n  /** Ширина мебели (или null, если не задана) */\n  width: number | null;\n  /** Длина мебели (или null, если не задана) */\n  length: number | null;\n  /** Высота мебели (или null, если не задана) */\n  height: number | null;\n}\n\n/**\n * Данные цвета на клиенте, включая слайдер изображений\n * @interface colorClientData\n */\nexport interface colorClientData {\n  /** Цвет мебели */\n  color: string;\n  /** Данные для слайдера изображений */\n  imagesData: imageSliderClientData;\n}\n\n/**\n * Данные цвета с сервера, включая слайдер изображений\n * @interface colorFromServerData\n */\nexport interface colorFromServerData {\n  /** Цвет мебели */\n  color: string;\n  /** Данные для слайдера изображений */\n  imagesData: imageSliderFromServerData;\n}\n\n/**\n * Дополнительные данные мебели с динамическими ключами\n * @interface additionalData\n */\nexport interface additionalData {\n  /** Категория мебели (опционально) */\n  category?: string;\n  /** Другие динамические свойства */\n  [key: string]: string | undefined;\n}\n\n/**\n * Базовые данные мебели, общие для клиента и сервера\n * @interface furnitureBaseData\n */\ninterface furnitureBaseData {\n  /** Название мебели */\n  name: string;\n  /** Описание мебели */\n  description: string;\n  /** Пропорции мебели */\n  proportions: furnitureProportions;\n  /** Список магазинов с ценами и URL */\n  shops: shopData[];\n  /** Дополнительные данные */\n  additionalData: additionalData;\n}\n\n/**\n * Данные мебели на клиенте с цветами\n * @interface furnitureClientData\n * @extends furnitureBaseData\n */\nexport interface furnitureClientData extends furnitureBaseData {\n  /** Список цветов с данными для клиента */\n  colors: colorClientData[];\n}\n\n/**\n * Данные мебели с сервера с цветами\n * @interface furnitureFromServerData\n * @extends furnitureBaseData\n */\nexport interface furnitureFromServerData extends furnitureBaseData {\n  /** Список цветов с данными с сервера */\n  colors: colorFromServerData[];\n}\n\n/**\n * Сервис для управления карточками мебели\n * @class FurnitureCardControlService\n * @injectable\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class FurnitureCardControlService {\n\n  /** Базовый URL для запросов к API мебели */\n  private baseServiceUrl = baseUrl + 'furniture/card';\n\n  /**\n   * Конструктор сервиса\n   * @param httpModule HTTP клиент для запросов\n   */\n  constructor(private httpModule: HttpClient) { }\n\n  /**\n   * Получение карточки мебели по ID и опциональному JWT токену\n   * @param furnitureCardId - ID карточки мебели\n   * @param [jwt] - JWT токен пользователя (опционально)\n   * @returns Promise с объектом, содержащим данные карточки и флаг совпадения автора\n   * @throws Ошибка при некорректной структуре ответа или при ошибках запроса\n   */\n  async GETfurnitureCard(\n    furnitureCardId: string,\n    jwt?: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams().set('furnitureCardId', furnitureCardId);\n\n    if (jwt !== undefined) {\n      HTTP_PARAMS = HTTP_PARAMS.set('jwt', jwt);\n    }\n\n    try {\n      const response = await firstValueFrom(\n        this.httpModule.get(this.baseServiceUrl, { params: HTTP_PARAMS })\n      ) as {\n        furnitureCard: furnitureFromServerData;\n        authorMatched: boolean;\n      };\n\n      if (!response?.furnitureCard) {\n        throw new Error('Invalid response structure: furnitureCard missing');\n      }\n\n      // Добавляем полный URL к изображениям\n      const transformedFurnitureCard = {\n        ...response.furnitureCard,\n        colors: response.furnitureCard.colors.map(colorData => ({\n          color: colorData.color,\n          imagesData: {\n            idMainImage: colorData.imagesData.idMainImage,\n            images: colorData.imagesData.images.map(url => baseUrl + url)\n          }\n        }))\n      };\n\n      return {\n        furnitureCard: transformedFurnitureCard,\n        authorMatched: response.authorMatched\n      };\n\n    } catch (error) {\n      console.error('Error in GETfurnitureCard:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Создание новой карточки мебели\n   * @param furnitureData - Данные новой карточки мебели\n   * @param jwt - JWT токен пользователя\n   * @returns Promise с данными созданной карточки, включая её ID\n   */\n  POSTcreateFurnitureCard(\n    furnitureData: furnitureFromServerData,\n    jwt: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams().set('jwt', jwt);\n    return firstValueFrom(\n      this.httpModule.post(this.baseServiceUrl, furnitureData, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n\n  /**\n   * Обновление существующей карточки мебели\n   * @param furnitureCardUpdateData - Обновленные данные карточки мебели\n   * @param furnitureCardId - ID карточки мебели для обновления\n   * @param jwt - JWT токен пользователя\n   * @returns Promise с сообщением результата обновления\n   */\n  PUTupdateFurnitureCard(\n    furnitureCardUpdateData: furnitureFromServerData,\n    furnitureCardId: string,\n    jwt: string\n  ): Promise {\n    let HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId);\n    return firstValueFrom(\n      this.httpModule.put(this.baseServiceUrl, furnitureCardUpdateData, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n\n  /**\n   * Удаление карточки мебели по ID и JWT токену\n   * @param jwt - JWT токен пользователя\n   * @param furnitureCardId - ID карточки мебели для удаления\n   * @returns Promise с сообщением результата удаления\n   */\n  DELETEfurnitureCard(jwt: string, furnitureCardId: string): Promise {\n    const HTTP_PARAMS = new HttpParams()\n      .set('jwt', jwt)\n      .set('furnitureCardId', furnitureCardId);\n    return firstValueFrom(\n      this.httpModule.delete(this.baseServiceUrl, { params: HTTP_PARAMS })\n    ) as Promise;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            accountType   (src/.../account.service.ts)\n                        \n                        \n                            authData   (src/.../auth.service.ts)\n                        \n                        \n                            changeAccountData   (src/.../account.service.ts)\n                        \n                        \n                            createAccountData   (src/.../account.service.ts)\n                        \n                        \n                            filter   (src/.../category.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/services/account.service.ts\n    \n    \n        \n            \n                \n                    \n                    accountType\n                \n            \n            \n                \n                    Тип аккаунта\n\n                \n            \n            \n                \n                        \"google\" | \"email\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    changeAccountData\n                \n            \n            \n                \n                    Тип данных для изменения аккаунта (на данный момент только email)\n\n                \n            \n            \n                \n                            changeAccountDataEmail\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    createAccountData\n                \n            \n            \n                \n                    Тип данных для создания аккаунта\n\n                \n            \n            \n                \n                            createEmailAccountData\n\n                \n            \n        \n    \n    src/services/auth.service.ts\n    \n    \n        \n            \n                \n                    \n                    authData\n                \n            \n            \n                \n                    Объединённый тип данных для аутентификации\n\n                \n            \n            \n                \n                        googleAuthData | emailAuthData\n\n                \n            \n        \n    \n    src/services/category.service.ts\n    \n    \n        \n            \n                \n                    \n                    filter\n                \n            \n            \n                \n                    Тип фильтра: select или range\n\n                \n            \n            \n                \n                        rangeFilter | selectFilter\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            appConfig   (src/.../app.config.ts)\n                        \n                        \n                            baseClientUrl   (src/.../index.ts)\n                        \n                        \n                            baseUrl   (src/.../index.ts)\n                        \n                        \n                            bootstrap   (src/.../main.server.ts)\n                        \n                        \n                            config   (src/.../app.config.server.ts)\n                        \n                        \n                            serverConfig   (src/.../app.config.server.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        appConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ApplicationConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n  providers: [\n    provideRouter(routes),\n    provideClientHydration(),\n    provideAnimations(),\n    provideHttpClient(withInterceptorsFromDi()),\n    provideEventPlugins(),\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: HttpErrorInterceptor,\n      multi: true\n    }\n  ]\n\n}\n                    \n                \n\n\n        \n    \n\n    src/services/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        baseClientUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'http://localhost:4200/'\n                    \n                \n\n            \n                \n                    Базовый URL клиента (фронтенда), по которому доступно Angular-приложение.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : baseClientUrl + 'api/'\n                    \n                \n\n            \n                \n                    Базовый URL для API-запросов к серверу.\nФормируется как базовый URL клиента + 'api/'.\n\n                \n            \n\n        \n    \n\n    src/main.server.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => bootstrapApplication(AppComponent, config)\n                    \n                \n\n\n        \n    \n\n    src/app.config.server.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Default value : mergeApplicationConfig(appConfig, serverConfig)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serverConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ApplicationConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n  providers: []\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
